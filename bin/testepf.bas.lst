------- FILE d:\Batari Projects\RandomHoles\RandomHoles\testepf.bas.asm LEVEL 1 PASS 2
      1  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  10000 ????
      3  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  10000 ????
      3  10000 ????						; VCS.H
      4  10000 ????						; Version 1.05, 13/November/2003
      5  10000 ????
      6  10000 ????		00 69	    VERSION_VCS =	105
      7  10000 ????
      8  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      9  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
     11  10000 ????						;
     12  10000 ????						; This file defines hardware registers and memory mapping for the
     13  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     14  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  10000 ????						; available at at http://www.atari2600.org/dasm
     16  10000 ????						;
     17  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     18  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     19  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     20  10000 ????						; with your views.  Please contribute, if you think you can improve this
     21  10000 ????						; file!
     22  10000 ????						;
     23  10000 ????						; Latest Revisions...
     24  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     25  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     26  10000 ????						;			    This will allow conditional code to verify VCS.H being
     27  10000 ????						;			    used for code assembly.
     28  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     29  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     30  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     31  10000 ????						;			 readability issue, and binary compatibility with disassembled
     32  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     33  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     34  10000 ????						;			 which was broken by the use of segments in this file, as
     35  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     36  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     37  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     38  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     39  10000 ????						;						   it is safe to leave it undefined, and the base address will
     40  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     41  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     42  10000 ????						;			  - register definitions are now generated through assignment
     43  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     44  10000 ????						;			    address architecture.
     45  10000 ????						; 1.0	22/MAR/2003		Initial release
     46  10000 ????
     47  10000 ????
     48  10000 ????						;-------------------------------------------------------------------------------
     49  10000 ????
     50  10000 ????						; TIA_BASE_ADDRESS
     51  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     52  10000 ????						; Normally 0, the base address should (externally, before including this file)
     53  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     54  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     55  10000 ????						; < $40 as a bankswitch.
     56  10000 ????
     57  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     58  10000 ????			   -TIA_BASE_ADDRESS =	0
     59  10000 ????				       ENDIF
     60  10000 ????
     61  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     62  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     63  10000 ????						; *OR* by declaring the label before including this file, eg:
     64  10000 ????						; TIA_BASE_ADDRESS = $40
     65  10000 ????						;   include "vcs.h"
     66  10000 ????
     67  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     68  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     69  10000 ????						; for the mirrored ROM hardware registers.
     70  10000 ????
     71  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     72  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     73  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     74  10000 ????
     75  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     76  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     77  10000 ????				       ENDIF
     78  10000 ????
     79  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     80  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     81  10000 ????				       ENDIF
     82  10000 ????
     83  10000 ????						;-------------------------------------------------------------------------------
     84  10000 ????
     85 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     86 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     87 U0000
     88 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     89 U0000
     90 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     91 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     92 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     93 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     94 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     95 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     96 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     97 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     98 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     99 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
    100 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
    101 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    102 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    103 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    104 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    105 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    106 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    107 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    108 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    109 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    110 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    111 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    112 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    113 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    114 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    115 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    116 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    117 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    118 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    119 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    120 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    121 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    122 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    123 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    124 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    125 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    126 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    127 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    128 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    129 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    130 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    131 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    132 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    133 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    134 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    135 U002d
    136 U002d							;-------------------------------------------------------------------------------
    137 U002d
    138 U000e ????				      SEG.U	TIA_REGISTERS_READ
    139 U0000					      ORG	TIA_BASE_READ_ADDRESS
    140 U0000
    141 U0000							;											bit 7	 bit 6
    142 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    143 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    144 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    145 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    146 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    147 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    148 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    149 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    150 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    151 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    152 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    153 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    154 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    155 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    156 U000e
    157 U000e							;-------------------------------------------------------------------------------
    158 U000e
    159 U0298 ????				      SEG.U	RIOT
    160 U0280					      ORG	$280
    161 U0280
    162 U0280							; RIOT MEMORY MAP
    163 U0280
    164 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    165 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    166 U0281
    167 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    168 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    169 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    170 U0284		       00	   INTIM      ds	1	; $284		Timer output
    171 U0285
    172 U0285		       00	   TIMINT     ds	1	; $285
    173 U0286
    174 U0286							; Unused/undefined registers ($285-$294)
    175 U0286
    176 U0286		       00		      ds	1	; $286
    177 U0287		       00		      ds	1	; $287
    178 U0288		       00		      ds	1	; $288
    179 U0289		       00		      ds	1	; $289
    180 U028a		       00		      ds	1	; $28A
    181 U028b		       00		      ds	1	; $28B
    182 U028c		       00		      ds	1	; $28C
    183 U028d		       00		      ds	1	; $28D
    184 U028e		       00		      ds	1	; $28E
    185 U028f		       00		      ds	1	; $28F
    186 U0290		       00		      ds	1	; $290
    187 U0291		       00		      ds	1	; $291
    188 U0292		       00		      ds	1	; $292
    189 U0293		       00		      ds	1	; $293
    190 U0294
    191 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    192 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    193 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    194 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    195 U0298
    196 U0298							;-------------------------------------------------------------------------------
    197 U0298							; The following required for back-compatibility with code which does not use
    198 U0298							; segments.
    199 U0298
    200  10000 ????				       SEG
    201  10000 ????
    202  10000 ????						; EOF
------- FILE d:\Batari Projects\RandomHoles\RandomHoles\testepf.bas.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  10000 ????				       include	"macro.h"
      1  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  10000 ????
      3  10000 ????						; MACRO.H
      4  10000 ????						; Version 1.05, 13/NOVEMBER/2003
      5  10000 ????
      6  10000 ????		00 69	    VERSION_MACRO =	105
      7  10000 ????
      8  10000 ????						;
      9  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
     11  10000 ????						;
     12  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     13  10000 ????						; It is distributed as a companion machine-specific support package
     14  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  10000 ????						; available at at http://www.atari2600.org/dasm
     16  10000 ????						;
     17  10000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     18  10000 ????						; contents, or would like to add something, please write to me
     19  10000 ????						; (atari2600@taswegian.com) with your contribution.
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						;
     23  10000 ????						; 1.05  14/NOV/2003	  - Added VERSION_MACRO equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify MACRO.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     27  10000 ????						;
     28  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     29  10000 ????						;
     30  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     31  10000 ????						;			   (standardised macro for vertical synch code)
     32  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     33  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     34  10000 ????						; 1.0	22/MAR/2003		Initial release
     35  10000 ????
     36  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     37  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     38  10000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     39  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     40  10000 ????						;   registers and require them to be defined first).
     41  10000 ????
     42  10000 ????						; Available macros...
     43  10000 ????						;   SLEEP n		 - sleep for n cycles
     44  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     45  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     46  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     47  10000 ????
     48  10000 ????						;-------------------------------------------------------------------------------
     49  10000 ????						; SLEEP duration
     50  10000 ????						; Original author: Thomas Jentzsch
     51  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     52  10000 ????						; useful for code where precise timing is required.
     53  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     54  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     55  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     56  10000 ????
     57  10000 ????				       MAC	sleep
     58  10000 ????			    .CYCLES    SET	{1}
     59  10000 ????
     60  10000 ????				       IF	.CYCLES < 2
     61  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     62  10000 ????				       ERR
     63  10000 ????				       ENDIF
     64  10000 ????
     65  10000 ????				       IF	.CYCLES & 1
     66  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     67  10000 ????				       nop	0
     68  10000 ????				       ELSE
     69  10000 ????				       bit	VSYNC
     70  10000 ????				       ENDIF
     71  10000 ????			    .CYCLES    SET	.CYCLES - 3
     72  10000 ????				       ENDIF
     73  10000 ????
     74  10000 ????				       REPEAT	.CYCLES / 2
     75  10000 ????				       nop
     76  10000 ????				       REPEND
     77  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     78  10000 ????
     79  10000 ????						;-------------------------------------------------------------------------------
     80  10000 ????						; VERTICAL_SYNC
     81  10000 ????						; Original author: Manuel Polik
     82  10000 ????						; Inserts the code required for a proper 3 scannline 
     83  10000 ????						; vertical sync sequence
     84  10000 ????						;
     85  10000 ????						; Note: Alters the accumulator
     86  10000 ????						;
     87  10000 ????						; IN:
     88  10000 ????						; OUT: A = 1
     89  10000 ????
     90  10000 ????				       MAC	vertical_sync
     91  10000 ????				       LDA	#$02	; A = VSYNC enable
     92  10000 ????				       STA	WSYNC	; Finish current line
     93  10000 ????				       STA	VSYNC	; Start vertical sync
     94  10000 ????				       STA	WSYNC	; 1st line vertical sync
     95  10000 ????				       STA	WSYNC	; 2nd line vertical sync
     96  10000 ????				       LSR		; A = VSYNC disable
     97  10000 ????				       STA	WSYNC	; 3rd line vertical sync
     98  10000 ????				       STA	VSYNC	; Stop vertical sync
     99  10000 ????				       ENDM
    100  10000 ????
    101  10000 ????						;-------------------------------------------------------------------------------
    102  10000 ????						; CLEAN_START
    103  10000 ????						; Original author: Andrew Davie
    104  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    105  10000 ????						; Sets stack pointer to $FF, and all registers to 0
    106  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    107  10000 ????						; Use as very first section of code on boot (ie: at reset)
    108  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    109  10000 ????
    110  10000 ????				       MAC	clean_start
    111  10000 ????				       sei
    112  10000 ????				       cld
    113  10000 ????
    114  10000 ????				       ldx	#0
    115  10000 ????				       txa
    116  10000 ????				       tay
    117  10000 ????			    .CLEAR_STACK dex
    118  10000 ????				       txs
    119  10000 ????				       pha
    120  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  10000 ????
    122  10000 ????				       ENDM
    123  10000 ????
    124  10000 ????						;-------------------------------------------------------
    125  10000 ????						; SET_POINTER
    126  10000 ????						; Original author: Manuel Rotschkar
    127  10000 ????						;
    128  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  10000 ????						;
    130  10000 ????						; Usage: SET_POINTER pointer, address
    131  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  10000 ????						;
    133  10000 ????						; Note: Alters the accumulator, NZ flags
    134  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  10000 ????						; IN 2: absolute address
    136  10000 ????
    137  10000 ????				       MAC	set_pointer
    138  10000 ????			    .POINTER   SET	{1}
    139  10000 ????			    .ADDRESS   SET	{2}
    140  10000 ????
    141  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  10000 ????				       STA	.POINTER	; Store in pointer
    143  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    144  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    145  10000 ????
    146  10000 ????				       ENDM
    147  10000 ????
    148  10000 ????						; EOF
------- FILE d:\Batari Projects\RandomHoles\RandomHoles\testepf.bas.asm
------- FILE 2600basic.h LEVEL 2 PASS 2
      0  10000 ????				       include	"2600basic.h"
      1  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  10000 ????
      3  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 3 PASS 2
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  10000 ????
      3  10000 ????						; VCS.H
      4  10000 ????						; Version 1.05, 13/November/2003
      5  10000 ????
      6  10000 ????		00 69	    VERSION_VCS =	105
      7  10000 ????
      8  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      9  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
     11  10000 ????						;
     12  10000 ????						; This file defines hardware registers and memory mapping for the
     13  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     14  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  10000 ????						; available at at http://www.atari2600.org/dasm
     16  10000 ????						;
     17  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     18  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     19  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     20  10000 ????						; with your views.  Please contribute, if you think you can improve this
     21  10000 ????						; file!
     22  10000 ????						;
     23  10000 ????						; Latest Revisions...
     24  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     25  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     26  10000 ????						;			    This will allow conditional code to verify VCS.H being
     27  10000 ????						;			    used for code assembly.
     28  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     29  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     30  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     31  10000 ????						;			 readability issue, and binary compatibility with disassembled
     32  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     33  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     34  10000 ????						;			 which was broken by the use of segments in this file, as
     35  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     36  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     37  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     38  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     39  10000 ????						;						   it is safe to leave it undefined, and the base address will
     40  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     41  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     42  10000 ????						;			  - register definitions are now generated through assignment
     43  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     44  10000 ????						;			    address architecture.
     45  10000 ????						; 1.0	22/MAR/2003		Initial release
     46  10000 ????
     47  10000 ????
     48  10000 ????						;-------------------------------------------------------------------------------
     49  10000 ????
     50  10000 ????						; TIA_BASE_ADDRESS
     51  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     52  10000 ????						; Normally 0, the base address should (externally, before including this file)
     53  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     54  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     55  10000 ????						; < $40 as a bankswitch.
     56  10000 ????
     57  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     58  10000 ????			   -TIA_BASE_ADDRESS =	0
     59  10000 ????				       ENDIF
     60  10000 ????
     61  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     62  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     63  10000 ????						; *OR* by declaring the label before including this file, eg:
     64  10000 ????						; TIA_BASE_ADDRESS = $40
     65  10000 ????						;   include "vcs.h"
     66  10000 ????
     67  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     68  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     69  10000 ????						; for the mirrored ROM hardware registers.
     70  10000 ????
     71  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     72  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     73  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     74  10000 ????
     75  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     76  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     77  10000 ????				       ENDIF
     78  10000 ????
     79  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     80  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     81  10000 ????				       ENDIF
     82  10000 ????
     83  10000 ????						;-------------------------------------------------------------------------------
     84  10000 ????
     85 U002d					      SEG.U	TIA_REGISTERS_WRITE
     86 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     87 U0000
     88 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     89 U0000
     90 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     91 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     92 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     93 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     94 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     95 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     96 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     97 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     98 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     99 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
    100 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
    101 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    102 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    103 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    104 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    105 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    106 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    107 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    108 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    109 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    110 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    111 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    112 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    113 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    114 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    115 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    116 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    117 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    118 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    119 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    120 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    121 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    122 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    123 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    124 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    125 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    126 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    127 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    128 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    129 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    130 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    131 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    132 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    133 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    134 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    135 U002d
    136 U002d							;-------------------------------------------------------------------------------
    137 U002d
    138 U000e					      SEG.U	TIA_REGISTERS_READ
    139 U0000					      ORG	TIA_BASE_READ_ADDRESS
    140 U0000
    141 U0000							;											bit 7	 bit 6
    142 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    143 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    144 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    145 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    146 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    147 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    148 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    149 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    150 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    151 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    152 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    153 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    154 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    155 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    156 U000e
    157 U000e							;-------------------------------------------------------------------------------
    158 U000e
    159 U0298					      SEG.U	RIOT
    160 U0280					      ORG	$280
    161 U0280
    162 U0280							; RIOT MEMORY MAP
    163 U0280
    164 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    165 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    166 U0281
    167 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    168 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    169 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    170 U0284		       00	   INTIM      ds	1	; $284		Timer output
    171 U0285
    172 U0285		       00	   TIMINT     ds	1	; $285
    173 U0286
    174 U0286							; Unused/undefined registers ($285-$294)
    175 U0286
    176 U0286		       00		      ds	1	; $286
    177 U0287		       00		      ds	1	; $287
    178 U0288		       00		      ds	1	; $288
    179 U0289		       00		      ds	1	; $289
    180 U028a		       00		      ds	1	; $28A
    181 U028b		       00		      ds	1	; $28B
    182 U028c		       00		      ds	1	; $28C
    183 U028d		       00		      ds	1	; $28D
    184 U028e		       00		      ds	1	; $28E
    185 U028f		       00		      ds	1	; $28F
    186 U0290		       00		      ds	1	; $290
    187 U0291		       00		      ds	1	; $291
    188 U0292		       00		      ds	1	; $292
    189 U0293		       00		      ds	1	; $293
    190 U0294
    191 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    192 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    193 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    194 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    195 U0298
    196 U0298							;-------------------------------------------------------------------------------
    197 U0298							; The following required for back-compatibility with code which does not use
    198 U0298							; segments.
    199 U0298
    200  10000 ????				       SEG
    201  10000 ????
    202  10000 ????						; EOF
------- FILE 2600basic.h
------- FILE macro.h LEVEL 3 PASS 2
      0  10000 ????				       include	"macro.h"
      1  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  10000 ????
      3  10000 ????						; MACRO.H
      4  10000 ????						; Version 1.05, 13/NOVEMBER/2003
      5  10000 ????
      6  10000 ????		00 69	    VERSION_MACRO =	105
      7  10000 ????
      8  10000 ????						;
      9  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
     11  10000 ????						;
     12  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     13  10000 ????						; It is distributed as a companion machine-specific support package
     14  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  10000 ????						; available at at http://www.atari2600.org/dasm
     16  10000 ????						;
     17  10000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     18  10000 ????						; contents, or would like to add something, please write to me
     19  10000 ????						; (atari2600@taswegian.com) with your contribution.
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						;
     23  10000 ????						; 1.05  14/NOV/2003	  - Added VERSION_MACRO equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify MACRO.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     27  10000 ????						;
     28  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     29  10000 ????						;
     30  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     31  10000 ????						;			   (standardised macro for vertical synch code)
     32  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     33  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     34  10000 ????						; 1.0	22/MAR/2003		Initial release
     35  10000 ????
     36  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     37  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     38  10000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     39  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     40  10000 ????						;   registers and require them to be defined first).
     41  10000 ????
     42  10000 ????						; Available macros...
     43  10000 ????						;   SLEEP n		 - sleep for n cycles
     44  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     45  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     46  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     47  10000 ????
     48  10000 ????						;-------------------------------------------------------------------------------
     49  10000 ????						; SLEEP duration
     50  10000 ????						; Original author: Thomas Jentzsch
     51  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     52  10000 ????						; useful for code where precise timing is required.
     53  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     54  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     55  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     56  10000 ????
     57  10000 ????				       MAC	sleep
     58  10000 ????			    .CYCLES    SET	{1}
     59  10000 ????
     60  10000 ????				       IF	.CYCLES < 2
     61  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     62  10000 ????				       ERR
     63  10000 ????				       ENDIF
     64  10000 ????
     65  10000 ????				       IF	.CYCLES & 1
     66  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     67  10000 ????				       nop	0
     68  10000 ????				       ELSE
     69  10000 ????				       bit	VSYNC
     70  10000 ????				       ENDIF
     71  10000 ????			    .CYCLES    SET	.CYCLES - 3
     72  10000 ????				       ENDIF
     73  10000 ????
     74  10000 ????				       REPEAT	.CYCLES / 2
     75  10000 ????				       nop
     76  10000 ????				       REPEND
     77  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     78  10000 ????
     79  10000 ????						;-------------------------------------------------------------------------------
     80  10000 ????						; VERTICAL_SYNC
     81  10000 ????						; Original author: Manuel Polik
     82  10000 ????						; Inserts the code required for a proper 3 scannline 
     83  10000 ????						; vertical sync sequence
     84  10000 ????						;
     85  10000 ????						; Note: Alters the accumulator
     86  10000 ????						;
     87  10000 ????						; IN:
     88  10000 ????						; OUT: A = 1
     89  10000 ????
     90  10000 ????				       MAC	vertical_sync
     91  10000 ????				       LDA	#$02	; A = VSYNC enable
     92  10000 ????				       STA	WSYNC	; Finish current line
     93  10000 ????				       STA	VSYNC	; Start vertical sync
     94  10000 ????				       STA	WSYNC	; 1st line vertical sync
     95  10000 ????				       STA	WSYNC	; 2nd line vertical sync
     96  10000 ????				       LSR		; A = VSYNC disable
     97  10000 ????				       STA	WSYNC	; 3rd line vertical sync
     98  10000 ????				       STA	VSYNC	; Stop vertical sync
     99  10000 ????				       ENDM
    100  10000 ????
    101  10000 ????						;-------------------------------------------------------------------------------
    102  10000 ????						; CLEAN_START
    103  10000 ????						; Original author: Andrew Davie
    104  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    105  10000 ????						; Sets stack pointer to $FF, and all registers to 0
    106  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    107  10000 ????						; Use as very first section of code on boot (ie: at reset)
    108  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    109  10000 ????
    110  10000 ????				       MAC	clean_start
    111  10000 ????				       sei
    112  10000 ????				       cld
    113  10000 ????
    114  10000 ????				       ldx	#0
    115  10000 ????				       txa
    116  10000 ????				       tay
    117  10000 ????			    .CLEAR_STACK dex
    118  10000 ????				       txs
    119  10000 ????				       pha
    120  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  10000 ????
    122  10000 ????				       ENDM
    123  10000 ????
    124  10000 ????						;-------------------------------------------------------
    125  10000 ????						; SET_POINTER
    126  10000 ????						; Original author: Manuel Rotschkar
    127  10000 ????						;
    128  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  10000 ????						;
    130  10000 ????						; Usage: SET_POINTER pointer, address
    131  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  10000 ????						;
    133  10000 ????						; Note: Alters the accumulator, NZ flags
    134  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  10000 ????						; IN 2: absolute address
    136  10000 ????
    137  10000 ????				       MAC	set_pointer
    138  10000 ????			    .POINTER   SET	{1}
    139  10000 ????			    .ADDRESS   SET	{2}
    140  10000 ????
    141  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  10000 ????				       STA	.POINTER	; Store in pointer
    143  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    144  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    145  10000 ????
    146  10000 ????				       ENDM
    147  10000 ????
    148  10000 ????						; EOF
------- FILE 2600basic.h
------- FILE 2600basic_variable_redefs.h LEVEL 3 PASS 2
      0  10000 ????				       include	"2600basic_variable_redefs.h"
      1  10000 ????						; This file contains variable mapping and other information for the current project.
      2  10000 ????
      3  10000 ????		00 01	    no_blank_lines =	1
------- FILE 2600basic.h
      7  10000 ????
      8  10000 ????		00 80	    player0x   =	$80
      9  10000 ????		00 81	    player1x   =	$81
     10  10000 ????		00 82	    missile0x  =	$82
     11  10000 ????		00 83	    missile1x  =	$83
     12  10000 ????		00 84	    ballx      =	$84
     13  10000 ????
     14  10000 ????		00 85	    objecty    =	$85
     15  10000 ????		00 85	    player0y   =	$85
     16  10000 ????		00 86	    player1y   =	$86
     17  10000 ????		00 87	    missile1height =	$87
     18  10000 ????		00 88	    missile1y  =	$88
     19  10000 ????		00 89	    bally      =	$89
     20  10000 ????
     21  10000 ????		00 87	    player1color =	$87	; replaces missile 1
     22  10000 ????
     23  10000 ????		00 8a	    player0pointer =	$8A	;uses $8A-$8B
     24  10000 ????		00 8a	    player0pointerlo =	$8A
     25  10000 ????		00 8b	    player0pointerhi =	$8B
     26  10000 ????		00 8c	    player1pointer =	$8C	; $8C-$8D
     27  10000 ????		00 8c	    player1pointerlo =	$8C
     28  10000 ????		00 8d	    player1pointerhi =	$8D
     29  10000 ????
     30  10000 ????		00 8e	    player0height =	$8E
     31  10000 ????		00 8f	    player1height =	$8F
     32  10000 ????		00 90	    missile0height =	$90
     33  10000 ????		00 91	    missile0y  =	$91
     34  10000 ????		00 92	    ballheight =	$92
     35  10000 ????
     36  10000 ????		00 90	    currentpaddle =	$90	; replaces missile 0 (and can't be used with playercolor)
     37  10000 ????		00 91	    paddle     =	$91	; replaces missile 0
     38  10000 ????		00 82	    player0colorstore =	$82	; replaces missile 0
     39  10000 ????		00 90	    player0color =	$90	; replaces missile 0
     40  10000 ????
     41  10000 ????		00 93	    score      =	$93	; $93-$95
     42  10000 ????		00 96	    scorepointers =	$96	; $96-$9B = 6 bytes
     43  10000 ????		00 9c	    temp1      =	$9C	;used by kernel.  can be used in program too, but
     44  10000 ????		00 9d	    temp2      =	$9D	;are obliterated when drawscreen is called.
     45  10000 ????		00 9e	    temp3      =	$9E
     46  10000 ????		00 9f	    temp4      =	$9F
     47  10000 ????		00 a0	    temp5      =	$A0
     48  10000 ????		00 a1	    temp6      =	$A1
     49  10000 ????
     50  10000 ????		00 a2	    rand       =	$A2
     51  10000 ????		00 a3	    scorecolor =	$A3
     52  10000 ????
     53  10000 ????		00 a4	    var0       =	$A4
     54  10000 ????		00 a5	    var1       =	$A5
     55  10000 ????		00 a6	    var2       =	$A6
     56  10000 ????		00 a7	    var3       =	$A7
     57  10000 ????		00 a8	    var4       =	$A8
     58  10000 ????		00 a9	    var5       =	$A9
     59  10000 ????		00 aa	    var6       =	$AA
     60  10000 ????		00 ab	    var7       =	$AB
     61  10000 ????		00 ac	    var8       =	$AC
     62  10000 ????		00 ad	    var9       =	$AD
     63  10000 ????		00 ae	    var10      =	$AE
     64  10000 ????		00 af	    var11      =	$AF
     65  10000 ????		00 b0	    var12      =	$B0
     66  10000 ????		00 b1	    var13      =	$B1
     67  10000 ????		00 b2	    var14      =	$B2
     68  10000 ????		00 b3	    var15      =	$B3
     69  10000 ????		00 b4	    var16      =	$B4
     70  10000 ????		00 b5	    var17      =	$B5
     71  10000 ????		00 b6	    var18      =	$B6
     72  10000 ????		00 b7	    var19      =	$B7
     73  10000 ????		00 b8	    var20      =	$B8
     74  10000 ????		00 b9	    var21      =	$B9
     75  10000 ????		00 ba	    var22      =	$BA
     76  10000 ????		00 bb	    var23      =	$BB
     77  10000 ????		00 bc	    var24      =	$BC
     78  10000 ????		00 bd	    var25      =	$BD
     79  10000 ????		00 be	    var26      =	$BE
     80  10000 ????		00 bf	    var27      =	$BF
     81  10000 ????		00 c0	    var28      =	$C0
     82  10000 ????		00 c1	    var29      =	$C1
     83  10000 ????		00 c2	    var30      =	$C2
     84  10000 ????		00 c3	    var31      =	$C3
     85  10000 ????		00 c4	    var32      =	$C4
     86  10000 ????		00 c5	    var33      =	$C5
     87  10000 ????		00 c6	    var34      =	$C6
     88  10000 ????		00 c7	    var35      =	$C7
     89  10000 ????		00 c8	    var36      =	$C8
     90  10000 ????		00 c9	    var37      =	$C9
     91  10000 ????		00 ca	    var38      =	$CA
     92  10000 ????		00 cb	    var39      =	$CB
     93  10000 ????		00 cc	    var40      =	$CC
     94  10000 ????		00 cd	    var41      =	$CD
     95  10000 ????		00 ce	    var42      =	$CE
     96  10000 ????		00 cf	    var43      =	$CF
     97  10000 ????		00 d0	    var44      =	$D0
     98  10000 ????		00 d1	    var45      =	$D1
     99  10000 ????		00 d2	    var46      =	$D2
    100  10000 ????		00 d3	    var47      =	$D3
    101  10000 ????
    102  10000 ????		00 d4	    A	       =	$d4
    103  10000 ????		00 d4	    a	       =	$d4
    104  10000 ????		00 d5	    B	       =	$d5
    105  10000 ????		00 d5	    b	       =	$d5
    106  10000 ????		00 d6	    C	       =	$d6
    107  10000 ????		00 d6	    c	       =	$d6
    108  10000 ????		00 d7	    D	       =	$d7
    109  10000 ????		00 d7	    d	       =	$d7
    110  10000 ????		00 d8	    E	       =	$d8
    111  10000 ????		00 d8	    e	       =	$d8
    112  10000 ????		00 d9	    F	       =	$d9
    113  10000 ????		00 d9	    f	       =	$d9
    114  10000 ????		00 da	    G	       =	$da
    115  10000 ????		00 da	    g	       =	$da
    116  10000 ????		00 db	    H	       =	$db
    117  10000 ????		00 db	    h	       =	$db
    118  10000 ????		00 dc	    I	       =	$dc
    119  10000 ????		00 dc	    i	       =	$dc
    120  10000 ????		00 dd	    J	       =	$dd
    121  10000 ????		00 dd	    j	       =	$dd
    122  10000 ????		00 de	    K	       =	$de
    123  10000 ????		00 de	    k	       =	$de
    124  10000 ????		00 df	    L	       =	$df
    125  10000 ????		00 df	    l	       =	$df
    126  10000 ????		00 e0	    M	       =	$e0
    127  10000 ????		00 e0	    m	       =	$e0
    128  10000 ????		00 e1	    N	       =	$e1
    129  10000 ????		00 e1	    n	       =	$e1
    130  10000 ????		00 e2	    O	       =	$e2
    131  10000 ????		00 e2	    o	       =	$e2
    132  10000 ????		00 e3	    P	       =	$e3
    133  10000 ????		00 e3	    p	       =	$e3
    134  10000 ????		00 e4	    Q	       =	$e4
    135  10000 ????		00 e4	    q	       =	$e4
    136  10000 ????		00 e5	    R	       =	$e5
    137  10000 ????		00 e5	    r	       =	$e5
    138  10000 ????		00 e6	    S	       =	$e6
    139  10000 ????		00 e6	    s	       =	$e6
    140  10000 ????		00 e7	    T	       =	$e7
    141  10000 ????		00 e7	    t	       =	$e7
    142  10000 ????		00 e8	    U	       =	$e8
    143  10000 ????		00 e8	    u	       =	$e8
    144  10000 ????		00 e9	    V	       =	$e9
    145  10000 ????		00 e9	    v	       =	$e9
    146  10000 ????		00 ea	    W	       =	$ea
    147  10000 ????		00 ea	    w	       =	$ea
    148  10000 ????		00 eb	    X	       =	$eb
    149  10000 ????		00 eb	    x	       =	$eb
    150  10000 ????		00 ec	    Y	       =	$ec
    151  10000 ????		00 ec	    y	       =	$ec
    152  10000 ????		00 ed	    Z	       =	$ed
    153  10000 ????		00 ed	    z	       =	$ed
    154  10000 ????
    155  10000 ????		00 ee	    temp7      =	$ee	; This is used to aid in bankswitching
    156  10000 ????		00 ef	    playfieldpos =	$ef
    157  10000 ????
    158  10000 ????						; available for other uses, or if unused, provide more stack space
    159  10000 ????
    160  10000 ????		00 f0	    aux1       =	$f0
    161  10000 ????		00 f1	    aux2       =	$f1
    162  10000 ????		00 f2	    aux3       =	$f2
    163  10000 ????		00 f3	    aux4       =	$f3
    164  10000 ????		00 f4	    aux5       =	$f4
    165  10000 ????		00 f5	    aux6       =	$f5
    166  10000 ????
    167  10000 ????						; playfield color/height pointers
    168  10000 ????		00 f0	    pfcolortable =	$f0	; and $d5
    169  10000 ????		00 f0	    pfheighttable =	$f0	; and $d5
    170  10000 ????						; the above pointers are the same because if color and height are both used together,
    171  10000 ????						; they must used absolute indexed and cannot use pointers
    172  10000 ????
    173  10000 ????		00 f2	    lifepointer =	$f2	; pointer to "lives" shape
    174  10000 ????						; upper 3 bits of $f2 contain the number of lives
    175  10000 ????		00 f4	    lifecolor  =	$f4
    176  10000 ????		00 f3	    lives      =	$f3	; # lives >> 5
    177  10000 ????		00 f5	    statusbarlength =	$f5	; only uses upper 5 bits; other bits free
    178  10000 ????
    179  10000 ????		00 f2	    pfscore1   =	$f2	; optional playfield bytes in score
    180  10000 ????		00 f3	    pfscore2   =	$f3
    181  10000 ????		00 f4	    pfscorecolor =	$f4
    182  10000 ????
    183  10000 ????		00 f6	    stack1     =	$f6
    184  10000 ????		00 f7	    stack2     =	$f7
    185  10000 ????		00 f8	    stack3     =	$f8
    186  10000 ????		00 f9	    stack4     =	$f9
    187  10000 ????						; the stack bytes above may be used in the kernel
    188  10000 ????						; stack = F6-F7, F8-F9, FA-FB, FC-FD, FE-FF
    189  10000 ????
    190  10000 ????				       MAC	return
    191  10000 ????				       ifnconst	bankswitch
    192  10000 ????				       rts
    193  10000 ????				       else
    194  10000 ????				       jmp	BS_return
    195  10000 ????				       endif
    196  10000 ????				       ENDM		; auto-return from either a regular or bankswitched module
    197  10000 ????
    198  10000 ????			   -	       ifconst	superchip
    199  10000 ????			   -playfieldbase =	$10D0
    200  10000 ????			   -	       include	superchip.h
    201  10000 ????				       else
    202  10000 ????		00 a4	    playfieldbase =	$A4
    203  10000 ????				       endif
    204  10000 ????
    205  10000 ????				       ifnconst	pfhalfwidth
    206  10000 ????		00 04	    pfwidth    =	4
    207  10000 ????		00 0e	    PF1L       =	PF1
    208  10000 ????		00 0f	    PF2L       =	PF2
    209  10000 ????		00 0e	    PF1R       =	PF1
    210  10000 ????		00 0f	    PF2R       =	PF2
    211  10000 ????		00 00	    pfadjust   =	0
    212  10000 ????			   -	       else
    213  10000 ????			   -pfwidth    =	2
    214  10000 ????			   -	       ifconst	pfcenter
    215  10000 ????			   -PF1L       =	$3F	; no effect
    216  10000 ????			   -PF2L       =	PF2
    217  10000 ????			   -PF1R       =	$3F
    218  10000 ????			   -PF2R       =	PF2	; no effect
    219  10000 ????			   -pfadjust   =	1
    220  10000 ????			   -	       else
    221  10000 ????			   -PF1L       =	PF1
    222  10000 ????			   -PF2L       =	PF2
    223  10000 ????			   -PF1R       =	$3F	; no effect
    224  10000 ????			   -PF2R       =	$3F	; no effect
    225  10000 ????			   -pfadjust   =	0
    226  10000 ????			   -	       endif
    227  10000 ????				       endif
    228  10000 ????
    229  10000 ????						; define playfield start based on height
    230  10000 ????				       ifnconst	pfres
    231  10000 ????		00 a4	    playfield  =	playfieldbase
    232  10000 ????			   -	       else
    233  10000 ????			   -playfield  =	playfieldbase-(pfres-12*(4/pfwidth))*pfwidth
    234  10000 ????				       endif
------- FILE d:\Batari Projects\RandomHoles\RandomHoles\testepf.bas.asm
------- FILE 2600basic_variable_redefs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"2600basic_variable_redefs.h"
      1  10000 ????						; This file contains variable mapping and other information for the current project.
      2  10000 ????
      3  10000 ????		00 01	    no_blank_lines =	1
------- FILE d:\Batari Projects\RandomHoles\RandomHoles\testepf.bas.asm
      8  10000 ????			   -	       ifconst	bankswitch
      9  10000 ????			   -	       if	bankswitch == 8
     10  10000 ????			   -	       ORG	$1000
     11  10000 ????			   -	       RORG	$D000
     12  10000 ????			   -	       endif
     13  10000 ????			   -	       if	bankswitch == 16
     14  10000 ????			   -	       ORG	$1000
     15  10000 ????			   -	       RORG	$9000
     16  10000 ????			   -	       endif
     17  10000 ????			   -	       if	bankswitch == 32
     18  10000 ????			   -	       ORG	$1000
     19  10000 ????			   -	       RORG	$1000
     20  10000 ????			   -	       endif
     21  10000 ????			   -	       if	bankswitch == 64
     22  10000 ????			   -	       ORG	$1000
     23  10000 ????			   -	       RORG	$1000
     24  10000 ????			   -	       endif
     25  10000 ????				       else
     26  f000					      ORG	$F000
     27  f000					      endif
     28  f000
     29  f000				  -	      ifconst	bankswitch_hotspot
     30  f000				  -	      if	bankswitch_hotspot = $083F	; 0840 bankswitching hotspot
     31  f000				  -	      .byte	0	; stop unexpected bankswitches
     32  f000				  -	      endif
     33  f000					      endif
     34  f000							; Provided under the CC0 license. See the included LICENSE.txt for details.
     35  f000
     36  f000				   start
     37  f000		       78		      sei
     38  f001		       d8		      cld
     39  f002		       a0 00		      ldy	#0
     40  f004		       a5 d0		      lda	$D0
     41  f006		       c9 2c		      cmp	#$2C	;check RAM location #1
     42  f008		       d0 07		      bne	MachineIs2600
     43  f00a		       a5 d1		      lda	$D1
     44  f00c		       c9 a9		      cmp	#$A9	;check RAM location #2
     45  f00e		       d0 01		      bne	MachineIs2600
     46  f010		       88		      dey
     47  f011				   MachineIs2600
     48  f011		       a2 00		      ldx	#0
     49  f013		       8a		      txa
     50  f014				   clearmem
     51  f014		       e8		      inx
     52  f015		       9a		      txs
     53  f016		       48		      pha
     54  f017		       d0 fb		      bne	clearmem
     55  f019		       84 9c		      sty	temp1
     56  f01b					      ifnconst	multisprite
     57  f01b				  -	      ifconst	pfrowheight
     58  f01b				  -	      lda	#pfrowheight
     59  f01b					      else
     60  f01b				  -	      ifconst	pfres
     61  f01b				  -	      lda	#(96/pfres)
     62  f01b					      else
     63  f01b		       a9 08		      lda	#8
     64  f01d					      endif
     65  f01d					      endif
     66  f01d		       85 ef		      sta	playfieldpos
     67  f01f					      endif
     68  f01f		       a2 05		      ldx	#5
     69  f021				   initscore
     70  f021		       a9 9c		      lda	#<scoretable
     71  f023		       95 96		      sta	scorepointers,x
     72  f025		       ca		      dex
     73  f026		       10 f9		      bpl	initscore
     74  f028		       a9 01		      lda	#1
     75  f02a		       85 0a		      sta	CTRLPF
     76  f02c		       0d 84 02 	      ora	INTIM
     77  f02f		       85 a2		      sta	rand
     78  f031
     79  f031				  -	      ifconst	multisprite
     80  f031				  -	      jsr	multisprite_setup
     81  f031					      endif
     82  f031
     83  f031					      ifnconst	bankswitch
     84  f031		       4c 5f f4 	      jmp	game
     85  f034				  -	      else
     86  f034				  -	      lda	#>(game-1)
     87  f034				  -	      pha
     88  f034				  -	      lda	#<(game-1)
     89  f034				  -	      pha
     90  f034				  -	      pha
     91  f034				  -	      pha
     92  f034				  -	      ldx	#1
     93  f034				  -	      jmp	BS_jsr
     94  f034					      endif
     95  f034							; Provided under the CC0 license. See the included LICENSE.txt for details.
     96  f034
     97  f034							; This is a 2-line kernel!
     98  f034					      ifnconst	vertical_reflect
     99  f034				   kernel
    100  f034					      endif
    101  f034		       85 02		      sta	WSYNC
    102  f036		       a9 ff		      lda	#255
    103  f038		       8d 96 02 	      sta	TIM64T
    104  f03b
    105  f03b		       a9 01		      lda	#1
    106  f03d		       85 27		      sta	VDELBL
    107  f03f		       85 25		      sta	VDELP0
    108  f041		       a6 92		      ldx	ballheight
    109  f043		       e8		      inx
    110  f044		       e8		      inx
    111  f045		       86 9f		      stx	temp4
    112  f047		       a5 86		      lda	player1y
    113  f049		       85 9e		      sta	temp3
    114  f04b
    115  f04b				  -	      ifconst	shakescreen
    116  f04b				  -	      jsr	doshakescreen
    117  f04b					      else
    118  f04b		       a6 90		      ldx	missile0height
    119  f04d		       e8		      inx
    120  f04e					      endif
    121  f04e
    122  f04e		       e8		      inx
    123  f04f		       86 f6		      stx	stack1
    124  f051
    125  f051		       a5 89		      lda	bally
    126  f053		       85 f7		      sta	stack2
    127  f055
    128  f055		       a5 85		      lda	player0y
    129  f057		       a2 00		      ldx	#0
    130  f059		       85 02		      sta	WSYNC
    131  f05b		       86 1b		      stx	GRP0
    132  f05d		       86 1c		      stx	GRP1
    133  f05f		       86 0e		      stx	PF1L
    134  f061		       86 0f		      stx	PF2
    135  f063		       86 2c		      stx	CXCLR
    136  f065				  -	      ifconst	readpaddle
    137  f065				  -	      stx	paddle
    138  f065					      else
      0  f065					      sleep	3
      1  f065				   .CYCLES    SET	3
      2  f065
      3  f065				  -	      IF	.CYCLES < 2
      4  f065				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f065				  -	      ERR
      6  f065					      ENDIF
      7  f065
      8  f065					      IF	.CYCLES & 1
      9  f065					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f065		       04 00		      nop	0
     11  f067				  -	      ELSE
     12  f067				  -	      bit	VSYNC
     13  f067					      ENDIF
     14  f067				   .CYCLES    SET	.CYCLES - 3
     15  f067					      ENDIF
     16  f067
     17  f067				  -	      REPEAT	.CYCLES / 2
     18  f067				  -	      nop
     19  f067					      REPEND
    140  f067					      endif
    141  f067
    142  f067		       95 9d		      sta	temp2,x
    143  f069
    144  f069							;store these so they can be retrieved later
    145  f069					      ifnconst	pfres
    146  f069		       a2 54		      ldx	#128-44+(4-pfwidth)*12
    147  f06b				  -	      else
    148  f06b				  -	      ldx	#132-pfres*pfwidth
    149  f06b					      endif
    150  f06b
    151  f06b		       c6 85		      dec	player0y
    152  f06d
    153  f06d		       a5 91		      lda	missile0y
    154  f06f		       85 a0		      sta	temp5
    155  f071		       a5 88		      lda	missile1y
    156  f073		       85 a1		      sta	temp6
    157  f075
    158  f075		       a5 ef		      lda	playfieldpos
    159  f077		       85 9c		      sta	temp1
    160  f079
    161  f079				  -	      ifconst	pfrowheight
    162  f079				  -	      lda	#pfrowheight+2
    163  f079					      else
    164  f079					      ifnconst	pfres
    165  f079		       a9 0a		      lda	#10
    166  f07b				  -	      else
    167  f07b				  -	      lda	#(96/pfres)+2	; try to come close to the real size
    168  f07b					      endif
    169  f07b					      endif
    170  f07b		       18		      clc
    171  f07c		       e5 ef		      sbc	playfieldpos
    172  f07e		       85 ef		      sta	playfieldpos
    173  f080		       4c a8 f0 	      jmp	.startkernel
    174  f083
    175  f083				   .skipDrawP0
    176  f083		       a9 00		      lda	#0
    177  f085		       a8		      tay
    178  f086		       4c d6 f0 	      jmp	.continueP0
    179  f089
    180  f089				   .skipDrawP1
    181  f089		       a9 00		      lda	#0
    182  f08b		       a8		      tay
    183  f08c		       4c b2 f0 	      jmp	.continueP1
    184  f08f
    185  f08f				   .kerloop		; enter at cycle 59??
    186  f08f
    187  f08f				   continuekernel
      0  f08f					      sleep	2
      1  f08f				   .CYCLES    SET	2
      2  f08f
      3  f08f				  -	      IF	.CYCLES < 2
      4  f08f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f08f				  -	      ERR
      6  f08f					      ENDIF
      7  f08f
      8  f08f				  -	      IF	.CYCLES & 1
      9  f08f				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f08f				  -	      nop	0
     11  f08f				  -	      ELSE
     12  f08f				  -	      bit	VSYNC
     13  f08f				  -	      ENDIF
     14  f08f				  -.CYCLES    SET	.CYCLES - 3
     15  f08f					      ENDIF
     16  f08f
     17  f08f					      REPEAT	.CYCLES / 2
     18  f08f		       ea		      nop
     19  f090					      REPEND
    189  f090				   continuekernel2
    190  f090		       a5 92		      lda	ballheight
    191  f092
    192  f092				  -	      ifconst	pfres
    193  f092				  -	      ldy	playfield+pfres*pfwidth-132,x
    194  f092				  -	      sty	PF1L	;3
    195  f092				  -	      ldy	playfield+pfres*pfwidth-131-pfadjust,x
    196  f092				  -	      sty	PF2L	;3
    197  f092				  -	      ldy	playfield+pfres*pfwidth-129,x
    198  f092				  -	      sty	PF1R	; 3 too early?
    199  f092				  -	      ldy	playfield+pfres*pfwidth-130-pfadjust,x
    200  f092				  -	      sty	PF2R	;3
    201  f092					      else
    202  f092		       b4 50		      ldy	playfield-48+pfwidth*12+44-128,x
    203  f094		       84 0e		      sty	PF1L	;3
    204  f096		       b4 51		      ldy	playfield-48+pfwidth*12+45-128-pfadjust,x	;4
    205  f098		       84 0f		      sty	PF2L	;3
    206  f09a		       b4 53		      ldy	playfield-48+pfwidth*12+47-128,x	;4
    207  f09c		       84 0e		      sty	PF1R	; 3 too early?
    208  f09e		       b4 52		      ldy	playfield-48+pfwidth*12+46-128-pfadjust,x	;4
    209  f0a0		       84 0f		      sty	PF2R	;3
    210  f0a2					      endif
    211  f0a2
    212  f0a2							; should be playfield+$38 for width=2
    213  f0a2
    214  f0a2		       c7 89		      dcp	bally
    215  f0a4		       2a		      rol
    216  f0a5		       2a		      rol
    217  f0a6							; rol
    218  f0a6							; rol
    219  f0a6				   goback
    220  f0a6		       85 1f		      sta	ENABL
    221  f0a8				   .startkernel
    222  f0a8		       a5 8f		      lda	player1height	;3
    223  f0aa		       c7 86		      dcp	player1y	;5
    224  f0ac		       90 db		      bcc	.skipDrawP1	;2
    225  f0ae		       a4 86		      ldy	player1y	;3
    226  f0b0		       b1 8c		      lda	(player1pointer),y	;5; player0pointer must be selected carefully by the compiler
    227  f0b2							; so it doesn't cross a page boundary!
    228  f0b2
    229  f0b2				   .continueP1
    230  f0b2		       85 1c		      sta	GRP1	;3
    231  f0b4
    232  f0b4					      ifnconst	player1colors
    233  f0b4		       a5 87		      lda	missile1height	;3
    234  f0b6		       c7 88		      dcp	missile1y	;5
    235  f0b8		       2a		      rol		;2
    236  f0b9		       2a		      rol		;2
    237  f0ba		       85 1e		      sta	ENAM1	;3
    238  f0bc				  -	      else
    239  f0bc				  -	      lda	(player1color),y
    240  f0bc				  -	      sta	COLUP1
    241  f0bc				  -	      ifnconst	playercolors
    242  f0bc				  -	      sleep	7
    243  f0bc				  -	      else
    244  f0bc				  -	      lda.w	player0colorstore
    245  f0bc				  -	      sta	COLUP0
    246  f0bc				  -	      endif
    247  f0bc					      endif
    248  f0bc
    249  f0bc				  -	      ifconst	pfres
    250  f0bc				  -	      lda	playfield+pfres*pfwidth-132,x
    251  f0bc				  -	      sta	PF1L	;3
    252  f0bc				  -	      lda	playfield+pfres*pfwidth-131-pfadjust,x
    253  f0bc				  -	      sta	PF2L	;3
    254  f0bc				  -	      lda	playfield+pfres*pfwidth-129,x
    255  f0bc				  -	      sta	PF1R	; 3 too early?
    256  f0bc				  -	      lda	playfield+pfres*pfwidth-130-pfadjust,x
    257  f0bc				  -	      sta	PF2R	;3
    258  f0bc					      else
    259  f0bc		       b5 50		      lda	playfield-48+pfwidth*12+44-128,x	;4
    260  f0be		       85 0e		      sta	PF1L	;3
    261  f0c0		       b5 51		      lda	playfield-48+pfwidth*12+45-128-pfadjust,x	;4
    262  f0c2		       85 0f		      sta	PF2L	;3
    263  f0c4		       b5 53		      lda	playfield-48+pfwidth*12+47-128,x	;4
    264  f0c6		       85 0e		      sta	PF1R	; 3 too early?
    265  f0c8		       b5 52		      lda	playfield-48+pfwidth*12+46-128-pfadjust,x	;4
    266  f0ca		       85 0f		      sta	PF2R	;3
    267  f0cc					      endif
    268  f0cc							; sleep 3
    269  f0cc
    270  f0cc		       a5 8e		      lda	player0height
    271  f0ce		       c7 85		      dcp	player0y
    272  f0d0		       90 b1		      bcc	.skipDrawP0
    273  f0d2		       a4 85		      ldy	player0y
    274  f0d4		       b1 8a		      lda	(player0pointer),y
    275  f0d6				   .continueP0
    276  f0d6		       85 1b		      sta	GRP0
    277  f0d8
    278  f0d8				  -	      ifnconst	no_blank_lines
    279  f0d8				  -	      ifnconst	playercolors
    280  f0d8				  -	      lda	missile0height	;3
    281  f0d8				  -	      dcp	missile0y	;5
    282  f0d8				  -	      sbc	stack1
    283  f0d8				  -	      sta	ENAM0	;3
    284  f0d8				  -	      else
    285  f0d8				  -	      lda	(player0color),y
    286  f0d8				  -	      sta	player0colorstore
    287  f0d8				  -	      sleep	6
    288  f0d8				  -	      endif
    289  f0d8				  -	      dec	temp1
    290  f0d8				  -	      bne	continuekernel
    291  f0d8					      else
    292  f0d8		       c6 9c		      dec	temp1
    293  f0da		       f0 09		      beq	altkernel2
    294  f0dc				  -	      ifconst	readpaddle
    295  f0dc				  -	      ldy	currentpaddle
    296  f0dc				  -	      lda	INPT0,y
    297  f0dc				  -	      bpl	noreadpaddle
    298  f0dc				  -	      inc	paddle
    299  f0dc				  -	      jmp	continuekernel2
    300  f0dc				  -noreadpaddle
    301  f0dc				  -	      sleep	2
    302  f0dc				  -	      jmp	continuekernel
    303  f0dc					      else
    304  f0dc					      ifnconst	playercolors
    305  f0dc				  -	      ifconst	PFcolors
    306  f0dc				  -	      txa
    307  f0dc				  -	      tay
    308  f0dc				  -	      lda	(pfcolortable),y
    309  f0dc				  -	      ifnconst	backgroundchange
    310  f0dc				  -	      sta	COLUPF
    311  f0dc				  -	      else
    312  f0dc				  -	      sta	COLUBK
    313  f0dc				  -	      endif
    314  f0dc				  -	      jmp	continuekernel
    315  f0dc					      else
    316  f0dc				  -	      ifconst	kernelmacrodef
    317  f0dc				  -	      kernelmacro
    318  f0dc					      else
      0  f0dc					      sleep	12
      1  f0dc				   .CYCLES    SET	12
      2  f0dc
      3  f0dc				  -	      IF	.CYCLES < 2
      4  f0dc				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0dc				  -	      ERR
      6  f0dc					      ENDIF
      7  f0dc
      8  f0dc				  -	      IF	.CYCLES & 1
      9  f0dc				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0dc				  -	      nop	0
     11  f0dc				  -	      ELSE
     12  f0dc				  -	      bit	VSYNC
     13  f0dc				  -	      ENDIF
     14  f0dc				  -.CYCLES    SET	.CYCLES - 3
     15  f0dc					      ENDIF
     16  f0dc
     17  f0dc					      REPEAT	.CYCLES / 2
     18  f0dc		       ea		      nop
     17  f0dc					      REPEND
     18  f0dd		       ea		      nop
     17  f0dd					      REPEND
     18  f0de		       ea		      nop
     17  f0de					      REPEND
     18  f0df		       ea		      nop
     17  f0df					      REPEND
     18  f0e0		       ea		      nop
     17  f0e0					      REPEND
     18  f0e1		       ea		      nop
     19  f0e2					      REPEND
    320  f0e2					      endif
    321  f0e2					      endif
    322  f0e2				  -	      else
    323  f0e2				  -	      lda	(player0color),y
    324  f0e2				  -	      sta	player0colorstore
    325  f0e2				  -	      sleep	4
    326  f0e2					      endif
    327  f0e2		       4c 8f f0 	      jmp	continuekernel
    328  f0e5					      endif
    329  f0e5				   altkernel2
    330  f0e5		       8a		      txa
    331  f0e6					      ifnconst	vertical_reflect
    332  f0e6		       cb fc		      sbx	#256-pfwidth
    333  f0e8				  -	      else
    334  f0e8				  -	      sbx	#256-pfwidth/2
    335  f0e8					      endif
    336  f0e8		       30 1b		      bmi	lastkernelline
    337  f0ea				  -	      ifconst	pfrowheight
    338  f0ea				  -	      lda	#pfrowheight
    339  f0ea					      else
    340  f0ea					      ifnconst	pfres
    341  f0ea		       a9 08		      lda	#8
    342  f0ec				  -	      else
    343  f0ec				  -	      lda	#(96/pfres)	; try to come close to the real size
    344  f0ec					      endif
    345  f0ec					      endif
    346  f0ec		       85 9c		      sta	temp1
    347  f0ee		       4c 8f f0 	      jmp	continuekernel
    348  f0f1					      endif
    349  f0f1
    350  f0f1				   altkernel
    351  f0f1
    352  f0f1				  -	      ifconst	PFmaskvalue
    353  f0f1				  -	      lda	#PFmaskvalue
    354  f0f1					      else
    355  f0f1		       a9 00		      lda	#0
    356  f0f3					      endif
    357  f0f3		       85 0e		      sta	PF1L
    358  f0f5		       85 0f		      sta	PF2
    359  f0f7
    360  f0f7
    361  f0f7							;sleep 3
    362  f0f7
    363  f0f7							;28 cycles to fix things
    364  f0f7							;minus 11=17
    365  f0f7
    366  f0f7							; lax temp4
    367  f0f7							; clc
    368  f0f7		       8a		      txa
    369  f0f8					      ifnconst	vertical_reflect
    370  f0f8		       cb fc		      sbx	#256-pfwidth
    371  f0fa				  -	      else
    372  f0fa				  -	      sbx	#256-pfwidth/2
    373  f0fa					      endif
    374  f0fa
    375  f0fa		       30 09		      bmi	lastkernelline
    376  f0fc
    377  f0fc				  -	      ifconst	PFcolorandheight
    378  f0fc				  -	      ifconst	pfres
    379  f0fc				  -	      ldy	playfieldcolorandheight-131+pfres*pfwidth,x
    380  f0fc				  -	      else
    381  f0fc				  -	      ldy	playfieldcolorandheight-87,x
    382  f0fc				  -	      endif
    383  f0fc				  -	      ifnconst	backgroundchange
    384  f0fc				  -	      sty	COLUPF
    385  f0fc				  -	      else
    386  f0fc				  -	      sty	COLUBK
    387  f0fc				  -	      endif
    388  f0fc				  -	      ifconst	pfres
    389  f0fc				  -	      lda	playfieldcolorandheight-132+pfres*pfwidth,x
    390  f0fc				  -	      else
    391  f0fc				  -	      lda	playfieldcolorandheight-88,x
    392  f0fc				  -	      endif
    393  f0fc				  -	      sta.w	temp1
    394  f0fc					      endif
    395  f0fc				  -	      ifconst	PFheights
    396  f0fc				  -	      lsr
    397  f0fc				  -	      lsr
    398  f0fc				  -	      tay
    399  f0fc				  -	      lda	(pfheighttable),y
    400  f0fc				  -	      sta.w	temp1
    401  f0fc					      endif
    402  f0fc				  -	      ifconst	PFcolors
    403  f0fc				  -	      tay
    404  f0fc				  -	      lda	(pfcolortable),y
    405  f0fc				  -	      ifnconst	backgroundchange
    406  f0fc				  -	      sta	COLUPF
    407  f0fc				  -	      else
    408  f0fc				  -	      sta	COLUBK
    409  f0fc				  -	      endif
    410  f0fc				  -	      ifconst	pfrowheight
    411  f0fc				  -	      lda	#pfrowheight
    412  f0fc				  -	      else
    413  f0fc				  -	      ifnconst	pfres
    414  f0fc				  -	      lda	#8
    415  f0fc				  -	      else
    416  f0fc				  -	      lda	#(96/pfres)	; try to come close to the real size
    417  f0fc				  -	      endif
    418  f0fc				  -	      endif
    419  f0fc				  -	      sta	temp1
    420  f0fc					      endif
    421  f0fc					      ifnconst	PFcolorandheight
    422  f0fc					      ifnconst	PFcolors
    423  f0fc					      ifnconst	PFheights
    424  f0fc				  -	      ifnconst	no_blank_lines
    425  f0fc				  -			; read paddle 0
    426  f0fc				  -			; lo-res paddle read
    427  f0fc				  -			; bit INPT0
    428  f0fc				  -			; bmi paddleskipread
    429  f0fc				  -			; inc paddle0
    430  f0fc				  -			;donepaddleskip
    431  f0fc				  -	      sleep	10
    432  f0fc				  -	      ifconst	pfrowheight
    433  f0fc				  -	      lda	#pfrowheight
    434  f0fc				  -	      else
    435  f0fc				  -	      ifnconst	pfres
    436  f0fc				  -	      lda	#8
    437  f0fc				  -	      else
    438  f0fc				  -	      lda	#(96/pfres)	; try to come close to the real size
    439  f0fc				  -	      endif
    440  f0fc				  -	      endif
    441  f0fc				  -	      sta	temp1
    442  f0fc					      endif
    443  f0fc					      endif
    444  f0fc					      endif
    445  f0fc					      endif
    446  f0fc
    447  f0fc
    448  f0fc		       a5 92		      lda	ballheight
    449  f0fe		       c7 89		      dcp	bally
    450  f100		       e5 9f		      sbc	temp4
    451  f102
    452  f102
    453  f102		       4c a6 f0 	      jmp	goback
    454  f105
    455  f105
    456  f105				  -	      ifnconst	no_blank_lines
    457  f105				  -lastkernelline
    458  f105				  -	      ifnconst	PFcolors
    459  f105				  -	      sleep	10
    460  f105				  -	      else
    461  f105				  -	      ldy	#124
    462  f105				  -	      lda	(pfcolortable),y
    463  f105				  -	      sta	COLUPF
    464  f105				  -	      endif
    465  f105				  -
    466  f105				  -	      ifconst	PFheights
    467  f105				  -	      ldx	#1
    468  f105				  -			;sleep 4
    469  f105				  -	      sleep	3	; this was over 1 cycle
    470  f105				  -	      else
    471  f105				  -	      ldx	playfieldpos
    472  f105				  -			;sleep 3
    473  f105				  -	      sleep	2	; this was over 1 cycle
    474  f105				  -	      endif
    475  f105				  -
    476  f105				  -	      jmp	enterlastkernel
    477  f105				  -
    478  f105					      else
    479  f105				   lastkernelline
    480  f105
    481  f105				  -	      ifconst	PFheights
    482  f105				  -	      ldx	#1
    483  f105				  -			;sleep 5
    484  f105				  -	      sleep	4	; this was over 1 cycle
    485  f105					      else
    486  f105		       a6 ef		      ldx	playfieldpos
    487  f107							;sleep 4
      0  f107					      sleep	3	; this was over 1 cycle
      1  f107				   .CYCLES    SET	3
      2  f107
      3  f107				  -	      IF	.CYCLES < 2
      4  f107				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f107				  -	      ERR
      6  f107					      ENDIF
      7  f107
      8  f107					      IF	.CYCLES & 1
      9  f107					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f107		       04 00		      nop	0
     11  f109				  -	      ELSE
     12  f109				  -	      bit	VSYNC
     13  f109					      ENDIF
     14  f109				   .CYCLES    SET	.CYCLES - 3
     15  f109					      ENDIF
     16  f109
     17  f109				  -	      REPEAT	.CYCLES / 2
     18  f109				  -	      nop
     19  f109					      REPEND
    489  f109					      endif
    490  f109
    491  f109		       e0 00		      cpx	#0
    492  f10b		       d0 0a		      bne	.enterfromNBL
    493  f10d		       4c 78 f1 	      jmp	no_blank_lines_bailout
    494  f110					      endif
    495  f110
    496  f110				  -	      if	((<*)>$d5)
    497  f110				  -	      align	256
    498  f110					      endif
    499  f110							; this is a kludge to prevent page wrapping - fix!!!
    500  f110
    501  f110				   .skipDrawlastP1
    502  f110		       a9 00		      lda	#0
    503  f112		       a8		      tay		; added so we don't cross a page
    504  f113		       4c 3d f1 	      jmp	.continuelastP1
    505  f116
    506  f116				   .endkerloop		; enter at cycle 59??
    507  f116
    508  f116		       ea		      nop
    509  f117
    510  f117				   .enterfromNBL
    511  f117				  -	      ifconst	pfres
    512  f117				  -	      ldy.w	playfield+pfres*pfwidth-4
    513  f117				  -	      sty	PF1L	;3
    514  f117				  -	      ldy.w	playfield+pfres*pfwidth-3-pfadjust
    515  f117				  -	      sty	PF2L	;3
    516  f117				  -	      ldy.w	playfield+pfres*pfwidth-1
    517  f117				  -	      sty	PF1R	; possibly too early?
    518  f117				  -	      ldy.w	playfield+pfres*pfwidth-2-pfadjust
    519  f117				  -	      sty	PF2R	;3
    520  f117					      else
    521  f117		       ac d0 00 	      ldy.w	playfield-48+pfwidth*12+44
    522  f11a		       84 0e		      sty	PF1L	;3
    523  f11c		       ac d1 00 	      ldy.w	playfield-48+pfwidth*12+45-pfadjust
    524  f11f		       84 0f		      sty	PF2L	;3
    525  f121		       ac d3 00 	      ldy.w	playfield-48+pfwidth*12+47
    526  f124		       84 0e		      sty	PF1R	; possibly too early?
    527  f126		       ac d2 00 	      ldy.w	playfield-48+pfwidth*12+46-pfadjust
    528  f129		       84 0f		      sty	PF2R	;3
    529  f12b					      endif
    530  f12b
    531  f12b				   enterlastkernel
    532  f12b		       a5 92		      lda	ballheight
    533  f12d
    534  f12d							; tya
    535  f12d		       c7 89		      dcp	bally
    536  f12f							; sleep 4
    537  f12f
    538  f12f							; sbc stack3
    539  f12f		       2a		      rol
    540  f130		       2a		      rol
    541  f131		       85 1f		      sta	ENABL
    542  f133
    543  f133		       a5 8f		      lda	player1height	;3
    544  f135		       c7 86		      dcp	player1y	;5
    545  f137		       90 d7		      bcc	.skipDrawlastP1
    546  f139		       a4 86		      ldy	player1y	;3
    547  f13b		       b1 8c		      lda	(player1pointer),y	;5; player0pointer must be selected carefully by the compiler
    548  f13d							; so it doesn't cross a page boundary!
    549  f13d
    550  f13d				   .continuelastP1
    551  f13d		       85 1c		      sta	GRP1	;3
    552  f13f
    553  f13f					      ifnconst	player1colors
    554  f13f		       a5 87		      lda	missile1height	;3
    555  f141		       c7 88		      dcp	missile1y	;5
    556  f143				  -	      else
    557  f143				  -	      lda	(player1color),y
    558  f143				  -	      sta	COLUP1
    559  f143					      endif
    560  f143
    561  f143		       ca		      dex
    562  f144							;dec temp4 ; might try putting this above PF writes
    563  f144		       f0 34		      beq	endkernel
    564  f146
    565  f146
    566  f146				  -	      ifconst	pfres
    567  f146				  -	      ldy.w	playfield+pfres*pfwidth-4
    568  f146				  -	      sty	PF1L	;3
    569  f146				  -	      ldy.w	playfield+pfres*pfwidth-3-pfadjust
    570  f146				  -	      sty	PF2L	;3
    571  f146				  -	      ldy.w	playfield+pfres*pfwidth-1
    572  f146				  -	      sty	PF1R	; possibly too early?
    573  f146				  -	      ldy.w	playfield+pfres*pfwidth-2-pfadjust
    574  f146				  -	      sty	PF2R	;3
    575  f146					      else
    576  f146		       ac d0 00 	      ldy.w	playfield-48+pfwidth*12+44
    577  f149		       84 0e		      sty	PF1L	;3
    578  f14b		       ac d1 00 	      ldy.w	playfield-48+pfwidth*12+45-pfadjust
    579  f14e		       84 0f		      sty	PF2L	;3
    580  f150		       ac d3 00 	      ldy.w	playfield-48+pfwidth*12+47
    581  f153		       84 0e		      sty	PF1R	; possibly too early?
    582  f155		       ac d2 00 	      ldy.w	playfield-48+pfwidth*12+46-pfadjust
    583  f158		       84 0f		      sty	PF2R	;3
    584  f15a					      endif
    585  f15a
    586  f15a					      ifnconst	player1colors
    587  f15a		       2a		      rol		;2
    588  f15b		       2a		      rol		;2
    589  f15c		       85 1e		      sta	ENAM1	;3
    590  f15e				  -	      else
    591  f15e				  -	      ifnconst	playercolors
    592  f15e				  -	      sleep	7
    593  f15e				  -	      else
    594  f15e				  -	      lda.w	player0colorstore
    595  f15e				  -	      sta	COLUP0
    596  f15e				  -	      endif
    597  f15e					      endif
    598  f15e
    599  f15e		       ad 8e 00 	      lda.w	player0height
    600  f161		       c7 85		      dcp	player0y
    601  f163		       90 0d		      bcc	.skipDrawlastP0
    602  f165		       a4 85		      ldy	player0y
    603  f167		       b1 8a		      lda	(player0pointer),y
    604  f169				   .continuelastP0
    605  f169		       85 1b		      sta	GRP0
    606  f16b
    607  f16b
    608  f16b
    609  f16b				  -	      ifnconst	no_blank_lines
    610  f16b				  -	      lda	missile0height	;3
    611  f16b				  -	      dcp	missile0y	;5
    612  f16b				  -	      sbc	stack1
    613  f16b				  -	      sta	ENAM0	;3
    614  f16b				  -	      jmp	.endkerloop
    615  f16b					      else
    616  f16b				  -	      ifconst	readpaddle
    617  f16b				  -	      ldy	currentpaddle
    618  f16b				  -	      lda	INPT0,y
    619  f16b				  -	      bpl	noreadpaddle2
    620  f16b				  -	      inc	paddle
    621  f16b				  -	      jmp	.endkerloop
    622  f16b				  -noreadpaddle2
    623  f16b				  -	      sleep	4
    624  f16b				  -	      jmp	.endkerloop
    625  f16b					      else		; no_blank_lines and no paddle reading
    626  f16b		       68		      pla
    627  f16c		       48		      pha		; 14 cycles in 4 bytes
    628  f16d		       68		      pla
    629  f16e		       48		      pha
    630  f16f							; sleep 14
    631  f16f		       4c 16 f1 	      jmp	.endkerloop
    632  f172					      endif
    633  f172					      endif
    634  f172
    635  f172
    636  f172							; ifconst donepaddleskip
    637  f172							;paddleskipread
    638  f172							; this is kind of lame, since it requires 4 cycles from a page boundary crossing
    639  f172							; plus we get a lo-res paddle read
    640  f172							; bmi donepaddleskip
    641  f172							; endif
    642  f172
    643  f172				   .skipDrawlastP0
    644  f172		       a9 00		      lda	#0
    645  f174		       a8		      tay
    646  f175		       4c 69 f1 	      jmp	.continuelastP0
    647  f178
    648  f178					      ifconst	no_blank_lines
    649  f178				   no_blank_lines_bailout
    650  f178		       a2 00		      ldx	#0
    651  f17a					      endif
    652  f17a
    653  f17a				   endkernel
    654  f17a							; 6 digit score routine
    655  f17a		       86 0e		      stx	PF1
    656  f17c		       86 0f		      stx	PF2
    657  f17e		       86 0d		      stx	PF0
    658  f180		       18		      clc
    659  f181
    660  f181				  -	      ifconst	pfrowheight
    661  f181				  -	      lda	#pfrowheight+2
    662  f181					      else
    663  f181					      ifnconst	pfres
    664  f181		       a9 0a		      lda	#10
    665  f183				  -	      else
    666  f183				  -	      lda	#(96/pfres)+2	; try to come close to the real size
    667  f183					      endif
    668  f183					      endif
    669  f183
    670  f183		       e5 ef		      sbc	playfieldpos
    671  f185		       85 ef		      sta	playfieldpos
    672  f187		       8a		      txa
    673  f188
    674  f188				  -	      ifconst	shakescreen
    675  f188				  -	      bit	shakescreen
    676  f188				  -	      bmi	noshakescreen2
    677  f188				  -	      ldx	#$3D
    678  f188				  -noshakescreen2
    679  f188					      endif
    680  f188
    681  f188		       95 02		      sta	WSYNC,x
    682  f18a
    683  f18a							; STA WSYNC ;first one, need one more
    684  f18a		       85 0b		      sta	REFP0
    685  f18c		       85 0c		      sta	REFP1
    686  f18e		       85 1b		      STA	GRP0
    687  f190		       85 1c		      STA	GRP1
    688  f192							; STA PF1
    689  f192							; STA PF2
    690  f192		       85 2b		      sta	HMCLR
    691  f194		       85 1d		      sta	ENAM0
    692  f196		       85 1e		      sta	ENAM1
    693  f198		       85 1f		      sta	ENABL
    694  f19a
    695  f19a		       a5 9d		      lda	temp2	;restore variables that were obliterated by kernel
    696  f19c		       85 85		      sta	player0y
    697  f19e		       a5 9e		      lda	temp3
    698  f1a0		       85 86		      sta	player1y
    699  f1a2					      ifnconst	player1colors
    700  f1a2		       a5 a1		      lda	temp6
    701  f1a4		       85 88		      sta	missile1y
    702  f1a6					      endif
    703  f1a6					      ifnconst	playercolors
    704  f1a6					      ifnconst	readpaddle
    705  f1a6		       a5 a0		      lda	temp5
    706  f1a8		       85 91		      sta	missile0y
    707  f1aa					      endif
    708  f1aa					      endif
    709  f1aa		       a5 f7		      lda	stack2
    710  f1ac		       85 89		      sta	bally
    711  f1ae
    712  f1ae							; strangely, this isn't required any more. might have
    713  f1ae							; resulted from the no_blank_lines score bounce fix
    714  f1ae							;ifconst no_blank_lines
    715  f1ae							;sta WSYNC
    716  f1ae							;endif
    717  f1ae
    718  f1ae		       ad 84 02 	      lda	INTIM
    719  f1b1		       18		      clc
    720  f1b2					      ifnconst	vblank_time
    721  f1b2		       69 8e		      adc	#43+12+87
    722  f1b4				  -	      else
    723  f1b4				  -	      adc	#vblank_time+12+87
    724  f1b4				  -
    725  f1b4					      endif
    726  f1b4							; sta WSYNC
    727  f1b4		       8d 96 02 	      sta	TIM64T
    728  f1b7
    729  f1b7				  -	      ifconst	minikernel
    730  f1b7				  -	      jsr	minikernel
    731  f1b7					      endif
    732  f1b7
    733  f1b7							; now reassign temp vars for score pointers
    734  f1b7
    735  f1b7							; score pointers contain:
    736  f1b7							; score1-5: lo1,lo2,lo3,lo4,lo5,lo6
    737  f1b7							; swap lo2->temp1
    738  f1b7							; swap lo4->temp3
    739  f1b7							; swap lo6->temp5
    740  f1b7					      ifnconst	noscore
    741  f1b7		       a5 97		      lda	scorepointers+1
    742  f1b9							; ldy temp1
    743  f1b9		       85 9c		      sta	temp1
    744  f1bb							; sty scorepointers+1
    745  f1bb
    746  f1bb		       a5 99		      lda	scorepointers+3
    747  f1bd							; ldy temp3
    748  f1bd		       85 9e		      sta	temp3
    749  f1bf							; sty scorepointers+3
    750  f1bf
    751  f1bf
    752  f1bf		       85 2b		      sta	HMCLR
    753  f1c1		       ba		      tsx
    754  f1c2		       86 f6		      stx	stack1
    755  f1c4		       a2 e0		      ldx	#$E0
    756  f1c6		       86 20		      stx	HMP0
    757  f1c8
    758  f1c8		       a5 a3		      LDA	scorecolor
    759  f1ca		       85 06		      STA	COLUP0
    760  f1cc		       85 07		      STA	COLUP1
    761  f1ce				  -	      ifconst	scorefade
    762  f1ce				  -	      STA	stack2
    763  f1ce					      endif
    764  f1ce				  -	      ifconst	pfscore
    765  f1ce				  -	      lda	pfscorecolor
    766  f1ce				  -	      sta	COLUPF
    767  f1ce					      endif
    768  f1ce		       85 02		      sta	WSYNC
    769  f1d0		       a2 00		      ldx	#0
    770  f1d2		       86 1b		      STx	GRP0
    771  f1d4		       86 1c		      STx	GRP1	; seems to be needed because of vdel
    772  f1d6
    773  f1d6		       a5 9b		      lda	scorepointers+5
    774  f1d8							; ldy temp5
    775  f1d8		       95 a0		      sta	temp5,x
    776  f1da							; sty scorepointers+5
    777  f1da		       a9 ff		      lda	#>scoretable
    778  f1dc		       85 97		      sta	scorepointers+1
    779  f1de		       85 99		      sta	scorepointers+3
    780  f1e0		       85 9b		      sta	scorepointers+5
    781  f1e2		       85 9d		      sta	temp2
    782  f1e4		       85 9f		      sta	temp4
    783  f1e6		       85 a1		      sta	temp6
    784  f1e8		       a0 07		      LDY	#7
    785  f1ea		       84 25		      STY	VDELP0
    786  f1ec		       85 10		      STA	RESP0
    787  f1ee		       85 11		      STA	RESP1
    788  f1f0
    789  f1f0
    790  f1f0		       a9 03		      LDA	#$03
    791  f1f2		       85 04		      STA	NUSIZ0
    792  f1f4		       85 05		      STA	NUSIZ1
    793  f1f6		       85 26		      STA	VDELP1
    794  f1f8		       a9 f0		      LDA	#$F0
    795  f1fa		       85 21		      STA	HMP1
    796  f1fc		       b1 96		      lda	(scorepointers),y
    797  f1fe		       85 1b		      sta	GRP0
    798  f200		       85 2a		      STA	HMOVE	; cycle 73 ?
    799  f202		       4c 0d f2 	      jmp	beginscore
    800  f205
    801  f205
    802  f205				  -	      if	((<*)>$d4)
    803  f205				  -	      align	256	; kludge that potentially wastes space! should be fixed!
    804  f205					      endif
    805  f205
    806  f205				   loop2
    807  f205		       b1 96		      lda	(scorepointers),y	;+5 68 204
    808  f207		       85 1b		      sta	GRP0	;+3 71 213 D1 -- -- --
    809  f209				  -	      ifconst	pfscore
    810  f209				  -	      lda.w	pfscore1
    811  f209				  -	      sta	PF1
    812  f209					      else
    813  f209				  -	      ifconst	scorefade
    814  f209				  -	      sleep	2
    815  f209				  -	      dec	stack2	; decrement the temporary scorecolor
    816  f209					      else
      0  f209					      sleep	7
      1  f209				   .CYCLES    SET	7
      2  f209
      3  f209				  -	      IF	.CYCLES < 2
      4  f209				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f209				  -	      ERR
      6  f209					      ENDIF
      7  f209
      8  f209					      IF	.CYCLES & 1
      9  f209					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f209		       04 00		      nop	0
     11  f20b				  -	      ELSE
     12  f20b				  -	      bit	VSYNC
     13  f20b					      ENDIF
     14  f20b				   .CYCLES    SET	.CYCLES - 3
     15  f20b					      ENDIF
     16  f20b
     17  f20b					      REPEAT	.CYCLES / 2
     18  f20b		       ea		      nop
     17  f20b					      REPEND
     18  f20c		       ea		      nop
     19  f20d					      REPEND
    818  f20d					      endif
    819  f20d					      endif
    820  f20d							; cycle 0
    821  f20d				   beginscore
    822  f20d		       b1 9e		      lda	(scorepointers+$8),y	;+5 5 15
    823  f20f		       85 1c		      sta	GRP1	;+3 8 24 D1 D1 D2 --
    824  f211		       b1 9c		      lda	(scorepointers+$6),y	;+5 13 39
    825  f213		       85 1b		      sta	GRP0	;+3 16 48 D3 D1 D2 D2
    826  f215		       b3 98		      lax	(scorepointers+$2),y	;+5 29 87
    827  f217		       9a		      txs
    828  f218		       b3 9a		      lax	(scorepointers+$4),y	;+5 36 108
    829  f21a				  -	      ifconst	scorefade
    830  f21a				  -	      lda	stack2
    831  f21a					      else
      0  f21a					      sleep	3
      1  f21a				   .CYCLES    SET	3
      2  f21a
      3  f21a				  -	      IF	.CYCLES < 2
      4  f21a				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f21a				  -	      ERR
      6  f21a					      ENDIF
      7  f21a
      8  f21a					      IF	.CYCLES & 1
      9  f21a					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f21a		       04 00		      nop	0
     11  f21c				  -	      ELSE
     12  f21c				  -	      bit	VSYNC
     13  f21c					      ENDIF
     14  f21c				   .CYCLES    SET	.CYCLES - 3
     15  f21c					      ENDIF
     16  f21c
     17  f21c				  -	      REPEAT	.CYCLES / 2
     18  f21c				  -	      nop
     19  f21c					      REPEND
    833  f21c					      endif
    834  f21c
    835  f21c				  -	      ifconst	pfscore
    836  f21c				  -	      lda	pfscore2
    837  f21c				  -	      sta	PF1
    838  f21c					      else
    839  f21c				  -	      ifconst	scorefade
    840  f21c				  -	      sta	COLUP0
    841  f21c				  -	      sta	COLUP1
    842  f21c					      else
      0  f21c					      sleep	6
      1  f21c				   .CYCLES    SET	6
      2  f21c
      3  f21c				  -	      IF	.CYCLES < 2
      4  f21c				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f21c				  -	      ERR
      6  f21c					      ENDIF
      7  f21c
      8  f21c				  -	      IF	.CYCLES & 1
      9  f21c				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f21c				  -	      nop	0
     11  f21c				  -	      ELSE
     12  f21c				  -	      bit	VSYNC
     13  f21c				  -	      ENDIF
     14  f21c				  -.CYCLES    SET	.CYCLES - 3
     15  f21c					      ENDIF
     16  f21c
     17  f21c					      REPEAT	.CYCLES / 2
     18  f21c		       ea		      nop
     17  f21c					      REPEND
     18  f21d		       ea		      nop
     17  f21d					      REPEND
     18  f21e		       ea		      nop
     19  f21f					      REPEND
    844  f21f					      endif
    845  f21f					      endif
    846  f21f
    847  f21f		       b1 a0		      lda	(scorepointers+$A),y	;+5 21 63
    848  f221		       86 1c		      stx	GRP1	;+3 44 132 D3 D3 D4 D2!
    849  f223		       ba		      tsx
    850  f224		       86 1b		      stx	GRP0	;+3 47 141 D5 D3! D4 D4
    851  f226		       85 1c		      sta	GRP1	;+3 50 150 D5 D5 D6 D4!
    852  f228		       84 1b		      sty	GRP0	;+3 53 159 D4* D5! D6 D6
    853  f22a		       88		      dey
    854  f22b		       10 d8		      bpl	loop2	;+2 60 180
    855  f22d
    856  f22d		       a6 f6		      ldx	stack1
    857  f22f		       9a		      txs
    858  f230							; lda scorepointers+1
    859  f230		       a4 9c		      ldy	temp1
    860  f232							; sta temp1
    861  f232		       84 97		      sty	scorepointers+1
    862  f234
    863  f234		       a9 00		      LDA	#0
    864  f236		       85 0e		      sta	PF1
    865  f238		       85 1b		      STA	GRP0
    866  f23a		       85 1c		      STA	GRP1
    867  f23c		       85 25		      STA	VDELP0
    868  f23e		       85 26		      STA	VDELP1	;do we need these
    869  f240		       85 04		      STA	NUSIZ0
    870  f242		       85 05		      STA	NUSIZ1
    871  f244
    872  f244							; lda scorepointers+3
    873  f244		       a4 9e		      ldy	temp3
    874  f246							; sta temp3
    875  f246		       84 99		      sty	scorepointers+3
    876  f248
    877  f248							; lda scorepointers+5
    878  f248		       a4 a0		      ldy	temp5
    879  f24a							; sta temp5
    880  f24a		       84 9b		      sty	scorepointers+5
    881  f24c					      endif		;noscore
    882  f24c		       a9 c2		      LDA	#%11000010
    883  f24e		       85 02		      sta	WSYNC
    884  f250		       85 01		      STA	VBLANK
      0  f252					      RETURN
      1  f252					      ifnconst	bankswitch
      2  f252		       60		      rts
      3  f253				  -	      else
      4  f253				  -	      jmp	BS_return
      5  f253					      endif
    886  f253
    887  f253				  -	      ifconst	shakescreen
    888  f253				  -doshakescreen
    889  f253				  -	      bit	shakescreen
    890  f253				  -	      bmi	noshakescreen
    891  f253				  -	      sta	WSYNC
    892  f253				  -noshakescreen
    893  f253				  -	      ldx	missile0height
    894  f253				  -	      inx
    895  f253				  -	      rts
    896  f253					      endif
    897  f253
    898  f253							; Provided under the CC0 license. See the included LICENSE.txt for details.
    899  f253
    900  f253							; playfield drawing routines
    901  f253							; you get a 32x12 bitmapped display in a single color :)
    902  f253							; 0-31 and 0-11
    903  f253
    904  f253				   pfclear		; clears playfield - or fill with pattern
    905  f253				  -	      ifconst	pfres
    906  f253				  -	      ldx	#pfres*pfwidth-1
    907  f253					      else
    908  f253		       a2 2f		      ldx	#47-(4-pfwidth)*12	; will this work?
    909  f255					      endif
    910  f255				   pfclear_loop
    911  f255					      ifnconst	superchip
    912  f255		       95 a4		      sta	playfield,x
    913  f257				  -	      else
    914  f257				  -	      sta	playfield-128,x
    915  f257					      endif
    916  f257		       ca		      dex
    917  f258		       10 fb		      bpl	pfclear_loop
      0  f25a					      RETURN
      1  f25a					      ifnconst	bankswitch
      2  f25a		       60		      rts
      3  f25b				  -	      else
      4  f25b				  -	      jmp	BS_return
      5  f25b					      endif
    919  f25b
    920  f25b				   setuppointers
    921  f25b		       86 9d		      stx	temp2	; store on.off.flip value
    922  f25d		       aa		      tax		; put x-value in x 
    923  f25e		       4a		      lsr
    924  f25f		       4a		      lsr
    925  f260		       4a		      lsr		; divide x pos by 8 
    926  f261		       85 9c		      sta	temp1
    927  f263		       98		      tya
    928  f264		       0a		      asl
    929  f265					      if	pfwidth=4
    930  f265		       0a		      asl		; multiply y pos by 4
    931  f266					      endif		; else multiply by 2
    932  f266		       18		      clc
    933  f267		       65 9c		      adc	temp1	; add them together to get actual memory location offset
    934  f269		       a8		      tay		; put the value in y
    935  f26a		       a5 9d		      lda	temp2	; restore on.off.flip value
    936  f26c		       60		      rts
    937  f26d
    938  f26d				   pfread
    939  f26d							;x=xvalue, y=yvalue
    940  f26d		       20 5b f2 	      jsr	setuppointers
    941  f270		       bd d5 f2 	      lda	setbyte,x
    942  f273		       39 a4 00 	      and	playfield,y
    943  f276		       5d d5 f2 	      eor	setbyte,x
    944  f279							; beq readzero
    945  f279							; lda #1
    946  f279							; readzero
      0  f279					      RETURN
      1  f279					      ifnconst	bankswitch
      2  f279		       60		      rts
      3  f27a				  -	      else
      4  f27a				  -	      jmp	BS_return
      5  f27a					      endif
    948  f27a
    949  f27a				   pfpixel
    950  f27a							;x=xvalue, y=yvalue, a=0,1,2
    951  f27a		       20 5b f2 	      jsr	setuppointers
    952  f27d
    953  f27d				  -	      ifconst	bankswitch
    954  f27d				  -	      lda	temp2	; load on.off.flip value (0,1, or 2)
    955  f27d				  -	      beq	pixelon_r	; if "on" go to on
    956  f27d				  -	      lsr
    957  f27d				  -	      bcs	pixeloff_r	; value is 1 if true
    958  f27d				  -	      lda	playfield,y	; if here, it's "flip"
    959  f27d				  -	      eor	setbyte,x
    960  f27d				  -	      ifconst	superchip
    961  f27d				  -	      sta	playfield-128,y
    962  f27d				  -	      else
    963  f27d				  -	      sta	playfield,y
    964  f27d				  -	      endif
    965  f27d				  -	      RETURN
    966  f27d				  -pixelon_r
    967  f27d				  -	      lda	playfield,y
    968  f27d				  -	      ora	setbyte,x
    969  f27d				  -	      ifconst	superchip
    970  f27d				  -	      sta	playfield-128,y
    971  f27d				  -	      else
    972  f27d				  -	      sta	playfield,y
    973  f27d				  -	      endif
    974  f27d				  -	      RETURN
    975  f27d				  -pixeloff_r
    976  f27d				  -	      lda	setbyte,x
    977  f27d				  -	      eor	#$ff
    978  f27d				  -	      and	playfield,y
    979  f27d				  -	      ifconst	superchip
    980  f27d				  -	      sta	playfield-128,y
    981  f27d				  -	      else
    982  f27d				  -	      sta	playfield,y
    983  f27d				  -	      endif
    984  f27d				  -	      RETURN
    985  f27d				  -
    986  f27d					      else
    987  f27d		       4c ae f2 	      jmp	plotpoint
    988  f280					      endif
    989  f280
    990  f280				   pfhline
    991  f280							;x=xvalue, y=yvalue, a=0,1,2, temp3=endx
    992  f280		       20 5b f2 	      jsr	setuppointers
    993  f283		       4c 8d f2 	      jmp	noinc
    994  f286				   keepgoing
    995  f286		       e8		      inx
    996  f287		       8a		      txa
    997  f288		       29 07		      and	#7
    998  f28a		       d0 01		      bne	noinc
    999  f28c		       c8		      iny
   1000  f28d				   noinc
   1001  f28d		       20 ae f2 	      jsr	plotpoint
   1002  f290		       e4 9e		      cpx	temp3
   1003  f292		       30 f2		      bmi	keepgoing
      0  f294					      RETURN
      1  f294					      ifnconst	bankswitch
      2  f294		       60		      rts
      3  f295				  -	      else
      4  f295				  -	      jmp	BS_return
      5  f295					      endif
   1005  f295
   1006  f295				   pfvline
   1007  f295							;x=xvalue, y=yvalue, a=0,1,2, temp3=endx
   1008  f295		       20 5b f2 	      jsr	setuppointers
   1009  f298		       84 9c		      sty	temp1	; store memory location offset
   1010  f29a		       e6 9e		      inc	temp3	; increase final x by 1 
   1011  f29c		       a5 9e		      lda	temp3
   1012  f29e		       0a		      asl
   1013  f29f					      if	pfwidth=4
   1014  f29f		       0a		      asl		; multiply by 4
   1015  f2a0					      endif		; else multiply by 2
   1016  f2a0		       85 9e		      sta	temp3	; store it
   1017  f2a2							; Thanks to Michael Rideout for fixing a bug in this code
   1018  f2a2							; right now, temp1=y=starting memory location, temp3=final
   1019  f2a2							; x should equal original x value
   1020  f2a2				   keepgoingy
   1021  f2a2		       20 ae f2 	      jsr	plotpoint
   1022  f2a5		       c8		      iny
   1023  f2a6		       c8		      iny
   1024  f2a7					      if	pfwidth=4
   1025  f2a7		       c8		      iny
   1026  f2a8		       c8		      iny
   1027  f2a9					      endif
   1028  f2a9		       c4 9e		      cpy	temp3
   1029  f2ab		       30 f5		      bmi	keepgoingy
      0  f2ad					      RETURN
      1  f2ad					      ifnconst	bankswitch
      2  f2ad		       60		      rts
      3  f2ae				  -	      else
      4  f2ae				  -	      jmp	BS_return
      5  f2ae					      endif
   1031  f2ae
   1032  f2ae				   plotpoint
   1033  f2ae		       a5 9d		      lda	temp2	; load on.off.flip value (0,1, or 2)
   1034  f2b0		       f0 0d		      beq	pixelon	; if "on" go to on
   1035  f2b2		       4a		      lsr
   1036  f2b3		       b0 14		      bcs	pixeloff	; value is 1 if true
   1037  f2b5		       b9 a4 00 	      lda	playfield,y	; if here, it's "flip"
   1038  f2b8		       5d d5 f2 	      eor	setbyte,x
   1039  f2bb				  -	      ifconst	superchip
   1040  f2bb				  -	      sta	playfield-128,y
   1041  f2bb					      else
   1042  f2bb		       99 a4 00 	      sta	playfield,y
   1043  f2be					      endif
   1044  f2be		       60		      rts
   1045  f2bf				   pixelon
   1046  f2bf		       b9 a4 00 	      lda	playfield,y
   1047  f2c2		       1d d5 f2 	      ora	setbyte,x
   1048  f2c5				  -	      ifconst	superchip
   1049  f2c5				  -	      sta	playfield-128,y
   1050  f2c5					      else
   1051  f2c5		       99 a4 00 	      sta	playfield,y
   1052  f2c8					      endif
   1053  f2c8		       60		      rts
   1054  f2c9				   pixeloff
   1055  f2c9		       bd d5 f2 	      lda	setbyte,x
   1056  f2cc		       49 ff		      eor	#$ff
   1057  f2ce		       39 a4 00 	      and	playfield,y
   1058  f2d1				  -	      ifconst	superchip
   1059  f2d1				  -	      sta	playfield-128,y
   1060  f2d1					      else
   1061  f2d1		       99 a4 00 	      sta	playfield,y
   1062  f2d4					      endif
   1063  f2d4		       60		      rts
   1064  f2d5
   1065  f2d5				   setbyte
   1066  f2d5					      ifnconst	pfcenter
   1067  f2d5		       80		      .byte.b	$80
   1068  f2d6		       40		      .byte.b	$40
   1069  f2d7		       20		      .byte.b	$20
   1070  f2d8		       10		      .byte.b	$10
   1071  f2d9		       08		      .byte.b	$08
   1072  f2da		       04		      .byte.b	$04
   1073  f2db		       02		      .byte.b	$02
   1074  f2dc		       01		      .byte.b	$01
   1075  f2dd					      endif
   1076  f2dd		       01		      .byte.b	$01
   1077  f2de		       02		      .byte.b	$02
   1078  f2df		       04		      .byte.b	$04
   1079  f2e0		       08		      .byte.b	$08
   1080  f2e1		       10		      .byte.b	$10
   1081  f2e2		       20		      .byte.b	$20
   1082  f2e3		       40		      .byte.b	$40
   1083  f2e4		       80		      .byte.b	$80
   1084  f2e5		       80		      .byte.b	$80
   1085  f2e6		       40		      .byte.b	$40
   1086  f2e7		       20		      .byte.b	$20
   1087  f2e8		       10		      .byte.b	$10
   1088  f2e9		       08		      .byte.b	$08
   1089  f2ea		       04		      .byte.b	$04
   1090  f2eb		       02		      .byte.b	$02
   1091  f2ec		       01		      .byte.b	$01
   1092  f2ed		       01		      .byte.b	$01
   1093  f2ee		       02		      .byte.b	$02
   1094  f2ef		       04		      .byte.b	$04
   1095  f2f0		       08		      .byte.b	$08
   1096  f2f1		       10		      .byte.b	$10
   1097  f2f2		       20		      .byte.b	$20
   1098  f2f3		       40		      .byte.b	$40
   1099  f2f4		       80		      .byte.b	$80
   1100  f2f5							; Provided under the CC0 license. See the included LICENSE.txt for details.
   1101  f2f5
   1102  f2f5				   pfscroll		;(a=0 left, 1 right, 2 up, 4 down, 6=upup, 12=downdown)
   1103  f2f5		       d0 13		      bne	notleft
   1104  f2f7							;left
   1105  f2f7				  -	      ifconst	pfres
   1106  f2f7				  -	      ldx	#pfres*4
   1107  f2f7					      else
   1108  f2f7		       a2 30		      ldx	#48
   1109  f2f9					      endif
   1110  f2f9				   leftloop
   1111  f2f9		       b5 a3		      lda	playfield-1,x
   1112  f2fb		       4a		      lsr
   1113  f2fc
   1114  f2fc				  -	      ifconst	superchip
   1115  f2fc				  -	      lda	playfield-2,x
   1116  f2fc				  -	      rol
   1117  f2fc				  -	      sta	playfield-130,x
   1118  f2fc				  -	      lda	playfield-3,x
   1119  f2fc				  -	      ror
   1120  f2fc				  -	      sta	playfield-131,x
   1121  f2fc				  -	      lda	playfield-4,x
   1122  f2fc				  -	      rol
   1123  f2fc				  -	      sta	playfield-132,x
   1124  f2fc				  -	      lda	playfield-1,x
   1125  f2fc				  -	      ror
   1126  f2fc				  -	      sta	playfield-129,x
   1127  f2fc					      else
   1128  f2fc		       36 a2		      rol	playfield-2,x
   1129  f2fe		       76 a1		      ror	playfield-3,x
   1130  f300		       36 a0		      rol	playfield-4,x
   1131  f302		       76 a3		      ror	playfield-1,x
   1132  f304					      endif
   1133  f304
   1134  f304		       8a		      txa
   1135  f305		       cb 04		      sbx	#4
   1136  f307		       d0 f0		      bne	leftloop
      0  f309					      RETURN
      1  f309					      ifnconst	bankswitch
      2  f309		       60		      rts
      3  f30a				  -	      else
      4  f30a				  -	      jmp	BS_return
      5  f30a					      endif
   1138  f30a
   1139  f30a				   notleft
   1140  f30a		       4a		      lsr
   1141  f30b		       90 13		      bcc	notright
   1142  f30d							;right
   1143  f30d
   1144  f30d				  -	      ifconst	pfres
   1145  f30d				  -	      ldx	#pfres*4
   1146  f30d					      else
   1147  f30d		       a2 30		      ldx	#48
   1148  f30f					      endif
   1149  f30f				   rightloop
   1150  f30f		       b5 a0		      lda	playfield-4,x
   1151  f311		       4a		      lsr
   1152  f312				  -	      ifconst	superchip
   1153  f312				  -	      lda	playfield-3,x
   1154  f312				  -	      rol
   1155  f312				  -	      sta	playfield-131,x
   1156  f312				  -	      lda	playfield-2,x
   1157  f312				  -	      ror
   1158  f312				  -	      sta	playfield-130,x
   1159  f312				  -	      lda	playfield-1,x
   1160  f312				  -	      rol
   1161  f312				  -	      sta	playfield-129,x
   1162  f312				  -	      lda	playfield-4,x
   1163  f312				  -	      ror
   1164  f312				  -	      sta	playfield-132,x
   1165  f312					      else
   1166  f312		       36 a1		      rol	playfield-3,x
   1167  f314		       76 a2		      ror	playfield-2,x
   1168  f316		       36 a3		      rol	playfield-1,x
   1169  f318		       76 a0		      ror	playfield-4,x
   1170  f31a					      endif
   1171  f31a		       8a		      txa
   1172  f31b		       cb 04		      sbx	#4
   1173  f31d		       d0 f0		      bne	rightloop
      0  f31f					      RETURN
      1  f31f					      ifnconst	bankswitch
      2  f31f		       60		      rts
      3  f320				  -	      else
      4  f320				  -	      jmp	BS_return
      5  f320					      endif
   1175  f320
   1176  f320				   notright
   1177  f320		       4a		      lsr
   1178  f321		       90 49		      bcc	notup
   1179  f323							;up
   1180  f323		       4a		      lsr
   1181  f324		       90 02		      bcc	onedecup
   1182  f326		       c6 ef		      dec	playfieldpos
   1183  f328				   onedecup
   1184  f328		       c6 ef		      dec	playfieldpos
   1185  f32a		       f0 02		      beq	shiftdown
   1186  f32c		       10 3d		      bpl	noshiftdown2
   1187  f32e				   shiftdown
   1188  f32e				  -	      ifconst	pfrowheight
   1189  f32e				  -	      lda	#pfrowheight
   1190  f32e					      else
   1191  f32e					      ifnconst	pfres
   1192  f32e		       a9 08		      lda	#8
   1193  f330				  -	      else
   1194  f330				  -	      lda	#(96/pfres)	; try to come close to the real size
   1195  f330					      endif
   1196  f330					      endif
   1197  f330
   1198  f330		       85 ef		      sta	playfieldpos
   1199  f332		       a5 a7		      lda	playfield+3
   1200  f334		       85 9f		      sta	temp4
   1201  f336		       a5 a6		      lda	playfield+2
   1202  f338		       85 9e		      sta	temp3
   1203  f33a		       a5 a5		      lda	playfield+1
   1204  f33c		       85 9d		      sta	temp2
   1205  f33e		       a5 a4		      lda	playfield
   1206  f340		       85 9c		      sta	temp1
   1207  f342		       a2 00		      ldx	#0
   1208  f344				   up2
   1209  f344		       b5 a8		      lda	playfield+4,x
   1210  f346				  -	      ifconst	superchip
   1211  f346				  -	      sta	playfield-128,x
   1212  f346				  -	      lda	playfield+5,x
   1213  f346				  -	      sta	playfield-127,x
   1214  f346				  -	      lda	playfield+6,x
   1215  f346				  -	      sta	playfield-126,x
   1216  f346				  -	      lda	playfield+7,x
   1217  f346				  -	      sta	playfield-125,x
   1218  f346					      else
   1219  f346		       95 a4		      sta	playfield,x
   1220  f348		       b5 a9		      lda	playfield+5,x
   1221  f34a		       95 a5		      sta	playfield+1,x
   1222  f34c		       b5 aa		      lda	playfield+6,x
   1223  f34e		       95 a6		      sta	playfield+2,x
   1224  f350		       b5 ab		      lda	playfield+7,x
   1225  f352		       95 a7		      sta	playfield+3,x
   1226  f354					      endif
   1227  f354		       8a		      txa
   1228  f355		       cb fc		      sbx	#252
   1229  f357				  -	      ifconst	pfres
   1230  f357				  -	      cpx	#(pfres-1)*4
   1231  f357					      else
   1232  f357		       e0 2c		      cpx	#44
   1233  f359					      endif
   1234  f359		       d0 e9		      bne	up2
   1235  f35b
   1236  f35b		       a5 9f		      lda	temp4
   1237  f35d
   1238  f35d				  -	      ifconst	superchip
   1239  f35d				  -	      ifconst	pfres
   1240  f35d				  -	      sta	playfield+pfres*4-129
   1241  f35d				  -	      lda	temp3
   1242  f35d				  -	      sta	playfield+pfres*4-130
   1243  f35d				  -	      lda	temp2
   1244  f35d				  -	      sta	playfield+pfres*4-131
   1245  f35d				  -	      lda	temp1
   1246  f35d				  -	      sta	playfield+pfres*4-132
   1247  f35d				  -	      else
   1248  f35d				  -	      sta	playfield+47-128
   1249  f35d				  -	      lda	temp3
   1250  f35d				  -	      sta	playfield+46-128
   1251  f35d				  -	      lda	temp2
   1252  f35d				  -	      sta	playfield+45-128
   1253  f35d				  -	      lda	temp1
   1254  f35d				  -	      sta	playfield+44-128
   1255  f35d				  -	      endif
   1256  f35d					      else
   1257  f35d				  -	      ifconst	pfres
   1258  f35d				  -	      sta	playfield+pfres*4-1
   1259  f35d				  -	      lda	temp3
   1260  f35d				  -	      sta	playfield+pfres*4-2
   1261  f35d				  -	      lda	temp2
   1262  f35d				  -	      sta	playfield+pfres*4-3
   1263  f35d				  -	      lda	temp1
   1264  f35d				  -	      sta	playfield+pfres*4-4
   1265  f35d					      else
   1266  f35d		       85 d3		      sta	playfield+47
   1267  f35f		       a5 9e		      lda	temp3
   1268  f361		       85 d2		      sta	playfield+46
   1269  f363		       a5 9d		      lda	temp2
   1270  f365		       85 d1		      sta	playfield+45
   1271  f367		       a5 9c		      lda	temp1
   1272  f369		       85 d0		      sta	playfield+44
   1273  f36b					      endif
   1274  f36b					      endif
   1275  f36b				   noshiftdown2
      0  f36b					      RETURN
      1  f36b					      ifnconst	bankswitch
      2  f36b		       60		      rts
      3  f36c				  -	      else
      4  f36c				  -	      jmp	BS_return
      5  f36c					      endif
   1277  f36c
   1278  f36c
   1279  f36c				   notup
   1280  f36c							;down
   1281  f36c		       4a		      lsr
   1282  f36d		       b0 02		      bcs	oneincup
   1283  f36f		       e6 ef		      inc	playfieldpos
   1284  f371				   oneincup
   1285  f371		       e6 ef		      inc	playfieldpos
   1286  f373		       a5 ef		      lda	playfieldpos
   1287  f375
   1288  f375				  -	      ifconst	pfrowheight
   1289  f375				  -	      cmp	#pfrowheight+1
   1290  f375					      else
   1291  f375					      ifnconst	pfres
   1292  f375		       c9 09		      cmp	#9
   1293  f377				  -	      else
   1294  f377				  -	      cmp	#(96/pfres)+1	; try to come close to the real size
   1295  f377					      endif
   1296  f377					      endif
   1297  f377
   1298  f377		       90 3b		      bcc	noshiftdown
   1299  f379		       a9 01		      lda	#1
   1300  f37b		       85 ef		      sta	playfieldpos
   1301  f37d
   1302  f37d				  -	      ifconst	pfres
   1303  f37d				  -	      lda	playfield+pfres*4-1
   1304  f37d				  -	      sta	temp4
   1305  f37d				  -	      lda	playfield+pfres*4-2
   1306  f37d				  -	      sta	temp3
   1307  f37d				  -	      lda	playfield+pfres*4-3
   1308  f37d				  -	      sta	temp2
   1309  f37d				  -	      lda	playfield+pfres*4-4
   1310  f37d					      else
   1311  f37d		       a5 d3		      lda	playfield+47
   1312  f37f		       85 9f		      sta	temp4
   1313  f381		       a5 d2		      lda	playfield+46
   1314  f383		       85 9e		      sta	temp3
   1315  f385		       a5 d1		      lda	playfield+45
   1316  f387		       85 9d		      sta	temp2
   1317  f389		       a5 d0		      lda	playfield+44
   1318  f38b					      endif
   1319  f38b
   1320  f38b		       85 9c		      sta	temp1
   1321  f38d
   1322  f38d				  -	      ifconst	pfres
   1323  f38d				  -	      ldx	#(pfres-1)*4
   1324  f38d					      else
   1325  f38d		       a2 2c		      ldx	#44
   1326  f38f					      endif
   1327  f38f				   down2
   1328  f38f		       b5 a3		      lda	playfield-1,x
   1329  f391				  -	      ifconst	superchip
   1330  f391				  -	      sta	playfield-125,x
   1331  f391				  -	      lda	playfield-2,x
   1332  f391				  -	      sta	playfield-126,x
   1333  f391				  -	      lda	playfield-3,x
   1334  f391				  -	      sta	playfield-127,x
   1335  f391				  -	      lda	playfield-4,x
   1336  f391				  -	      sta	playfield-128,x
   1337  f391					      else
   1338  f391		       95 a7		      sta	playfield+3,x
   1339  f393		       b5 a2		      lda	playfield-2,x
   1340  f395		       95 a6		      sta	playfield+2,x
   1341  f397		       b5 a1		      lda	playfield-3,x
   1342  f399		       95 a5		      sta	playfield+1,x
   1343  f39b		       b5 a0		      lda	playfield-4,x
   1344  f39d		       95 a4		      sta	playfield,x
   1345  f39f					      endif
   1346  f39f		       8a		      txa
   1347  f3a0		       cb 04		      sbx	#4
   1348  f3a2		       d0 eb		      bne	down2
   1349  f3a4
   1350  f3a4		       a5 9f		      lda	temp4
   1351  f3a6				  -	      ifconst	superchip
   1352  f3a6				  -	      sta	playfield-125
   1353  f3a6				  -	      lda	temp3
   1354  f3a6				  -	      sta	playfield-126
   1355  f3a6				  -	      lda	temp2
   1356  f3a6				  -	      sta	playfield-127
   1357  f3a6				  -	      lda	temp1
   1358  f3a6				  -	      sta	playfield-128
   1359  f3a6					      else
   1360  f3a6		       85 a7		      sta	playfield+3
   1361  f3a8		       a5 9e		      lda	temp3
   1362  f3aa		       85 a6		      sta	playfield+2
   1363  f3ac		       a5 9d		      lda	temp2
   1364  f3ae		       85 a5		      sta	playfield+1
   1365  f3b0		       a5 9c		      lda	temp1
   1366  f3b2		       85 a4		      sta	playfield
   1367  f3b4					      endif
   1368  f3b4				   noshiftdown
      0  f3b4					      RETURN
      1  f3b4					      ifnconst	bankswitch
      2  f3b4		       60		      rts
      3  f3b5				  -	      else
      4  f3b5				  -	      jmp	BS_return
      5  f3b5					      endif
   1370  f3b5							; Provided under the CC0 license. See the included LICENSE.txt for details.
   1371  f3b5
   1372  f3b5							;standard routines needed for pretty much all games
   1373  f3b5							; just the random number generator is left - maybe we should remove this asm file altogether?
   1374  f3b5							; repositioning code and score pointer setup moved to overscan
   1375  f3b5							; read switches, joysticks now compiler generated (more efficient)
   1376  f3b5
   1377  f3b5				   randomize
   1378  f3b5		       a5 a2		      lda	rand
   1379  f3b7		       4a		      lsr
   1380  f3b8				  -	      ifconst	rand16
   1381  f3b8				  -	      rol	rand16
   1382  f3b8					      endif
   1383  f3b8		       90 02		      bcc	noeor
   1384  f3ba		       49 b4		      eor	#$B4
   1385  f3bc				   noeor
   1386  f3bc		       85 a2		      sta	rand
   1387  f3be				  -	      ifconst	rand16
   1388  f3be				  -	      eor	rand16
   1389  f3be					      endif
      0  f3be					      RETURN
      1  f3be					      ifnconst	bankswitch
      2  f3be		       60		      rts
      3  f3bf				  -	      else
      4  f3bf				  -	      jmp	BS_return
      5  f3bf					      endif
   1391  f3bf							; Provided under the CC0 license. See the included LICENSE.txt for details.
   1392  f3bf
   1393  f3bf				   drawscreen
   1394  f3bf				  -	      ifconst	debugscore
   1395  f3bf				  -	      ldx	#14
   1396  f3bf				  -	      lda	INTIM	; display # cycles left in the score
   1397  f3bf				  -
   1398  f3bf				  -	      ifconst	mincycles
   1399  f3bf				  -	      lda	mincycles
   1400  f3bf				  -	      cmp	INTIM
   1401  f3bf				  -	      lda	mincycles
   1402  f3bf				  -	      bcc	nochange
   1403  f3bf				  -	      lda	INTIM
   1404  f3bf				  -	      sta	mincycles
   1405  f3bf				  -nochange
   1406  f3bf				  -	      endif
   1407  f3bf				  -
   1408  f3bf				  -			; cmp #$2B
   1409  f3bf				  -			; bcs no_cycles_left
   1410  f3bf				  -	      bmi	cycles_left
   1411  f3bf				  -	      ldx	#64
   1412  f3bf				  -	      eor	#$ff	;make negative
   1413  f3bf				  -cycles_left
   1414  f3bf				  -	      stx	scorecolor
   1415  f3bf				  -	      and	#$7f	; clear sign bit
   1416  f3bf				  -	      tax
   1417  f3bf				  -	      lda	scorebcd,x
   1418  f3bf				  -	      sta	score+2
   1419  f3bf				  -	      lda	scorebcd1,x
   1420  f3bf				  -	      sta	score+1
   1421  f3bf				  -	      jmp	done_debugscore
   1422  f3bf				  -scorebcd
   1423  f3bf				  -	      .byte	$00, $64, $28, $92, $56, $20, $84, $48, $12, $76, $40
   1424  f3bf				  -	      .byte	$04, $68, $32, $96, $60, $24, $88, $52, $16, $80, $44
   1425  f3bf				  -	      .byte	$08, $72, $36, $00, $64, $28, $92, $56, $20, $84, $48
   1426  f3bf				  -	      .byte	$12, $76, $40, $04, $68, $32, $96, $60, $24, $88
   1427  f3bf				  -scorebcd1
   1428  f3bf				  -	      .byte	0, 0, 1, 1, 2, 3, 3, 4, 5, 5, 6
   1429  f3bf				  -	      .byte	7, 7, 8, 8, 9, $10, $10, $11, $12, $12, $13
   1430  f3bf				  -	      .byte	$14, $14, $15, $16, $16, $17, $17, $18, $19, $19, $20
   1431  f3bf				  -	      .byte	$21, $21, $22, $23, $23, $24, $24, $25, $26, $26
   1432  f3bf				  -done_debugscore
   1433  f3bf					      endif
   1434  f3bf
   1435  f3bf				  -	      ifconst	debugcycles
   1436  f3bf				  -	      lda	INTIM	; if we go over, it mucks up the background color
   1437  f3bf				  -			; cmp #$2B
   1438  f3bf				  -			; BCC overscan
   1439  f3bf				  -	      bmi	overscan
   1440  f3bf				  -	      sta	COLUBK
   1441  f3bf				  -	      bcs	doneoverscan
   1442  f3bf					      endif
   1443  f3bf
   1444  f3bf				   overscan
   1445  f3bf				  -	      ifconst	interlaced
   1446  f3bf				  -	      PHP
   1447  f3bf				  -	      PLA
   1448  f3bf				  -	      EOR	#4	; flip interrupt bit
   1449  f3bf				  -	      PHA
   1450  f3bf				  -	      PLP
   1451  f3bf				  -	      AND	#4	; isolate the interrupt bit
   1452  f3bf				  -	      TAX		; save it for later
   1453  f3bf					      endif
   1454  f3bf
   1455  f3bf				   overscanloop
   1456  f3bf		       ad 84 02 	      lda	INTIM	;wait for sync
   1457  f3c2		       30 fb		      bmi	overscanloop
   1458  f3c4				   doneoverscan
   1459  f3c4
   1460  f3c4							;do VSYNC
   1461  f3c4
   1462  f3c4				  -	      ifconst	interlaced
   1463  f3c4				  -	      CPX	#4
   1464  f3c4				  -	      BNE	oddframevsync
   1465  f3c4					      endif
   1466  f3c4
   1467  f3c4		       a9 02		      lda	#2
   1468  f3c6		       85 02		      sta	WSYNC
   1469  f3c8		       85 00		      sta	VSYNC
   1470  f3ca		       85 02		      STA	WSYNC
   1471  f3cc		       85 02		      STA	WSYNC
   1472  f3ce		       4a		      lsr
   1473  f3cf		       85 02		      STA	WSYNC
   1474  f3d1		       85 00		      STA	VSYNC
   1475  f3d3		       85 01		      sta	VBLANK
   1476  f3d5					      ifnconst	overscan_time
   1477  f3d5		       a9 a5		      lda	#37+128
   1478  f3d7				  -	      else
   1479  f3d7				  -	      lda	#overscan_time+128
   1480  f3d7					      endif
   1481  f3d7		       8d 96 02 	      sta	TIM64T
   1482  f3da
   1483  f3da				  -	      ifconst	interlaced
   1484  f3da				  -	      jmp	postsync
   1485  f3da				  -
   1486  f3da				  -oddframevsync
   1487  f3da				  -	      sta	WSYNC
   1488  f3da				  -
   1489  f3da				  -	      LDA	($80,X)	; 11 waste
   1490  f3da				  -	      LDA	($80,X)	; 11 waste
   1491  f3da				  -	      LDA	($80,X)	; 11 waste
   1492  f3da				  -
   1493  f3da				  -	      lda	#2
   1494  f3da				  -	      sta	VSYNC
   1495  f3da				  -	      sta	WSYNC
   1496  f3da				  -	      sta	WSYNC
   1497  f3da				  -	      sta	WSYNC
   1498  f3da				  -
   1499  f3da				  -	      LDA	($80,X)	; 11 waste
   1500  f3da				  -	      LDA	($80,X)	; 11 waste
   1501  f3da				  -	      LDA	($80,X)	; 11 waste
   1502  f3da				  -
   1503  f3da				  -	      lda	#0
   1504  f3da				  -	      sta	VSYNC
   1505  f3da				  -	      sta	VBLANK
   1506  f3da				  -	      ifnconst	overscan_time
   1507  f3da				  -	      lda	#37+128
   1508  f3da				  -	      else
   1509  f3da				  -	      lda	#overscan_time+128
   1510  f3da				  -	      endif
   1511  f3da				  -	      sta	TIM64T
   1512  f3da				  -
   1513  f3da				  -postsync
   1514  f3da					      endif
   1515  f3da
   1516  f3da				  -	      ifconst	legacy
   1517  f3da				  -	      if	legacy < 100
   1518  f3da				  -	      ldx	#4
   1519  f3da				  -adjustloop
   1520  f3da				  -	      lda	player0x,x
   1521  f3da				  -	      sec
   1522  f3da				  -	      sbc	#14	;?
   1523  f3da				  -	      sta	player0x,x
   1524  f3da				  -	      dex
   1525  f3da				  -	      bpl	adjustloop
   1526  f3da				  -	      endif
   1527  f3da					      endif
   1528  f3da				  -	      if	((<*)>$e9)&&((<*)<$fa)
   1529  f3da				  -	      repeat	($fa-(<*))
   1530  f3da				  -	      nop
   1531  f3da				  -	      repend
   1532  f3da					      endif
   1533  f3da		       85 02		      sta	WSYNC
   1534  f3dc		       a2 04		      ldx	#4
      0  f3de					      SLEEP	3
      1  f3de				   .CYCLES    SET	3
      2  f3de
      3  f3de				  -	      IF	.CYCLES < 2
      4  f3de				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f3de				  -	      ERR
      6  f3de					      ENDIF
      7  f3de
      8  f3de					      IF	.CYCLES & 1
      9  f3de					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f3de		       04 00		      nop	0
     11  f3e0				  -	      ELSE
     12  f3e0				  -	      bit	VSYNC
     13  f3e0					      ENDIF
     14  f3e0				   .CYCLES    SET	.CYCLES - 3
     15  f3e0					      ENDIF
     16  f3e0
     17  f3e0				  -	      REPEAT	.CYCLES / 2
     18  f3e0				  -	      nop
     19  f3e0					      REPEND
   1536  f3e0				   HorPosLoop		; 5
   1537  f3e0		       b5 80		      lda	player0x,X	;+4 9
   1538  f3e2		       38		      sec		;+2 11
   1539  f3e3				   DivideLoop
   1540  f3e3		       e9 0f		      sbc	#15
   1541  f3e5		       b0 fc		      bcs	DivideLoop	;+4 15
   1542  f3e7		       95 9c		      sta	temp1,X	;+4 19
   1543  f3e9		       95 10		      sta	RESP0,X	;+4 23
   1544  f3eb		       85 02		      sta	WSYNC
   1545  f3ed		       ca		      dex
   1546  f3ee		       10 f0		      bpl	HorPosLoop	;+5 5
   1547  f3f0							; 4
   1548  f3f0
   1549  f3f0		       a2 04		      ldx	#4
   1550  f3f2		       b4 9c		      ldy	temp1,X
   1551  f3f4		       b9 50 f3 	      lda	repostable-256,Y
   1552  f3f7		       95 20		      sta	HMP0,X	;+14 18
   1553  f3f9
   1554  f3f9		       ca		      dex
   1555  f3fa		       b4 9c		      ldy	temp1,X
   1556  f3fc		       b9 50 f3 	      lda	repostable-256,Y
   1557  f3ff		       95 20		      sta	HMP0,X	;+14 32
   1558  f401
   1559  f401		       ca		      dex
   1560  f402		       b4 9c		      ldy	temp1,X
   1561  f404		       b9 50 f3 	      lda	repostable-256,Y
   1562  f407		       95 20		      sta	HMP0,X	;+14 46
   1563  f409
   1564  f409		       ca		      dex
   1565  f40a		       b4 9c		      ldy	temp1,X
   1566  f40c		       b9 50 f3 	      lda	repostable-256,Y
   1567  f40f		       95 20		      sta	HMP0,X	;+14 60
   1568  f411
   1569  f411		       ca		      dex
   1570  f412		       b4 9c		      ldy	temp1,X
   1571  f414		       b9 50 f3 	      lda	repostable-256,Y
   1572  f417		       95 20		      sta	HMP0,X	;+14 74
   1573  f419
   1574  f419		       85 02		      sta	WSYNC
   1575  f41b
   1576  f41b		       85 2a		      sta	HMOVE	;+3 3
   1577  f41d
   1578  f41d
   1579  f41d				  -	      ifconst	legacy
   1580  f41d				  -	      if	legacy < 100
   1581  f41d				  -	      ldx	#4
   1582  f41d				  -adjustloop2
   1583  f41d				  -	      lda	player0x,x
   1584  f41d				  -	      clc
   1585  f41d				  -	      adc	#14	;?
   1586  f41d				  -	      sta	player0x,x
   1587  f41d				  -	      dex
   1588  f41d				  -	      bpl	adjustloop2
   1589  f41d				  -	      endif
   1590  f41d					      endif
   1591  f41d
   1592  f41d
   1593  f41d
   1594  f41d
   1595  f41d							;set score pointers
   1596  f41d		       a7 95		      lax	score+2
   1597  f41f		       20 50 f4 	      jsr	scorepointerset
   1598  f422		       84 9b		      sty	scorepointers+5
   1599  f424		       86 98		      stx	scorepointers+2
   1600  f426		       a7 94		      lax	score+1
   1601  f428		       20 50 f4 	      jsr	scorepointerset
   1602  f42b		       84 9a		      sty	scorepointers+4
   1603  f42d		       86 97		      stx	scorepointers+1
   1604  f42f		       a7 93		      lax	score
   1605  f431		       20 50 f4 	      jsr	scorepointerset
   1606  f434		       84 99		      sty	scorepointers+3
   1607  f436		       86 96		      stx	scorepointers
   1608  f438
   1609  f438				   vblk
   1610  f438							; run possible vblank bB code
   1611  f438				  -	      ifconst	vblank_bB_code
   1612  f438				  -	      jsr	vblank_bB_code
   1613  f438					      endif
   1614  f438				   vblk2
   1615  f438		       ad 84 02 	      LDA	INTIM
   1616  f43b		       30 fb		      bmi	vblk2
   1617  f43d		       4c 34 f0 	      jmp	kernel
   1618  f440
   1619  f440
   1620  f440		       80 70 60 50*	      .byte.b	$80,$70,$60,$50,$40,$30,$20,$10,$00
   1621  f449		       f0 e0 d0 c0*	      .byte.b	$F0,$E0,$D0,$C0,$B0,$A0,$90
   1622  f450				   repostable
   1623  f450
   1624  f450				   scorepointerset
   1625  f450		       29 0f		      and	#$0F
   1626  f452		       0a		      asl
   1627  f453		       0a		      asl
   1628  f454		       0a		      asl
   1629  f455		       69 9c		      adc	#<scoretable
   1630  f457		       a8		      tay
   1631  f458		       8a		      txa
   1632  f459							; and #$F0
   1633  f459							; lsr
   1634  f459		       4b f0		      asr	#$F0
   1635  f45b		       69 9c		      adc	#<scoretable
   1636  f45d		       aa		      tax
   1637  f45e		       60		      rts
   1638  f45f				   game
   1639  f45f				   .
   1640  f45f							; 
   1641  f45f
   1642  f45f				   .L00 		;  rem teste jogo tipo breakout 1
   1643  f45f
   1644  f45f				   .L01 		;  rem por Heitor Maciel
   1645  f45f
   1646  f45f				   .
   1647  f45f							; 
   1648  f45f
   1649  f45f				   .L02 		;  set kernel_options no_blank_lines
   1650  f45f
   1651  f45f				   .
   1652  f45f							; 
   1653  f45f
   1654  f45f				   .
   1655  f45f							; 
   1656  f45f
   1657  f45f				   .L03 		;  a  =  0  :	d  =  0  :  e  =  0  :	f  =  0  :  g  =  0  :	h  =  0
   1658  f45f
   1659  f45f		       a9 00		      LDA	#0
   1660  f461		       85 d4		      STA	a
   1661  f463		       85 d7		      STA	d
   1662  f465		       85 d8		      STA	e
   1663  f467		       85 d9		      STA	f
   1664  f469		       85 da		      STA	g
   1665  f46b		       85 db		      STA	h
   1666  f46d				   .L04 		;  j  =  0  :	k  =  0  :  l  =  0  :	m  =  0  :  n  =  0  :	o  =  0  :  p  =  0  :	q  =  0  :  r  =  0
   1667  f46d
   1668  f46d		       a9 00		      LDA	#0
   1669  f46f		       85 dd		      STA	j
   1670  f471		       85 de		      STA	k
   1671  f473		       85 df		      STA	l
   1672  f475		       85 e0		      STA	m
   1673  f477		       85 e1		      STA	n
   1674  f479		       85 e2		      STA	o
   1675  f47b		       85 e3		      STA	p
   1676  f47d		       85 e4		      STA	q
   1677  f47f		       85 e5		      STA	r
   1678  f481				   .L05 		;  s  =  0  :	t  =  0  :  u  =  0  :	v  =  0  :  w  =  0  :	x  =  0  :  y  =  0
   1679  f481
   1680  f481		       a9 00		      LDA	#0
   1681  f483		       85 e6		      STA	s
   1682  f485		       85 e7		      STA	t
   1683  f487		       85 e8		      STA	u
   1684  f489		       85 e9		      STA	v
   1685  f48b		       85 ea		      STA	w
   1686  f48d		       85 eb		      STA	x
   1687  f48f		       85 ec		      STA	y
   1688  f491				   .
   1689  f491							; 
   1690  f491
   1691  f491				   .L06 		;  missile1x  =  50
   1692  f491
   1693  f491		       a9 32		      LDA	#50
   1694  f493		       85 83		      STA	missile1x
   1695  f495				   .L07 		;  missile1y  =  80
   1696  f495
   1697  f495		       a9 50		      LDA	#80
   1698  f497		       85 88		      STA	missile1y
   1699  f499				   .L08 		;  player0x  =  50
   1700  f499
   1701  f499		       a9 32		      LDA	#50
   1702  f49b		       85 80		      STA	player0x
   1703  f49d				   .L09 		;  player0y  =  80
   1704  f49d
   1705  f49d		       a9 50		      LDA	#80
   1706  f49f		       85 85		      STA	player0y
   1707  f4a1				   .L010		;  COLUP0  =  00
   1708  f4a1
   1709  f4a1		       a9 00		      LDA	#00
   1710  f4a3		       85 06		      STA	COLUP0
   1711  f4a5				   .
   1712  f4a5							; 
   1713  f4a5
   1714  f4a5				   .L011		;  playfield:
   1715  f4a5
   1716  f4a5				  -	      ifconst	pfres
   1717  f4a5				  -	      ldx	#(12>pfres)*(pfres*pfwidth-1)+(12<=pfres)*47
   1718  f4a5					      else
   1719  f4a5		       a2 2f		      ldx	#((12*pfwidth-1)*((12*pfwidth-1)<47))+(47*((12*pfwidth-1)>=47))
   1720  f4a7					      endif
   1721  f4a7		       4c da f4 	      jmp	pflabel0
   1722  f4aa				   PF_data0
   1723  f4aa		       ff ff		      .byte.b	%11111111, %11111111
   1724  f4ac					      if	(pfwidth>2)
   1725  f4ac		       ff ff		      .byte.b	%11111111, %11111111
   1726  f4ae					      endif
   1727  f4ae		       ff 7f		      .byte.b	%11111111, %01111111
   1728  f4b0					      if	(pfwidth>2)
   1729  f4b0		       aa 95		      .byte.b	%10101010, %10010101
   1730  f4b2					      endif
   1731  f4b2		       80 00		      .byte.b	%10000000, %00000000
   1732  f4b4					      if	(pfwidth>2)
   1733  f4b4		       00 80		      .byte.b	%00000000, %10000000
   1734  f4b6					      endif
   1735  f4b6		       80 00		      .byte.b	%10000000, %00000000
   1736  f4b8					      if	(pfwidth>2)
   1737  f4b8		       00 80		      .byte.b	%00000000, %10000000
   1738  f4ba					      endif
   1739  f4ba		       80 00		      .byte.b	%10000000, %00000000
   1740  f4bc					      if	(pfwidth>2)
   1741  f4bc		       00 80		      .byte.b	%00000000, %10000000
   1742  f4be					      endif
   1743  f4be		       80 00		      .byte.b	%10000000, %00000000
   1744  f4c0					      if	(pfwidth>2)
   1745  f4c0		       00 80		      .byte.b	%00000000, %10000000
   1746  f4c2					      endif
   1747  f4c2		       80 00		      .byte.b	%10000000, %00000000
   1748  f4c4					      if	(pfwidth>2)
   1749  f4c4		       00 80		      .byte.b	%00000000, %10000000
   1750  f4c6					      endif
   1751  f4c6		       80 00		      .byte.b	%10000000, %00000000
   1752  f4c8					      if	(pfwidth>2)
   1753  f4c8		       00 80		      .byte.b	%00000000, %10000000
   1754  f4ca					      endif
   1755  f4ca		       80 00		      .byte.b	%10000000, %00000000
   1756  f4cc					      if	(pfwidth>2)
   1757  f4cc		       00 80		      .byte.b	%00000000, %10000000
   1758  f4ce					      endif
   1759  f4ce		       80 00		      .byte.b	%10000000, %00000000
   1760  f4d0					      if	(pfwidth>2)
   1761  f4d0		       00 80		      .byte.b	%00000000, %10000000
   1762  f4d2					      endif
   1763  f4d2		       80 00		      .byte.b	%10000000, %00000000
   1764  f4d4					      if	(pfwidth>2)
   1765  f4d4		       00 80		      .byte.b	%00000000, %10000000
   1766  f4d6					      endif
   1767  f4d6		       80 00		      .byte.b	%10000000, %00000000
   1768  f4d8					      if	(pfwidth>2)
   1769  f4d8		       00 80		      .byte.b	%00000000, %10000000
   1770  f4da					      endif
   1771  f4da				   pflabel0
   1772  f4da		       bd aa f4 	      lda	PF_data0,x
   1773  f4dd		       95 a4		      sta	playfield,x
   1774  f4df		       ca		      dex
   1775  f4e0		       10 f8		      bpl	pflabel0
   1776  f4e2				   .L012		;  player0x  =  40
   1777  f4e2
   1778  f4e2		       a9 28		      LDA	#40
   1779  f4e4		       85 80		      STA	player0x
   1780  f4e6				   .L013		;  player0y  =  50
   1781  f4e6
   1782  f4e6		       a9 32		      LDA	#50
   1783  f4e8		       85 85		      STA	player0y
   1784  f4ea				   .
   1785  f4ea							; 
   1786  f4ea
   1787  f4ea				   .main
   1788  f4ea							; main
   1789  f4ea
   1790  f4ea				   .L014		;  COLUBK  =  12
   1791  f4ea
   1792  f4ea		       a9 0c		      LDA	#12
   1793  f4ec		       85 09		      STA	COLUBK
   1794  f4ee				   .L015		;  COLUPF  =  44
   1795  f4ee
   1796  f4ee		       a9 2c		      LDA	#44
   1797  f4f0		       85 08		      STA	COLUPF
   1798  f4f2				   .
   1799  f4f2							; 
   1800  f4f2
   1801  f4f2				   .L016		;  drawscreen
   1802  f4f2
   1803  f4f2		       20 bf f3 	      jsr	drawscreen
   1804  f4f5				   .
   1805  f4f5							; 
   1806  f4f5
   1807  f4f5				   .
   1808  f4f5							; 
   1809  f4f5
   1810  f4f5				   .L017		;  player0:
   1811  f4f5
   1812  f4f5		       a2 6f		      LDX	#<playerL017_0
   1813  f4f7		       86 8a		      STX	player0pointerlo
   1814  f4f9		       a9 f5		      LDA	#>playerL017_0
   1815  f4fb		       85 8b		      STA	player0pointerhi
   1816  f4fd		       a9 00		      LDA	#0
   1817  f4ff		       85 8e		      STA	player0height
   1818  f501				   .
   1819  f501							; 
   1820  f501
   1821  f501				   .L018		;  if joy0up then player0y  =	player0y  -  1
   1822  f501
   1823  f501		       a9 10		      lda	#$10
   1824  f503		       2c 80 02 	      bit	SWCHA
   1825  f506		       d0 02		      BNE	.skipL018
   1826  f508				   .condpart0
   1827  f508		       c6 85		      DEC	player0y
   1828  f50a				   .skipL018
   1829  f50a				   .L019		;  if joy0down then player0y  =  player0y  +  1
   1830  f50a
   1831  f50a		       a9 20		      lda	#$20
   1832  f50c		       2c 80 02 	      bit	SWCHA
   1833  f50f		       d0 02		      BNE	.skipL019
   1834  f511				   .condpart1
   1835  f511		       e6 85		      INC	player0y
   1836  f513				   .skipL019
   1837  f513				   .L020		;  if joy0left then player0x  =  player0x  -  1
   1838  f513
   1839  f513		       2c 80 02 	      bit	SWCHA
   1840  f516		       70 02		      BVS	.skipL020
   1841  f518				   .condpart2
   1842  f518		       c6 80		      DEC	player0x
   1843  f51a				   .skipL020
   1844  f51a				   .L021		;  if joy0right then player0x	=  player0x  +	1
   1845  f51a
   1846  f51a		       2c 80 02 	      bit	SWCHA
   1847  f51d		       30 02		      BMI	.skipL021
   1848  f51f				   .condpart3
   1849  f51f		       e6 80		      INC	player0x
   1850  f521				   .skipL021
   1851  f521				   .
   1852  f521							; 
   1853  f521
   1854  f521				   .
   1855  f521							; 
   1856  f521
   1857  f521				   .L022		;  if !collision(playfield,player0) then goto __skip_limpa_tijolo
   1858  f521
   1859  f521		       24 02		      bit	CXP0FB
   1860  f523		       30 03		      BMI	.skipL022
   1861  f525				   .condpart4
   1862  f525		       4c 6c f5 	      jmp	.__skip_limpa_tijolo
   1863  f528
   1864  f528				   .skipL022
   1865  f528				   .
   1866  f528							; 
   1867  f528
   1868  f528				   .
   1869  f528							; 
   1870  f528
   1871  f528				   .
   1872  f528							; 
   1873  f528
   1874  f528				   .
   1875  f528							; 
   1876  f528
   1877  f528				   .L023		;  player0x =	(  ( player0x - 15 )  / 4 ) 
   1878  f528
   1879  f528							; complex statement detected
   1880  f528		       a5 80		      LDA	player0x
   1881  f52a		       38		      SEC
   1882  f52b		       e9 0f		      SBC	#15
   1883  f52d		       4a		      lsr
   1884  f52e		       4a		      lsr
   1885  f52f		       85 80		      STA	player0x
   1886  f531				   .L024		;  player0y =	( player0y - 1 )  / 8
   1887  f531
   1888  f531							; complex statement detected
   1889  f531		       a5 85		      LDA	player0y
   1890  f533		       38		      SEC
   1891  f534		       e9 01		      SBC	#1
   1892  f536		       4a		      lsr
   1893  f537		       4a		      lsr
   1894  f538		       4a		      lsr
   1895  f539		       85 85		      STA	player0y
   1896  f53b				   .L025		;  if pfread ( player0x ,  player0y )	then goto __colisao_normal else goto __colisao_corrigida
   1897  f53b
   1898  f53b		       a5 80		      LDA	player0x
   1899  f53d		       a4 85		      LDY	player0y
   1900  f53f		       20 6d f2 	      jsr	pfread
   1901  f542		       d0 06		      BNE	.skipL025
   1902  f544				   .condpart5
   1903  f544		       4c 4d f5 	      jmp	.__colisao_normal
   1904  f547		       4c 4d f5 	      jmp	.skipelse0
   1905  f54a				   .skipL025
   1906  f54a		       4c 59 f5 	      jmp	.__colisao_corrigida
   1907  f54d
   1908  f54d				   .skipelse0
   1909  f54d				   .__colisao_normal
   1910  f54d							; __colisao_normal
   1911  f54d
   1912  f54d				   .L026		;  pfpixel player0x player0y off
   1913  f54d
   1914  f54d		       a2 01		      LDX	#1
   1915  f54f		       a4 85		      LDY	player0y
   1916  f551		       a5 80		      LDA	player0x
   1917  f553		       20 7a f2 	      jsr	pfpixel
   1918  f556				   .L027		;  goto __skip_colisao_normal
   1919  f556
   1920  f556		       4c 64 f5 	      jmp	.__skip_colisao_normal
   1921  f559
   1922  f559				   .__colisao_corrigida
   1923  f559							; __colisao_corrigida
   1924  f559
   1925  f559				   .L028		;  player0x  =  player0x  +  1
   1926  f559
   1927  f559		       e6 80		      INC	player0x
   1928  f55b				   .L029		;  pfpixel player0x player0y off
   1929  f55b
   1930  f55b		       a2 01		      LDX	#1
   1931  f55d		       a4 85		      LDY	player0y
   1932  f55f		       a5 80		      LDA	player0x
   1933  f561		       20 7a f2 	      jsr	pfpixel
   1934  f564				   .__skip_colisao_normal
   1935  f564							; __skip_colisao_normal
   1936  f564
   1937  f564				   .
   1938  f564							; 
   1939  f564
   1940  f564				   .
   1941  f564							; 
   1942  f564
   1943  f564				   .
   1944  f564							; 
   1945  f564
   1946  f564				   .L030		;  player0x  =  40
   1947  f564
   1948  f564		       a9 28		      LDA	#40
   1949  f566		       85 80		      STA	player0x
   1950  f568				   .L031		;  player0y  =  80
   1951  f568
   1952  f568		       a9 50		      LDA	#80
   1953  f56a		       85 85		      STA	player0y
   1954  f56c				   .
   1955  f56c							; 
   1956  f56c
   1957  f56c				   .__skip_limpa_tijolo
   1958  f56c							; __skip_limpa_tijolo
   1959  f56c
   1960  f56c				   .
   1961  f56c							; 
   1962  f56c
   1963  f56c				   .
   1964  f56c							; 
   1965  f56c
   1966  f56c				   .L032		;  goto main
   1967  f56c		       4c ea f4 	      jmp	.main
   1968  f56f				  -	      if	(<*) > (<(*+0))
   1969  f56f				  -	      repeat	($100-<*)
   1970  f56f				  -	      .byte	0
   1971  f56f				  -	      repend
   1972  f56f					      endif
   1973  f56f				   playerL017_0
   1974  f56f		       3c		      .byte.b	%00111100
   1975  f570					      if	ECHOFIRST
      2604 bytes of ROM space left
   1976  f570					      echo	"    ",[(scoretable - *)]d , "bytes of ROM space left")
   1977  f570					      endif
   1978  f570		       00 01	   ECHOFIRST  =	1
   1979  f570
   1980  f570
   1981  f570
   1982  f570							; Provided under the CC0 license. See the included LICENSE.txt for details.
   1983  f570
   1984  f570							; feel free to modify the score graphics - just keep each digit 8 high
   1985  f570							; and keep the conditional compilation stuff intact
   1986  f570				  -	      ifconst	ROM2k
   1987  f570				  -	      ORG	$F7AC-8
   1988  f570					      else
   1989  f570				  -	      ifconst	bankswitch
   1990  f570				  -	      if	bankswitch == 8
   1991  f570				  -	      ORG	$2F94-bscode_length
   1992  f570				  -	      RORG	$FF94-bscode_length
   1993  f570				  -	      endif
   1994  f570				  -	      if	bankswitch == 16
   1995  f570				  -	      ORG	$4F94-bscode_length
   1996  f570				  -	      RORG	$FF94-bscode_length
   1997  f570				  -	      endif
   1998  f570				  -	      if	bankswitch == 32
   1999  f570				  -	      ORG	$8F94-bscode_length
   2000  f570				  -	      RORG	$FF94-bscode_length
   2001  f570				  -	      endif
   2002  f570				  -	      if	bankswitch == 64
   2003  f570				  -	      ORG	$10F80-bscode_length
   2004  f570				  -	      RORG	$1FF80-bscode_length
   2005  f570				  -	      endif
   2006  f570					      else
   2007  ff9c					      ORG	$FF9C
   2008  ff9c					      endif
   2009  ff9c					      endif
   2010  ff9c
   2011  ff9c							; font equates
   2012  ff9c		       00 01	   .21stcentury =	1
   2013  ff9c		       00 02	   alarmclock =	2
   2014  ff9c		       00 03	   handwritten =	3
   2015  ff9c		       00 04	   interrupted =	4
   2016  ff9c		       00 05	   retroputer =	5
   2017  ff9c		       00 06	   whimsey    =	6
   2018  ff9c		       00 07	   tiny       =	7
   2019  ff9c		       00 08	   hex	      =	8
   2020  ff9c
   2021  ff9c				  -	      ifconst	font
   2022  ff9c				  -	      if	font == hex
   2023  ff9c				  -	      ORG	. - 48
   2024  ff9c				  -	      endif
   2025  ff9c					      endif
   2026  ff9c
   2027  ff9c				   scoretable
   2028  ff9c
   2029  ff9c				  -	      ifconst	font
   2030  ff9c				  -	      if	font == .21stcentury
   2031  ff9c				  -	      include	"score_graphics.asm.21stcentury"
   2032  ff9c				  -	      endif
   2033  ff9c				  -	      if	font == alarmclock
   2034  ff9c				  -	      include	"score_graphics.asm.alarmclock"
   2035  ff9c				  -	      endif
   2036  ff9c				  -	      if	font == handwritten
   2037  ff9c				  -	      include	"score_graphics.asm.handwritten"
   2038  ff9c				  -	      endif
   2039  ff9c				  -	      if	font == interrupted
   2040  ff9c				  -	      include	"score_graphics.asm.interrupted"
   2041  ff9c				  -	      endif
   2042  ff9c				  -	      if	font == retroputer
   2043  ff9c				  -	      include	"score_graphics.asm.retroputer"
   2044  ff9c				  -	      endif
   2045  ff9c				  -	      if	font == whimsey
   2046  ff9c				  -	      include	"score_graphics.asm.whimsey"
   2047  ff9c				  -	      endif
   2048  ff9c				  -	      if	font == tiny
   2049  ff9c				  -	      include	"score_graphics.asm.tiny"
   2050  ff9c				  -	      endif
   2051  ff9c				  -	      if	font == hex
   2052  ff9c				  -	      include	"score_graphics.asm.hex"
   2053  ff9c				  -	      endif
   2054  ff9c					      else		; default font
   2055  ff9c
   2056  ff9c		       3c		      .byte.b	%00111100
   2057  ff9d		       66		      .byte.b	%01100110
   2058  ff9e		       66		      .byte.b	%01100110
   2059  ff9f		       66		      .byte.b	%01100110
   2060  ffa0		       66		      .byte.b	%01100110
   2061  ffa1		       66		      .byte.b	%01100110
   2062  ffa2		       66		      .byte.b	%01100110
   2063  ffa3		       3c		      .byte.b	%00111100
   2064  ffa4
   2065  ffa4		       7e		      .byte.b	%01111110
   2066  ffa5		       18		      .byte.b	%00011000
   2067  ffa6		       18		      .byte.b	%00011000
   2068  ffa7		       18		      .byte.b	%00011000
   2069  ffa8		       18		      .byte.b	%00011000
   2070  ffa9		       38		      .byte.b	%00111000
   2071  ffaa		       18		      .byte.b	%00011000
   2072  ffab		       08		      .byte.b	%00001000
   2073  ffac
   2074  ffac		       7e		      .byte.b	%01111110
   2075  ffad		       60		      .byte.b	%01100000
   2076  ffae		       60		      .byte.b	%01100000
   2077  ffaf		       3c		      .byte.b	%00111100
   2078  ffb0		       06		      .byte.b	%00000110
   2079  ffb1		       06		      .byte.b	%00000110
   2080  ffb2		       46		      .byte.b	%01000110
   2081  ffb3		       3c		      .byte.b	%00111100
   2082  ffb4
   2083  ffb4		       3c		      .byte.b	%00111100
   2084  ffb5		       46		      .byte.b	%01000110
   2085  ffb6		       06		      .byte.b	%00000110
   2086  ffb7		       06		      .byte.b	%00000110
   2087  ffb8		       1c		      .byte.b	%00011100
   2088  ffb9		       06		      .byte.b	%00000110
   2089  ffba		       46		      .byte.b	%01000110
   2090  ffbb		       3c		      .byte.b	%00111100
   2091  ffbc
   2092  ffbc		       0c		      .byte.b	%00001100
   2093  ffbd		       0c		      .byte.b	%00001100
   2094  ffbe		       7e		      .byte.b	%01111110
   2095  ffbf		       4c		      .byte.b	%01001100
   2096  ffc0		       4c		      .byte.b	%01001100
   2097  ffc1		       2c		      .byte.b	%00101100
   2098  ffc2		       1c		      .byte.b	%00011100
   2099  ffc3		       0c		      .byte.b	%00001100
   2100  ffc4
   2101  ffc4		       3c		      .byte.b	%00111100
   2102  ffc5		       46		      .byte.b	%01000110
   2103  ffc6		       06		      .byte.b	%00000110
   2104  ffc7		       06		      .byte.b	%00000110
   2105  ffc8		       3c		      .byte.b	%00111100
   2106  ffc9		       60		      .byte.b	%01100000
   2107  ffca		       60		      .byte.b	%01100000
   2108  ffcb		       7e		      .byte.b	%01111110
   2109  ffcc
   2110  ffcc		       3c		      .byte.b	%00111100
   2111  ffcd		       66		      .byte.b	%01100110
   2112  ffce		       66		      .byte.b	%01100110
   2113  ffcf		       66		      .byte.b	%01100110
   2114  ffd0		       7c		      .byte.b	%01111100
   2115  ffd1		       60		      .byte.b	%01100000
   2116  ffd2		       62		      .byte.b	%01100010
   2117  ffd3		       3c		      .byte.b	%00111100
   2118  ffd4
   2119  ffd4		       30		      .byte.b	%00110000
   2120  ffd5		       30		      .byte.b	%00110000
   2121  ffd6		       30		      .byte.b	%00110000
   2122  ffd7		       18		      .byte.b	%00011000
   2123  ffd8		       0c		      .byte.b	%00001100
   2124  ffd9		       06		      .byte.b	%00000110
   2125  ffda		       42		      .byte.b	%01000010
   2126  ffdb		       3e		      .byte.b	%00111110
   2127  ffdc
   2128  ffdc		       3c		      .byte.b	%00111100
   2129  ffdd		       66		      .byte.b	%01100110
   2130  ffde		       66		      .byte.b	%01100110
   2131  ffdf		       66		      .byte.b	%01100110
   2132  ffe0		       3c		      .byte.b	%00111100
   2133  ffe1		       66		      .byte.b	%01100110
   2134  ffe2		       66		      .byte.b	%01100110
   2135  ffe3		       3c		      .byte.b	%00111100
   2136  ffe4
   2137  ffe4		       3c		      .byte.b	%00111100
   2138  ffe5		       46		      .byte.b	%01000110
   2139  ffe6		       06		      .byte.b	%00000110
   2140  ffe7		       3e		      .byte.b	%00111110
   2141  ffe8		       66		      .byte.b	%01100110
   2142  ffe9		       66		      .byte.b	%01100110
   2143  ffea		       66		      .byte.b	%01100110
   2144  ffeb		       3c		      .byte.b	%00111100
   2145  ffec
   2146  ffec					      ifnconst	DPC_kernel_options
   2147  ffec
   2148  ffec		       00		      .byte.b	%00000000
   2149  ffed		       00		      .byte.b	%00000000
   2150  ffee		       00		      .byte.b	%00000000
   2151  ffef		       00		      .byte.b	%00000000
   2152  fff0		       00		      .byte.b	%00000000
   2153  fff1		       00		      .byte.b	%00000000
   2154  fff2		       00		      .byte.b	%00000000
   2155  fff3		       00		      .byte.b	%00000000
   2156  fff4
   2157  fff4					      endif
   2158  fff4
   2159  fff4					      endif
   2160  fff4
   2161  fff4				  -	      ifconst	ROM2k
   2162  fff4				  -	      ORG	$F7FC
   2163  fff4					      else
   2164  fff4				  -	      ifconst	bankswitch
   2165  fff4				  -	      if	bankswitch == 8
   2166  fff4				  -	      ORG	$2FF4-bscode_length
   2167  fff4				  -	      RORG	$FFF4-bscode_length
   2168  fff4				  -	      endif
   2169  fff4				  -	      if	bankswitch == 16
   2170  fff4				  -	      ORG	$4FF4-bscode_length
   2171  fff4				  -	      RORG	$FFF4-bscode_length
   2172  fff4				  -	      endif
   2173  fff4				  -	      if	bankswitch == 32
   2174  fff4				  -	      ORG	$8FF4-bscode_length
   2175  fff4				  -	      RORG	$FFF4-bscode_length
   2176  fff4				  -	      endif
   2177  fff4				  -	      if	bankswitch == 64
   2178  fff4				  -	      ORG	$10FE0-bscode_length
   2179  fff4				  -	      RORG	$1FFE0-bscode_length
   2180  fff4				  -	      endif
   2181  fff4					      else
   2182  fffc					      ORG	$FFFC
   2183  fffc					      endif
   2184  fffc					      endif
   2185  fffc							; Provided under the CC0 license. See the included LICENSE.txt for details.
   2186  fffc
   2187  fffc				  -	      ifconst	bankswitch
   2188  fffc				  -	      if	bankswitch == 8
   2189  fffc				  -	      ORG	$2FFC
   2190  fffc				  -	      RORG	$FFFC
   2191  fffc				  -	      endif
   2192  fffc				  -	      if	bankswitch == 16
   2193  fffc				  -	      ORG	$4FFC
   2194  fffc				  -	      RORG	$FFFC
   2195  fffc				  -	      endif
   2196  fffc				  -	      if	bankswitch == 32
   2197  fffc				  -	      ORG	$8FFC
   2198  fffc				  -	      RORG	$FFFC
   2199  fffc				  -	      endif
   2200  fffc				  -	      if	bankswitch == 64
   2201  fffc				  -	      ORG	$10FF0
   2202  fffc				  -	      RORG	$1FFF0
   2203  fffc				  -	      lda	$ffe0	; we use wasted space to assist stella with EF format auto-detection
   2204  fffc				  -	      ORG	$10FF8
   2205  fffc				  -	      RORG	$1FFF8
   2206  fffc				  -	      ifconst	superchip
   2207  fffc				  -	      .byte	"E","F","S","C"
   2208  fffc				  -	      else
   2209  fffc				  -	      .byte	"E","F","E","F"
   2210  fffc				  -	      endif
   2211  fffc				  -	      ORG	$10FFC
   2212  fffc				  -	      RORG	$1FFFC
   2213  fffc				  -	      endif
   2214  fffc					      else
   2215  fffc				  -	      ifconst	ROM2k
   2216  fffc				  -	      ORG	$F7FC
   2217  fffc					      else
   2218  fffc					      ORG	$FFFC
   2219  fffc					      endif
   2220  fffc					      endif
   2221  fffc		       00 f0		      .word.w	(start & $ffff)
   2222  fffe		       00 f0		      .word.w	(start & $ffff)
