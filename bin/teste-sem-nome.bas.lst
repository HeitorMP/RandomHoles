------- FILE d:\Batari Projects\RandomHoles\RandomHoles\teste-sem-nome.bas.asm LEVEL 1 PASS 3
      1  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  10000 ????
      3  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 2 PASS 3
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  10000 ????
      3  10000 ????						; VCS.H
      4  10000 ????						; Version 1.05, 13/November/2003
      5  10000 ????
      6  10000 ????		00 69	    VERSION_VCS =	105
      7  10000 ????
      8  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      9  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
     11  10000 ????						;
     12  10000 ????						; This file defines hardware registers and memory mapping for the
     13  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     14  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  10000 ????						; available at at http://www.atari2600.org/dasm
     16  10000 ????						;
     17  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     18  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     19  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     20  10000 ????						; with your views.  Please contribute, if you think you can improve this
     21  10000 ????						; file!
     22  10000 ????						;
     23  10000 ????						; Latest Revisions...
     24  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     25  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     26  10000 ????						;			    This will allow conditional code to verify VCS.H being
     27  10000 ????						;			    used for code assembly.
     28  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     29  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     30  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     31  10000 ????						;			 readability issue, and binary compatibility with disassembled
     32  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     33  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     34  10000 ????						;			 which was broken by the use of segments in this file, as
     35  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     36  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     37  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     38  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     39  10000 ????						;						   it is safe to leave it undefined, and the base address will
     40  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     41  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     42  10000 ????						;			  - register definitions are now generated through assignment
     43  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     44  10000 ????						;			    address architecture.
     45  10000 ????						; 1.0	22/MAR/2003		Initial release
     46  10000 ????
     47  10000 ????
     48  10000 ????						;-------------------------------------------------------------------------------
     49  10000 ????
     50  10000 ????						; TIA_BASE_ADDRESS
     51  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     52  10000 ????						; Normally 0, the base address should (externally, before including this file)
     53  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     54  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     55  10000 ????						; < $40 as a bankswitch.
     56  10000 ????
     57  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     58  10000 ????			   -TIA_BASE_ADDRESS =	0
     59  10000 ????				       ENDIF
     60  10000 ????
     61  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     62  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     63  10000 ????						; *OR* by declaring the label before including this file, eg:
     64  10000 ????						; TIA_BASE_ADDRESS = $40
     65  10000 ????						;   include "vcs.h"
     66  10000 ????
     67  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     68  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     69  10000 ????						; for the mirrored ROM hardware registers.
     70  10000 ????
     71  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     72  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     73  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     74  10000 ????
     75  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     76  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     77  10000 ????				       ENDIF
     78  10000 ????
     79  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     80  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     81  10000 ????				       ENDIF
     82  10000 ????
     83  10000 ????						;-------------------------------------------------------------------------------
     84  10000 ????
     85 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     86 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     87 U0000
     88 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     89 U0000
     90 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     91 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     92 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     93 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     94 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     95 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     96 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     97 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     98 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     99 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
    100 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
    101 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    102 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    103 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    104 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    105 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    106 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    107 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    108 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    109 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    110 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    111 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    112 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    113 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    114 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    115 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    116 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    117 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    118 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    119 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    120 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    121 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    122 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    123 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    124 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    125 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    126 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    127 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    128 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    129 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    130 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    131 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    132 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    133 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    134 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    135 U002d
    136 U002d							;-------------------------------------------------------------------------------
    137 U002d
    138 U000e ????				      SEG.U	TIA_REGISTERS_READ
    139 U0000					      ORG	TIA_BASE_READ_ADDRESS
    140 U0000
    141 U0000							;											bit 7	 bit 6
    142 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    143 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    144 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    145 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    146 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    147 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    148 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    149 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    150 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    151 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    152 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    153 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    154 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    155 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    156 U000e
    157 U000e							;-------------------------------------------------------------------------------
    158 U000e
    159 U0298 ????				      SEG.U	RIOT
    160 U0280					      ORG	$280
    161 U0280
    162 U0280							; RIOT MEMORY MAP
    163 U0280
    164 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    165 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    166 U0281
    167 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    168 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    169 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    170 U0284		       00	   INTIM      ds	1	; $284		Timer output
    171 U0285
    172 U0285		       00	   TIMINT     ds	1	; $285
    173 U0286
    174 U0286							; Unused/undefined registers ($285-$294)
    175 U0286
    176 U0286		       00		      ds	1	; $286
    177 U0287		       00		      ds	1	; $287
    178 U0288		       00		      ds	1	; $288
    179 U0289		       00		      ds	1	; $289
    180 U028a		       00		      ds	1	; $28A
    181 U028b		       00		      ds	1	; $28B
    182 U028c		       00		      ds	1	; $28C
    183 U028d		       00		      ds	1	; $28D
    184 U028e		       00		      ds	1	; $28E
    185 U028f		       00		      ds	1	; $28F
    186 U0290		       00		      ds	1	; $290
    187 U0291		       00		      ds	1	; $291
    188 U0292		       00		      ds	1	; $292
    189 U0293		       00		      ds	1	; $293
    190 U0294
    191 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    192 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    193 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    194 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    195 U0298
    196 U0298							;-------------------------------------------------------------------------------
    197 U0298							; The following required for back-compatibility with code which does not use
    198 U0298							; segments.
    199 U0298
    200  10000 ????				       SEG
    201  10000 ????
    202  10000 ????						; EOF
------- FILE d:\Batari Projects\RandomHoles\RandomHoles\teste-sem-nome.bas.asm
------- FILE macro.h LEVEL 2 PASS 3
      0  10000 ????				       include	"macro.h"
      1  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  10000 ????
      3  10000 ????						; MACRO.H
      4  10000 ????						; Version 1.05, 13/NOVEMBER/2003
      5  10000 ????
      6  10000 ????		00 69	    VERSION_MACRO =	105
      7  10000 ????
      8  10000 ????						;
      9  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
     11  10000 ????						;
     12  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     13  10000 ????						; It is distributed as a companion machine-specific support package
     14  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  10000 ????						; available at at http://www.atari2600.org/dasm
     16  10000 ????						;
     17  10000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     18  10000 ????						; contents, or would like to add something, please write to me
     19  10000 ????						; (atari2600@taswegian.com) with your contribution.
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						;
     23  10000 ????						; 1.05  14/NOV/2003	  - Added VERSION_MACRO equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify MACRO.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     27  10000 ????						;
     28  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     29  10000 ????						;
     30  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     31  10000 ????						;			   (standardised macro for vertical synch code)
     32  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     33  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     34  10000 ????						; 1.0	22/MAR/2003		Initial release
     35  10000 ????
     36  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     37  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     38  10000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     39  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     40  10000 ????						;   registers and require them to be defined first).
     41  10000 ????
     42  10000 ????						; Available macros...
     43  10000 ????						;   SLEEP n		 - sleep for n cycles
     44  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     45  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     46  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     47  10000 ????
     48  10000 ????						;-------------------------------------------------------------------------------
     49  10000 ????						; SLEEP duration
     50  10000 ????						; Original author: Thomas Jentzsch
     51  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     52  10000 ????						; useful for code where precise timing is required.
     53  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     54  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     55  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     56  10000 ????
     57  10000 ????				       MAC	sleep
     58  10000 ????			    .CYCLES    SET	{1}
     59  10000 ????
     60  10000 ????				       IF	.CYCLES < 2
     61  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     62  10000 ????				       ERR
     63  10000 ????				       ENDIF
     64  10000 ????
     65  10000 ????				       IF	.CYCLES & 1
     66  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     67  10000 ????				       nop	0
     68  10000 ????				       ELSE
     69  10000 ????				       bit	VSYNC
     70  10000 ????				       ENDIF
     71  10000 ????			    .CYCLES    SET	.CYCLES - 3
     72  10000 ????				       ENDIF
     73  10000 ????
     74  10000 ????				       REPEAT	.CYCLES / 2
     75  10000 ????				       nop
     76  10000 ????				       REPEND
     77  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     78  10000 ????
     79  10000 ????						;-------------------------------------------------------------------------------
     80  10000 ????						; VERTICAL_SYNC
     81  10000 ????						; Original author: Manuel Polik
     82  10000 ????						; Inserts the code required for a proper 3 scannline 
     83  10000 ????						; vertical sync sequence
     84  10000 ????						;
     85  10000 ????						; Note: Alters the accumulator
     86  10000 ????						;
     87  10000 ????						; IN:
     88  10000 ????						; OUT: A = 1
     89  10000 ????
     90  10000 ????				       MAC	vertical_sync
     91  10000 ????				       LDA	#$02	; A = VSYNC enable
     92  10000 ????				       STA	WSYNC	; Finish current line
     93  10000 ????				       STA	VSYNC	; Start vertical sync
     94  10000 ????				       STA	WSYNC	; 1st line vertical sync
     95  10000 ????				       STA	WSYNC	; 2nd line vertical sync
     96  10000 ????				       LSR		; A = VSYNC disable
     97  10000 ????				       STA	WSYNC	; 3rd line vertical sync
     98  10000 ????				       STA	VSYNC	; Stop vertical sync
     99  10000 ????				       ENDM
    100  10000 ????
    101  10000 ????						;-------------------------------------------------------------------------------
    102  10000 ????						; CLEAN_START
    103  10000 ????						; Original author: Andrew Davie
    104  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    105  10000 ????						; Sets stack pointer to $FF, and all registers to 0
    106  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    107  10000 ????						; Use as very first section of code on boot (ie: at reset)
    108  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    109  10000 ????
    110  10000 ????				       MAC	clean_start
    111  10000 ????				       sei
    112  10000 ????				       cld
    113  10000 ????
    114  10000 ????				       ldx	#0
    115  10000 ????				       txa
    116  10000 ????				       tay
    117  10000 ????			    .CLEAR_STACK dex
    118  10000 ????				       txs
    119  10000 ????				       pha
    120  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  10000 ????
    122  10000 ????				       ENDM
    123  10000 ????
    124  10000 ????						;-------------------------------------------------------
    125  10000 ????						; SET_POINTER
    126  10000 ????						; Original author: Manuel Rotschkar
    127  10000 ????						;
    128  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  10000 ????						;
    130  10000 ????						; Usage: SET_POINTER pointer, address
    131  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  10000 ????						;
    133  10000 ????						; Note: Alters the accumulator, NZ flags
    134  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  10000 ????						; IN 2: absolute address
    136  10000 ????
    137  10000 ????				       MAC	set_pointer
    138  10000 ????			    .POINTER   SET	{1}
    139  10000 ????			    .ADDRESS   SET	{2}
    140  10000 ????
    141  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  10000 ????				       STA	.POINTER	; Store in pointer
    143  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    144  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    145  10000 ????
    146  10000 ????				       ENDM
    147  10000 ????
    148  10000 ????						; EOF
------- FILE d:\Batari Projects\RandomHoles\RandomHoles\teste-sem-nome.bas.asm
------- FILE 2600basic.h LEVEL 2 PASS 3
      0  10000 ????				       include	"2600basic.h"
      1  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  10000 ????
      3  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 3 PASS 3
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  10000 ????
      3  10000 ????						; VCS.H
      4  10000 ????						; Version 1.05, 13/November/2003
      5  10000 ????
      6  10000 ????		00 69	    VERSION_VCS =	105
      7  10000 ????
      8  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      9  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
     11  10000 ????						;
     12  10000 ????						; This file defines hardware registers and memory mapping for the
     13  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     14  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  10000 ????						; available at at http://www.atari2600.org/dasm
     16  10000 ????						;
     17  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     18  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     19  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     20  10000 ????						; with your views.  Please contribute, if you think you can improve this
     21  10000 ????						; file!
     22  10000 ????						;
     23  10000 ????						; Latest Revisions...
     24  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     25  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     26  10000 ????						;			    This will allow conditional code to verify VCS.H being
     27  10000 ????						;			    used for code assembly.
     28  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     29  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     30  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     31  10000 ????						;			 readability issue, and binary compatibility with disassembled
     32  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     33  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     34  10000 ????						;			 which was broken by the use of segments in this file, as
     35  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     36  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     37  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     38  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     39  10000 ????						;						   it is safe to leave it undefined, and the base address will
     40  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     41  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     42  10000 ????						;			  - register definitions are now generated through assignment
     43  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     44  10000 ????						;			    address architecture.
     45  10000 ????						; 1.0	22/MAR/2003		Initial release
     46  10000 ????
     47  10000 ????
     48  10000 ????						;-------------------------------------------------------------------------------
     49  10000 ????
     50  10000 ????						; TIA_BASE_ADDRESS
     51  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     52  10000 ????						; Normally 0, the base address should (externally, before including this file)
     53  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     54  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     55  10000 ????						; < $40 as a bankswitch.
     56  10000 ????
     57  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     58  10000 ????			   -TIA_BASE_ADDRESS =	0
     59  10000 ????				       ENDIF
     60  10000 ????
     61  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     62  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     63  10000 ????						; *OR* by declaring the label before including this file, eg:
     64  10000 ????						; TIA_BASE_ADDRESS = $40
     65  10000 ????						;   include "vcs.h"
     66  10000 ????
     67  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     68  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     69  10000 ????						; for the mirrored ROM hardware registers.
     70  10000 ????
     71  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     72  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     73  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     74  10000 ????
     75  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     76  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     77  10000 ????				       ENDIF
     78  10000 ????
     79  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     80  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     81  10000 ????				       ENDIF
     82  10000 ????
     83  10000 ????						;-------------------------------------------------------------------------------
     84  10000 ????
     85 U002d					      SEG.U	TIA_REGISTERS_WRITE
     86 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     87 U0000
     88 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     89 U0000
     90 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     91 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     92 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     93 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     94 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     95 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     96 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     97 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     98 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     99 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
    100 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
    101 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    102 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    103 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    104 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    105 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    106 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    107 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    108 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    109 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    110 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    111 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    112 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    113 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    114 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    115 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    116 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    117 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    118 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    119 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    120 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    121 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    122 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    123 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    124 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    125 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    126 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    127 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    128 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    129 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    130 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    131 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    132 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    133 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    134 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    135 U002d
    136 U002d							;-------------------------------------------------------------------------------
    137 U002d
    138 U000e					      SEG.U	TIA_REGISTERS_READ
    139 U0000					      ORG	TIA_BASE_READ_ADDRESS
    140 U0000
    141 U0000							;											bit 7	 bit 6
    142 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    143 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    144 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    145 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    146 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    147 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    148 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    149 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    150 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    151 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    152 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    153 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    154 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    155 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    156 U000e
    157 U000e							;-------------------------------------------------------------------------------
    158 U000e
    159 U0298					      SEG.U	RIOT
    160 U0280					      ORG	$280
    161 U0280
    162 U0280							; RIOT MEMORY MAP
    163 U0280
    164 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    165 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    166 U0281
    167 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    168 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    169 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    170 U0284		       00	   INTIM      ds	1	; $284		Timer output
    171 U0285
    172 U0285		       00	   TIMINT     ds	1	; $285
    173 U0286
    174 U0286							; Unused/undefined registers ($285-$294)
    175 U0286
    176 U0286		       00		      ds	1	; $286
    177 U0287		       00		      ds	1	; $287
    178 U0288		       00		      ds	1	; $288
    179 U0289		       00		      ds	1	; $289
    180 U028a		       00		      ds	1	; $28A
    181 U028b		       00		      ds	1	; $28B
    182 U028c		       00		      ds	1	; $28C
    183 U028d		       00		      ds	1	; $28D
    184 U028e		       00		      ds	1	; $28E
    185 U028f		       00		      ds	1	; $28F
    186 U0290		       00		      ds	1	; $290
    187 U0291		       00		      ds	1	; $291
    188 U0292		       00		      ds	1	; $292
    189 U0293		       00		      ds	1	; $293
    190 U0294
    191 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    192 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    193 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    194 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    195 U0298
    196 U0298							;-------------------------------------------------------------------------------
    197 U0298							; The following required for back-compatibility with code which does not use
    198 U0298							; segments.
    199 U0298
    200  10000 ????				       SEG
    201  10000 ????
    202  10000 ????						; EOF
------- FILE 2600basic.h
------- FILE macro.h LEVEL 3 PASS 3
      0  10000 ????				       include	"macro.h"
      1  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  10000 ????
      3  10000 ????						; MACRO.H
      4  10000 ????						; Version 1.05, 13/NOVEMBER/2003
      5  10000 ????
      6  10000 ????		00 69	    VERSION_MACRO =	105
      7  10000 ????
      8  10000 ????						;
      9  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
     11  10000 ????						;
     12  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     13  10000 ????						; It is distributed as a companion machine-specific support package
     14  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  10000 ????						; available at at http://www.atari2600.org/dasm
     16  10000 ????						;
     17  10000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     18  10000 ????						; contents, or would like to add something, please write to me
     19  10000 ????						; (atari2600@taswegian.com) with your contribution.
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						;
     23  10000 ????						; 1.05  14/NOV/2003	  - Added VERSION_MACRO equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify MACRO.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     27  10000 ????						;
     28  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     29  10000 ????						;
     30  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     31  10000 ????						;			   (standardised macro for vertical synch code)
     32  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     33  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     34  10000 ????						; 1.0	22/MAR/2003		Initial release
     35  10000 ????
     36  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     37  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     38  10000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     39  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     40  10000 ????						;   registers and require them to be defined first).
     41  10000 ????
     42  10000 ????						; Available macros...
     43  10000 ????						;   SLEEP n		 - sleep for n cycles
     44  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     45  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     46  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     47  10000 ????
     48  10000 ????						;-------------------------------------------------------------------------------
     49  10000 ????						; SLEEP duration
     50  10000 ????						; Original author: Thomas Jentzsch
     51  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     52  10000 ????						; useful for code where precise timing is required.
     53  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     54  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     55  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     56  10000 ????
     57  10000 ????				       MAC	sleep
     58  10000 ????			    .CYCLES    SET	{1}
     59  10000 ????
     60  10000 ????				       IF	.CYCLES < 2
     61  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     62  10000 ????				       ERR
     63  10000 ????				       ENDIF
     64  10000 ????
     65  10000 ????				       IF	.CYCLES & 1
     66  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     67  10000 ????				       nop	0
     68  10000 ????				       ELSE
     69  10000 ????				       bit	VSYNC
     70  10000 ????				       ENDIF
     71  10000 ????			    .CYCLES    SET	.CYCLES - 3
     72  10000 ????				       ENDIF
     73  10000 ????
     74  10000 ????				       REPEAT	.CYCLES / 2
     75  10000 ????				       nop
     76  10000 ????				       REPEND
     77  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     78  10000 ????
     79  10000 ????						;-------------------------------------------------------------------------------
     80  10000 ????						; VERTICAL_SYNC
     81  10000 ????						; Original author: Manuel Polik
     82  10000 ????						; Inserts the code required for a proper 3 scannline 
     83  10000 ????						; vertical sync sequence
     84  10000 ????						;
     85  10000 ????						; Note: Alters the accumulator
     86  10000 ????						;
     87  10000 ????						; IN:
     88  10000 ????						; OUT: A = 1
     89  10000 ????
     90  10000 ????				       MAC	vertical_sync
     91  10000 ????				       LDA	#$02	; A = VSYNC enable
     92  10000 ????				       STA	WSYNC	; Finish current line
     93  10000 ????				       STA	VSYNC	; Start vertical sync
     94  10000 ????				       STA	WSYNC	; 1st line vertical sync
     95  10000 ????				       STA	WSYNC	; 2nd line vertical sync
     96  10000 ????				       LSR		; A = VSYNC disable
     97  10000 ????				       STA	WSYNC	; 3rd line vertical sync
     98  10000 ????				       STA	VSYNC	; Stop vertical sync
     99  10000 ????				       ENDM
    100  10000 ????
    101  10000 ????						;-------------------------------------------------------------------------------
    102  10000 ????						; CLEAN_START
    103  10000 ????						; Original author: Andrew Davie
    104  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    105  10000 ????						; Sets stack pointer to $FF, and all registers to 0
    106  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    107  10000 ????						; Use as very first section of code on boot (ie: at reset)
    108  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    109  10000 ????
    110  10000 ????				       MAC	clean_start
    111  10000 ????				       sei
    112  10000 ????				       cld
    113  10000 ????
    114  10000 ????				       ldx	#0
    115  10000 ????				       txa
    116  10000 ????				       tay
    117  10000 ????			    .CLEAR_STACK dex
    118  10000 ????				       txs
    119  10000 ????				       pha
    120  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  10000 ????
    122  10000 ????				       ENDM
    123  10000 ????
    124  10000 ????						;-------------------------------------------------------
    125  10000 ????						; SET_POINTER
    126  10000 ????						; Original author: Manuel Rotschkar
    127  10000 ????						;
    128  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  10000 ????						;
    130  10000 ????						; Usage: SET_POINTER pointer, address
    131  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  10000 ????						;
    133  10000 ????						; Note: Alters the accumulator, NZ flags
    134  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  10000 ????						; IN 2: absolute address
    136  10000 ????
    137  10000 ????				       MAC	set_pointer
    138  10000 ????			    .POINTER   SET	{1}
    139  10000 ????			    .ADDRESS   SET	{2}
    140  10000 ????
    141  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  10000 ????				       STA	.POINTER	; Store in pointer
    143  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    144  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    145  10000 ????
    146  10000 ????				       ENDM
    147  10000 ????
    148  10000 ????						; EOF
------- FILE 2600basic.h
------- FILE 2600basic_variable_redefs.h LEVEL 3 PASS 3
      0  10000 ????				       include	"2600basic_variable_redefs.h"
      1  10000 ????						; This file contains variable mapping and other information for the current project.
      2  10000 ????
      3  10000 ????		00 17	    musicData2_length =	.skipL0176-musicData2
      4  10000 ????
      5  10000 ????		00 17	    musicData1_length =	.skipL0175-musicData1
      6  10000 ????
      7  10000 ????		00 e0	    _Ch1_Sound =	m
      8  10000 ????
      9  10000 ????		00 de	    musicTimer =	k
     10  10000 ????
     11  10000 ????		00 db	    musicPointer =	h
     12  10000 ????
     13  10000 ????		00 d4	    _Ch0_Sound =	a
     14  10000 ????
     15  10000 ????		00 e2	    _SC_Back   =	o
     16  10000 ????
     17  10000 ????		00 e1	    _animacao  =	n
     18  10000 ????
     19  10000 ????		00 e4	    _fases     =	q
     20  10000 ????
     21  10000 ????		00 df	    _dificuldade =	l
     22  10000 ????
     23  10000 ????		00 e6	    _cont_telas =	s
     24  10000 ????
     25  10000 ????		00 e5	    _cont_anima_morte =	r
     26  10000 ????
     27  10000 ????		00 da	    _duracao_som1 =	g
     28  10000 ????
     29  10000 ????		00 d9	    _duracao_som0 =	f
     30  10000 ????
     31  10000 ????		00 d8	    _cont_escudo =	e
     32  10000 ????
     33  10000 ????		00 dd	    _bit_supressores =	j
     34  10000 ????
     35  10000 ????		00 ed	    rand16     =	z
     36  10000 ????
     37  10000 ????		00 01	    pfscore    =	1
     38  10000 ????
     39  10000 ????		00 01	    no_blank_lines =	1
------- FILE 2600basic.h
      7  10000 ????
      8  10000 ????		00 80	    player0x   =	$80
      9  10000 ????		00 81	    player1x   =	$81
     10  10000 ????		00 82	    missile0x  =	$82
     11  10000 ????		00 83	    missile1x  =	$83
     12  10000 ????		00 84	    ballx      =	$84
     13  10000 ????
     14  10000 ????		00 85	    objecty    =	$85
     15  10000 ????		00 85	    player0y   =	$85
     16  10000 ????		00 86	    player1y   =	$86
     17  10000 ????		00 87	    missile1height =	$87
     18  10000 ????		00 88	    missile1y  =	$88
     19  10000 ????		00 89	    bally      =	$89
     20  10000 ????
     21  10000 ????		00 87	    player1color =	$87	; replaces missile 1
     22  10000 ????
     23  10000 ????		00 8a	    player0pointer =	$8A	;uses $8A-$8B
     24  10000 ????		00 8a	    player0pointerlo =	$8A
     25  10000 ????		00 8b	    player0pointerhi =	$8B
     26  10000 ????		00 8c	    player1pointer =	$8C	; $8C-$8D
     27  10000 ????		00 8c	    player1pointerlo =	$8C
     28  10000 ????		00 8d	    player1pointerhi =	$8D
     29  10000 ????
     30  10000 ????		00 8e	    player0height =	$8E
     31  10000 ????		00 8f	    player1height =	$8F
     32  10000 ????		00 90	    missile0height =	$90
     33  10000 ????		00 91	    missile0y  =	$91
     34  10000 ????		00 92	    ballheight =	$92
     35  10000 ????
     36  10000 ????		00 90	    currentpaddle =	$90	; replaces missile 0 (and can't be used with playercolor)
     37  10000 ????		00 91	    paddle     =	$91	; replaces missile 0
     38  10000 ????		00 82	    player0colorstore =	$82	; replaces missile 0
     39  10000 ????		00 90	    player0color =	$90	; replaces missile 0
     40  10000 ????
     41  10000 ????		00 93	    score      =	$93	; $93-$95
     42  10000 ????		00 96	    scorepointers =	$96	; $96-$9B = 6 bytes
     43  10000 ????		00 9c	    temp1      =	$9C	;used by kernel.  can be used in program too, but
     44  10000 ????		00 9d	    temp2      =	$9D	;are obliterated when drawscreen is called.
     45  10000 ????		00 9e	    temp3      =	$9E
     46  10000 ????		00 9f	    temp4      =	$9F
     47  10000 ????		00 a0	    temp5      =	$A0
     48  10000 ????		00 a1	    temp6      =	$A1
     49  10000 ????
     50  10000 ????		00 a2	    rand       =	$A2
     51  10000 ????		00 a3	    scorecolor =	$A3
     52  10000 ????
     53  10000 ????		00 a4	    var0       =	$A4
     54  10000 ????		00 a5	    var1       =	$A5
     55  10000 ????		00 a6	    var2       =	$A6
     56  10000 ????		00 a7	    var3       =	$A7
     57  10000 ????		00 a8	    var4       =	$A8
     58  10000 ????		00 a9	    var5       =	$A9
     59  10000 ????		00 aa	    var6       =	$AA
     60  10000 ????		00 ab	    var7       =	$AB
     61  10000 ????		00 ac	    var8       =	$AC
     62  10000 ????		00 ad	    var9       =	$AD
     63  10000 ????		00 ae	    var10      =	$AE
     64  10000 ????		00 af	    var11      =	$AF
     65  10000 ????		00 b0	    var12      =	$B0
     66  10000 ????		00 b1	    var13      =	$B1
     67  10000 ????		00 b2	    var14      =	$B2
     68  10000 ????		00 b3	    var15      =	$B3
     69  10000 ????		00 b4	    var16      =	$B4
     70  10000 ????		00 b5	    var17      =	$B5
     71  10000 ????		00 b6	    var18      =	$B6
     72  10000 ????		00 b7	    var19      =	$B7
     73  10000 ????		00 b8	    var20      =	$B8
     74  10000 ????		00 b9	    var21      =	$B9
     75  10000 ????		00 ba	    var22      =	$BA
     76  10000 ????		00 bb	    var23      =	$BB
     77  10000 ????		00 bc	    var24      =	$BC
     78  10000 ????		00 bd	    var25      =	$BD
     79  10000 ????		00 be	    var26      =	$BE
     80  10000 ????		00 bf	    var27      =	$BF
     81  10000 ????		00 c0	    var28      =	$C0
     82  10000 ????		00 c1	    var29      =	$C1
     83  10000 ????		00 c2	    var30      =	$C2
     84  10000 ????		00 c3	    var31      =	$C3
     85  10000 ????		00 c4	    var32      =	$C4
     86  10000 ????		00 c5	    var33      =	$C5
     87  10000 ????		00 c6	    var34      =	$C6
     88  10000 ????		00 c7	    var35      =	$C7
     89  10000 ????		00 c8	    var36      =	$C8
     90  10000 ????		00 c9	    var37      =	$C9
     91  10000 ????		00 ca	    var38      =	$CA
     92  10000 ????		00 cb	    var39      =	$CB
     93  10000 ????		00 cc	    var40      =	$CC
     94  10000 ????		00 cd	    var41      =	$CD
     95  10000 ????		00 ce	    var42      =	$CE
     96  10000 ????		00 cf	    var43      =	$CF
     97  10000 ????		00 d0	    var44      =	$D0
     98  10000 ????		00 d1	    var45      =	$D1
     99  10000 ????		00 d2	    var46      =	$D2
    100  10000 ????		00 d3	    var47      =	$D3
    101  10000 ????
    102  10000 ????		00 d4	    A	       =	$d4
    103  10000 ????		00 d4	    a	       =	$d4
    104  10000 ????		00 d5	    B	       =	$d5
    105  10000 ????		00 d5	    b	       =	$d5
    106  10000 ????		00 d6	    C	       =	$d6
    107  10000 ????		00 d6	    c	       =	$d6
    108  10000 ????		00 d7	    D	       =	$d7
    109  10000 ????		00 d7	    d	       =	$d7
    110  10000 ????		00 d8	    E	       =	$d8
    111  10000 ????		00 d8	    e	       =	$d8
    112  10000 ????		00 d9	    F	       =	$d9
    113  10000 ????		00 d9	    f	       =	$d9
    114  10000 ????		00 da	    G	       =	$da
    115  10000 ????		00 da	    g	       =	$da
    116  10000 ????		00 db	    H	       =	$db
    117  10000 ????		00 db	    h	       =	$db
    118  10000 ????		00 dc	    I	       =	$dc
    119  10000 ????		00 dc	    i	       =	$dc
    120  10000 ????		00 dd	    J	       =	$dd
    121  10000 ????		00 dd	    j	       =	$dd
    122  10000 ????		00 de	    K	       =	$de
    123  10000 ????		00 de	    k	       =	$de
    124  10000 ????		00 df	    L	       =	$df
    125  10000 ????		00 df	    l	       =	$df
    126  10000 ????		00 e0	    M	       =	$e0
    127  10000 ????		00 e0	    m	       =	$e0
    128  10000 ????		00 e1	    N	       =	$e1
    129  10000 ????		00 e1	    n	       =	$e1
    130  10000 ????		00 e2	    O	       =	$e2
    131  10000 ????		00 e2	    o	       =	$e2
    132  10000 ????		00 e3	    P	       =	$e3
    133  10000 ????		00 e3	    p	       =	$e3
    134  10000 ????		00 e4	    Q	       =	$e4
    135  10000 ????		00 e4	    q	       =	$e4
    136  10000 ????		00 e5	    R	       =	$e5
    137  10000 ????		00 e5	    r	       =	$e5
    138  10000 ????		00 e6	    S	       =	$e6
    139  10000 ????		00 e6	    s	       =	$e6
    140  10000 ????		00 e7	    T	       =	$e7
    141  10000 ????		00 e7	    t	       =	$e7
    142  10000 ????		00 e8	    U	       =	$e8
    143  10000 ????		00 e8	    u	       =	$e8
    144  10000 ????		00 e9	    V	       =	$e9
    145  10000 ????		00 e9	    v	       =	$e9
    146  10000 ????		00 ea	    W	       =	$ea
    147  10000 ????		00 ea	    w	       =	$ea
    148  10000 ????		00 eb	    X	       =	$eb
    149  10000 ????		00 eb	    x	       =	$eb
    150  10000 ????		00 ec	    Y	       =	$ec
    151  10000 ????		00 ec	    y	       =	$ec
    152  10000 ????		00 ed	    Z	       =	$ed
    153  10000 ????		00 ed	    z	       =	$ed
    154  10000 ????
    155  10000 ????		00 ee	    temp7      =	$ee	; This is used to aid in bankswitching
    156  10000 ????		00 ef	    playfieldpos =	$ef
    157  10000 ????
    158  10000 ????						; available for other uses, or if unused, provide more stack space
    159  10000 ????
    160  10000 ????		00 f0	    aux1       =	$f0
    161  10000 ????		00 f1	    aux2       =	$f1
    162  10000 ????		00 f2	    aux3       =	$f2
    163  10000 ????		00 f3	    aux4       =	$f3
    164  10000 ????		00 f4	    aux5       =	$f4
    165  10000 ????		00 f5	    aux6       =	$f5
    166  10000 ????
    167  10000 ????						; playfield color/height pointers
    168  10000 ????		00 f0	    pfcolortable =	$f0	; and $d5
    169  10000 ????		00 f0	    pfheighttable =	$f0	; and $d5
    170  10000 ????						; the above pointers are the same because if color and height are both used together,
    171  10000 ????						; they must used absolute indexed and cannot use pointers
    172  10000 ????
    173  10000 ????		00 f2	    lifepointer =	$f2	; pointer to "lives" shape
    174  10000 ????						; upper 3 bits of $f2 contain the number of lives
    175  10000 ????		00 f4	    lifecolor  =	$f4
    176  10000 ????		00 f3	    lives      =	$f3	; # lives >> 5
    177  10000 ????		00 f5	    statusbarlength =	$f5	; only uses upper 5 bits; other bits free
    178  10000 ????
    179  10000 ????		00 f2	    pfscore1   =	$f2	; optional playfield bytes in score
    180  10000 ????		00 f3	    pfscore2   =	$f3
    181  10000 ????		00 f4	    pfscorecolor =	$f4
    182  10000 ????
    183  10000 ????		00 f6	    stack1     =	$f6
    184  10000 ????		00 f7	    stack2     =	$f7
    185  10000 ????		00 f8	    stack3     =	$f8
    186  10000 ????		00 f9	    stack4     =	$f9
    187  10000 ????						; the stack bytes above may be used in the kernel
    188  10000 ????						; stack = F6-F7, F8-F9, FA-FB, FC-FD, FE-FF
    189  10000 ????
    190  10000 ????				       MAC	return
    191  10000 ????				       ifnconst	bankswitch
    192  10000 ????				       rts
    193  10000 ????				       else
    194  10000 ????				       jmp	BS_return
    195  10000 ????				       endif
    196  10000 ????				       ENDM		; auto-return from either a regular or bankswitched module
    197  10000 ????
    198  10000 ????			   -	       ifconst	superchip
    199  10000 ????			   -playfieldbase =	$10D0
    200  10000 ????			   -	       include	superchip.h
    201  10000 ????				       else
    202  10000 ????		00 a4	    playfieldbase =	$A4
    203  10000 ????				       endif
    204  10000 ????
    205  10000 ????				       ifnconst	pfhalfwidth
    206  10000 ????		00 04	    pfwidth    =	4
    207  10000 ????		00 0e	    PF1L       =	PF1
    208  10000 ????		00 0f	    PF2L       =	PF2
    209  10000 ????		00 0e	    PF1R       =	PF1
    210  10000 ????		00 0f	    PF2R       =	PF2
    211  10000 ????		00 00	    pfadjust   =	0
    212  10000 ????			   -	       else
    213  10000 ????			   -pfwidth    =	2
    214  10000 ????			   -	       ifconst	pfcenter
    215  10000 ????			   -PF1L       =	$3F	; no effect
    216  10000 ????			   -PF2L       =	PF2
    217  10000 ????			   -PF1R       =	$3F
    218  10000 ????			   -PF2R       =	PF2	; no effect
    219  10000 ????			   -pfadjust   =	1
    220  10000 ????			   -	       else
    221  10000 ????			   -PF1L       =	PF1
    222  10000 ????			   -PF2L       =	PF2
    223  10000 ????			   -PF1R       =	$3F	; no effect
    224  10000 ????			   -PF2R       =	$3F	; no effect
    225  10000 ????			   -pfadjust   =	0
    226  10000 ????			   -	       endif
    227  10000 ????				       endif
    228  10000 ????
    229  10000 ????						; define playfield start based on height
    230  10000 ????				       ifnconst	pfres
    231  10000 ????		00 a4	    playfield  =	playfieldbase
    232  10000 ????			   -	       else
    233  10000 ????			   -playfield  =	playfieldbase-(pfres-12*(4/pfwidth))*pfwidth
    234  10000 ????				       endif
------- FILE d:\Batari Projects\RandomHoles\RandomHoles\teste-sem-nome.bas.asm
------- FILE 2600basic_variable_redefs.h LEVEL 2 PASS 3
      0  10000 ????				       include	"2600basic_variable_redefs.h"
      1  10000 ????						; This file contains variable mapping and other information for the current project.
      2  10000 ????
      3  10000 ????		00 17	    musicData2_length =	.skipL0176-musicData2
      4  10000 ????
      5  10000 ????		00 17	    musicData1_length =	.skipL0175-musicData1
      6  10000 ????
      7  10000 ????		00 e0	    _Ch1_Sound =	m
      8  10000 ????
      9  10000 ????		00 de	    musicTimer =	k
     10  10000 ????
     11  10000 ????		00 db	    musicPointer =	h
     12  10000 ????
     13  10000 ????		00 d4	    _Ch0_Sound =	a
     14  10000 ????
     15  10000 ????		00 e2	    _SC_Back   =	o
     16  10000 ????
     17  10000 ????		00 e1	    _animacao  =	n
     18  10000 ????
     19  10000 ????		00 e4	    _fases     =	q
     20  10000 ????
     21  10000 ????		00 df	    _dificuldade =	l
     22  10000 ????
     23  10000 ????		00 e6	    _cont_telas =	s
     24  10000 ????
     25  10000 ????		00 e5	    _cont_anima_morte =	r
     26  10000 ????
     27  10000 ????		00 da	    _duracao_som1 =	g
     28  10000 ????
     29  10000 ????		00 d9	    _duracao_som0 =	f
     30  10000 ????
     31  10000 ????		00 d8	    _cont_escudo =	e
     32  10000 ????
     33  10000 ????		00 dd	    _bit_supressores =	j
     34  10000 ????
     35  10000 ????		00 ed	    rand16     =	z
     36  10000 ????
     37  10000 ????		00 01	    pfscore    =	1
     38  10000 ????
     39  10000 ????		00 01	    no_blank_lines =	1
------- FILE d:\Batari Projects\RandomHoles\RandomHoles\teste-sem-nome.bas.asm
      8  10000 ????			   -	       ifconst	bankswitch
      9  10000 ????			   -	       if	bankswitch == 8
     10  10000 ????			   -	       ORG	$1000
     11  10000 ????			   -	       RORG	$D000
     12  10000 ????			   -	       endif
     13  10000 ????			   -	       if	bankswitch == 16
     14  10000 ????			   -	       ORG	$1000
     15  10000 ????			   -	       RORG	$9000
     16  10000 ????			   -	       endif
     17  10000 ????			   -	       if	bankswitch == 32
     18  10000 ????			   -	       ORG	$1000
     19  10000 ????			   -	       RORG	$1000
     20  10000 ????			   -	       endif
     21  10000 ????			   -	       if	bankswitch == 64
     22  10000 ????			   -	       ORG	$1000
     23  10000 ????			   -	       RORG	$1000
     24  10000 ????			   -	       endif
     25  10000 ????				       else
     26  f000					      ORG	$F000
     27  f000					      endif
     28  f000
     29  f000				  -	      ifconst	bankswitch_hotspot
     30  f000				  -	      if	bankswitch_hotspot = $083F	; 0840 bankswitching hotspot
     31  f000				  -	      .byte	0	; stop unexpected bankswitches
     32  f000				  -	      endif
     33  f000					      endif
     34  f000							; Provided under the CC0 license. See the included LICENSE.txt for details.
     35  f000
     36  f000				   start
     37  f000		       78		      sei
     38  f001		       d8		      cld
     39  f002		       a0 00		      ldy	#0
     40  f004		       a5 d0		      lda	$D0
     41  f006		       c9 2c		      cmp	#$2C	;check RAM location #1
     42  f008		       d0 07		      bne	MachineIs2600
     43  f00a		       a5 d1		      lda	$D1
     44  f00c		       c9 a9		      cmp	#$A9	;check RAM location #2
     45  f00e		       d0 01		      bne	MachineIs2600
     46  f010		       88		      dey
     47  f011				   MachineIs2600
     48  f011		       a2 00		      ldx	#0
     49  f013		       8a		      txa
     50  f014				   clearmem
     51  f014		       e8		      inx
     52  f015		       9a		      txs
     53  f016		       48		      pha
     54  f017		       d0 fb		      bne	clearmem
     55  f019		       84 9c		      sty	temp1
     56  f01b					      ifnconst	multisprite
     57  f01b				  -	      ifconst	pfrowheight
     58  f01b				  -	      lda	#pfrowheight
     59  f01b					      else
     60  f01b				  -	      ifconst	pfres
     61  f01b				  -	      lda	#(96/pfres)
     62  f01b					      else
     63  f01b		       a9 08		      lda	#8
     64  f01d					      endif
     65  f01d					      endif
     66  f01d		       85 ef		      sta	playfieldpos
     67  f01f					      endif
     68  f01f		       a2 05		      ldx	#5
     69  f021				   initscore
     70  f021		       a9 9c		      lda	#<scoretable
     71  f023		       95 96		      sta	scorepointers,x
     72  f025		       ca		      dex
     73  f026		       10 f9		      bpl	initscore
     74  f028		       a9 01		      lda	#1
     75  f02a		       85 0a		      sta	CTRLPF
     76  f02c		       0d 84 02 	      ora	INTIM
     77  f02f		       85 a2		      sta	rand
     78  f031
     79  f031				  -	      ifconst	multisprite
     80  f031				  -	      jsr	multisprite_setup
     81  f031					      endif
     82  f031
     83  f031					      ifnconst	bankswitch
     84  f031		       4c 6c f4 	      jmp	game
     85  f034				  -	      else
     86  f034				  -	      lda	#>(game-1)
     87  f034				  -	      pha
     88  f034				  -	      lda	#<(game-1)
     89  f034				  -	      pha
     90  f034				  -	      pha
     91  f034				  -	      pha
     92  f034				  -	      ldx	#1
     93  f034				  -	      jmp	BS_jsr
     94  f034					      endif
     95  f034							; Provided under the CC0 license. See the included LICENSE.txt for details.
     96  f034
     97  f034							; This is a 2-line kernel!
     98  f034					      ifnconst	vertical_reflect
     99  f034				   kernel
    100  f034					      endif
    101  f034		       85 02		      sta	WSYNC
    102  f036		       a9 ff		      lda	#255
    103  f038		       8d 96 02 	      sta	TIM64T
    104  f03b
    105  f03b		       a9 01		      lda	#1
    106  f03d		       85 27		      sta	VDELBL
    107  f03f		       85 25		      sta	VDELP0
    108  f041		       a6 92		      ldx	ballheight
    109  f043		       e8		      inx
    110  f044		       e8		      inx
    111  f045		       86 9f		      stx	temp4
    112  f047		       a5 86		      lda	player1y
    113  f049		       85 9e		      sta	temp3
    114  f04b
    115  f04b				  -	      ifconst	shakescreen
    116  f04b				  -	      jsr	doshakescreen
    117  f04b					      else
    118  f04b		       a6 90		      ldx	missile0height
    119  f04d		       e8		      inx
    120  f04e					      endif
    121  f04e
    122  f04e		       e8		      inx
    123  f04f		       86 f6		      stx	stack1
    124  f051
    125  f051		       a5 89		      lda	bally
    126  f053		       85 f7		      sta	stack2
    127  f055
    128  f055		       a5 85		      lda	player0y
    129  f057		       a2 00		      ldx	#0
    130  f059		       85 02		      sta	WSYNC
    131  f05b		       86 1b		      stx	GRP0
    132  f05d		       86 1c		      stx	GRP1
    133  f05f		       86 0e		      stx	PF1L
    134  f061		       86 0f		      stx	PF2
    135  f063		       86 2c		      stx	CXCLR
    136  f065				  -	      ifconst	readpaddle
    137  f065				  -	      stx	paddle
    138  f065					      else
      0  f065					      sleep	3
      1  f065				   .CYCLES    SET	3
      2  f065
      3  f065				  -	      IF	.CYCLES < 2
      4  f065				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f065				  -	      ERR
      6  f065					      ENDIF
      7  f065
      8  f065					      IF	.CYCLES & 1
      9  f065					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f065		       04 00		      nop	0
     11  f067				  -	      ELSE
     12  f067				  -	      bit	VSYNC
     13  f067					      ENDIF
     14  f067				   .CYCLES    SET	.CYCLES - 3
     15  f067					      ENDIF
     16  f067
     17  f067				  -	      REPEAT	.CYCLES / 2
     18  f067				  -	      nop
     19  f067					      REPEND
    140  f067					      endif
    141  f067
    142  f067		       95 9d		      sta	temp2,x
    143  f069
    144  f069							;store these so they can be retrieved later
    145  f069					      ifnconst	pfres
    146  f069		       a2 54		      ldx	#128-44+(4-pfwidth)*12
    147  f06b				  -	      else
    148  f06b				  -	      ldx	#132-pfres*pfwidth
    149  f06b					      endif
    150  f06b
    151  f06b		       c6 85		      dec	player0y
    152  f06d
    153  f06d		       a5 91		      lda	missile0y
    154  f06f		       85 a0		      sta	temp5
    155  f071		       a5 88		      lda	missile1y
    156  f073		       85 a1		      sta	temp6
    157  f075
    158  f075		       a5 ef		      lda	playfieldpos
    159  f077		       85 9c		      sta	temp1
    160  f079
    161  f079				  -	      ifconst	pfrowheight
    162  f079				  -	      lda	#pfrowheight+2
    163  f079					      else
    164  f079					      ifnconst	pfres
    165  f079		       a9 0a		      lda	#10
    166  f07b				  -	      else
    167  f07b				  -	      lda	#(96/pfres)+2	; try to come close to the real size
    168  f07b					      endif
    169  f07b					      endif
    170  f07b		       18		      clc
    171  f07c		       e5 ef		      sbc	playfieldpos
    172  f07e		       85 ef		      sta	playfieldpos
    173  f080		       4c a8 f0 	      jmp	.startkernel
    174  f083
    175  f083				   .skipDrawP0
    176  f083		       a9 00		      lda	#0
    177  f085		       a8		      tay
    178  f086		       4c d6 f0 	      jmp	.continueP0
    179  f089
    180  f089				   .skipDrawP1
    181  f089		       a9 00		      lda	#0
    182  f08b		       a8		      tay
    183  f08c		       4c b2 f0 	      jmp	.continueP1
    184  f08f
    185  f08f				   .kerloop		; enter at cycle 59??
    186  f08f
    187  f08f				   continuekernel
      0  f08f					      sleep	2
      1  f08f				   .CYCLES    SET	2
      2  f08f
      3  f08f				  -	      IF	.CYCLES < 2
      4  f08f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f08f				  -	      ERR
      6  f08f					      ENDIF
      7  f08f
      8  f08f				  -	      IF	.CYCLES & 1
      9  f08f				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f08f				  -	      nop	0
     11  f08f				  -	      ELSE
     12  f08f				  -	      bit	VSYNC
     13  f08f				  -	      ENDIF
     14  f08f				  -.CYCLES    SET	.CYCLES - 3
     15  f08f					      ENDIF
     16  f08f
     17  f08f					      REPEAT	.CYCLES / 2
     18  f08f		       ea		      nop
     19  f090					      REPEND
    189  f090				   continuekernel2
    190  f090		       a5 92		      lda	ballheight
    191  f092
    192  f092				  -	      ifconst	pfres
    193  f092				  -	      ldy	playfield+pfres*pfwidth-132,x
    194  f092				  -	      sty	PF1L	;3
    195  f092				  -	      ldy	playfield+pfres*pfwidth-131-pfadjust,x
    196  f092				  -	      sty	PF2L	;3
    197  f092				  -	      ldy	playfield+pfres*pfwidth-129,x
    198  f092				  -	      sty	PF1R	; 3 too early?
    199  f092				  -	      ldy	playfield+pfres*pfwidth-130-pfadjust,x
    200  f092				  -	      sty	PF2R	;3
    201  f092					      else
    202  f092		       b4 50		      ldy	playfield-48+pfwidth*12+44-128,x
    203  f094		       84 0e		      sty	PF1L	;3
    204  f096		       b4 51		      ldy	playfield-48+pfwidth*12+45-128-pfadjust,x	;4
    205  f098		       84 0f		      sty	PF2L	;3
    206  f09a		       b4 53		      ldy	playfield-48+pfwidth*12+47-128,x	;4
    207  f09c		       84 0e		      sty	PF1R	; 3 too early?
    208  f09e		       b4 52		      ldy	playfield-48+pfwidth*12+46-128-pfadjust,x	;4
    209  f0a0		       84 0f		      sty	PF2R	;3
    210  f0a2					      endif
    211  f0a2
    212  f0a2							; should be playfield+$38 for width=2
    213  f0a2
    214  f0a2		       c7 89		      dcp	bally
    215  f0a4		       2a		      rol
    216  f0a5		       2a		      rol
    217  f0a6							; rol
    218  f0a6							; rol
    219  f0a6				   goback
    220  f0a6		       85 1f		      sta	ENABL
    221  f0a8				   .startkernel
    222  f0a8		       a5 8f		      lda	player1height	;3
    223  f0aa		       c7 86		      dcp	player1y	;5
    224  f0ac		       90 db		      bcc	.skipDrawP1	;2
    225  f0ae		       a4 86		      ldy	player1y	;3
    226  f0b0		       b1 8c		      lda	(player1pointer),y	;5; player0pointer must be selected carefully by the compiler
    227  f0b2							; so it doesn't cross a page boundary!
    228  f0b2
    229  f0b2				   .continueP1
    230  f0b2		       85 1c		      sta	GRP1	;3
    231  f0b4
    232  f0b4					      ifnconst	player1colors
    233  f0b4		       a5 87		      lda	missile1height	;3
    234  f0b6		       c7 88		      dcp	missile1y	;5
    235  f0b8		       2a		      rol		;2
    236  f0b9		       2a		      rol		;2
    237  f0ba		       85 1e		      sta	ENAM1	;3
    238  f0bc				  -	      else
    239  f0bc				  -	      lda	(player1color),y
    240  f0bc				  -	      sta	COLUP1
    241  f0bc				  -	      ifnconst	playercolors
    242  f0bc				  -	      sleep	7
    243  f0bc				  -	      else
    244  f0bc				  -	      lda.w	player0colorstore
    245  f0bc				  -	      sta	COLUP0
    246  f0bc				  -	      endif
    247  f0bc					      endif
    248  f0bc
    249  f0bc				  -	      ifconst	pfres
    250  f0bc				  -	      lda	playfield+pfres*pfwidth-132,x
    251  f0bc				  -	      sta	PF1L	;3
    252  f0bc				  -	      lda	playfield+pfres*pfwidth-131-pfadjust,x
    253  f0bc				  -	      sta	PF2L	;3
    254  f0bc				  -	      lda	playfield+pfres*pfwidth-129,x
    255  f0bc				  -	      sta	PF1R	; 3 too early?
    256  f0bc				  -	      lda	playfield+pfres*pfwidth-130-pfadjust,x
    257  f0bc				  -	      sta	PF2R	;3
    258  f0bc					      else
    259  f0bc		       b5 50		      lda	playfield-48+pfwidth*12+44-128,x	;4
    260  f0be		       85 0e		      sta	PF1L	;3
    261  f0c0		       b5 51		      lda	playfield-48+pfwidth*12+45-128-pfadjust,x	;4
    262  f0c2		       85 0f		      sta	PF2L	;3
    263  f0c4		       b5 53		      lda	playfield-48+pfwidth*12+47-128,x	;4
    264  f0c6		       85 0e		      sta	PF1R	; 3 too early?
    265  f0c8		       b5 52		      lda	playfield-48+pfwidth*12+46-128-pfadjust,x	;4
    266  f0ca		       85 0f		      sta	PF2R	;3
    267  f0cc					      endif
    268  f0cc							; sleep 3
    269  f0cc
    270  f0cc		       a5 8e		      lda	player0height
    271  f0ce		       c7 85		      dcp	player0y
    272  f0d0		       90 b1		      bcc	.skipDrawP0
    273  f0d2		       a4 85		      ldy	player0y
    274  f0d4		       b1 8a		      lda	(player0pointer),y
    275  f0d6				   .continueP0
    276  f0d6		       85 1b		      sta	GRP0
    277  f0d8
    278  f0d8				  -	      ifnconst	no_blank_lines
    279  f0d8				  -	      ifnconst	playercolors
    280  f0d8				  -	      lda	missile0height	;3
    281  f0d8				  -	      dcp	missile0y	;5
    282  f0d8				  -	      sbc	stack1
    283  f0d8				  -	      sta	ENAM0	;3
    284  f0d8				  -	      else
    285  f0d8				  -	      lda	(player0color),y
    286  f0d8				  -	      sta	player0colorstore
    287  f0d8				  -	      sleep	6
    288  f0d8				  -	      endif
    289  f0d8				  -	      dec	temp1
    290  f0d8				  -	      bne	continuekernel
    291  f0d8					      else
    292  f0d8		       c6 9c		      dec	temp1
    293  f0da		       f0 09		      beq	altkernel2
    294  f0dc				  -	      ifconst	readpaddle
    295  f0dc				  -	      ldy	currentpaddle
    296  f0dc				  -	      lda	INPT0,y
    297  f0dc				  -	      bpl	noreadpaddle
    298  f0dc				  -	      inc	paddle
    299  f0dc				  -	      jmp	continuekernel2
    300  f0dc				  -noreadpaddle
    301  f0dc				  -	      sleep	2
    302  f0dc				  -	      jmp	continuekernel
    303  f0dc					      else
    304  f0dc					      ifnconst	playercolors
    305  f0dc				  -	      ifconst	PFcolors
    306  f0dc				  -	      txa
    307  f0dc				  -	      tay
    308  f0dc				  -	      lda	(pfcolortable),y
    309  f0dc				  -	      ifnconst	backgroundchange
    310  f0dc				  -	      sta	COLUPF
    311  f0dc				  -	      else
    312  f0dc				  -	      sta	COLUBK
    313  f0dc				  -	      endif
    314  f0dc				  -	      jmp	continuekernel
    315  f0dc					      else
    316  f0dc				  -	      ifconst	kernelmacrodef
    317  f0dc				  -	      kernelmacro
    318  f0dc					      else
      0  f0dc					      sleep	12
      1  f0dc				   .CYCLES    SET	12
      2  f0dc
      3  f0dc				  -	      IF	.CYCLES < 2
      4  f0dc				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0dc				  -	      ERR
      6  f0dc					      ENDIF
      7  f0dc
      8  f0dc				  -	      IF	.CYCLES & 1
      9  f0dc				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0dc				  -	      nop	0
     11  f0dc				  -	      ELSE
     12  f0dc				  -	      bit	VSYNC
     13  f0dc				  -	      ENDIF
     14  f0dc				  -.CYCLES    SET	.CYCLES - 3
     15  f0dc					      ENDIF
     16  f0dc
     17  f0dc					      REPEAT	.CYCLES / 2
     18  f0dc		       ea		      nop
     17  f0dc					      REPEND
     18  f0dd		       ea		      nop
     17  f0dd					      REPEND
     18  f0de		       ea		      nop
     17  f0de					      REPEND
     18  f0df		       ea		      nop
     17  f0df					      REPEND
     18  f0e0		       ea		      nop
     17  f0e0					      REPEND
     18  f0e1		       ea		      nop
     19  f0e2					      REPEND
    320  f0e2					      endif
    321  f0e2					      endif
    322  f0e2				  -	      else
    323  f0e2				  -	      lda	(player0color),y
    324  f0e2				  -	      sta	player0colorstore
    325  f0e2				  -	      sleep	4
    326  f0e2					      endif
    327  f0e2		       4c 8f f0 	      jmp	continuekernel
    328  f0e5					      endif
    329  f0e5				   altkernel2
    330  f0e5		       8a		      txa
    331  f0e6					      ifnconst	vertical_reflect
    332  f0e6		       cb fc		      sbx	#256-pfwidth
    333  f0e8				  -	      else
    334  f0e8				  -	      sbx	#256-pfwidth/2
    335  f0e8					      endif
    336  f0e8		       30 1b		      bmi	lastkernelline
    337  f0ea				  -	      ifconst	pfrowheight
    338  f0ea				  -	      lda	#pfrowheight
    339  f0ea					      else
    340  f0ea					      ifnconst	pfres
    341  f0ea		       a9 08		      lda	#8
    342  f0ec				  -	      else
    343  f0ec				  -	      lda	#(96/pfres)	; try to come close to the real size
    344  f0ec					      endif
    345  f0ec					      endif
    346  f0ec		       85 9c		      sta	temp1
    347  f0ee		       4c 8f f0 	      jmp	continuekernel
    348  f0f1					      endif
    349  f0f1
    350  f0f1				   altkernel
    351  f0f1
    352  f0f1				  -	      ifconst	PFmaskvalue
    353  f0f1				  -	      lda	#PFmaskvalue
    354  f0f1					      else
    355  f0f1		       a9 00		      lda	#0
    356  f0f3					      endif
    357  f0f3		       85 0e		      sta	PF1L
    358  f0f5		       85 0f		      sta	PF2
    359  f0f7
    360  f0f7
    361  f0f7							;sleep 3
    362  f0f7
    363  f0f7							;28 cycles to fix things
    364  f0f7							;minus 11=17
    365  f0f7
    366  f0f7							; lax temp4
    367  f0f7							; clc
    368  f0f7		       8a		      txa
    369  f0f8					      ifnconst	vertical_reflect
    370  f0f8		       cb fc		      sbx	#256-pfwidth
    371  f0fa				  -	      else
    372  f0fa				  -	      sbx	#256-pfwidth/2
    373  f0fa					      endif
    374  f0fa
    375  f0fa		       30 09		      bmi	lastkernelline
    376  f0fc
    377  f0fc				  -	      ifconst	PFcolorandheight
    378  f0fc				  -	      ifconst	pfres
    379  f0fc				  -	      ldy	playfieldcolorandheight-131+pfres*pfwidth,x
    380  f0fc				  -	      else
    381  f0fc				  -	      ldy	playfieldcolorandheight-87,x
    382  f0fc				  -	      endif
    383  f0fc				  -	      ifnconst	backgroundchange
    384  f0fc				  -	      sty	COLUPF
    385  f0fc				  -	      else
    386  f0fc				  -	      sty	COLUBK
    387  f0fc				  -	      endif
    388  f0fc				  -	      ifconst	pfres
    389  f0fc				  -	      lda	playfieldcolorandheight-132+pfres*pfwidth,x
    390  f0fc				  -	      else
    391  f0fc				  -	      lda	playfieldcolorandheight-88,x
    392  f0fc				  -	      endif
    393  f0fc				  -	      sta.w	temp1
    394  f0fc					      endif
    395  f0fc				  -	      ifconst	PFheights
    396  f0fc				  -	      lsr
    397  f0fc				  -	      lsr
    398  f0fc				  -	      tay
    399  f0fc				  -	      lda	(pfheighttable),y
    400  f0fc				  -	      sta.w	temp1
    401  f0fc					      endif
    402  f0fc				  -	      ifconst	PFcolors
    403  f0fc				  -	      tay
    404  f0fc				  -	      lda	(pfcolortable),y
    405  f0fc				  -	      ifnconst	backgroundchange
    406  f0fc				  -	      sta	COLUPF
    407  f0fc				  -	      else
    408  f0fc				  -	      sta	COLUBK
    409  f0fc				  -	      endif
    410  f0fc				  -	      ifconst	pfrowheight
    411  f0fc				  -	      lda	#pfrowheight
    412  f0fc				  -	      else
    413  f0fc				  -	      ifnconst	pfres
    414  f0fc				  -	      lda	#8
    415  f0fc				  -	      else
    416  f0fc				  -	      lda	#(96/pfres)	; try to come close to the real size
    417  f0fc				  -	      endif
    418  f0fc				  -	      endif
    419  f0fc				  -	      sta	temp1
    420  f0fc					      endif
    421  f0fc					      ifnconst	PFcolorandheight
    422  f0fc					      ifnconst	PFcolors
    423  f0fc					      ifnconst	PFheights
    424  f0fc				  -	      ifnconst	no_blank_lines
    425  f0fc				  -			; read paddle 0
    426  f0fc				  -			; lo-res paddle read
    427  f0fc				  -			; bit INPT0
    428  f0fc				  -			; bmi paddleskipread
    429  f0fc				  -			; inc paddle0
    430  f0fc				  -			;donepaddleskip
    431  f0fc				  -	      sleep	10
    432  f0fc				  -	      ifconst	pfrowheight
    433  f0fc				  -	      lda	#pfrowheight
    434  f0fc				  -	      else
    435  f0fc				  -	      ifnconst	pfres
    436  f0fc				  -	      lda	#8
    437  f0fc				  -	      else
    438  f0fc				  -	      lda	#(96/pfres)	; try to come close to the real size
    439  f0fc				  -	      endif
    440  f0fc				  -	      endif
    441  f0fc				  -	      sta	temp1
    442  f0fc					      endif
    443  f0fc					      endif
    444  f0fc					      endif
    445  f0fc					      endif
    446  f0fc
    447  f0fc
    448  f0fc		       a5 92		      lda	ballheight
    449  f0fe		       c7 89		      dcp	bally
    450  f100		       e5 9f		      sbc	temp4
    451  f102
    452  f102
    453  f102		       4c a6 f0 	      jmp	goback
    454  f105
    455  f105
    456  f105				  -	      ifnconst	no_blank_lines
    457  f105				  -lastkernelline
    458  f105				  -	      ifnconst	PFcolors
    459  f105				  -	      sleep	10
    460  f105				  -	      else
    461  f105				  -	      ldy	#124
    462  f105				  -	      lda	(pfcolortable),y
    463  f105				  -	      sta	COLUPF
    464  f105				  -	      endif
    465  f105				  -
    466  f105				  -	      ifconst	PFheights
    467  f105				  -	      ldx	#1
    468  f105				  -			;sleep 4
    469  f105				  -	      sleep	3	; this was over 1 cycle
    470  f105				  -	      else
    471  f105				  -	      ldx	playfieldpos
    472  f105				  -			;sleep 3
    473  f105				  -	      sleep	2	; this was over 1 cycle
    474  f105				  -	      endif
    475  f105				  -
    476  f105				  -	      jmp	enterlastkernel
    477  f105				  -
    478  f105					      else
    479  f105				   lastkernelline
    480  f105
    481  f105				  -	      ifconst	PFheights
    482  f105				  -	      ldx	#1
    483  f105				  -			;sleep 5
    484  f105				  -	      sleep	4	; this was over 1 cycle
    485  f105					      else
    486  f105		       a6 ef		      ldx	playfieldpos
    487  f107							;sleep 4
      0  f107					      sleep	3	; this was over 1 cycle
      1  f107				   .CYCLES    SET	3
      2  f107
      3  f107				  -	      IF	.CYCLES < 2
      4  f107				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f107				  -	      ERR
      6  f107					      ENDIF
      7  f107
      8  f107					      IF	.CYCLES & 1
      9  f107					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f107		       04 00		      nop	0
     11  f109				  -	      ELSE
     12  f109				  -	      bit	VSYNC
     13  f109					      ENDIF
     14  f109				   .CYCLES    SET	.CYCLES - 3
     15  f109					      ENDIF
     16  f109
     17  f109				  -	      REPEAT	.CYCLES / 2
     18  f109				  -	      nop
     19  f109					      REPEND
    489  f109					      endif
    490  f109
    491  f109		       e0 00		      cpx	#0
    492  f10b		       d0 0a		      bne	.enterfromNBL
    493  f10d		       4c 78 f1 	      jmp	no_blank_lines_bailout
    494  f110					      endif
    495  f110
    496  f110				  -	      if	((<*)>$d5)
    497  f110				  -	      align	256
    498  f110					      endif
    499  f110							; this is a kludge to prevent page wrapping - fix!!!
    500  f110
    501  f110				   .skipDrawlastP1
    502  f110		       a9 00		      lda	#0
    503  f112		       a8		      tay		; added so we don't cross a page
    504  f113		       4c 3d f1 	      jmp	.continuelastP1
    505  f116
    506  f116				   .endkerloop		; enter at cycle 59??
    507  f116
    508  f116		       ea		      nop
    509  f117
    510  f117				   .enterfromNBL
    511  f117				  -	      ifconst	pfres
    512  f117				  -	      ldy.w	playfield+pfres*pfwidth-4
    513  f117				  -	      sty	PF1L	;3
    514  f117				  -	      ldy.w	playfield+pfres*pfwidth-3-pfadjust
    515  f117				  -	      sty	PF2L	;3
    516  f117				  -	      ldy.w	playfield+pfres*pfwidth-1
    517  f117				  -	      sty	PF1R	; possibly too early?
    518  f117				  -	      ldy.w	playfield+pfres*pfwidth-2-pfadjust
    519  f117				  -	      sty	PF2R	;3
    520  f117					      else
    521  f117		       ac d0 00 	      ldy.w	playfield-48+pfwidth*12+44
    522  f11a		       84 0e		      sty	PF1L	;3
    523  f11c		       ac d1 00 	      ldy.w	playfield-48+pfwidth*12+45-pfadjust
    524  f11f		       84 0f		      sty	PF2L	;3
    525  f121		       ac d3 00 	      ldy.w	playfield-48+pfwidth*12+47
    526  f124		       84 0e		      sty	PF1R	; possibly too early?
    527  f126		       ac d2 00 	      ldy.w	playfield-48+pfwidth*12+46-pfadjust
    528  f129		       84 0f		      sty	PF2R	;3
    529  f12b					      endif
    530  f12b
    531  f12b				   enterlastkernel
    532  f12b		       a5 92		      lda	ballheight
    533  f12d
    534  f12d							; tya
    535  f12d		       c7 89		      dcp	bally
    536  f12f							; sleep 4
    537  f12f
    538  f12f							; sbc stack3
    539  f12f		       2a		      rol
    540  f130		       2a		      rol
    541  f131		       85 1f		      sta	ENABL
    542  f133
    543  f133		       a5 8f		      lda	player1height	;3
    544  f135		       c7 86		      dcp	player1y	;5
    545  f137		       90 d7		      bcc	.skipDrawlastP1
    546  f139		       a4 86		      ldy	player1y	;3
    547  f13b		       b1 8c		      lda	(player1pointer),y	;5; player0pointer must be selected carefully by the compiler
    548  f13d							; so it doesn't cross a page boundary!
    549  f13d
    550  f13d				   .continuelastP1
    551  f13d		       85 1c		      sta	GRP1	;3
    552  f13f
    553  f13f					      ifnconst	player1colors
    554  f13f		       a5 87		      lda	missile1height	;3
    555  f141		       c7 88		      dcp	missile1y	;5
    556  f143				  -	      else
    557  f143				  -	      lda	(player1color),y
    558  f143				  -	      sta	COLUP1
    559  f143					      endif
    560  f143
    561  f143		       ca		      dex
    562  f144							;dec temp4 ; might try putting this above PF writes
    563  f144		       f0 34		      beq	endkernel
    564  f146
    565  f146
    566  f146				  -	      ifconst	pfres
    567  f146				  -	      ldy.w	playfield+pfres*pfwidth-4
    568  f146				  -	      sty	PF1L	;3
    569  f146				  -	      ldy.w	playfield+pfres*pfwidth-3-pfadjust
    570  f146				  -	      sty	PF2L	;3
    571  f146				  -	      ldy.w	playfield+pfres*pfwidth-1
    572  f146				  -	      sty	PF1R	; possibly too early?
    573  f146				  -	      ldy.w	playfield+pfres*pfwidth-2-pfadjust
    574  f146				  -	      sty	PF2R	;3
    575  f146					      else
    576  f146		       ac d0 00 	      ldy.w	playfield-48+pfwidth*12+44
    577  f149		       84 0e		      sty	PF1L	;3
    578  f14b		       ac d1 00 	      ldy.w	playfield-48+pfwidth*12+45-pfadjust
    579  f14e		       84 0f		      sty	PF2L	;3
    580  f150		       ac d3 00 	      ldy.w	playfield-48+pfwidth*12+47
    581  f153		       84 0e		      sty	PF1R	; possibly too early?
    582  f155		       ac d2 00 	      ldy.w	playfield-48+pfwidth*12+46-pfadjust
    583  f158		       84 0f		      sty	PF2R	;3
    584  f15a					      endif
    585  f15a
    586  f15a					      ifnconst	player1colors
    587  f15a		       2a		      rol		;2
    588  f15b		       2a		      rol		;2
    589  f15c		       85 1e		      sta	ENAM1	;3
    590  f15e				  -	      else
    591  f15e				  -	      ifnconst	playercolors
    592  f15e				  -	      sleep	7
    593  f15e				  -	      else
    594  f15e				  -	      lda.w	player0colorstore
    595  f15e				  -	      sta	COLUP0
    596  f15e				  -	      endif
    597  f15e					      endif
    598  f15e
    599  f15e		       ad 8e 00 	      lda.w	player0height
    600  f161		       c7 85		      dcp	player0y
    601  f163		       90 0d		      bcc	.skipDrawlastP0
    602  f165		       a4 85		      ldy	player0y
    603  f167		       b1 8a		      lda	(player0pointer),y
    604  f169				   .continuelastP0
    605  f169		       85 1b		      sta	GRP0
    606  f16b
    607  f16b
    608  f16b
    609  f16b				  -	      ifnconst	no_blank_lines
    610  f16b				  -	      lda	missile0height	;3
    611  f16b				  -	      dcp	missile0y	;5
    612  f16b				  -	      sbc	stack1
    613  f16b				  -	      sta	ENAM0	;3
    614  f16b				  -	      jmp	.endkerloop
    615  f16b					      else
    616  f16b				  -	      ifconst	readpaddle
    617  f16b				  -	      ldy	currentpaddle
    618  f16b				  -	      lda	INPT0,y
    619  f16b				  -	      bpl	noreadpaddle2
    620  f16b				  -	      inc	paddle
    621  f16b				  -	      jmp	.endkerloop
    622  f16b				  -noreadpaddle2
    623  f16b				  -	      sleep	4
    624  f16b				  -	      jmp	.endkerloop
    625  f16b					      else		; no_blank_lines and no paddle reading
    626  f16b		       68		      pla
    627  f16c		       48		      pha		; 14 cycles in 4 bytes
    628  f16d		       68		      pla
    629  f16e		       48		      pha
    630  f16f							; sleep 14
    631  f16f		       4c 16 f1 	      jmp	.endkerloop
    632  f172					      endif
    633  f172					      endif
    634  f172
    635  f172
    636  f172							; ifconst donepaddleskip
    637  f172							;paddleskipread
    638  f172							; this is kind of lame, since it requires 4 cycles from a page boundary crossing
    639  f172							; plus we get a lo-res paddle read
    640  f172							; bmi donepaddleskip
    641  f172							; endif
    642  f172
    643  f172				   .skipDrawlastP0
    644  f172		       a9 00		      lda	#0
    645  f174		       a8		      tay
    646  f175		       4c 69 f1 	      jmp	.continuelastP0
    647  f178
    648  f178					      ifconst	no_blank_lines
    649  f178				   no_blank_lines_bailout
    650  f178		       a2 00		      ldx	#0
    651  f17a					      endif
    652  f17a
    653  f17a				   endkernel
    654  f17a							; 6 digit score routine
    655  f17a		       86 0e		      stx	PF1
    656  f17c		       86 0f		      stx	PF2
    657  f17e		       86 0d		      stx	PF0
    658  f180		       18		      clc
    659  f181
    660  f181				  -	      ifconst	pfrowheight
    661  f181				  -	      lda	#pfrowheight+2
    662  f181					      else
    663  f181					      ifnconst	pfres
    664  f181		       a9 0a		      lda	#10
    665  f183				  -	      else
    666  f183				  -	      lda	#(96/pfres)+2	; try to come close to the real size
    667  f183					      endif
    668  f183					      endif
    669  f183
    670  f183		       e5 ef		      sbc	playfieldpos
    671  f185		       85 ef		      sta	playfieldpos
    672  f187		       8a		      txa
    673  f188
    674  f188				  -	      ifconst	shakescreen
    675  f188				  -	      bit	shakescreen
    676  f188				  -	      bmi	noshakescreen2
    677  f188				  -	      ldx	#$3D
    678  f188				  -noshakescreen2
    679  f188					      endif
    680  f188
    681  f188		       95 02		      sta	WSYNC,x
    682  f18a
    683  f18a							; STA WSYNC ;first one, need one more
    684  f18a		       85 0b		      sta	REFP0
    685  f18c		       85 0c		      sta	REFP1
    686  f18e		       85 1b		      STA	GRP0
    687  f190		       85 1c		      STA	GRP1
    688  f192							; STA PF1
    689  f192							; STA PF2
    690  f192		       85 2b		      sta	HMCLR
    691  f194		       85 1d		      sta	ENAM0
    692  f196		       85 1e		      sta	ENAM1
    693  f198		       85 1f		      sta	ENABL
    694  f19a
    695  f19a		       a5 9d		      lda	temp2	;restore variables that were obliterated by kernel
    696  f19c		       85 85		      sta	player0y
    697  f19e		       a5 9e		      lda	temp3
    698  f1a0		       85 86		      sta	player1y
    699  f1a2					      ifnconst	player1colors
    700  f1a2		       a5 a1		      lda	temp6
    701  f1a4		       85 88		      sta	missile1y
    702  f1a6					      endif
    703  f1a6					      ifnconst	playercolors
    704  f1a6					      ifnconst	readpaddle
    705  f1a6		       a5 a0		      lda	temp5
    706  f1a8		       85 91		      sta	missile0y
    707  f1aa					      endif
    708  f1aa					      endif
    709  f1aa		       a5 f7		      lda	stack2
    710  f1ac		       85 89		      sta	bally
    711  f1ae
    712  f1ae							; strangely, this isn't required any more. might have
    713  f1ae							; resulted from the no_blank_lines score bounce fix
    714  f1ae							;ifconst no_blank_lines
    715  f1ae							;sta WSYNC
    716  f1ae							;endif
    717  f1ae
    718  f1ae		       ad 84 02 	      lda	INTIM
    719  f1b1		       18		      clc
    720  f1b2					      ifnconst	vblank_time
    721  f1b2		       69 8e		      adc	#43+12+87
    722  f1b4				  -	      else
    723  f1b4				  -	      adc	#vblank_time+12+87
    724  f1b4				  -
    725  f1b4					      endif
    726  f1b4							; sta WSYNC
    727  f1b4		       8d 96 02 	      sta	TIM64T
    728  f1b7
    729  f1b7					      ifconst	minikernel
    730  f1b7		       20 7f fb 	      jsr	minikernel
    731  f1ba					      endif
    732  f1ba
    733  f1ba							; now reassign temp vars for score pointers
    734  f1ba
    735  f1ba							; score pointers contain:
    736  f1ba							; score1-5: lo1,lo2,lo3,lo4,lo5,lo6
    737  f1ba							; swap lo2->temp1
    738  f1ba							; swap lo4->temp3
    739  f1ba							; swap lo6->temp5
    740  f1ba					      ifnconst	noscore
    741  f1ba		       a5 97		      lda	scorepointers+1
    742  f1bc							; ldy temp1
    743  f1bc		       85 9c		      sta	temp1
    744  f1be							; sty scorepointers+1
    745  f1be
    746  f1be		       a5 99		      lda	scorepointers+3
    747  f1c0							; ldy temp3
    748  f1c0		       85 9e		      sta	temp3
    749  f1c2							; sty scorepointers+3
    750  f1c2
    751  f1c2
    752  f1c2		       85 2b		      sta	HMCLR
    753  f1c4		       ba		      tsx
    754  f1c5		       86 f6		      stx	stack1
    755  f1c7		       a2 e0		      ldx	#$E0
    756  f1c9		       86 20		      stx	HMP0
    757  f1cb
    758  f1cb		       a5 a3		      LDA	scorecolor
    759  f1cd		       85 06		      STA	COLUP0
    760  f1cf		       85 07		      STA	COLUP1
    761  f1d1				  -	      ifconst	scorefade
    762  f1d1				  -	      STA	stack2
    763  f1d1					      endif
    764  f1d1					      ifconst	pfscore
    765  f1d1		       a5 f4		      lda	pfscorecolor
    766  f1d3		       85 08		      sta	COLUPF
    767  f1d5					      endif
    768  f1d5		       85 02		      sta	WSYNC
    769  f1d7		       a2 00		      ldx	#0
    770  f1d9		       86 1b		      STx	GRP0
    771  f1db		       86 1c		      STx	GRP1	; seems to be needed because of vdel
    772  f1dd
    773  f1dd		       a5 9b		      lda	scorepointers+5
    774  f1df							; ldy temp5
    775  f1df		       95 a0		      sta	temp5,x
    776  f1e1							; sty scorepointers+5
    777  f1e1		       a9 ff		      lda	#>scoretable
    778  f1e3		       85 97		      sta	scorepointers+1
    779  f1e5		       85 99		      sta	scorepointers+3
    780  f1e7		       85 9b		      sta	scorepointers+5
    781  f1e9		       85 9d		      sta	temp2
    782  f1eb		       85 9f		      sta	temp4
    783  f1ed		       85 a1		      sta	temp6
    784  f1ef		       a0 07		      LDY	#7
    785  f1f1		       84 25		      STY	VDELP0
    786  f1f3		       85 10		      STA	RESP0
    787  f1f5		       85 11		      STA	RESP1
    788  f1f7
    789  f1f7
    790  f1f7		       a9 03		      LDA	#$03
    791  f1f9		       85 04		      STA	NUSIZ0
    792  f1fb		       85 05		      STA	NUSIZ1
    793  f1fd		       85 26		      STA	VDELP1
    794  f1ff		       a9 f0		      LDA	#$F0
    795  f201		       85 21		      STA	HMP1
    796  f203		       b1 96		      lda	(scorepointers),y
    797  f205		       85 1b		      sta	GRP0
    798  f207		       85 2a		      STA	HMOVE	; cycle 73 ?
    799  f209		       4c 15 f2 	      jmp	beginscore
    800  f20c
    801  f20c
    802  f20c				  -	      if	((<*)>$d4)
    803  f20c				  -	      align	256	; kludge that potentially wastes space! should be fixed!
    804  f20c					      endif
    805  f20c
    806  f20c				   loop2
    807  f20c		       b1 96		      lda	(scorepointers),y	;+5 68 204
    808  f20e		       85 1b		      sta	GRP0	;+3 71 213 D1 -- -- --
    809  f210					      ifconst	pfscore
    810  f210		       ad f2 00 	      lda.w	pfscore1
    811  f213		       85 0e		      sta	PF1
    812  f215				  -	      else
    813  f215				  -	      ifconst	scorefade
    814  f215				  -	      sleep	2
    815  f215				  -	      dec	stack2	; decrement the temporary scorecolor
    816  f215				  -	      else
    817  f215				  -	      sleep	7
    818  f215				  -	      endif
    819  f215					      endif
    820  f215							; cycle 0
    821  f215				   beginscore
    822  f215		       b1 9e		      lda	(scorepointers+$8),y	;+5 5 15
    823  f217		       85 1c		      sta	GRP1	;+3 8 24 D1 D1 D2 --
    824  f219		       b1 9c		      lda	(scorepointers+$6),y	;+5 13 39
    825  f21b		       85 1b		      sta	GRP0	;+3 16 48 D3 D1 D2 D2
    826  f21d		       b3 98		      lax	(scorepointers+$2),y	;+5 29 87
    827  f21f		       9a		      txs
    828  f220		       b3 9a		      lax	(scorepointers+$4),y	;+5 36 108
    829  f222				  -	      ifconst	scorefade
    830  f222				  -	      lda	stack2
    831  f222					      else
      0  f222					      sleep	3
      1  f222				   .CYCLES    SET	3
      2  f222
      3  f222				  -	      IF	.CYCLES < 2
      4  f222				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f222				  -	      ERR
      6  f222					      ENDIF
      7  f222
      8  f222					      IF	.CYCLES & 1
      9  f222					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f222		       04 00		      nop	0
     11  f224				  -	      ELSE
     12  f224				  -	      bit	VSYNC
     13  f224					      ENDIF
     14  f224				   .CYCLES    SET	.CYCLES - 3
     15  f224					      ENDIF
     16  f224
     17  f224				  -	      REPEAT	.CYCLES / 2
     18  f224				  -	      nop
     19  f224					      REPEND
    833  f224					      endif
    834  f224
    835  f224					      ifconst	pfscore
    836  f224		       a5 f3		      lda	pfscore2
    837  f226		       85 0e		      sta	PF1
    838  f228				  -	      else
    839  f228				  -	      ifconst	scorefade
    840  f228				  -	      sta	COLUP0
    841  f228				  -	      sta	COLUP1
    842  f228				  -	      else
    843  f228				  -	      sleep	6
    844  f228				  -	      endif
    845  f228					      endif
    846  f228
    847  f228		       b1 a0		      lda	(scorepointers+$A),y	;+5 21 63
    848  f22a		       86 1c		      stx	GRP1	;+3 44 132 D3 D3 D4 D2!
    849  f22c		       ba		      tsx
    850  f22d		       86 1b		      stx	GRP0	;+3 47 141 D5 D3! D4 D4
    851  f22f		       85 1c		      sta	GRP1	;+3 50 150 D5 D5 D6 D4!
    852  f231		       84 1b		      sty	GRP0	;+3 53 159 D4* D5! D6 D6
    853  f233		       88		      dey
    854  f234		       10 d6		      bpl	loop2	;+2 60 180
    855  f236
    856  f236		       a6 f6		      ldx	stack1
    857  f238		       9a		      txs
    858  f239							; lda scorepointers+1
    859  f239		       a4 9c		      ldy	temp1
    860  f23b							; sta temp1
    861  f23b		       84 97		      sty	scorepointers+1
    862  f23d
    863  f23d		       a9 00		      LDA	#0
    864  f23f		       85 0e		      sta	PF1
    865  f241		       85 1b		      STA	GRP0
    866  f243		       85 1c		      STA	GRP1
    867  f245		       85 25		      STA	VDELP0
    868  f247		       85 26		      STA	VDELP1	;do we need these
    869  f249		       85 04		      STA	NUSIZ0
    870  f24b		       85 05		      STA	NUSIZ1
    871  f24d
    872  f24d							; lda scorepointers+3
    873  f24d		       a4 9e		      ldy	temp3
    874  f24f							; sta temp3
    875  f24f		       84 99		      sty	scorepointers+3
    876  f251
    877  f251							; lda scorepointers+5
    878  f251		       a4 a0		      ldy	temp5
    879  f253							; sta temp5
    880  f253		       84 9b		      sty	scorepointers+5
    881  f255					      endif		;noscore
    882  f255		       a9 c2		      LDA	#%11000010
    883  f257		       85 02		      sta	WSYNC
    884  f259		       85 01		      STA	VBLANK
      0  f25b					      RETURN
      1  f25b					      ifnconst	bankswitch
      2  f25b		       60		      rts
      3  f25c				  -	      else
      4  f25c				  -	      jmp	BS_return
      5  f25c					      endif
    886  f25c
    887  f25c				  -	      ifconst	shakescreen
    888  f25c				  -doshakescreen
    889  f25c				  -	      bit	shakescreen
    890  f25c				  -	      bmi	noshakescreen
    891  f25c				  -	      sta	WSYNC
    892  f25c				  -noshakescreen
    893  f25c				  -	      ldx	missile0height
    894  f25c				  -	      inx
    895  f25c				  -	      rts
    896  f25c					      endif
    897  f25c
    898  f25c							; Provided under the CC0 license. See the included LICENSE.txt for details.
    899  f25c
    900  f25c							; playfield drawing routines
    901  f25c							; you get a 32x12 bitmapped display in a single color :)
    902  f25c							; 0-31 and 0-11
    903  f25c
    904  f25c				   pfclear		; clears playfield - or fill with pattern
    905  f25c				  -	      ifconst	pfres
    906  f25c				  -	      ldx	#pfres*pfwidth-1
    907  f25c					      else
    908  f25c		       a2 2f		      ldx	#47-(4-pfwidth)*12	; will this work?
    909  f25e					      endif
    910  f25e				   pfclear_loop
    911  f25e					      ifnconst	superchip
    912  f25e		       95 a4		      sta	playfield,x
    913  f260				  -	      else
    914  f260				  -	      sta	playfield-128,x
    915  f260					      endif
    916  f260		       ca		      dex
    917  f261		       10 fb		      bpl	pfclear_loop
      0  f263					      RETURN
      1  f263					      ifnconst	bankswitch
      2  f263		       60		      rts
      3  f264				  -	      else
      4  f264				  -	      jmp	BS_return
      5  f264					      endif
    919  f264
    920  f264				   setuppointers
    921  f264		       86 9d		      stx	temp2	; store on.off.flip value
    922  f266		       aa		      tax		; put x-value in x 
    923  f267		       4a		      lsr
    924  f268		       4a		      lsr
    925  f269		       4a		      lsr		; divide x pos by 8 
    926  f26a		       85 9c		      sta	temp1
    927  f26c		       98		      tya
    928  f26d		       0a		      asl
    929  f26e					      if	pfwidth=4
    930  f26e		       0a		      asl		; multiply y pos by 4
    931  f26f					      endif		; else multiply by 2
    932  f26f		       18		      clc
    933  f270		       65 9c		      adc	temp1	; add them together to get actual memory location offset
    934  f272		       a8		      tay		; put the value in y
    935  f273		       a5 9d		      lda	temp2	; restore on.off.flip value
    936  f275		       60		      rts
    937  f276
    938  f276				   pfread
    939  f276							;x=xvalue, y=yvalue
    940  f276		       20 64 f2 	      jsr	setuppointers
    941  f279		       bd de f2 	      lda	setbyte,x
    942  f27c		       39 a4 00 	      and	playfield,y
    943  f27f		       5d de f2 	      eor	setbyte,x
    944  f282							; beq readzero
    945  f282							; lda #1
    946  f282							; readzero
      0  f282					      RETURN
      1  f282					      ifnconst	bankswitch
      2  f282		       60		      rts
      3  f283				  -	      else
      4  f283				  -	      jmp	BS_return
      5  f283					      endif
    948  f283
    949  f283				   pfpixel
    950  f283							;x=xvalue, y=yvalue, a=0,1,2
    951  f283		       20 64 f2 	      jsr	setuppointers
    952  f286
    953  f286				  -	      ifconst	bankswitch
    954  f286				  -	      lda	temp2	; load on.off.flip value (0,1, or 2)
    955  f286				  -	      beq	pixelon_r	; if "on" go to on
    956  f286				  -	      lsr
    957  f286				  -	      bcs	pixeloff_r	; value is 1 if true
    958  f286				  -	      lda	playfield,y	; if here, it's "flip"
    959  f286				  -	      eor	setbyte,x
    960  f286				  -	      ifconst	superchip
    961  f286				  -	      sta	playfield-128,y
    962  f286				  -	      else
    963  f286				  -	      sta	playfield,y
    964  f286				  -	      endif
    965  f286				  -	      RETURN
    966  f286				  -pixelon_r
    967  f286				  -	      lda	playfield,y
    968  f286				  -	      ora	setbyte,x
    969  f286				  -	      ifconst	superchip
    970  f286				  -	      sta	playfield-128,y
    971  f286				  -	      else
    972  f286				  -	      sta	playfield,y
    973  f286				  -	      endif
    974  f286				  -	      RETURN
    975  f286				  -pixeloff_r
    976  f286				  -	      lda	setbyte,x
    977  f286				  -	      eor	#$ff
    978  f286				  -	      and	playfield,y
    979  f286				  -	      ifconst	superchip
    980  f286				  -	      sta	playfield-128,y
    981  f286				  -	      else
    982  f286				  -	      sta	playfield,y
    983  f286				  -	      endif
    984  f286				  -	      RETURN
    985  f286				  -
    986  f286					      else
    987  f286		       4c b7 f2 	      jmp	plotpoint
    988  f289					      endif
    989  f289
    990  f289				   pfhline
    991  f289							;x=xvalue, y=yvalue, a=0,1,2, temp3=endx
    992  f289		       20 64 f2 	      jsr	setuppointers
    993  f28c		       4c 96 f2 	      jmp	noinc
    994  f28f				   keepgoing
    995  f28f		       e8		      inx
    996  f290		       8a		      txa
    997  f291		       29 07		      and	#7
    998  f293		       d0 01		      bne	noinc
    999  f295		       c8		      iny
   1000  f296				   noinc
   1001  f296		       20 b7 f2 	      jsr	plotpoint
   1002  f299		       e4 9e		      cpx	temp3
   1003  f29b		       30 f2		      bmi	keepgoing
      0  f29d					      RETURN
      1  f29d					      ifnconst	bankswitch
      2  f29d		       60		      rts
      3  f29e				  -	      else
      4  f29e				  -	      jmp	BS_return
      5  f29e					      endif
   1005  f29e
   1006  f29e				   pfvline
   1007  f29e							;x=xvalue, y=yvalue, a=0,1,2, temp3=endx
   1008  f29e		       20 64 f2 	      jsr	setuppointers
   1009  f2a1		       84 9c		      sty	temp1	; store memory location offset
   1010  f2a3		       e6 9e		      inc	temp3	; increase final x by 1 
   1011  f2a5		       a5 9e		      lda	temp3
   1012  f2a7		       0a		      asl
   1013  f2a8					      if	pfwidth=4
   1014  f2a8		       0a		      asl		; multiply by 4
   1015  f2a9					      endif		; else multiply by 2
   1016  f2a9		       85 9e		      sta	temp3	; store it
   1017  f2ab							; Thanks to Michael Rideout for fixing a bug in this code
   1018  f2ab							; right now, temp1=y=starting memory location, temp3=final
   1019  f2ab							; x should equal original x value
   1020  f2ab				   keepgoingy
   1021  f2ab		       20 b7 f2 	      jsr	plotpoint
   1022  f2ae		       c8		      iny
   1023  f2af		       c8		      iny
   1024  f2b0					      if	pfwidth=4
   1025  f2b0		       c8		      iny
   1026  f2b1		       c8		      iny
   1027  f2b2					      endif
   1028  f2b2		       c4 9e		      cpy	temp3
   1029  f2b4		       30 f5		      bmi	keepgoingy
      0  f2b6					      RETURN
      1  f2b6					      ifnconst	bankswitch
      2  f2b6		       60		      rts
      3  f2b7				  -	      else
      4  f2b7				  -	      jmp	BS_return
      5  f2b7					      endif
   1031  f2b7
   1032  f2b7				   plotpoint
   1033  f2b7		       a5 9d		      lda	temp2	; load on.off.flip value (0,1, or 2)
   1034  f2b9		       f0 0d		      beq	pixelon	; if "on" go to on
   1035  f2bb		       4a		      lsr
   1036  f2bc		       b0 14		      bcs	pixeloff	; value is 1 if true
   1037  f2be		       b9 a4 00 	      lda	playfield,y	; if here, it's "flip"
   1038  f2c1		       5d de f2 	      eor	setbyte,x
   1039  f2c4				  -	      ifconst	superchip
   1040  f2c4				  -	      sta	playfield-128,y
   1041  f2c4					      else
   1042  f2c4		       99 a4 00 	      sta	playfield,y
   1043  f2c7					      endif
   1044  f2c7		       60		      rts
   1045  f2c8				   pixelon
   1046  f2c8		       b9 a4 00 	      lda	playfield,y
   1047  f2cb		       1d de f2 	      ora	setbyte,x
   1048  f2ce				  -	      ifconst	superchip
   1049  f2ce				  -	      sta	playfield-128,y
   1050  f2ce					      else
   1051  f2ce		       99 a4 00 	      sta	playfield,y
   1052  f2d1					      endif
   1053  f2d1		       60		      rts
   1054  f2d2				   pixeloff
   1055  f2d2		       bd de f2 	      lda	setbyte,x
   1056  f2d5		       49 ff		      eor	#$ff
   1057  f2d7		       39 a4 00 	      and	playfield,y
   1058  f2da				  -	      ifconst	superchip
   1059  f2da				  -	      sta	playfield-128,y
   1060  f2da					      else
   1061  f2da		       99 a4 00 	      sta	playfield,y
   1062  f2dd					      endif
   1063  f2dd		       60		      rts
   1064  f2de
   1065  f2de				   setbyte
   1066  f2de					      ifnconst	pfcenter
   1067  f2de		       80		      .byte.b	$80
   1068  f2df		       40		      .byte.b	$40
   1069  f2e0		       20		      .byte.b	$20
   1070  f2e1		       10		      .byte.b	$10
   1071  f2e2		       08		      .byte.b	$08
   1072  f2e3		       04		      .byte.b	$04
   1073  f2e4		       02		      .byte.b	$02
   1074  f2e5		       01		      .byte.b	$01
   1075  f2e6					      endif
   1076  f2e6		       01		      .byte.b	$01
   1077  f2e7		       02		      .byte.b	$02
   1078  f2e8		       04		      .byte.b	$04
   1079  f2e9		       08		      .byte.b	$08
   1080  f2ea		       10		      .byte.b	$10
   1081  f2eb		       20		      .byte.b	$20
   1082  f2ec		       40		      .byte.b	$40
   1083  f2ed		       80		      .byte.b	$80
   1084  f2ee		       80		      .byte.b	$80
   1085  f2ef		       40		      .byte.b	$40
   1086  f2f0		       20		      .byte.b	$20
   1087  f2f1		       10		      .byte.b	$10
   1088  f2f2		       08		      .byte.b	$08
   1089  f2f3		       04		      .byte.b	$04
   1090  f2f4		       02		      .byte.b	$02
   1091  f2f5		       01		      .byte.b	$01
   1092  f2f6		       01		      .byte.b	$01
   1093  f2f7		       02		      .byte.b	$02
   1094  f2f8		       04		      .byte.b	$04
   1095  f2f9		       08		      .byte.b	$08
   1096  f2fa		       10		      .byte.b	$10
   1097  f2fb		       20		      .byte.b	$20
   1098  f2fc		       40		      .byte.b	$40
   1099  f2fd		       80		      .byte.b	$80
   1100  f2fe							; Provided under the CC0 license. See the included LICENSE.txt for details.
   1101  f2fe
   1102  f2fe				   pfscroll		;(a=0 left, 1 right, 2 up, 4 down, 6=upup, 12=downdown)
   1103  f2fe		       d0 13		      bne	notleft
   1104  f300							;left
   1105  f300				  -	      ifconst	pfres
   1106  f300				  -	      ldx	#pfres*4
   1107  f300					      else
   1108  f300		       a2 30		      ldx	#48
   1109  f302					      endif
   1110  f302				   leftloop
   1111  f302		       b5 a3		      lda	playfield-1,x
   1112  f304		       4a		      lsr
   1113  f305
   1114  f305				  -	      ifconst	superchip
   1115  f305				  -	      lda	playfield-2,x
   1116  f305				  -	      rol
   1117  f305				  -	      sta	playfield-130,x
   1118  f305				  -	      lda	playfield-3,x
   1119  f305				  -	      ror
   1120  f305				  -	      sta	playfield-131,x
   1121  f305				  -	      lda	playfield-4,x
   1122  f305				  -	      rol
   1123  f305				  -	      sta	playfield-132,x
   1124  f305				  -	      lda	playfield-1,x
   1125  f305				  -	      ror
   1126  f305				  -	      sta	playfield-129,x
   1127  f305					      else
   1128  f305		       36 a2		      rol	playfield-2,x
   1129  f307		       76 a1		      ror	playfield-3,x
   1130  f309		       36 a0		      rol	playfield-4,x
   1131  f30b		       76 a3		      ror	playfield-1,x
   1132  f30d					      endif
   1133  f30d
   1134  f30d		       8a		      txa
   1135  f30e		       cb 04		      sbx	#4
   1136  f310		       d0 f0		      bne	leftloop
      0  f312					      RETURN
      1  f312					      ifnconst	bankswitch
      2  f312		       60		      rts
      3  f313				  -	      else
      4  f313				  -	      jmp	BS_return
      5  f313					      endif
   1138  f313
   1139  f313				   notleft
   1140  f313		       4a		      lsr
   1141  f314		       90 13		      bcc	notright
   1142  f316							;right
   1143  f316
   1144  f316				  -	      ifconst	pfres
   1145  f316				  -	      ldx	#pfres*4
   1146  f316					      else
   1147  f316		       a2 30		      ldx	#48
   1148  f318					      endif
   1149  f318				   rightloop
   1150  f318		       b5 a0		      lda	playfield-4,x
   1151  f31a		       4a		      lsr
   1152  f31b				  -	      ifconst	superchip
   1153  f31b				  -	      lda	playfield-3,x
   1154  f31b				  -	      rol
   1155  f31b				  -	      sta	playfield-131,x
   1156  f31b				  -	      lda	playfield-2,x
   1157  f31b				  -	      ror
   1158  f31b				  -	      sta	playfield-130,x
   1159  f31b				  -	      lda	playfield-1,x
   1160  f31b				  -	      rol
   1161  f31b				  -	      sta	playfield-129,x
   1162  f31b				  -	      lda	playfield-4,x
   1163  f31b				  -	      ror
   1164  f31b				  -	      sta	playfield-132,x
   1165  f31b					      else
   1166  f31b		       36 a1		      rol	playfield-3,x
   1167  f31d		       76 a2		      ror	playfield-2,x
   1168  f31f		       36 a3		      rol	playfield-1,x
   1169  f321		       76 a0		      ror	playfield-4,x
   1170  f323					      endif
   1171  f323		       8a		      txa
   1172  f324		       cb 04		      sbx	#4
   1173  f326		       d0 f0		      bne	rightloop
      0  f328					      RETURN
      1  f328					      ifnconst	bankswitch
      2  f328		       60		      rts
      3  f329				  -	      else
      4  f329				  -	      jmp	BS_return
      5  f329					      endif
   1175  f329
   1176  f329				   notright
   1177  f329		       4a		      lsr
   1178  f32a		       90 49		      bcc	notup
   1179  f32c							;up
   1180  f32c		       4a		      lsr
   1181  f32d		       90 02		      bcc	onedecup
   1182  f32f		       c6 ef		      dec	playfieldpos
   1183  f331				   onedecup
   1184  f331		       c6 ef		      dec	playfieldpos
   1185  f333		       f0 02		      beq	shiftdown
   1186  f335		       10 3d		      bpl	noshiftdown2
   1187  f337				   shiftdown
   1188  f337				  -	      ifconst	pfrowheight
   1189  f337				  -	      lda	#pfrowheight
   1190  f337					      else
   1191  f337					      ifnconst	pfres
   1192  f337		       a9 08		      lda	#8
   1193  f339				  -	      else
   1194  f339				  -	      lda	#(96/pfres)	; try to come close to the real size
   1195  f339					      endif
   1196  f339					      endif
   1197  f339
   1198  f339		       85 ef		      sta	playfieldpos
   1199  f33b		       a5 a7		      lda	playfield+3
   1200  f33d		       85 9f		      sta	temp4
   1201  f33f		       a5 a6		      lda	playfield+2
   1202  f341		       85 9e		      sta	temp3
   1203  f343		       a5 a5		      lda	playfield+1
   1204  f345		       85 9d		      sta	temp2
   1205  f347		       a5 a4		      lda	playfield
   1206  f349		       85 9c		      sta	temp1
   1207  f34b		       a2 00		      ldx	#0
   1208  f34d				   up2
   1209  f34d		       b5 a8		      lda	playfield+4,x
   1210  f34f				  -	      ifconst	superchip
   1211  f34f				  -	      sta	playfield-128,x
   1212  f34f				  -	      lda	playfield+5,x
   1213  f34f				  -	      sta	playfield-127,x
   1214  f34f				  -	      lda	playfield+6,x
   1215  f34f				  -	      sta	playfield-126,x
   1216  f34f				  -	      lda	playfield+7,x
   1217  f34f				  -	      sta	playfield-125,x
   1218  f34f					      else
   1219  f34f		       95 a4		      sta	playfield,x
   1220  f351		       b5 a9		      lda	playfield+5,x
   1221  f353		       95 a5		      sta	playfield+1,x
   1222  f355		       b5 aa		      lda	playfield+6,x
   1223  f357		       95 a6		      sta	playfield+2,x
   1224  f359		       b5 ab		      lda	playfield+7,x
   1225  f35b		       95 a7		      sta	playfield+3,x
   1226  f35d					      endif
   1227  f35d		       8a		      txa
   1228  f35e		       cb fc		      sbx	#252
   1229  f360				  -	      ifconst	pfres
   1230  f360				  -	      cpx	#(pfres-1)*4
   1231  f360					      else
   1232  f360		       e0 2c		      cpx	#44
   1233  f362					      endif
   1234  f362		       d0 e9		      bne	up2
   1235  f364
   1236  f364		       a5 9f		      lda	temp4
   1237  f366
   1238  f366				  -	      ifconst	superchip
   1239  f366				  -	      ifconst	pfres
   1240  f366				  -	      sta	playfield+pfres*4-129
   1241  f366				  -	      lda	temp3
   1242  f366				  -	      sta	playfield+pfres*4-130
   1243  f366				  -	      lda	temp2
   1244  f366				  -	      sta	playfield+pfres*4-131
   1245  f366				  -	      lda	temp1
   1246  f366				  -	      sta	playfield+pfres*4-132
   1247  f366				  -	      else
   1248  f366				  -	      sta	playfield+47-128
   1249  f366				  -	      lda	temp3
   1250  f366				  -	      sta	playfield+46-128
   1251  f366				  -	      lda	temp2
   1252  f366				  -	      sta	playfield+45-128
   1253  f366				  -	      lda	temp1
   1254  f366				  -	      sta	playfield+44-128
   1255  f366				  -	      endif
   1256  f366					      else
   1257  f366				  -	      ifconst	pfres
   1258  f366				  -	      sta	playfield+pfres*4-1
   1259  f366				  -	      lda	temp3
   1260  f366				  -	      sta	playfield+pfres*4-2
   1261  f366				  -	      lda	temp2
   1262  f366				  -	      sta	playfield+pfres*4-3
   1263  f366				  -	      lda	temp1
   1264  f366				  -	      sta	playfield+pfres*4-4
   1265  f366					      else
   1266  f366		       85 d3		      sta	playfield+47
   1267  f368		       a5 9e		      lda	temp3
   1268  f36a		       85 d2		      sta	playfield+46
   1269  f36c		       a5 9d		      lda	temp2
   1270  f36e		       85 d1		      sta	playfield+45
   1271  f370		       a5 9c		      lda	temp1
   1272  f372		       85 d0		      sta	playfield+44
   1273  f374					      endif
   1274  f374					      endif
   1275  f374				   noshiftdown2
      0  f374					      RETURN
      1  f374					      ifnconst	bankswitch
      2  f374		       60		      rts
      3  f375				  -	      else
      4  f375				  -	      jmp	BS_return
      5  f375					      endif
   1277  f375
   1278  f375
   1279  f375				   notup
   1280  f375							;down
   1281  f375		       4a		      lsr
   1282  f376		       b0 02		      bcs	oneincup
   1283  f378		       e6 ef		      inc	playfieldpos
   1284  f37a				   oneincup
   1285  f37a		       e6 ef		      inc	playfieldpos
   1286  f37c		       a5 ef		      lda	playfieldpos
   1287  f37e
   1288  f37e				  -	      ifconst	pfrowheight
   1289  f37e				  -	      cmp	#pfrowheight+1
   1290  f37e					      else
   1291  f37e					      ifnconst	pfres
   1292  f37e		       c9 09		      cmp	#9
   1293  f380				  -	      else
   1294  f380				  -	      cmp	#(96/pfres)+1	; try to come close to the real size
   1295  f380					      endif
   1296  f380					      endif
   1297  f380
   1298  f380		       90 3b		      bcc	noshiftdown
   1299  f382		       a9 01		      lda	#1
   1300  f384		       85 ef		      sta	playfieldpos
   1301  f386
   1302  f386				  -	      ifconst	pfres
   1303  f386				  -	      lda	playfield+pfres*4-1
   1304  f386				  -	      sta	temp4
   1305  f386				  -	      lda	playfield+pfres*4-2
   1306  f386				  -	      sta	temp3
   1307  f386				  -	      lda	playfield+pfres*4-3
   1308  f386				  -	      sta	temp2
   1309  f386				  -	      lda	playfield+pfres*4-4
   1310  f386					      else
   1311  f386		       a5 d3		      lda	playfield+47
   1312  f388		       85 9f		      sta	temp4
   1313  f38a		       a5 d2		      lda	playfield+46
   1314  f38c		       85 9e		      sta	temp3
   1315  f38e		       a5 d1		      lda	playfield+45
   1316  f390		       85 9d		      sta	temp2
   1317  f392		       a5 d0		      lda	playfield+44
   1318  f394					      endif
   1319  f394
   1320  f394		       85 9c		      sta	temp1
   1321  f396
   1322  f396				  -	      ifconst	pfres
   1323  f396				  -	      ldx	#(pfres-1)*4
   1324  f396					      else
   1325  f396		       a2 2c		      ldx	#44
   1326  f398					      endif
   1327  f398				   down2
   1328  f398		       b5 a3		      lda	playfield-1,x
   1329  f39a				  -	      ifconst	superchip
   1330  f39a				  -	      sta	playfield-125,x
   1331  f39a				  -	      lda	playfield-2,x
   1332  f39a				  -	      sta	playfield-126,x
   1333  f39a				  -	      lda	playfield-3,x
   1334  f39a				  -	      sta	playfield-127,x
   1335  f39a				  -	      lda	playfield-4,x
   1336  f39a				  -	      sta	playfield-128,x
   1337  f39a					      else
   1338  f39a		       95 a7		      sta	playfield+3,x
   1339  f39c		       b5 a2		      lda	playfield-2,x
   1340  f39e		       95 a6		      sta	playfield+2,x
   1341  f3a0		       b5 a1		      lda	playfield-3,x
   1342  f3a2		       95 a5		      sta	playfield+1,x
   1343  f3a4		       b5 a0		      lda	playfield-4,x
   1344  f3a6		       95 a4		      sta	playfield,x
   1345  f3a8					      endif
   1346  f3a8		       8a		      txa
   1347  f3a9		       cb 04		      sbx	#4
   1348  f3ab		       d0 eb		      bne	down2
   1349  f3ad
   1350  f3ad		       a5 9f		      lda	temp4
   1351  f3af				  -	      ifconst	superchip
   1352  f3af				  -	      sta	playfield-125
   1353  f3af				  -	      lda	temp3
   1354  f3af				  -	      sta	playfield-126
   1355  f3af				  -	      lda	temp2
   1356  f3af				  -	      sta	playfield-127
   1357  f3af				  -	      lda	temp1
   1358  f3af				  -	      sta	playfield-128
   1359  f3af					      else
   1360  f3af		       85 a7		      sta	playfield+3
   1361  f3b1		       a5 9e		      lda	temp3
   1362  f3b3		       85 a6		      sta	playfield+2
   1363  f3b5		       a5 9d		      lda	temp2
   1364  f3b7		       85 a5		      sta	playfield+1
   1365  f3b9		       a5 9c		      lda	temp1
   1366  f3bb		       85 a4		      sta	playfield
   1367  f3bd					      endif
   1368  f3bd				   noshiftdown
      0  f3bd					      RETURN
      1  f3bd					      ifnconst	bankswitch
      2  f3bd		       60		      rts
      3  f3be				  -	      else
      4  f3be				  -	      jmp	BS_return
      5  f3be					      endif
   1370  f3be							; Provided under the CC0 license. See the included LICENSE.txt for details.
   1371  f3be
   1372  f3be							;standard routines needed for pretty much all games
   1373  f3be							; just the random number generator is left - maybe we should remove this asm file altogether?
   1374  f3be							; repositioning code and score pointer setup moved to overscan
   1375  f3be							; read switches, joysticks now compiler generated (more efficient)
   1376  f3be
   1377  f3be				   randomize
   1378  f3be		       a5 a2		      lda	rand
   1379  f3c0		       4a		      lsr
   1380  f3c1					      ifconst	rand16
   1381  f3c1		       26 ed		      rol	rand16
   1382  f3c3					      endif
   1383  f3c3		       90 02		      bcc	noeor
   1384  f3c5		       49 b4		      eor	#$B4
   1385  f3c7				   noeor
   1386  f3c7		       85 a2		      sta	rand
   1387  f3c9					      ifconst	rand16
   1388  f3c9		       45 ed		      eor	rand16
   1389  f3cb					      endif
      0  f3cb					      RETURN
      1  f3cb					      ifnconst	bankswitch
      2  f3cb		       60		      rts
      3  f3cc				  -	      else
      4  f3cc				  -	      jmp	BS_return
      5  f3cc					      endif
   1391  f3cc							; Provided under the CC0 license. See the included LICENSE.txt for details.
   1392  f3cc
   1393  f3cc				   drawscreen
   1394  f3cc				  -	      ifconst	debugscore
   1395  f3cc				  -	      ldx	#14
   1396  f3cc				  -	      lda	INTIM	; display # cycles left in the score
   1397  f3cc				  -
   1398  f3cc				  -	      ifconst	mincycles
   1399  f3cc				  -	      lda	mincycles
   1400  f3cc				  -	      cmp	INTIM
   1401  f3cc				  -	      lda	mincycles
   1402  f3cc				  -	      bcc	nochange
   1403  f3cc				  -	      lda	INTIM
   1404  f3cc				  -	      sta	mincycles
   1405  f3cc				  -nochange
   1406  f3cc				  -	      endif
   1407  f3cc				  -
   1408  f3cc				  -			; cmp #$2B
   1409  f3cc				  -			; bcs no_cycles_left
   1410  f3cc				  -	      bmi	cycles_left
   1411  f3cc				  -	      ldx	#64
   1412  f3cc				  -	      eor	#$ff	;make negative
   1413  f3cc				  -cycles_left
   1414  f3cc				  -	      stx	scorecolor
   1415  f3cc				  -	      and	#$7f	; clear sign bit
   1416  f3cc				  -	      tax
   1417  f3cc				  -	      lda	scorebcd,x
   1418  f3cc				  -	      sta	score+2
   1419  f3cc				  -	      lda	scorebcd1,x
   1420  f3cc				  -	      sta	score+1
   1421  f3cc				  -	      jmp	done_debugscore
   1422  f3cc				  -scorebcd
   1423  f3cc				  -	      .byte	$00, $64, $28, $92, $56, $20, $84, $48, $12, $76, $40
   1424  f3cc				  -	      .byte	$04, $68, $32, $96, $60, $24, $88, $52, $16, $80, $44
   1425  f3cc				  -	      .byte	$08, $72, $36, $00, $64, $28, $92, $56, $20, $84, $48
   1426  f3cc				  -	      .byte	$12, $76, $40, $04, $68, $32, $96, $60, $24, $88
   1427  f3cc				  -scorebcd1
   1428  f3cc				  -	      .byte	0, 0, 1, 1, 2, 3, 3, 4, 5, 5, 6
   1429  f3cc				  -	      .byte	7, 7, 8, 8, 9, $10, $10, $11, $12, $12, $13
   1430  f3cc				  -	      .byte	$14, $14, $15, $16, $16, $17, $17, $18, $19, $19, $20
   1431  f3cc				  -	      .byte	$21, $21, $22, $23, $23, $24, $24, $25, $26, $26
   1432  f3cc				  -done_debugscore
   1433  f3cc					      endif
   1434  f3cc
   1435  f3cc				  -	      ifconst	debugcycles
   1436  f3cc				  -	      lda	INTIM	; if we go over, it mucks up the background color
   1437  f3cc				  -			; cmp #$2B
   1438  f3cc				  -			; BCC overscan
   1439  f3cc				  -	      bmi	overscan
   1440  f3cc				  -	      sta	COLUBK
   1441  f3cc				  -	      bcs	doneoverscan
   1442  f3cc					      endif
   1443  f3cc
   1444  f3cc				   overscan
   1445  f3cc				  -	      ifconst	interlaced
   1446  f3cc				  -	      PHP
   1447  f3cc				  -	      PLA
   1448  f3cc				  -	      EOR	#4	; flip interrupt bit
   1449  f3cc				  -	      PHA
   1450  f3cc				  -	      PLP
   1451  f3cc				  -	      AND	#4	; isolate the interrupt bit
   1452  f3cc				  -	      TAX		; save it for later
   1453  f3cc					      endif
   1454  f3cc
   1455  f3cc				   overscanloop
   1456  f3cc		       ad 84 02 	      lda	INTIM	;wait for sync
   1457  f3cf		       30 fb		      bmi	overscanloop
   1458  f3d1				   doneoverscan
   1459  f3d1
   1460  f3d1							;do VSYNC
   1461  f3d1
   1462  f3d1				  -	      ifconst	interlaced
   1463  f3d1				  -	      CPX	#4
   1464  f3d1				  -	      BNE	oddframevsync
   1465  f3d1					      endif
   1466  f3d1
   1467  f3d1		       a9 02		      lda	#2
   1468  f3d3		       85 02		      sta	WSYNC
   1469  f3d5		       85 00		      sta	VSYNC
   1470  f3d7		       85 02		      STA	WSYNC
   1471  f3d9		       85 02		      STA	WSYNC
   1472  f3db		       4a		      lsr
   1473  f3dc		       85 02		      STA	WSYNC
   1474  f3de		       85 00		      STA	VSYNC
   1475  f3e0		       85 01		      sta	VBLANK
   1476  f3e2					      ifnconst	overscan_time
   1477  f3e2		       a9 a5		      lda	#37+128
   1478  f3e4				  -	      else
   1479  f3e4				  -	      lda	#overscan_time+128
   1480  f3e4					      endif
   1481  f3e4		       8d 96 02 	      sta	TIM64T
   1482  f3e7
   1483  f3e7				  -	      ifconst	interlaced
   1484  f3e7				  -	      jmp	postsync
   1485  f3e7				  -
   1486  f3e7				  -oddframevsync
   1487  f3e7				  -	      sta	WSYNC
   1488  f3e7				  -
   1489  f3e7				  -	      LDA	($80,X)	; 11 waste
   1490  f3e7				  -	      LDA	($80,X)	; 11 waste
   1491  f3e7				  -	      LDA	($80,X)	; 11 waste
   1492  f3e7				  -
   1493  f3e7				  -	      lda	#2
   1494  f3e7				  -	      sta	VSYNC
   1495  f3e7				  -	      sta	WSYNC
   1496  f3e7				  -	      sta	WSYNC
   1497  f3e7				  -	      sta	WSYNC
   1498  f3e7				  -
   1499  f3e7				  -	      LDA	($80,X)	; 11 waste
   1500  f3e7				  -	      LDA	($80,X)	; 11 waste
   1501  f3e7				  -	      LDA	($80,X)	; 11 waste
   1502  f3e7				  -
   1503  f3e7				  -	      lda	#0
   1504  f3e7				  -	      sta	VSYNC
   1505  f3e7				  -	      sta	VBLANK
   1506  f3e7				  -	      ifnconst	overscan_time
   1507  f3e7				  -	      lda	#37+128
   1508  f3e7				  -	      else
   1509  f3e7				  -	      lda	#overscan_time+128
   1510  f3e7				  -	      endif
   1511  f3e7				  -	      sta	TIM64T
   1512  f3e7				  -
   1513  f3e7				  -postsync
   1514  f3e7					      endif
   1515  f3e7
   1516  f3e7				  -	      ifconst	legacy
   1517  f3e7				  -	      if	legacy < 100
   1518  f3e7				  -	      ldx	#4
   1519  f3e7				  -adjustloop
   1520  f3e7				  -	      lda	player0x,x
   1521  f3e7				  -	      sec
   1522  f3e7				  -	      sbc	#14	;?
   1523  f3e7				  -	      sta	player0x,x
   1524  f3e7				  -	      dex
   1525  f3e7				  -	      bpl	adjustloop
   1526  f3e7				  -	      endif
   1527  f3e7					      endif
   1528  f3e7				  -	      if	((<*)>$e9)&&((<*)<$fa)
   1529  f3e7				  -	      repeat	($fa-(<*))
   1530  f3e7				  -	      nop
   1531  f3e7				  -	      repend
   1532  f3e7					      endif
   1533  f3e7		       85 02		      sta	WSYNC
   1534  f3e9		       a2 04		      ldx	#4
      0  f3eb					      SLEEP	3
      1  f3eb				   .CYCLES    SET	3
      2  f3eb
      3  f3eb				  -	      IF	.CYCLES < 2
      4  f3eb				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f3eb				  -	      ERR
      6  f3eb					      ENDIF
      7  f3eb
      8  f3eb					      IF	.CYCLES & 1
      9  f3eb					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f3eb		       04 00		      nop	0
     11  f3ed				  -	      ELSE
     12  f3ed				  -	      bit	VSYNC
     13  f3ed					      ENDIF
     14  f3ed				   .CYCLES    SET	.CYCLES - 3
     15  f3ed					      ENDIF
     16  f3ed
     17  f3ed				  -	      REPEAT	.CYCLES / 2
     18  f3ed				  -	      nop
     19  f3ed					      REPEND
   1536  f3ed				   HorPosLoop		; 5
   1537  f3ed		       b5 80		      lda	player0x,X	;+4 9
   1538  f3ef		       38		      sec		;+2 11
   1539  f3f0				   DivideLoop
   1540  f3f0		       e9 0f		      sbc	#15
   1541  f3f2		       b0 fc		      bcs	DivideLoop	;+4 15
   1542  f3f4		       95 9c		      sta	temp1,X	;+4 19
   1543  f3f6		       95 10		      sta	RESP0,X	;+4 23
   1544  f3f8		       85 02		      sta	WSYNC
   1545  f3fa		       ca		      dex
   1546  f3fb		       10 f0		      bpl	HorPosLoop	;+5 5
   1547  f3fd							; 4
   1548  f3fd
   1549  f3fd		       a2 04		      ldx	#4
   1550  f3ff		       b4 9c		      ldy	temp1,X
   1551  f401		       b9 5d f3 	      lda	repostable-256,Y
   1552  f404		       95 20		      sta	HMP0,X	;+14 18
   1553  f406
   1554  f406		       ca		      dex
   1555  f407		       b4 9c		      ldy	temp1,X
   1556  f409		       b9 5d f3 	      lda	repostable-256,Y
   1557  f40c		       95 20		      sta	HMP0,X	;+14 32
   1558  f40e
   1559  f40e		       ca		      dex
   1560  f40f		       b4 9c		      ldy	temp1,X
   1561  f411		       b9 5d f3 	      lda	repostable-256,Y
   1562  f414		       95 20		      sta	HMP0,X	;+14 46
   1563  f416
   1564  f416		       ca		      dex
   1565  f417		       b4 9c		      ldy	temp1,X
   1566  f419		       b9 5d f3 	      lda	repostable-256,Y
   1567  f41c		       95 20		      sta	HMP0,X	;+14 60
   1568  f41e
   1569  f41e		       ca		      dex
   1570  f41f		       b4 9c		      ldy	temp1,X
   1571  f421		       b9 5d f3 	      lda	repostable-256,Y
   1572  f424		       95 20		      sta	HMP0,X	;+14 74
   1573  f426
   1574  f426		       85 02		      sta	WSYNC
   1575  f428
   1576  f428		       85 2a		      sta	HMOVE	;+3 3
   1577  f42a
   1578  f42a
   1579  f42a				  -	      ifconst	legacy
   1580  f42a				  -	      if	legacy < 100
   1581  f42a				  -	      ldx	#4
   1582  f42a				  -adjustloop2
   1583  f42a				  -	      lda	player0x,x
   1584  f42a				  -	      clc
   1585  f42a				  -	      adc	#14	;?
   1586  f42a				  -	      sta	player0x,x
   1587  f42a				  -	      dex
   1588  f42a				  -	      bpl	adjustloop2
   1589  f42a				  -	      endif
   1590  f42a					      endif
   1591  f42a
   1592  f42a
   1593  f42a
   1594  f42a
   1595  f42a							;set score pointers
   1596  f42a		       a7 95		      lax	score+2
   1597  f42c		       20 5d f4 	      jsr	scorepointerset
   1598  f42f		       84 9b		      sty	scorepointers+5
   1599  f431		       86 98		      stx	scorepointers+2
   1600  f433		       a7 94		      lax	score+1
   1601  f435		       20 5d f4 	      jsr	scorepointerset
   1602  f438		       84 9a		      sty	scorepointers+4
   1603  f43a		       86 97		      stx	scorepointers+1
   1604  f43c		       a7 93		      lax	score
   1605  f43e		       20 5d f4 	      jsr	scorepointerset
   1606  f441		       84 99		      sty	scorepointers+3
   1607  f443		       86 96		      stx	scorepointers
   1608  f445
   1609  f445				   vblk
   1610  f445							; run possible vblank bB code
   1611  f445				  -	      ifconst	vblank_bB_code
   1612  f445				  -	      jsr	vblank_bB_code
   1613  f445					      endif
   1614  f445				   vblk2
   1615  f445		       ad 84 02 	      LDA	INTIM
   1616  f448		       30 fb		      bmi	vblk2
   1617  f44a		       4c 34 f0 	      jmp	kernel
   1618  f44d
   1619  f44d
   1620  f44d		       80 70 60 50*	      .byte.b	$80,$70,$60,$50,$40,$30,$20,$10,$00
   1621  f456		       f0 e0 d0 c0*	      .byte.b	$F0,$E0,$D0,$C0,$B0,$A0,$90
   1622  f45d				   repostable
   1623  f45d
   1624  f45d				   scorepointerset
   1625  f45d		       29 0f		      and	#$0F
   1626  f45f		       0a		      asl
   1627  f460		       0a		      asl
   1628  f461		       0a		      asl
   1629  f462		       69 9c		      adc	#<scoretable
   1630  f464		       a8		      tay
   1631  f465		       8a		      txa
   1632  f466							; and #$F0
   1633  f466							; lsr
   1634  f466		       4b f0		      asr	#$F0
   1635  f468		       69 9c		      adc	#<scoretable
   1636  f46a		       aa		      tax
   1637  f46b		       60		      rts
   1638  f46c				   game
   1639  f46c				   .
   1640  f46c							; 
   1641  f46c
   1642  f46c				   .L00 		;  rem teste jogo 1
   1643  f46c
   1644  f46c				   .L01 		;  rem por Heitor Maciel
   1645  f46c
   1646  f46c				   .
   1647  f46c							; 
   1648  f46c
   1649  f46c				   .L02 		;  set kernel_options no_blank_lines
   1650  f46c
   1651  f46c				   .L03 		;  const pfscore  =  1
   1652  f46c
   1653  f46c				   .L04 		;  dim rand16	=  z
   1654  f46c
   1655  f46c				   .
   1656  f46c							; 
   1657  f46c
   1658  f46c				   .L05 		;  dim _bit_supressores  =  j
   1659  f46c
   1660  f46c				   .
   1661  f46c							; 
   1662  f46c
   1663  f46c				   .
   1664  f46c							; 
   1665  f46c
   1666  f46c				   .
   1667  f46c							; 
   1668  f46c
   1669  f46c				   .
   1670  f46c							; 
   1671  f46c
   1672  f46c				   .
   1673  f46c							; 
   1674  f46c
   1675  f46c				   .
   1676  f46c							; 
   1677  f46c
   1678  f46c				   .
   1679  f46c							; 
   1680  f46c
   1681  f46c				   .L06 		;  dim _cont_escudo  =  e
   1682  f46c
   1683  f46c				   .L07 		;  dim _duracao_som0  =  f
   1684  f46c
   1685  f46c				   .L08 		;  dim _duracao_som1  =  g
   1686  f46c
   1687  f46c				   .L09 		;  dim _cont_anima_morte  =  r
   1688  f46c
   1689  f46c				   .L010		;  dim _cont_telas  =	s
   1690  f46c
   1691  f46c				   .L011		;  dim _dificuldade  =  l
   1692  f46c
   1693  f46c				   .L012		;  dim _fases	=  q
   1694  f46c
   1695  f46c				   .L013		;  dim _animacao  =  n
   1696  f46c
   1697  f46c				   .L014		;  dim _SC_Back  =  o
   1698  f46c
   1699  f46c				   .
   1700  f46c							; 
   1701  f46c
   1702  f46c				   .L015		;  dim _Ch0_Sound  =  a
   1703  f46c
   1704  f46c				   .L016		;  dim musicPointer  =  h
   1705  f46c
   1706  f46c				   .L017		;  dim musicTimer  =  k
   1707  f46c
   1708  f46c				   .
   1709  f46c							; 
   1710  f46c
   1711  f46c				   .L018		;  dim _Ch1_Sound  =  m
   1712  f46c
   1713  f46c				   .
   1714  f46c							; 
   1715  f46c
   1716  f46c				   .__title_screen
   1717  f46c							; __title_screen
   1718  f46c
   1719  f46c				   .L019		;  pfscore1  =  0  :  scorecolor  =  $00
   1720  f46c
   1721  f46c		       a9 00		      LDA	#0
   1722  f46e		       85 f2		      STA	pfscore1
   1723  f470		       a9 00		      LDA	#$00
   1724  f472		       85 a3		      STA	scorecolor
   1725  f474				   .L020		;  drawscreen
   1726  f474
   1727  f474		       20 cc f3 	      jsr	drawscreen
   1728  f477				   .L021		;  COLUBK = $00
   1729  f477
   1730  f477		       a9 00		      LDA	#$00
   1731  f479		       85 09		      STA	COLUBK
   1732  f47b				   .L022		;  COLUPF = $06
   1733  f47b
   1734  f47b		       a9 06		      LDA	#$06
   1735  f47d		       85 08		      STA	COLUPF
   1736  f47f				   .L023		;  player0y  =  0
   1737  f47f
   1738  f47f		       a9 00		      LDA	#0
   1739  f481		       85 85		      STA	player0y
   1740  f483				   .L024		;  player1y  =  0
   1741  f483
   1742  f483		       a9 00		      LDA	#0
   1743  f485		       85 86		      STA	player1y
   1744  f487				   .L025		;  playfield:
   1745  f487
   1746  f487				  -	      ifconst	pfres
   1747  f487				  -	      ldx	#(11>pfres)*(pfres*pfwidth-1)+(11<=pfres)*43
   1748  f487					      else
   1749  f487		       a2 2b		      ldx	#((11*pfwidth-1)*((11*pfwidth-1)<47))+(47*((11*pfwidth-1)>=47))
   1750  f489					      endif
   1751  f489		       4c b8 f4 	      jmp	pflabel0
   1752  f48c				   PF_data0
   1753  f48c		       1d ef		      .byte.b	%00011101, %11101111
   1754  f48e					      if	(pfwidth>2)
   1755  f48e		       a2 18		      .byte.b	%10100010, %00011000
   1756  f490					      endif
   1757  f490		       10 22		      .byte.b	%00010000, %00100010
   1758  f492					      if	(pfwidth>2)
   1759  f492		       22 24		      .byte.b	%00100010, %00100100
   1760  f494					      endif
   1761  f494		       1c e2		      .byte.b	%00011100, %11100010
   1762  f496					      if	(pfwidth>2)
   1763  f496		       a2 3c		      .byte.b	%10100010, %00111100
   1764  f498					      endif
   1765  f498		       04 22		      .byte.b	%00000100, %00100010
   1766  f49a					      if	(pfwidth>2)
   1767  f49a		       22 24		      .byte.b	%00100010, %00100100
   1768  f49c					      endif
   1769  f49c		       1c e2		      .byte.b	%00011100, %11100010
   1770  f49e					      if	(pfwidth>2)
   1771  f49e		       bb 25		      .byte.b	%10111011, %00100101
   1772  f4a0					      endif
   1773  f4a0		       00 00		      .byte.b	%00000000, %00000000
   1774  f4a2					      if	(pfwidth>2)
   1775  f4a2		       00 00		      .byte.b	%00000000, %00000000
   1776  f4a4					      endif
   1777  f4a4		       1e 21		      .byte.b	%00011110, %00100001
   1778  f4a6					      if	(pfwidth>2)
   1779  f4a6		       bc 00		      .byte.b	%10111100, %00000000
   1780  f4a8					      endif
   1781  f4a8		       10 21		      .byte.b	%00010000, %00100001
   1782  f4aa					      if	(pfwidth>2)
   1783  f4aa		       a2 00		      .byte.b	%10100010, %00000000
   1784  f4ac					      endif
   1785  f4ac		       10 21		      .byte.b	%00010000, %00100001
   1786  f4ae					      if	(pfwidth>2)
   1787  f4ae		       bc 00		      .byte.b	%10111100, %00000000
   1788  f4b0					      endif
   1789  f4b0		       10 21		      .byte.b	%00010000, %00100001
   1790  f4b2					      if	(pfwidth>2)
   1791  f4b2		       a2 00		      .byte.b	%10100010, %00000000
   1792  f4b4					      endif
   1793  f4b4		       1e ef		      .byte.b	%00011110, %11101111
   1794  f4b6					      if	(pfwidth>2)
   1795  f4b6		       bc 00		      .byte.b	%10111100, %00000000
   1796  f4b8					      endif
   1797  f4b8				   pflabel0
   1798  f4b8		       bd 8c f4 	      lda	PF_data0,x
   1799  f4bb		       95 a4		      sta	playfield,x
   1800  f4bd		       ca		      dex
   1801  f4be		       10 f8		      bpl	pflabel0
   1802  f4c0				   .
   1803  f4c0							; 
   1804  f4c0
   1805  f4c0				   .
   1806  f4c0							; 
   1807  f4c0
   1808  f4c0				   .L026		;  if !joy0fire goto __title_screen
   1809  f4c0
   1810  f4c0		       24 0c		      bit	INPT4
   1811  f4c2		       30 a8		      bmi	.__title_screen
   1812  f4c4				   .
   1813  f4c4							; 
   1814  f4c4
   1815  f4c4				   .__reset_game
   1816  f4c4							; __reset_game
   1817  f4c4
   1818  f4c4				   .
   1819  f4c4							; 
   1820  f4c4
   1821  f4c4				   .
   1822  f4c4							; 
   1823  f4c4
   1824  f4c4				   .L027		;  a  =  0  :	d  =  0  :  e  =  0  :	f  =  0  :  g  =  0  :	h  =  0
   1825  f4c4
   1826  f4c4		       a9 00		      LDA	#0
   1827  f4c6		       85 d4		      STA	a
   1828  f4c8		       85 d7		      STA	d
   1829  f4ca		       85 d8		      STA	e
   1830  f4cc		       85 d9		      STA	f
   1831  f4ce		       85 da		      STA	g
   1832  f4d0		       85 db		      STA	h
   1833  f4d2				   .L028		;  j  =  0  :	k  =  0  :  l  =  0  :	m  =  0  :  n  =  0  :	o  =  0  :  p  =  0  :	q  =  0  :  r  =  0
   1834  f4d2
   1835  f4d2		       a9 00		      LDA	#0
   1836  f4d4		       85 dd		      STA	j
   1837  f4d6		       85 de		      STA	k
   1838  f4d8		       85 df		      STA	l
   1839  f4da		       85 e0		      STA	m
   1840  f4dc		       85 e1		      STA	n
   1841  f4de		       85 e2		      STA	o
   1842  f4e0		       85 e3		      STA	p
   1843  f4e2		       85 e4		      STA	q
   1844  f4e4		       85 e5		      STA	r
   1845  f4e6				   .L029		;  s  =  0  :	t  =  0  :  u  =  0  :	v  =  0  :  w  =  0  :	x  =  0  :  y  =  0
   1846  f4e6
   1847  f4e6		       a9 00		      LDA	#0
   1848  f4e8		       85 e6		      STA	s
   1849  f4ea		       85 e7		      STA	t
   1850  f4ec		       85 e8		      STA	u
   1851  f4ee		       85 e9		      STA	v
   1852  f4f0		       85 ea		      STA	w
   1853  f4f2		       85 eb		      STA	x
   1854  f4f4		       85 ec		      STA	y
   1855  f4f6				   .
   1856  f4f6							; 
   1857  f4f6
   1858  f4f6				   .L030		;  rem DESLIGA O SOM
   1859  f4f6
   1860  f4f6				   .L031		;  AUDV0  =  0  :  AUDV1  =  0
   1861  f4f6
   1862  f4f6		       a9 00		      LDA	#0
   1863  f4f8		       85 19		      STA	AUDV0
   1864  f4fa		       85 1a		      STA	AUDV1
   1865  f4fc				   .
   1866  f4fc							; 
   1867  f4fc
   1868  f4fc				   .L032		;  score  =  0
   1869  f4fc
   1870  f4fc		       a9 00		      LDA	#$00
   1871  f4fe		       85 95		      STA	score+2
   1872  f500		       a9 00		      LDA	#$00
   1873  f502		       85 94		      STA	score+1
   1874  f504		       a9 00		      LDA	#$00
   1875  f506		       85 93		      STA	score
   1876  f508				   .L033		;  scorecolor	=  $00
   1877  f508
   1878  f508		       a9 00		      LDA	#$00
   1879  f50a		       85 a3		      STA	scorecolor
   1880  f50c				   .L034		;  missile1y  =  0
   1881  f50c
   1882  f50c		       a9 00		      LDA	#0
   1883  f50e		       85 88		      STA	missile1y
   1884  f510				   .L035		;  bally  =  0
   1885  f510
   1886  f510		       a9 00		      LDA	#0
   1887  f512		       85 89		      STA	bally
   1888  f514				   .L036		;  COLUP1  =  00
   1889  f514
   1890  f514		       a9 00		      LDA	#00
   1891  f516		       85 07		      STA	COLUP1
   1892  f518				   .L037		;  playfield:
   1893  f518
   1894  f518				  -	      ifconst	pfres
   1895  f518				  -	      ldx	#(12>pfres)*(pfres*pfwidth-1)+(12<=pfres)*47
   1896  f518					      else
   1897  f518		       a2 2f		      ldx	#((12*pfwidth-1)*((12*pfwidth-1)<47))+(47*((12*pfwidth-1)>=47))
   1898  f51a					      endif
   1899  f51a		       4c 4d f5 	      jmp	pflabel1
   1900  f51d				   PF_data1
   1901  f51d		       00 00		      .byte.b	%00000000, %00000000
   1902  f51f					      if	(pfwidth>2)
   1903  f51f		       00 00		      .byte.b	%00000000, %00000000
   1904  f521					      endif
   1905  f521		       00 00		      .byte.b	%00000000, %00000000
   1906  f523					      if	(pfwidth>2)
   1907  f523		       00 00		      .byte.b	%00000000, %00000000
   1908  f525					      endif
   1909  f525		       00 00		      .byte.b	%00000000, %00000000
   1910  f527					      if	(pfwidth>2)
   1911  f527		       00 00		      .byte.b	%00000000, %00000000
   1912  f529					      endif
   1913  f529		       00 00		      .byte.b	%00000000, %00000000
   1914  f52b					      if	(pfwidth>2)
   1915  f52b		       00 00		      .byte.b	%00000000, %00000000
   1916  f52d					      endif
   1917  f52d		       00 00		      .byte.b	%00000000, %00000000
   1918  f52f					      if	(pfwidth>2)
   1919  f52f		       00 00		      .byte.b	%00000000, %00000000
   1920  f531					      endif
   1921  f531		       00 00		      .byte.b	%00000000, %00000000
   1922  f533					      if	(pfwidth>2)
   1923  f533		       00 00		      .byte.b	%00000000, %00000000
   1924  f535					      endif
   1925  f535		       00 00		      .byte.b	%00000000, %00000000
   1926  f537					      if	(pfwidth>2)
   1927  f537		       00 00		      .byte.b	%00000000, %00000000
   1928  f539					      endif
   1929  f539		       00 00		      .byte.b	%00000000, %00000000
   1930  f53b					      if	(pfwidth>2)
   1931  f53b		       00 00		      .byte.b	%00000000, %00000000
   1932  f53d					      endif
   1933  f53d		       00 00		      .byte.b	%00000000, %00000000
   1934  f53f					      if	(pfwidth>2)
   1935  f53f		       00 00		      .byte.b	%00000000, %00000000
   1936  f541					      endif
   1937  f541		       00 00		      .byte.b	%00000000, %00000000
   1938  f543					      if	(pfwidth>2)
   1939  f543		       00 00		      .byte.b	%00000000, %00000000
   1940  f545					      endif
   1941  f545		       00 00		      .byte.b	%00000000, %00000000
   1942  f547					      if	(pfwidth>2)
   1943  f547		       00 00		      .byte.b	%00000000, %00000000
   1944  f549					      endif
   1945  f549		       00 00		      .byte.b	%00000000, %00000000
   1946  f54b					      if	(pfwidth>2)
   1947  f54b		       00 00		      .byte.b	%00000000, %00000000
   1948  f54d					      endif
   1949  f54d				   pflabel1
   1950  f54d		       bd 1d f5 	      lda	PF_data1,x
   1951  f550		       95 a4		      sta	playfield,x
   1952  f552		       ca		      dex
   1953  f553		       10 f8		      bpl	pflabel1
   1954  f555				   .
   1955  f555							; 
   1956  f555
   1957  f555				   .L038		;  player1x  =  50  :	player1y  =  85
   1958  f555
   1959  f555		       a9 32		      LDA	#50
   1960  f557		       85 81		      STA	player1x
   1961  f559		       a9 55		      LDA	#85
   1962  f55b		       85 86		      STA	player1y
   1963  f55d				   .L039		;  player0x  =  20  :	player0y  =  1
   1964  f55d
   1965  f55d		       a9 14		      LDA	#20
   1966  f55f		       85 80		      STA	player0x
   1967  f561		       a9 01		      LDA	#1
   1968  f563		       85 85		      STA	player0y
   1969  f565				   .
   1970  f565							; 
   1971  f565
   1972  f565				   .L040		;  pfscore1 = %00010101  :  pfscorecolor  =  $40
   1973  f565
   1974  f565		       a9 15		      LDA	#%00010101
   1975  f567		       85 f2		      STA	pfscore1
   1976  f569		       a9 40		      LDA	#$40
   1977  f56b		       85 f4		      STA	pfscorecolor
   1978  f56d				   .L041		;  pfscore2 = %00010101
   1979  f56d
   1980  f56d		       a9 15		      LDA	#%00010101
   1981  f56f		       85 f3		      STA	pfscore2
   1982  f571				   .L042		;  missile1height = 5
   1983  f571
   1984  f571		       a9 05		      LDA	#5
   1985  f573		       85 87		      STA	missile1height
   1986  f575				   .
   1987  f575							; 
   1988  f575
   1989  f575				   .
   1990  f575							; 
   1991  f575
   1992  f575				   .
   1993  f575							; 
   1994  f575
   1995  f575				   .L043		;  _SC_Back  =  $70
   1996  f575
   1997  f575		       a9 70		      LDA	#$70
   1998  f577		       85 e2		      STA	_SC_Back
   1999  f579				   .
   2000  f579							; 
   2001  f579
   2002  f579				   .
   2003  f579							; 
   2004  f579
   2005  f579				   .__Main_Loop
   2006  f579							; __Main_Loop
   2007  f579
   2008  f579				   .
   2009  f579							; 
   2010  f579
   2011  f579				   .
   2012  f579							; 
   2013  f579
   2014  f579				   .L044		;  scorecolor	=  14
   2015  f579
   2016  f579		       a9 0e		      LDA	#14
   2017  f57b		       85 a3		      STA	scorecolor
   2018  f57d				   .
   2019  f57d							; 
   2020  f57d
   2021  f57d				   .
   2022  f57d							; 
   2023  f57d
   2024  f57d				   .L045		;  if joy0up then pfscroll down  :  score  =  score  +  1
   2025  f57d
   2026  f57d		       a9 10		      lda	#$10
   2027  f57f		       2c 80 02 	      bit	SWCHA
   2028  f582		       d0 1a		      BNE	.skipL045
   2029  f584				   .condpart0
   2030  f584		       a9 04		      LDA	#4
   2031  f586		       20 fe f2 	      jsr	pfscroll
   2032  f589		       f8		      SED
   2033  f58a		       18		      CLC
   2034  f58b		       a5 95		      LDA	score+2
   2035  f58d		       69 01		      ADC	#$01
   2036  f58f		       85 95		      STA	score+2
   2037  f591		       a5 94		      LDA	score+1
   2038  f593		       69 00		      ADC	#$00
   2039  f595		       85 94		      STA	score+1
   2040  f597		       a5 93		      LDA	score
   2041  f599		       69 00		      ADC	#$00
   2042  f59b		       85 93		      STA	score
   2043  f59d		       d8		      CLD
   2044  f59e				   .skipL045
   2045  f59e				   .
   2046  f59e							; 
   2047  f59e
   2048  f59e				   .
   2049  f59e							; 
   2050  f59e
   2051  f59e				   .L046		;  if joy0left then player1x  =  player1x  -  1  :  goto __skip_joy
   2052  f59e
   2053  f59e		       2c 80 02 	      bit	SWCHA
   2054  f5a1		       70 05		      BVS	.skipL046
   2055  f5a3				   .condpart1
   2056  f5a3		       c6 81		      DEC	player1x
   2057  f5a5		       4c b2 f5 	      jmp	.__skip_joy
   2058  f5a8
   2059  f5a8				   .skipL046
   2060  f5a8				   .L047		;  if joy0right then player1x	=  player1x  +	1  :  goto __skip_joy
   2061  f5a8
   2062  f5a8		       2c 80 02 	      bit	SWCHA
   2063  f5ab		       30 05		      BMI	.skipL047
   2064  f5ad				   .condpart2
   2065  f5ad		       e6 81		      INC	player1x
   2066  f5af		       4c b2 f5 	      jmp	.__skip_joy
   2067  f5b2
   2068  f5b2				   .skipL047
   2069  f5b2				   .
   2070  f5b2							; 
   2071  f5b2
   2072  f5b2				   .__skip_joy
   2073  f5b2							; __skip_joy
   2074  f5b2
   2075  f5b2				   .
   2076  f5b2							; 
   2077  f5b2
   2078  f5b2				   .
   2079  f5b2							; 
   2080  f5b2
   2081  f5b2				   .
   2082  f5b2							; 
   2083  f5b2
   2084  f5b2				   .L048		;  if !_bit_supressores{4} then goto __nave
   2085  f5b2
   2086  f5b2		       a5 dd		      LDA	_bit_supressores
   2087  f5b4		       29 10		      AND	#16
   2088  f5b6		       d0 03		      BNE	.skipL048
   2089  f5b8				   .condpart3
   2090  f5b8		       4c 23 fa 	      jmp	.__nave
   2091  f5bb
   2092  f5bb				   .skipL048
   2093  f5bb				   .__retorna_nave
   2094  f5bb							; __retorna_nave
   2095  f5bb
   2096  f5bb				   .
   2097  f5bb							; 
   2098  f5bb
   2099  f5bb				   .L049		;  if _bit_supressores{4} then goto __skip_escudo
   2100  f5bb
   2101  f5bb		       a5 dd		      LDA	_bit_supressores
   2102  f5bd		       29 10		      AND	#16
   2103  f5bf		       f0 03		      BEQ	.skipL049
   2104  f5c1				   .condpart4
   2105  f5c1		       4c e7 f5 	      jmp	.__skip_escudo
   2106  f5c4
   2107  f5c4				   .skipL049
   2108  f5c4				   .L050		;  if pfscore1  =  0 then _bit_supressores{4}	=  0  :  goto __skip_escudo
   2109  f5c4
   2110  f5c4		       a5 f2		      LDA	pfscore1
   2111  f5c6		       c9 00		      CMP	#0
   2112  f5c8		       d0 09		      BNE	.skipL050
   2113  f5ca				   .condpart5
   2114  f5ca		       a5 dd		      LDA	_bit_supressores
   2115  f5cc		       29 ef		      AND	#239
   2116  f5ce		       85 dd		      STA	_bit_supressores
   2117  f5d0		       4c e7 f5 	      jmp	.__skip_escudo
   2118  f5d3
   2119  f5d3				   .skipL050
   2120  f5d3				   .L051		;  if joy0down then _bit_supressores{4}  =  1	:  e  =  40  :	goto __escudo
   2121  f5d3
   2122  f5d3		       a9 20		      lda	#$20
   2123  f5d5		       2c 80 02 	      bit	SWCHA
   2124  f5d8		       d0 0d		      BNE	.skipL051
   2125  f5da				   .condpart6
   2126  f5da		       a5 dd		      LDA	_bit_supressores
   2127  f5dc		       09 10		      ORA	#16
   2128  f5de		       85 dd		      STA	_bit_supressores
   2129  f5e0		       a9 28		      LDA	#40
   2130  f5e2		       85 d8		      STA	e
   2131  f5e4		       4c 14 fa 	      jmp	.__escudo
   2132  f5e7
   2133  f5e7				   .skipL051
   2134  f5e7				   .__skip_escudo
   2135  f5e7							; __skip_escudo
   2136  f5e7
   2137  f5e7				   .
   2138  f5e7							; 
   2139  f5e7
   2140  f5e7				   .
   2141  f5e7							; 
   2142  f5e7
   2143  f5e7				   .L052		;  if missile1y  >  240 then _bit_supressores{1}  =  0  :  goto __skip_missile1
   2144  f5e7
   2145  f5e7		       a9 f0		      LDA	#240
   2146  f5e9		       c5 88		      CMP	missile1y
   2147  f5eb		       b0 09		      BCS	.skipL052
   2148  f5ed				   .condpart7
   2149  f5ed		       a5 dd		      LDA	_bit_supressores
   2150  f5ef		       29 fd		      AND	#253
   2151  f5f1		       85 dd		      STA	_bit_supressores
   2152  f5f3		       4c fd f5 	      jmp	.__skip_missile1
   2153  f5f6
   2154  f5f6				   .skipL052
   2155  f5f6				   .L053		;  missile1y  =  missile1y  -	2
   2156  f5f6
   2157  f5f6		       a5 88		      LDA	missile1y
   2158  f5f8		       38		      SEC
   2159  f5f9		       e9 02		      SBC	#2
   2160  f5fb		       85 88		      STA	missile1y
   2161  f5fd				   .__skip_missile1
   2162  f5fd							; __skip_missile1
   2163  f5fd
   2164  f5fd				   .
   2165  f5fd							; 
   2166  f5fd
   2167  f5fd				   .L054		;  if _bit_supressores{1} then __skip_fire
   2168  f5fd
   2169  f5fd		       a5 dd		      LDA	_bit_supressores
   2170  f5ff		       29 02		      AND	#2
   2171  f601		       d0 26		      bne	.__skip_fire
   2172  f603				   .L055		;  if joy0fire then AUDV0  =  0  :  _duracao_som0  =  10  :  _bit_supressores{1}  =  1  :  _bit_supressores{3}  =  1  :  missile1y = player1y - 3 : missile1x = player1x + 5
   2173  f603
   2174  f603		       24 0c		      bit	INPT4
   2175  f605		       30 22		      BMI	.skipL055
   2176  f607				   .condpart8
   2177  f607		       a9 00		      LDA	#0
   2178  f609		       85 19		      STA	AUDV0
   2179  f60b		       a9 0a		      LDA	#10
   2180  f60d		       85 d9		      STA	_duracao_som0
   2181  f60f		       a5 dd		      LDA	_bit_supressores
   2182  f611		       09 02		      ORA	#2
   2183  f613		       85 dd		      STA	_bit_supressores
   2184  f615		       a5 dd		      LDA	_bit_supressores
   2185  f617		       09 08		      ORA	#8
   2186  f619		       85 dd		      STA	_bit_supressores
   2187  f61b		       a5 86		      LDA	player1y
   2188  f61d		       38		      SEC
   2189  f61e		       e9 03		      SBC	#3
   2190  f620		       85 88		      STA	missile1y
   2191  f622		       a5 81		      LDA	player1x
   2192  f624		       18		      CLC
   2193  f625		       69 05		      ADC	#5
   2194  f627		       85 83		      STA	missile1x
   2195  f629				   .skipL055
   2196  f629				   .__skip_fire
   2197  f629							; __skip_fire
   2198  f629
   2199  f629				   .
   2200  f629							; 
   2201  f629
   2202  f629				   .
   2203  f629							; 
   2204  f629
   2205  f629				   .
   2206  f629							; 
   2207  f629
   2208  f629				   .__fases
   2209  f629							; __fases
   2210  f629
   2211  f629				   .
   2212  f629							; 
   2213  f629
   2214  f629				   .L056		;  if _cont_telas  >=	10  &&	!_bit_supressores{5} then _cont_telas  =  10  :  _bit_supressores{5}  =  1
   2215  f629
   2216  f629		       a5 e6		      LDA	_cont_telas
   2217  f62b		       c9 0a		      CMP	#10
   2218  f62d		       90 10		      BCC	.skipL056
   2219  f62f				   .condpart9
   2220  f62f		       a5 dd		      LDA	_bit_supressores
   2221  f631		       29 20		      AND	#32
   2222  f633		       d0 0a		      BNE	.skip9then
   2223  f635				   .condpart10
   2224  f635		       a9 0a		      LDA	#10
   2225  f637		       85 e6		      STA	_cont_telas
   2226  f639		       a5 dd		      LDA	_bit_supressores
   2227  f63b		       09 20		      ORA	#32
   2228  f63d		       85 dd		      STA	_bit_supressores
   2229  f63f				   .skip9then
   2230  f63f				   .skipL056
   2231  f63f				   .L057		;  if _bit_supressores{5} then goto __transicao
   2232  f63f
   2233  f63f		       a5 dd		      LDA	_bit_supressores
   2234  f641		       29 20		      AND	#32
   2235  f643		       f0 03		      BEQ	.skipL057
   2236  f645				   .condpart11
   2237  f645		       4c 54 fa 	      jmp	.__transicao
   2238  f648
   2239  f648				   .skipL057
   2240  f648				   .
   2241  f648							; 
   2242  f648
   2243  f648				   .__skip_transicao
   2244  f648							; __skip_transicao
   2245  f648
   2246  f648				   .
   2247  f648							; 
   2248  f648
   2249  f648				   .L058		;  if _fases  >  100 then _fases  =  0
   2250  f648
   2251  f648		       a9 64		      LDA	#100
   2252  f64a		       c5 e4		      CMP	_fases
   2253  f64c		       b0 04		      BCS	.skipL058
   2254  f64e				   .condpart12
   2255  f64e		       a9 00		      LDA	#0
   2256  f650		       85 e4		      STA	_fases
   2257  f652				   .skipL058
   2258  f652				   .
   2259  f652							; 
   2260  f652
   2261  f652				   .L059		;  if _fases  =  0 then COLUPF  =  $00  :  COLUBK  =  $8A  :  gosub __regular	:  gosub __inimigo_bomba
   2262  f652
   2263  f652		       a5 e4		      LDA	_fases
   2264  f654		       c9 00		      CMP	#0
   2265  f656		       d0 0e		      BNE	.skipL059
   2266  f658				   .condpart13
   2267  f658		       a9 00		      LDA	#$00
   2268  f65a		       85 08		      STA	COLUPF
   2269  f65c		       a9 8a		      LDA	#$8A
   2270  f65e		       85 09		      STA	COLUBK
   2271  f660		       20 39 f8 	      jsr	.__regular
   2272  f663		       20 6d f9 	      jsr	.__inimigo_bomba
   2273  f666
   2274  f666				   .skipL059
   2275  f666				   .L060		;  if _fases  >=  1 then COLUPF  =  $04  :  COLUBK  =	$00  :	COLUP1	=  14  :  gosub __regular  :  gosub __inimigo_tie
   2276  f666
   2277  f666		       a5 e4		      LDA	_fases
   2278  f668		       c9 01		      CMP	#1
   2279  f66a		       90 12		      BCC	.skipL060
   2280  f66c				   .condpart14
   2281  f66c		       a9 04		      LDA	#$04
   2282  f66e		       85 08		      STA	COLUPF
   2283  f670		       a9 00		      LDA	#$00
   2284  f672		       85 09		      STA	COLUBK
   2285  f674		       a9 0e		      LDA	#14
   2286  f676		       85 07		      STA	COLUP1
   2287  f678		       20 39 f8 	      jsr	.__regular
   2288  f67b		       20 c7 f9 	      jsr	.__inimigo_tie
   2289  f67e
   2290  f67e				   .skipL060
   2291  f67e				   .
   2292  f67e							; 
   2293  f67e
   2294  f67e				   .
   2295  f67e							; 
   2296  f67e
   2297  f67e				   .L061		;  _animacao  =  _animacao  +	1
   2298  f67e
   2299  f67e		       e6 e1		      INC	_animacao
   2300  f680				   .L062		;  if _animacao  =  21 then _animacao	=  0
   2301  f680
   2302  f680		       a5 e1		      LDA	_animacao
   2303  f682		       c9 15		      CMP	#21
   2304  f684		       d0 04		      BNE	.skipL062
   2305  f686				   .condpart15
   2306  f686		       a9 00		      LDA	#0
   2307  f688		       85 e1		      STA	_animacao
   2308  f68a				   .skipL062
   2309  f68a				   .
   2310  f68a							; 
   2311  f68a
   2312  f68a				   .L063		;  _cont_escudo  =  _cont_escudo  -  1
   2313  f68a
   2314  f68a		       c6 d8		      DEC	_cont_escudo
   2315  f68c				   .L064		;  if _cont_escudo  =	0  &&  _bit_supressores{4} then pfscore1  =  pfscore1 / 4  :  _bit_supressores{4}  =  0
   2316  f68c
   2317  f68c		       a5 d8		      LDA	_cont_escudo
   2318  f68e		       c9 00		      CMP	#0
   2319  f690		       d0 12		      BNE	.skipL064
   2320  f692				   .condpart16
   2321  f692		       a5 dd		      LDA	_bit_supressores
   2322  f694		       29 10		      AND	#16
   2323  f696		       f0 0c		      BEQ	.skip16then
   2324  f698				   .condpart17
   2325  f698		       a5 f2		      LDA	pfscore1
   2326  f69a		       4a		      lsr
   2327  f69b		       4a		      lsr
   2328  f69c		       85 f2		      STA	pfscore1
   2329  f69e		       a5 dd		      LDA	_bit_supressores
   2330  f6a0		       29 ef		      AND	#239
   2331  f6a2		       85 dd		      STA	_bit_supressores
   2332  f6a4				   .skip16then
   2333  f6a4				   .skipL064
   2334  f6a4				   .
   2335  f6a4							; 
   2336  f6a4
   2337  f6a4				   .
   2338  f6a4							; 
   2339  f6a4
   2340  f6a4				   .L065		;  if _fases  <  4 then c  =  d  +  8	:  goto __skip_dificuldade
   2341  f6a4
   2342  f6a4		       a5 e4		      LDA	_fases
   2343  f6a6		       c9 04		      CMP	#4
   2344  f6a8		       b0 0a		      BCS	.skipL065
   2345  f6aa				   .condpart18
   2346  f6aa		       a5 d7		      LDA	d
   2347  f6ac		       18		      CLC
   2348  f6ad		       69 08		      ADC	#8
   2349  f6af		       85 d6		      STA	c
   2350  f6b1		       4c 0d f7 	      jmp	.__skip_dificuldade
   2351  f6b4
   2352  f6b4				   .skipL065
   2353  f6b4				   .L066		;  if _fases  <  8 then c  =  d  +  6	:  goto __skip_dificuldade
   2354  f6b4
   2355  f6b4		       a5 e4		      LDA	_fases
   2356  f6b6		       c9 08		      CMP	#8
   2357  f6b8		       b0 0a		      BCS	.skipL066
   2358  f6ba				   .condpart19
   2359  f6ba		       a5 d7		      LDA	d
   2360  f6bc		       18		      CLC
   2361  f6bd		       69 06		      ADC	#6
   2362  f6bf		       85 d6		      STA	c
   2363  f6c1		       4c 0d f7 	      jmp	.__skip_dificuldade
   2364  f6c4
   2365  f6c4				   .skipL066
   2366  f6c4				   .
   2367  f6c4							; 
   2368  f6c4
   2369  f6c4				   .L067		;  if _fases  <  12 then goto __randomicos
   2370  f6c4
   2371  f6c4		       a5 e4		      LDA	_fases
   2372  f6c6		       c9 0c		      CMP	#12
   2373  f6c8		       b0 03		      BCS	.skipL067
   2374  f6ca				   .condpart20
   2375  f6ca		       4c cd f6 	      jmp	.__randomicos
   2376  f6cd
   2377  f6cd				   .skipL067
   2378  f6cd				   .__randomicos
   2379  f6cd							; __randomicos
   2380  f6cd
   2381  f6cd				   .
   2382  f6cd							; 
   2383  f6cd
   2384  f6cd				   .L068		;  if _dificuldade  =	0 then c  =  d	+  8  :  goto __skip_dificuldade
   2385  f6cd
   2386  f6cd		       a5 df		      LDA	_dificuldade
   2387  f6cf		       c9 00		      CMP	#0
   2388  f6d1		       d0 0a		      BNE	.skipL068
   2389  f6d3				   .condpart21
   2390  f6d3		       a5 d7		      LDA	d
   2391  f6d5		       18		      CLC
   2392  f6d6		       69 08		      ADC	#8
   2393  f6d8		       85 d6		      STA	c
   2394  f6da		       4c 0d f7 	      jmp	.__skip_dificuldade
   2395  f6dd
   2396  f6dd				   .skipL068
   2397  f6dd				   .L069		;  if _dificuldade  =	1 then c  =  d	+  6  :  goto __skip_dificuldade
   2398  f6dd
   2399  f6dd		       a5 df		      LDA	_dificuldade
   2400  f6df		       c9 01		      CMP	#1
   2401  f6e1		       d0 0a		      BNE	.skipL069
   2402  f6e3				   .condpart22
   2403  f6e3		       a5 d7		      LDA	d
   2404  f6e5		       18		      CLC
   2405  f6e6		       69 06		      ADC	#6
   2406  f6e8		       85 d6		      STA	c
   2407  f6ea		       4c 0d f7 	      jmp	.__skip_dificuldade
   2408  f6ed
   2409  f6ed				   .skipL069
   2410  f6ed				   .L070		;  if _dificuldade  =	2 then c  =  d	+  4  :  goto __skip_dificuldade
   2411  f6ed
   2412  f6ed		       a5 df		      LDA	_dificuldade
   2413  f6ef		       c9 02		      CMP	#2
   2414  f6f1		       d0 0a		      BNE	.skipL070
   2415  f6f3				   .condpart23
   2416  f6f3		       a5 d7		      LDA	d
   2417  f6f5		       18		      CLC
   2418  f6f6		       69 04		      ADC	#4
   2419  f6f8		       85 d6		      STA	c
   2420  f6fa		       4c 0d f7 	      jmp	.__skip_dificuldade
   2421  f6fd
   2422  f6fd				   .skipL070
   2423  f6fd				   .L071		;  if _dificuldade  =	3 then c  =  d	+  2  :  goto __skip_dificuldade
   2424  f6fd
   2425  f6fd		       a5 df		      LDA	_dificuldade
   2426  f6ff		       c9 03		      CMP	#3
   2427  f701		       d0 0a		      BNE	.skipL071
   2428  f703				   .condpart24
   2429  f703		       a5 d7		      LDA	d
   2430  f705		       18		      CLC
   2431  f706		       69 02		      ADC	#2
   2432  f708		       85 d6		      STA	c
   2433  f70a		       4c 0d f7 	      jmp	.__skip_dificuldade
   2434  f70d
   2435  f70d				   .skipL071
   2436  f70d				   .
   2437  f70d							; 
   2438  f70d
   2439  f70d				   .__skip_dificuldade
   2440  f70d							; __skip_dificuldade
   2441  f70d
   2442  f70d				   .
   2443  f70d							; 
   2444  f70d
   2445  f70d				   .
   2446  f70d							; 
   2447  f70d
   2448  f70d				   .
   2449  f70d							; 
   2450  f70d
   2451  f70d				   .L072		;  pfhline d 1 c off
   2452  f70d
   2453  f70d		       a2 01		      LDX	#1
   2454  f70f		       a5 d6		      LDA	c
   2455  f711		       85 9e		      STA	temp3
   2456  f713		       a0 01		      LDY	#1
   2457  f715		       a5 d7		      LDA	d
   2458  f717		       20 89 f2 	      jsr	pfhline
   2459  f71a				   .L073		;  goto __pfscroll
   2460  f71a
   2461  f71a		       4c 31 f8 	      jmp	.__pfscroll
   2462  f71d
   2463  f71d				   .
   2464  f71d							; 
   2465  f71d
   2466  f71d				   .__skip_scroll
   2467  f71d							; __skip_scroll
   2468  f71d
   2469  f71d				   .L074		;  drawscreen
   2470  f71d
   2471  f71d		       20 cc f3 	      jsr	drawscreen
   2472  f720				   .
   2473  f720							; 
   2474  f720
   2475  f720				   .
   2476  f720							; 
   2477  f720
   2478  f720				   .
   2479  f720							; 
   2480  f720
   2481  f720				   .L075		;  if _bit_supressores{4} then goto __skip_collision  :  rem se escudo on pula as colisoes
   2482  f720
   2483  f720		       a5 dd		      LDA	_bit_supressores
   2484  f722		       29 10		      AND	#16
   2485  f724		       f0 03		      BEQ	.skipL075
   2486  f726				   .condpart25
   2487  f726		       4c 70 f7 	      jmp	.__skip_collision
   2488  f729				   .skipL075
   2489  f729				   .
   2490  f729							; 
   2491  f729
   2492  f729				   .L076		;  if collision(ball,player1) then _duracao_som0  =  80  :  pfscore2  =  pfscore2 / 4	:  goto __perde_vida
   2493  f729
   2494  f729		       24 03		      bit	CXP1FB
   2495  f72b		       50 0d		      BVC	.skipL076
   2496  f72d				   .condpart26
   2497  f72d		       a9 50		      LDA	#80
   2498  f72f		       85 d9		      STA	_duracao_som0
   2499  f731		       a5 f3		      LDA	pfscore2
   2500  f733		       4a		      lsr
   2501  f734		       4a		      lsr
   2502  f735		       85 f3		      STA	pfscore2
   2503  f737		       4c b8 f8 	      jmp	.__perde_vida
   2504  f73a
   2505  f73a				   .skipL076
   2506  f73a				   .L077		;  if collision(ball,missile1) then bally  =  100  :  missile1y  =  0
   2507  f73a
   2508  f73a		       24 05		      bit	CXM1FB
   2509  f73c		       50 08		      BVC	.skipL077
   2510  f73e				   .condpart27
   2511  f73e		       a9 64		      LDA	#100
   2512  f740		       85 89		      STA	bally
   2513  f742		       a9 00		      LDA	#0
   2514  f744		       85 88		      STA	missile1y
   2515  f746				   .skipL077
   2516  f746				   .L078		;  if collision(player1,playfield) then _duracao_som0	=  80  :  pfscore2  =  pfscore2 / 4  :	goto __perde_vida
   2517  f746
   2518  f746		       24 03		      bit	CXP1FB
   2519  f748		       10 0d		      BPL	.skipL078
   2520  f74a				   .condpart28
   2521  f74a		       a9 50		      LDA	#80
   2522  f74c		       85 d9		      STA	_duracao_som0
   2523  f74e		       a5 f3		      LDA	pfscore2
   2524  f750		       4a		      lsr
   2525  f751		       4a		      lsr
   2526  f752		       85 f3		      STA	pfscore2
   2527  f754		       4c b8 f8 	      jmp	.__perde_vida
   2528  f757
   2529  f757				   .skipL078
   2530  f757				   .L079		;  if collision(missile1,playfield) then missile1y  =	1
   2531  f757
   2532  f757		       24 05		      bit	CXM1FB
   2533  f759		       10 04		      BPL	.skipL079
   2534  f75b				   .condpart29
   2535  f75b		       a9 01		      LDA	#1
   2536  f75d		       85 88		      STA	missile1y
   2537  f75f				   .skipL079
   2538  f75f				   .L080		;  if collision(player0,player1) then _duracao_som0  =  80  :	pfscore2  =  pfscore2 / 4  :  goto __perde_vida
   2539  f75f
   2540  f75f		       24 07		      bit	CXPPMM
   2541  f761		       10 0d		      BPL	.skipL080
   2542  f763				   .condpart30
   2543  f763		       a9 50		      LDA	#80
   2544  f765		       85 d9		      STA	_duracao_som0
   2545  f767		       a5 f3		      LDA	pfscore2
   2546  f769		       4a		      lsr
   2547  f76a		       4a		      lsr
   2548  f76b		       85 f3		      STA	pfscore2
   2549  f76d		       4c b8 f8 	      jmp	.__perde_vida
   2550  f770
   2551  f770				   .skipL080
   2552  f770				   .__skip_perde_vida
   2553  f770							; __skip_perde_vida
   2554  f770
   2555  f770				   .__skip_collision
   2556  f770							; __skip_collision
   2557  f770
   2558  f770				   .
   2559  f770							; 
   2560  f770
   2561  f770				   .
   2562  f770							; 
   2563  f770
   2564  f770				   .L081		;  if _fases  =  0 then goto __fase0
   2565  f770
   2566  f770		       a5 e4		      LDA	_fases
   2567  f772		       c9 00		      CMP	#0
   2568  f774		       d0 03		      BNE	.skipL081
   2569  f776				   .condpart31
   2570  f776		       4c 82 f7 	      jmp	.__fase0
   2571  f779
   2572  f779				   .skipL081
   2573  f779				   .L082		;  if _fases  >=  1 then goto __fase1
   2574  f779
   2575  f779		       a5 e4		      LDA	_fases
   2576  f77b		       c9 01		      CMP	#1
   2577  f77d		       90 03		      BCC	.skipL082
   2578  f77f				   .condpart32
   2579  f77f		       4c ac f7 	      jmp	.__fase1
   2580  f782
   2581  f782				   .skipL082
   2582  f782				   .
   2583  f782							; 
   2584  f782
   2585  f782				   .
   2586  f782							; 
   2587  f782
   2588  f782				   .__fase0
   2589  f782							; __fase0
   2590  f782
   2591  f782				   .L083		;  if collision(missile1,player0) then missile1y  =  0  :  bally = 0  :  _bit_supressores{3}  =  0  :	_duracao_som0  =  10  :  score	=  score  +  100  :  player0y  =  0
   2592  f782
   2593  f782		       24 01		      bit	CXM1P
   2594  f784		       10 23		      BPL	.skipL083
   2595  f786				   .condpart33
   2596  f786		       a9 00		      LDA	#0
   2597  f788		       85 88		      STA	missile1y
   2598  f78a		       85 89		      STA	bally
   2599  f78c		       a5 dd		      LDA	_bit_supressores
   2600  f78e		       29 f7		      AND	#247
   2601  f790		       85 dd		      STA	_bit_supressores
   2602  f792		       a9 0a		      LDA	#10
   2603  f794		       85 d9		      STA	_duracao_som0
   2604  f796		       f8		      SED
   2605  f797		       18		      CLC
   2606  f798		       a5 94		      LDA	score+1
   2607  f79a		       69 01		      ADC	#$01
   2608  f79c		       85 94		      STA	score+1
   2609  f79e		       a5 93		      LDA	score
   2610  f7a0		       69 00		      ADC	#$00
   2611  f7a2		       85 93		      STA	score
   2612  f7a4		       d8		      CLD
   2613  f7a5		       a9 00		      LDA	#0
   2614  f7a7		       85 85		      STA	player0y
   2615  f7a9				   .skipL083
   2616  f7a9				   .L084		;  goto __skip_collision_fases
   2617  f7a9
   2618  f7a9		       4c d6 f7 	      jmp	.__skip_collision_fases
   2619  f7ac
   2620  f7ac				   .__fase1
   2621  f7ac							; __fase1
   2622  f7ac
   2623  f7ac				   .L085		;  if collision(missile1,player0) then missile1y  =  0  :  bally = 0  :  _bit_supressores{3}  =  0  :	_duracao_som0  =  10  :  score	=  score  +  100  :  player0y  =  0
   2624  f7ac
   2625  f7ac		       24 01		      bit	CXM1P
   2626  f7ae		       10 23		      BPL	.skipL085
   2627  f7b0				   .condpart34
   2628  f7b0		       a9 00		      LDA	#0
   2629  f7b2		       85 88		      STA	missile1y
   2630  f7b4		       85 89		      STA	bally
   2631  f7b6		       a5 dd		      LDA	_bit_supressores
   2632  f7b8		       29 f7		      AND	#247
   2633  f7ba		       85 dd		      STA	_bit_supressores
   2634  f7bc		       a9 0a		      LDA	#10
   2635  f7be		       85 d9		      STA	_duracao_som0
   2636  f7c0		       f8		      SED
   2637  f7c1		       18		      CLC
   2638  f7c2		       a5 94		      LDA	score+1
   2639  f7c4		       69 01		      ADC	#$01
   2640  f7c6		       85 94		      STA	score+1
   2641  f7c8		       a5 93		      LDA	score
   2642  f7ca		       69 00		      ADC	#$00
   2643  f7cc		       85 93		      STA	score
   2644  f7ce		       d8		      CLD
   2645  f7cf		       a9 00		      LDA	#0
   2646  f7d1		       85 85		      STA	player0y
   2647  f7d3				   .skipL085
   2648  f7d3				   .L086		;  goto __skip_collision_fases
   2649  f7d3
   2650  f7d3		       4c d6 f7 	      jmp	.__skip_collision_fases
   2651  f7d6
   2652  f7d6				   .
   2653  f7d6							; 
   2654  f7d6
   2655  f7d6				   .__skip_collision_fases
   2656  f7d6							; __skip_collision_fases
   2657  f7d6
   2658  f7d6				   .
   2659  f7d6							; 
   2660  f7d6
   2661  f7d6				   .
   2662  f7d6							; 
   2663  f7d6
   2664  f7d6				   .
   2665  f7d6							; 
   2666  f7d6
   2667  f7d6				   .L087		;  if _bit_supressores{3} then goto __skip_som_morte_inimigo
   2668  f7d6
   2669  f7d6		       a5 dd		      LDA	_bit_supressores
   2670  f7d8		       29 08		      AND	#8
   2671  f7da		       f0 03		      BEQ	.skipL087
   2672  f7dc				   .condpart35
   2673  f7dc		       4c fa f7 	      jmp	.__skip_som_morte_inimigo
   2674  f7df
   2675  f7df				   .skipL087
   2676  f7df				   .L088		;  if _duracao_som0  =  0 then AUDV0  =  0  :	goto __skip_som_morte_inimigo
   2677  f7df
   2678  f7df		       a5 d9		      LDA	_duracao_som0
   2679  f7e1		       c9 00		      CMP	#0
   2680  f7e3		       d0 07		      BNE	.skipL088
   2681  f7e5				   .condpart36
   2682  f7e5		       a9 00		      LDA	#0
   2683  f7e7		       85 19		      STA	AUDV0
   2684  f7e9		       4c fa f7 	      jmp	.__skip_som_morte_inimigo
   2685  f7ec
   2686  f7ec				   .skipL088
   2687  f7ec				   .
   2688  f7ec							; 
   2689  f7ec
   2690  f7ec				   .L089		;  AUDV0  =  15  :  rem volume
   2691  f7ec
   2692  f7ec		       a9 0f		      LDA	#15
   2693  f7ee		       85 19		      STA	AUDV0
   2694  f7f0				   .L090		;  AUDC0  =  12  :  rem tom
   2695  f7f0
   2696  f7f0		       a9 0c		      LDA	#12
   2697  f7f2		       85 15		      STA	AUDC0
   2698  f7f4				   .L091		;  AUDF0  =  10  :  rem distorcao
   2699  f7f4
   2700  f7f4		       a9 0a		      LDA	#10
   2701  f7f6		       85 17		      STA	AUDF0
   2702  f7f8				   .L092		;  _duracao_som0  =  _duracao_som0  -	1
   2703  f7f8
   2704  f7f8		       c6 d9		      DEC	_duracao_som0
   2705  f7fa				   .__skip_som_morte_inimigo
   2706  f7fa							; __skip_som_morte_inimigo
   2707  f7fa
   2708  f7fa				   .
   2709  f7fa							; 
   2710  f7fa
   2711  f7fa				   .
   2712  f7fa							; 
   2713  f7fa
   2714  f7fa				   .L093		;  if !_bit_supressores{3} then goto __skip_som_tiro
   2715  f7fa
   2716  f7fa		       a5 dd		      LDA	_bit_supressores
   2717  f7fc		       29 08		      AND	#8
   2718  f7fe		       d0 03		      BNE	.skipL093
   2719  f800				   .condpart37
   2720  f800		       4c 24 f8 	      jmp	.__skip_som_tiro
   2721  f803
   2722  f803				   .skipL093
   2723  f803				   .L094		;  if _duracao_som0  =  0 then AUDV0  =  0  :	_bit_supressores{3}  =	0  :  goto __skip_som_tiro
   2724  f803
   2725  f803		       a5 d9		      LDA	_duracao_som0
   2726  f805		       c9 00		      CMP	#0
   2727  f807		       d0 0d		      BNE	.skipL094
   2728  f809				   .condpart38
   2729  f809		       a9 00		      LDA	#0
   2730  f80b		       85 19		      STA	AUDV0
   2731  f80d		       a5 dd		      LDA	_bit_supressores
   2732  f80f		       29 f7		      AND	#247
   2733  f811		       85 dd		      STA	_bit_supressores
   2734  f813		       4c 24 f8 	      jmp	.__skip_som_tiro
   2735  f816
   2736  f816				   .skipL094
   2737  f816				   .L095		;  AUDV0 = 15	:  rem volume
   2738  f816
   2739  f816		       a9 0f		      LDA	#15
   2740  f818		       85 19		      STA	AUDV0
   2741  f81a				   .L096		;  AUDC0  =  8  :  rem tom
   2742  f81a
   2743  f81a		       a9 08		      LDA	#8
   2744  f81c		       85 15		      STA	AUDC0
   2745  f81e				   .L097		;  AUDF0  =  8  :  rem distorcao
   2746  f81e
   2747  f81e		       a9 08		      LDA	#8
   2748  f820		       85 17		      STA	AUDF0
   2749  f822				   .L098		;  _duracao_som0  =  _duracao_som0  -	1
   2750  f822
   2751  f822		       c6 d9		      DEC	_duracao_som0
   2752  f824				   .__skip_som_tiro
   2753  f824							; __skip_som_tiro
   2754  f824
   2755  f824				   .
   2756  f824							; 
   2757  f824
   2758  f824				   .
   2759  f824							; 
   2760  f824
   2761  f824				   .
   2762  f824							; 
   2763  f824
   2764  f824				   .
   2765  f824							; 
   2766  f824
   2767  f824				   .L099		;  if switchreset then goto __reset_game
   2768  f824
   2769  f824		       a9 01		      lda	#1
   2770  f826		       2c 82 02 	      bit	SWCHB
   2771  f829		       d0 03		      BNE	.skipL099
   2772  f82b				   .condpart39
   2773  f82b		       4c c4 f4 	      jmp	.__reset_game
   2774  f82e
   2775  f82e				   .skipL099
   2776  f82e				   .
   2777  f82e							; 
   2778  f82e
   2779  f82e				   .L0100		;  goto __Main_Loop
   2780  f82e
   2781  f82e		       4c 79 f5 	      jmp	.__Main_Loop
   2782  f831
   2783  f831				   .
   2784  f831							; 
   2785  f831
   2786  f831				   .
   2787  f831							; 
   2788  f831
   2789  f831				   .__pfscroll
   2790  f831							; __pfscroll
   2791  f831
   2792  f831				   .L0101		;  pfscroll down
   2793  f831
   2794  f831		       a9 04		      LDA	#4
   2795  f833		       20 fe f2 	      jsr	pfscroll
   2796  f836				   .L0102		;  goto __skip_scroll
   2797  f836
   2798  f836		       4c 1d f7 	      jmp	.__skip_scroll
   2799  f839
   2800  f839				   .
   2801  f839							; 
   2802  f839
   2803  f839				   .
   2804  f839							; 
   2805  f839
   2806  f839				   .__regular
   2807  f839							; __regular
   2808  f839
   2809  f839				   .
   2810  f839							; 
   2811  f839
   2812  f839				   .
   2813  f839							; 
   2814  f839
   2815  f839				   .L0103		;  if !pfread ( 0 , 11 )  then _dificuldade  =   ( rand & 3 )	 :  goto __redesenha else return thisbank
   2816  f839
   2817  f839		       a9 00		      LDA	#0
   2818  f83b		       a0 0b		      LDY	#11
   2819  f83d		       20 76 f2 	      jsr	pfread
   2820  f840		       f0 0d		      BEQ	.skipL0103
   2821  f842				   .condpart40
   2822  f842							; complex statement detected
   2823  f842		       20 be f3 	      jsr	randomize
   2824  f845		       29 03		      AND	#3
   2825  f847		       85 df		      STA	_dificuldade
   2826  f849		       4c 50 f8 	      jmp	.__redesenha
   2827  f84c		       4c 50 f8 	      jmp	.skipelse0
   2828  f84f				   .skipL0103
   2829  f84f		       60		      RTS
   2830  f850				   .skipelse0
   2831  f850				   .
   2832  f850							; 
   2833  f850
   2834  f850				   .__redesenha
   2835  f850							; __redesenha
   2836  f850
   2837  f850				   .L0104		;  _cont_telas  =  _cont_telas  +  1
   2838  f850
   2839  f850		       e6 e6		      INC	_cont_telas
   2840  f852				   .L0105		;  d  =   ( rand / 16 )   +  1
   2841  f852
   2842  f852							; complex statement detected
   2843  f852		       20 be f3 	      jsr	randomize
   2844  f855		       4a		      lsr
   2845  f856		       4a		      lsr
   2846  f857		       4a		      lsr
   2847  f858		       4a		      lsr
   2848  f859		       18		      CLC
   2849  f85a		       69 01		      ADC	#1
   2850  f85c		       85 d7		      STA	d
   2851  f85e				   .L0106		;  d  =  d  +	2
   2852  f85e
   2853  f85e		       a5 d7		      LDA	d
   2854  f860		       18		      CLC
   2855  f861		       69 02		      ADC	#2
   2856  f863		       85 d7		      STA	d
   2857  f865				   .L0107		;  playfield:
   2858  f865
   2859  f865				  -	      ifconst	pfres
   2860  f865				  -	      ldx	#(12>pfres)*(pfres*pfwidth-1)+(12<=pfres)*47
   2861  f865					      else
   2862  f865		       a2 2f		      ldx	#((12*pfwidth-1)*((12*pfwidth-1)<47))+(47*((12*pfwidth-1)>=47))
   2863  f867					      endif
   2864  f867		       4c 9a f8 	      jmp	pflabel2
   2865  f86a				   PF_data2
   2866  f86a		       7f ff		      .byte.b	%01111111, %11111111
   2867  f86c					      if	(pfwidth>2)
   2868  f86c		       ff 7f		      .byte.b	%11111111, %01111111
   2869  f86e					      endif
   2870  f86e		       aa 55		      .byte.b	%10101010, %01010101
   2871  f870					      if	(pfwidth>2)
   2872  f870		       aa 95		      .byte.b	%10101010, %10010101
   2873  f872					      endif
   2874  f872		       80 00		      .byte.b	%10000000, %00000000
   2875  f874					      if	(pfwidth>2)
   2876  f874		       00 80		      .byte.b	%00000000, %10000000
   2877  f876					      endif
   2878  f876		       80 00		      .byte.b	%10000000, %00000000
   2879  f878					      if	(pfwidth>2)
   2880  f878		       00 80		      .byte.b	%00000000, %10000000
   2881  f87a					      endif
   2882  f87a		       80 00		      .byte.b	%10000000, %00000000
   2883  f87c					      if	(pfwidth>2)
   2884  f87c		       00 80		      .byte.b	%00000000, %10000000
   2885  f87e					      endif
   2886  f87e		       80 00		      .byte.b	%10000000, %00000000
   2887  f880					      if	(pfwidth>2)
   2888  f880		       00 80		      .byte.b	%00000000, %10000000
   2889  f882					      endif
   2890  f882		       80 00		      .byte.b	%10000000, %00000000
   2891  f884					      if	(pfwidth>2)
   2892  f884		       00 80		      .byte.b	%00000000, %10000000
   2893  f886					      endif
   2894  f886		       80 00		      .byte.b	%10000000, %00000000
   2895  f888					      if	(pfwidth>2)
   2896  f888		       00 80		      .byte.b	%00000000, %10000000
   2897  f88a					      endif
   2898  f88a		       80 00		      .byte.b	%10000000, %00000000
   2899  f88c					      if	(pfwidth>2)
   2900  f88c		       00 80		      .byte.b	%00000000, %10000000
   2901  f88e					      endif
   2902  f88e		       80 00		      .byte.b	%10000000, %00000000
   2903  f890					      if	(pfwidth>2)
   2904  f890		       00 80		      .byte.b	%00000000, %10000000
   2905  f892					      endif
   2906  f892		       80 00		      .byte.b	%10000000, %00000000
   2907  f894					      if	(pfwidth>2)
   2908  f894		       00 80		      .byte.b	%00000000, %10000000
   2909  f896					      endif
   2910  f896		       80 00		      .byte.b	%10000000, %00000000
   2911  f898					      if	(pfwidth>2)
   2912  f898		       00 80		      .byte.b	%00000000, %10000000
   2913  f89a					      endif
   2914  f89a				   pflabel2
   2915  f89a		       bd 6a f8 	      lda	PF_data2,x
   2916  f89d		       95 a4		      sta	playfield,x
   2917  f89f		       ca		      dex
   2918  f8a0		       10 f8		      bpl	pflabel2
   2919  f8a2				   .L0108		;  score  =  score  +	1
   2920  f8a2
   2921  f8a2		       f8		      SED
   2922  f8a3		       18		      CLC
   2923  f8a4		       a5 95		      LDA	score+2
   2924  f8a6		       69 01		      ADC	#$01
   2925  f8a8		       85 95		      STA	score+2
   2926  f8aa		       a5 94		      LDA	score+1
   2927  f8ac		       69 00		      ADC	#$00
   2928  f8ae		       85 94		      STA	score+1
   2929  f8b0		       a5 93		      LDA	score
   2930  f8b2		       69 00		      ADC	#$00
   2931  f8b4		       85 93		      STA	score
   2932  f8b6		       d8		      CLD
   2933  f8b7				   .
   2934  f8b7							; 
   2935  f8b7
   2936  f8b7				   .L0109		;  return thisbank
   2937  f8b7
   2938  f8b7		       60		      RTS
   2939  f8b8				   .
   2940  f8b8							; 
   2941  f8b8
   2942  f8b8				   .
   2943  f8b8							; 
   2944  f8b8
   2945  f8b8				   .__perde_vida
   2946  f8b8							; __perde_vida
   2947  f8b8
   2948  f8b8				   .L0110		;  playfield:
   2949  f8b8
   2950  f8b8				  -	      ifconst	pfres
   2951  f8b8				  -	      ldx	#(12>pfres)*(pfres*pfwidth-1)+(12<=pfres)*47
   2952  f8b8					      else
   2953  f8b8		       a2 2f		      ldx	#((12*pfwidth-1)*((12*pfwidth-1)<47))+(47*((12*pfwidth-1)>=47))
   2954  f8ba					      endif
   2955  f8ba		       4c ed f8 	      jmp	pflabel3
   2956  f8bd				   PF_data3
   2957  f8bd		       7f ff		      .byte.b	%01111111, %11111111
   2958  f8bf					      if	(pfwidth>2)
   2959  f8bf		       ff 7f		      .byte.b	%11111111, %01111111
   2960  f8c1					      endif
   2961  f8c1		       aa 55		      .byte.b	%10101010, %01010101
   2962  f8c3					      if	(pfwidth>2)
   2963  f8c3		       aa 95		      .byte.b	%10101010, %10010101
   2964  f8c5					      endif
   2965  f8c5		       80 00		      .byte.b	%10000000, %00000000
   2966  f8c7					      if	(pfwidth>2)
   2967  f8c7		       00 80		      .byte.b	%00000000, %10000000
   2968  f8c9					      endif
   2969  f8c9		       80 00		      .byte.b	%10000000, %00000000
   2970  f8cb					      if	(pfwidth>2)
   2971  f8cb		       00 80		      .byte.b	%00000000, %10000000
   2972  f8cd					      endif
   2973  f8cd		       80 00		      .byte.b	%10000000, %00000000
   2974  f8cf					      if	(pfwidth>2)
   2975  f8cf		       00 80		      .byte.b	%00000000, %10000000
   2976  f8d1					      endif
   2977  f8d1		       80 00		      .byte.b	%10000000, %00000000
   2978  f8d3					      if	(pfwidth>2)
   2979  f8d3		       00 80		      .byte.b	%00000000, %10000000
   2980  f8d5					      endif
   2981  f8d5		       80 00		      .byte.b	%10000000, %00000000
   2982  f8d7					      if	(pfwidth>2)
   2983  f8d7		       00 80		      .byte.b	%00000000, %10000000
   2984  f8d9					      endif
   2985  f8d9		       80 00		      .byte.b	%10000000, %00000000
   2986  f8db					      if	(pfwidth>2)
   2987  f8db		       00 80		      .byte.b	%00000000, %10000000
   2988  f8dd					      endif
   2989  f8dd		       80 00		      .byte.b	%10000000, %00000000
   2990  f8df					      if	(pfwidth>2)
   2991  f8df		       00 80		      .byte.b	%00000000, %10000000
   2992  f8e1					      endif
   2993  f8e1		       80 00		      .byte.b	%10000000, %00000000
   2994  f8e3					      if	(pfwidth>2)
   2995  f8e3		       00 80		      .byte.b	%00000000, %10000000
   2996  f8e5					      endif
   2997  f8e5		       80 00		      .byte.b	%10000000, %00000000
   2998  f8e7					      if	(pfwidth>2)
   2999  f8e7		       00 80		      .byte.b	%00000000, %10000000
   3000  f8e9					      endif
   3001  f8e9		       80 00		      .byte.b	%10000000, %00000000
   3002  f8eb					      if	(pfwidth>2)
   3003  f8eb		       00 80		      .byte.b	%00000000, %10000000
   3004  f8ed					      endif
   3005  f8ed				   pflabel3
   3006  f8ed		       bd bd f8 	      lda	PF_data3,x
   3007  f8f0		       95 a4		      sta	playfield,x
   3008  f8f2		       ca		      dex
   3009  f8f3		       10 f8		      bpl	pflabel3
   3010  f8f5				   .
   3011  f8f5							; 
   3012  f8f5
   3013  f8f5				   .
   3014  f8f5							; 
   3015  f8f5
   3016  f8f5				   .L0111		;  bally  =  0
   3017  f8f5
   3018  f8f5		       a9 00		      LDA	#0
   3019  f8f7		       85 89		      STA	bally
   3020  f8f9				   .L0112		;  missile1y  =  0
   3021  f8f9
   3022  f8f9		       a9 00		      LDA	#0
   3023  f8fb		       85 88		      STA	missile1y
   3024  f8fd				   .L0113		;  COLUPF  =  10
   3025  f8fd
   3026  f8fd		       a9 0a		      LDA	#10
   3027  f8ff		       85 08		      STA	COLUPF
   3028  f901				   .L0114		;  COLUBK  =  25
   3029  f901
   3030  f901		       a9 19		      LDA	#25
   3031  f903		       85 09		      STA	COLUBK
   3032  f905				   .L0115		;  COLUP1  =  $40
   3033  f905
   3034  f905		       a9 40		      LDA	#$40
   3035  f907		       85 07		      STA	COLUP1
   3036  f909				   .L0116		;  player0y  =  0
   3037  f909
   3038  f909		       a9 00		      LDA	#0
   3039  f90b		       85 85		      STA	player0y
   3040  f90d				   .L0117		;  _cont_anima_morte  =  _cont_anima_morte  +	1
   3041  f90d
   3042  f90d		       e6 e5		      INC	_cont_anima_morte
   3043  f90f				   .
   3044  f90f							; 
   3045  f90f
   3046  f90f				   .L0118		;  if _cont_anima_morte  =  20 then player1:
   3047  f90f
   3048  f90f		       a5 e5		      LDA	_cont_anima_morte
   3049  f911		       c9 14		      CMP	#20
   3050  f913		       d0 0c		      BNE	.skipL0118
   3051  f915				   .condpart41
   3052  f915		       a2 86		      LDX	#<player41then_1
   3053  f917		       86 8c		      STX	player1pointerlo
   3054  f919		       a9 fb		      LDA	#>player41then_1
   3055  f91b		       85 8d		      STA	player1pointerhi
   3056  f91d		       a9 05		      LDA	#5
   3057  f91f		       85 8f		      STA	player1height
   3058  f921				   .skipL0118
   3059  f921				   .else
   3060  f921							; else
   3061  f921
   3062  f921				   .L0119		;  if _cont_anima_morte  =  40 then player1:
   3063  f921
   3064  f921		       a5 e5		      LDA	_cont_anima_morte
   3065  f923		       c9 28		      CMP	#40
   3066  f925		       d0 0c		      BNE	.skipL0119
   3067  f927				   .condpart42
   3068  f927		       a2 8c		      LDX	#<player42then_1
   3069  f929		       86 8c		      STX	player1pointerlo
   3070  f92b		       a9 fb		      LDA	#>player42then_1
   3071  f92d		       85 8d		      STA	player1pointerhi
   3072  f92f		       a9 05		      LDA	#5
   3073  f931		       85 8f		      STA	player1height
   3074  f933				   .skipL0119
   3075  f933				   .L0120		;  drawscreen
   3076  f933
   3077  f933		       20 cc f3 	      jsr	drawscreen
   3078  f936				   .
   3079  f936							; 
   3080  f936
   3081  f936				   .L0121		;  if _cont_anima_morte  =  40 then _cont_anima_morte	=  0
   3082  f936
   3083  f936		       a5 e5		      LDA	_cont_anima_morte
   3084  f938		       c9 28		      CMP	#40
   3085  f93a		       d0 04		      BNE	.skipL0121
   3086  f93c				   .condpart43
   3087  f93c		       a9 00		      LDA	#0
   3088  f93e		       85 e5		      STA	_cont_anima_morte
   3089  f940				   .skipL0121
   3090  f940				   .
   3091  f940							; 
   3092  f940
   3093  f940				   .
   3094  f940							; 
   3095  f940
   3096  f940				   .L0122		;  if _duracao_som0  =  0 then AUDV0  =  0  :	goto __skip_som_explosao
   3097  f940
   3098  f940		       a5 d9		      LDA	_duracao_som0
   3099  f942		       c9 00		      CMP	#0
   3100  f944		       d0 07		      BNE	.skipL0122
   3101  f946				   .condpart44
   3102  f946		       a9 00		      LDA	#0
   3103  f948		       85 19		      STA	AUDV0
   3104  f94a		       4c 5b f9 	      jmp	.__skip_som_explosao
   3105  f94d
   3106  f94d				   .skipL0122
   3107  f94d				   .L0123		;  _duracao_som0  =  _duracao_som0  -	1
   3108  f94d
   3109  f94d		       c6 d9		      DEC	_duracao_som0
   3110  f94f				   .L0124		;  AUDV0  =  8  :  rem volume
   3111  f94f
   3112  f94f		       a9 08		      LDA	#8
   3113  f951		       85 19		      STA	AUDV0
   3114  f953				   .L0125		;  AUDC0  =  8 :  rem tom
   3115  f953
   3116  f953		       a9 08		      LDA	#8
   3117  f955		       85 15		      STA	AUDC0
   3118  f957				   .L0126		;  AUDF0  =  25  :  rem distorcao
   3119  f957
   3120  f957		       a9 19		      LDA	#25
   3121  f959		       85 17		      STA	AUDF0
   3122  f95b				   .__skip_som_explosao
   3123  f95b							; __skip_som_explosao
   3124  f95b
   3125  f95b				   .L0127		;  if joy0fire then _duracao_som0  =  0  :  player1x  =  80  :  goto __skip_perde_vida
   3126  f95b
   3127  f95b		       24 0c		      bit	INPT4
   3128  f95d		       30 0b		      BMI	.skipL0127
   3129  f95f				   .condpart45
   3130  f95f		       a9 00		      LDA	#0
   3131  f961		       85 d9		      STA	_duracao_som0
   3132  f963		       a9 50		      LDA	#80
   3133  f965		       85 81		      STA	player1x
   3134  f967		       4c 70 f7 	      jmp	.__skip_perde_vida
   3135  f96a
   3136  f96a				   .skipL0127
   3137  f96a				   .L0128		;  goto __perde_vida
   3138  f96a
   3139  f96a		       4c b8 f8 	      jmp	.__perde_vida
   3140  f96d
   3141  f96d				   .
   3142  f96d							; 
   3143  f96d
   3144  f96d				   .
   3145  f96d							; 
   3146  f96d
   3147  f96d				   .__inimigo_bomba
   3148  f96d							; __inimigo_bomba
   3149  f96d
   3150  f96d				   .L0129		;  COLUP0  =  $40
   3151  f96d
   3152  f96d		       a9 40		      LDA	#$40
   3153  f96f		       85 06		      STA	COLUP0
   3154  f971				   .L0130		;  player0:
   3155  f971
   3156  f971		       a2 92		      LDX	#<playerL0130_0
   3157  f973		       86 8a		      STX	player0pointerlo
   3158  f975		       a9 fb		      LDA	#>playerL0130_0
   3159  f977		       85 8b		      STA	player0pointerhi
   3160  f979		       a9 08		      LDA	#8
   3161  f97b		       85 8e		      STA	player0height
   3162  f97d				   .
   3163  f97d							; 
   3164  f97d
   3165  f97d				   .L0131		;  player0y  =  player0y + 2
   3166  f97d
   3167  f97d		       a5 85		      LDA	player0y
   3168  f97f		       18		      CLC
   3169  f980		       69 02		      ADC	#2
   3170  f982		       85 85		      STA	player0y
   3171  f984				   .L0132		;  if joy0up then player0y  =	player0y  +  2
   3172  f984
   3173  f984		       a9 10		      lda	#$10
   3174  f986		       2c 80 02 	      bit	SWCHA
   3175  f989		       d0 07		      BNE	.skipL0132
   3176  f98b				   .condpart46
   3177  f98b		       a5 85		      LDA	player0y
   3178  f98d		       18		      CLC
   3179  f98e		       69 02		      ADC	#2
   3180  f990		       85 85		      STA	player0y
   3181  f992				   .skipL0132
   3182  f992				   .
   3183  f992							; 
   3184  f992
   3185  f992				   .L0133		;  if player0y  <=  2 then player0x  =   ( rand & 63 )   +   ( rand & 31 )   +   ( rand & 15 )   +   ( rand & 1 )   +	21
   3186  f992
   3187  f992		       a9 02		      LDA	#2
   3188  f994		       c5 85		      CMP	player0y
   3189  f996		       90 2e		      BCC	.skipL0133
   3190  f998				   .condpart47
   3191  f998							; complex statement detected
   3192  f998		       20 be f3 	      jsr	randomize
   3193  f99b		       29 3f		      AND	#63
   3194  f99d		       48		      PHA
   3195  f99e		       20 be f3 	      jsr	randomize
   3196  f9a1		       29 1f		      AND	#31
   3197  f9a3		       ba		      TSX
   3198  f9a4		       e8		      INX
   3199  f9a5		       9a		      TXS
   3200  f9a6		       18		      CLC
   3201  f9a7		       75 00		      ADC	$00,x
   3202  f9a9		       48		      PHA
   3203  f9aa		       20 be f3 	      jsr	randomize
   3204  f9ad		       29 0f		      AND	#15
   3205  f9af		       ba		      TSX
   3206  f9b0		       e8		      INX
   3207  f9b1		       9a		      TXS
   3208  f9b2		       18		      CLC
   3209  f9b3		       75 00		      ADC	$00,x
   3210  f9b5		       48		      PHA
   3211  f9b6		       20 be f3 	      jsr	randomize
   3212  f9b9		       29 01		      AND	#1
   3213  f9bb		       ba		      TSX
   3214  f9bc		       e8		      INX
   3215  f9bd		       9a		      TXS
   3216  f9be		       18		      CLC
   3217  f9bf		       75 00		      ADC	$00,x
   3218  f9c1		       18		      CLC
   3219  f9c2		       69 15		      ADC	#21
   3220  f9c4		       85 80		      STA	player0x
   3221  f9c6				   .skipL0133
   3222  f9c6				   .L0134		;  return thisbank
   3223  f9c6
   3224  f9c6		       60		      RTS
   3225  f9c7				   .
   3226  f9c7							; 
   3227  f9c7
   3228  f9c7				   .__inimigo_tie
   3229  f9c7							; __inimigo_tie
   3230  f9c7
   3231  f9c7				   .L0135		;  COLUP0  =  $04
   3232  f9c7
   3233  f9c7		       a9 04		      LDA	#$04
   3234  f9c9		       85 06		      STA	COLUP0
   3235  f9cb				   .L0136		;  player0:
   3236  f9cb
   3237  f9cb		       a2 9b		      LDX	#<playerL0136_0
   3238  f9cd		       86 8a		      STX	player0pointerlo
   3239  f9cf		       a9 fb		      LDA	#>playerL0136_0
   3240  f9d1		       85 8b		      STA	player0pointerhi
   3241  f9d3		       a9 06		      LDA	#6
   3242  f9d5		       85 8e		      STA	player0height
   3243  f9d7				   .
   3244  f9d7							; 
   3245  f9d7
   3246  f9d7				   .
   3247  f9d7							; 
   3248  f9d7
   3249  f9d7				   .L0137		;  if _bit_supressores{2} then goto __volta else goto __vai
   3250  f9d7
   3251  f9d7		       a5 dd		      LDA	_bit_supressores
   3252  f9d9		       29 04		      AND	#4
   3253  f9db		       f0 06		      BEQ	.skipL0137
   3254  f9dd				   .condpart48
   3255  f9dd		       4c e6 f9 	      jmp	.__volta
   3256  f9e0		       4c e6 f9 	      jmp	.skipelse1
   3257  f9e3				   .skipL0137
   3258  f9e3		       4c fe f9 	      jmp	.__vai
   3259  f9e6
   3260  f9e6				   .skipelse1
   3261  f9e6				   .
   3262  f9e6							; 
   3263  f9e6
   3264  f9e6				   .__volta
   3265  f9e6							; __volta
   3266  f9e6
   3267  f9e6				   .L0138		;  player0x  =  player0x  -  1
   3268  f9e6
   3269  f9e6		       c6 80		      DEC	player0x
   3270  f9e8				   .L0139		;  if player0x  <=  30 then player0y  =  player0y  +  5  :  _bit_supressores{2}  =  0
   3271  f9e8
   3272  f9e8		       a9 1e		      LDA	#30
   3273  f9ea		       c5 80		      CMP	player0x
   3274  f9ec		       90 0d		      BCC	.skipL0139
   3275  f9ee				   .condpart49
   3276  f9ee		       a5 85		      LDA	player0y
   3277  f9f0		       18		      CLC
   3278  f9f1		       69 05		      ADC	#5
   3279  f9f3		       85 85		      STA	player0y
   3280  f9f5		       a5 dd		      LDA	_bit_supressores
   3281  f9f7		       29 fb		      AND	#251
   3282  f9f9		       85 dd		      STA	_bit_supressores
   3283  f9fb				   .skipL0139
   3284  f9fb				   .L0140		;  goto __skip_vai_volta_tie
   3285  f9fb
   3286  f9fb		       4c 13 fa 	      jmp	.__skip_vai_volta_tie
   3287  f9fe
   3288  f9fe				   .__vai
   3289  f9fe							; __vai
   3290  f9fe
   3291  f9fe				   .
   3292  f9fe							; 
   3293  f9fe
   3294  f9fe				   .L0141		;  player0x  =  player0x  +  1
   3295  f9fe
   3296  f9fe		       e6 80		      INC	player0x
   3297  fa00				   .L0142		;  if player0x  >=  120 then player0y	=  player0y  +	5  :  _bit_supressores{2}  =  1
   3298  fa00
   3299  fa00		       a5 80		      LDA	player0x
   3300  fa02		       c9 78		      CMP	#120
   3301  fa04		       90 0d		      BCC	.skipL0142
   3302  fa06				   .condpart50
   3303  fa06		       a5 85		      LDA	player0y
   3304  fa08		       18		      CLC
   3305  fa09		       69 05		      ADC	#5
   3306  fa0b		       85 85		      STA	player0y
   3307  fa0d		       a5 dd		      LDA	_bit_supressores
   3308  fa0f		       09 04		      ORA	#4
   3309  fa11		       85 dd		      STA	_bit_supressores
   3310  fa13				   .skipL0142
   3311  fa13				   .
   3312  fa13							; 
   3313  fa13
   3314  fa13				   .__skip_vai_volta_tie
   3315  fa13							; __skip_vai_volta_tie
   3316  fa13
   3317  fa13				   .
   3318  fa13							; 
   3319  fa13
   3320  fa13				   .
   3321  fa13							; 
   3322  fa13
   3323  fa13				   .L0143		;  return thisbank
   3324  fa13
   3325  fa13		       60		      RTS
   3326  fa14				   .
   3327  fa14							; 
   3328  fa14
   3329  fa14				   .
   3330  fa14							; 
   3331  fa14
   3332  fa14				   .__escudo
   3333  fa14							; __escudo
   3334  fa14
   3335  fa14				   .
   3336  fa14							; 
   3337  fa14
   3338  fa14				   .L0144		;  player1:
   3339  fa14
   3340  fa14		       a2 a2		      LDX	#<playerL0144_1
   3341  fa16		       86 8c		      STX	player1pointerlo
   3342  fa18		       a9 fb		      LDA	#>playerL0144_1
   3343  fa1a		       85 8d		      STA	player1pointerhi
   3344  fa1c		       a9 08		      LDA	#8
   3345  fa1e		       85 8f		      STA	player1height
   3346  fa20				   .L0145		;  goto __skip_escudo
   3347  fa20
   3348  fa20		       4c e7 f5 	      jmp	.__skip_escudo
   3349  fa23
   3350  fa23				   .
   3351  fa23							; 
   3352  fa23
   3353  fa23				   .__nave
   3354  fa23							; __nave
   3355  fa23
   3356  fa23				   .L0146		;  if _animacao  =  10  ||  joy0up then player1:
   3357  fa23
   3358  fa23		       a5 e1		      LDA	_animacao
   3359  fa25		       c9 0a		      CMP	#10
   3360  fa27		       d0 03		      BNE	.skipL0146
   3361  fa29				   .condpart51
   3362  fa29		       4c 33 fa 	      jmp	.condpart52
   3363  fa2c				   .skipL0146
   3364  fa2c		       a9 10		      lda	#$10
   3365  fa2e		       2c 80 02 	      bit	SWCHA
   3366  fa31		       d0 0c		      BNE	.skip2OR
   3367  fa33				   .condpart52
   3368  fa33		       a2 ab		      LDX	#<player52then_1
   3369  fa35		       86 8c		      STX	player1pointerlo
   3370  fa37		       a9 fb		      LDA	#>player52then_1
   3371  fa39		       85 8d		      STA	player1pointerhi
   3372  fa3b		       a9 05		      LDA	#5
   3373  fa3d		       85 8f		      STA	player1height
   3374  fa3f				   .skip2OR
   3375  fa3f				   .
   3376  fa3f							; 
   3377  fa3f
   3378  fa3f				   .L0147		;  if _animacao  =  20 then player1:
   3379  fa3f
   3380  fa3f		       a5 e1		      LDA	_animacao
   3381  fa41		       c9 14		      CMP	#20
   3382  fa43		       d0 0c		      BNE	.skipL0147
   3383  fa45				   .condpart53
   3384  fa45		       a2 b1		      LDX	#<player53then_1
   3385  fa47		       86 8c		      STX	player1pointerlo
   3386  fa49		       a9 fb		      LDA	#>player53then_1
   3387  fa4b		       85 8d		      STA	player1pointerhi
   3388  fa4d		       a9 05		      LDA	#5
   3389  fa4f		       85 8f		      STA	player1height
   3390  fa51				   .skipL0147
   3391  fa51				   .
   3392  fa51							; 
   3393  fa51
   3394  fa51				   .L0148		;  goto __retorna_nave
   3395  fa51
   3396  fa51		       4c bb f5 	      jmp	.__retorna_nave
   3397  fa54
   3398  fa54				   .
   3399  fa54							; 
   3400  fa54
   3401  fa54				   .
   3402  fa54							; 
   3403  fa54
   3404  fa54				   .
   3405  fa54							; 
   3406  fa54
   3407  fa54				   .__transicao
   3408  fa54							; __transicao
   3409  fa54
   3410  fa54				   .L0149		;  missile1y  =  0
   3411  fa54
   3412  fa54		       a9 00		      LDA	#0
   3413  fa56		       85 88		      STA	missile1y
   3414  fa58				   .L0150		;  bally  =  100
   3415  fa58
   3416  fa58		       a9 64		      LDA	#100
   3417  fa5a		       85 89		      STA	bally
   3418  fa5c				   .
   3419  fa5c							; 
   3420  fa5c
   3421  fa5c				   .L0151		;  AUDC0  =  12
   3422  fa5c
   3423  fa5c		       a9 0c		      LDA	#12
   3424  fa5e		       85 15		      STA	AUDC0
   3425  fa60				   .L0152		;  AUDC1  =  1
   3426  fa60
   3427  fa60		       a9 01		      LDA	#1
   3428  fa62		       85 16		      STA	AUDC1
   3429  fa64				   .
   3430  fa64							; 
   3431  fa64
   3432  fa64				   .L0153		;  if musicTimer  =  0 then goto changeMusicNote
   3433  fa64
   3434  fa64		       a5 de		      LDA	musicTimer
   3435  fa66		       c9 00		      CMP	#0
   3436  fa68		       d0 03		      BNE	.skipL0153
   3437  fa6a				   .condpart54
   3438  fa6a		       4c 02 fb 	      jmp	.changeMusicNote
   3439  fa6d
   3440  fa6d				   .skipL0153
   3441  fa6d				   .__volta_trilha
   3442  fa6d							; __volta_trilha
   3443  fa6d
   3444  fa6d				   .L0154		;  musicTimer	=  musicTimer  -  1
   3445  fa6d
   3446  fa6d		       c6 de		      DEC	musicTimer
   3447  fa6f				   .
   3448  fa6f							; 
   3449  fa6f
   3450  fa6f				   .
   3451  fa6f							; 
   3452  fa6f
   3453  fa6f				   .L0155		;  player0y  =  0
   3454  fa6f
   3455  fa6f		       a9 00		      LDA	#0
   3456  fa71		       85 85		      STA	player0y
   3457  fa73				   .
   3458  fa73							; 
   3459  fa73
   3460  fa73				   .L0156		;  playfield:
   3461  fa73
   3462  fa73				  -	      ifconst	pfres
   3463  fa73				  -	      ldx	#(12>pfres)*(pfres*pfwidth-1)+(12<=pfres)*47
   3464  fa73					      else
   3465  fa73		       a2 2f		      ldx	#((12*pfwidth-1)*((12*pfwidth-1)<47))+(47*((12*pfwidth-1)>=47))
   3466  fa75					      endif
   3467  fa75		       4c a8 fa 	      jmp	pflabel4
   3468  fa78				   PF_data4
   3469  fa78		       7f 1f		      .byte.b	%01111111, %00011111
   3470  fa7a					      if	(pfwidth>2)
   3471  fa7a		       3f 7f		      .byte.b	%00111111, %01111111
   3472  fa7c					      endif
   3473  fa7c		       aa 15		      .byte.b	%10101010, %00010101
   3474  fa7e					      if	(pfwidth>2)
   3475  fa7e		       2a 95		      .byte.b	%00101010, %10010101
   3476  fa80					      endif
   3477  fa80		       80 00		      .byte.b	%10000000, %00000000
   3478  fa82					      if	(pfwidth>2)
   3479  fa82		       00 80		      .byte.b	%00000000, %10000000
   3480  fa84					      endif
   3481  fa84		       80 00		      .byte.b	%10000000, %00000000
   3482  fa86					      if	(pfwidth>2)
   3483  fa86		       00 80		      .byte.b	%00000000, %10000000
   3484  fa88					      endif
   3485  fa88		       80 00		      .byte.b	%10000000, %00000000
   3486  fa8a					      if	(pfwidth>2)
   3487  fa8a		       00 80		      .byte.b	%00000000, %10000000
   3488  fa8c					      endif
   3489  fa8c		       80 00		      .byte.b	%10000000, %00000000
   3490  fa8e					      if	(pfwidth>2)
   3491  fa8e		       00 80		      .byte.b	%00000000, %10000000
   3492  fa90					      endif
   3493  fa90		       80 00		      .byte.b	%10000000, %00000000
   3494  fa92					      if	(pfwidth>2)
   3495  fa92		       00 80		      .byte.b	%00000000, %10000000
   3496  fa94					      endif
   3497  fa94		       80 00		      .byte.b	%10000000, %00000000
   3498  fa96					      if	(pfwidth>2)
   3499  fa96		       00 80		      .byte.b	%00000000, %10000000
   3500  fa98					      endif
   3501  fa98		       80 00		      .byte.b	%10000000, %00000000
   3502  fa9a					      if	(pfwidth>2)
   3503  fa9a		       00 80		      .byte.b	%00000000, %10000000
   3504  fa9c					      endif
   3505  fa9c		       80 00		      .byte.b	%10000000, %00000000
   3506  fa9e					      if	(pfwidth>2)
   3507  fa9e		       00 80		      .byte.b	%00000000, %10000000
   3508  faa0					      endif
   3509  faa0		       80 00		      .byte.b	%10000000, %00000000
   3510  faa2					      if	(pfwidth>2)
   3511  faa2		       00 80		      .byte.b	%00000000, %10000000
   3512  faa4					      endif
   3513  faa4		       80 00		      .byte.b	%10000000, %00000000
   3514  faa6					      if	(pfwidth>2)
   3515  faa6		       00 80		      .byte.b	%00000000, %10000000
   3516  faa8					      endif
   3517  faa8				   pflabel4
   3518  faa8		       bd 78 fa 	      lda	PF_data4,x
   3519  faab		       95 a4		      sta	playfield,x
   3520  faad		       ca		      dex
   3521  faae		       10 f8		      bpl	pflabel4
   3522  fab0				   .L0157		;  drawscreen
   3523  fab0
   3524  fab0		       20 cc f3 	      jsr	drawscreen
   3525  fab3				   .
   3526  fab3							; 
   3527  fab3
   3528  fab3				   .L0158		;  if player1x  =  75 then goto __move_up
   3529  fab3
   3530  fab3		       a5 81		      LDA	player1x
   3531  fab5		       c9 4b		      CMP	#75
   3532  fab7		       d0 03		      BNE	.skipL0158
   3533  fab9				   .condpart55
   3534  fab9		       4c cf fa 	      jmp	.__move_up
   3535  fabc
   3536  fabc				   .skipL0158
   3537  fabc				   .
   3538  fabc							; 
   3539  fabc
   3540  fabc				   .L0159		;  if player1x  >  75 then goto __move_esquerda
   3541  fabc
   3542  fabc		       a9 4b		      LDA	#75
   3543  fabe		       c5 81		      CMP	player1x
   3544  fac0		       b0 03		      BCS	.skipL0159
   3545  fac2				   .condpart56
   3546  fac2		       4c ca fa 	      jmp	.__move_esquerda
   3547  fac5
   3548  fac5				   .skipL0159
   3549  fac5				   .
   3550  fac5							; 
   3551  fac5
   3552  fac5				   .L0160		;  player1x  =  player1x  +  1  :  goto __skip_move
   3553  fac5
   3554  fac5		       e6 81		      INC	player1x
   3555  fac7		       4c da fa 	      jmp	.__skip_move
   3556  faca
   3557  faca				   .__move_esquerda
   3558  faca							; __move_esquerda
   3559  faca
   3560  faca				   .L0161		;  player1x  =  player1x  -  1  :  goto __skip_move
   3561  faca
   3562  faca		       c6 81		      DEC	player1x
   3563  facc		       4c da fa 	      jmp	.__skip_move
   3564  facf
   3565  facf				   .__move_up
   3566  facf							; __move_up
   3567  facf
   3568  facf				   .L0162		;  if player1y  =  0 then goto __skip_move
   3569  facf
   3570  facf		       a5 86		      LDA	player1y
   3571  fad1		       c9 00		      CMP	#0
   3572  fad3		       d0 03		      BNE	.skipL0162
   3573  fad5				   .condpart57
   3574  fad5		       4c da fa 	      jmp	.__skip_move
   3575  fad8
   3576  fad8				   .skipL0162
   3577  fad8				   .L0163		;  player1y  =  player1y  -  1
   3578  fad8
   3579  fad8		       c6 86		      DEC	player1y
   3580  fada				   .__skip_move
   3581  fada							; __skip_move
   3582  fada
   3583  fada				   .
   3584  fada							; 
   3585  fada
   3586  fada				   .L0164		;  v  =  v  +	1
   3587  fada
   3588  fada		       e6 e9		      INC	v
   3589  fadc				   .L0165		;  if v  =  250 then v  =  0  :  _fases  =  _fases  +	1  :  _bit_supressores{5}  =  0  :  _cont_telas  =  0  :  AUDV0  =  0  :  AUDV1  =  0  :  musicPointer	=  0  :  player1y  =  85  :  goto __skip_transicao
   3590  fadc
   3591  fadc		       a5 e9		      LDA	v
   3592  fade		       c9 fa		      CMP	#250
   3593  fae0		       d0 1d		      BNE	.skipL0165
   3594  fae2				   .condpart58
   3595  fae2		       a9 00		      LDA	#0
   3596  fae4		       85 e9		      STA	v
   3597  fae6		       e6 e4		      INC	_fases
   3598  fae8		       a5 dd		      LDA	_bit_supressores
   3599  faea		       29 df		      AND	#223
   3600  faec		       85 dd		      STA	_bit_supressores
   3601  faee		       a9 00		      LDA	#0
   3602  faf0		       85 e6		      STA	_cont_telas
   3603  faf2		       85 19		      STA	AUDV0
   3604  faf4		       85 1a		      STA	AUDV1
   3605  faf6		       85 db		      STA	musicPointer
   3606  faf8		       a9 55		      LDA	#85
   3607  fafa		       85 86		      STA	player1y
   3608  fafc		       4c 48 f6 	      jmp	.__skip_transicao
   3609  faff
   3610  faff				   .skipL0165
   3611  faff				   .L0166		;  goto __transicao
   3612  faff
   3613  faff		       4c 54 fa 	      jmp	.__transicao
   3614  fb02
   3615  fb02				   .
   3616  fb02							; 
   3617  fb02
   3618  fb02				   .
   3619  fb02							; 
   3620  fb02
   3621  fb02				   .changeMusicNote
   3622  fb02							; changeMusicNote
   3623  fb02
   3624  fb02				   .L0167		;  AUDF0  =  musicData1[musicPointer]
   3625  fb02
   3626  fb02		       a6 db		      LDX	musicPointer
   3627  fb04		       bd 4e fb 	      LDA	musicData1,x
   3628  fb07		       85 17		      STA	AUDF0
   3629  fb09				   .L0168		;  AUDF1  =  musicData2[musicPointer]
   3630  fb09
   3631  fb09		       a6 db		      LDX	musicPointer
   3632  fb0b		       bd 68 fb 	      LDA	musicData2,x
   3633  fb0e		       85 18		      STA	AUDF1
   3634  fb10				   .L0169		;  if musicData1[musicPointer]  =  255 then AUDV1  =  0 else AUDV1  =	6
   3635  fb10
   3636  fb10		       a6 db		      LDX	musicPointer
   3637  fb12		       bd 4e fb 	      LDA	musicData1,x
   3638  fb15		       c9 ff		      CMP	#255
   3639  fb17		       d0 07		      BNE	.skipL0169
   3640  fb19				   .condpart59
   3641  fb19		       a9 00		      LDA	#0
   3642  fb1b		       85 1a		      STA	AUDV1
   3643  fb1d		       4c 24 fb 	      jmp	.skipelse2
   3644  fb20				   .skipL0169
   3645  fb20		       a9 06		      LDA	#6
   3646  fb22		       85 1a		      STA	AUDV1
   3647  fb24				   .skipelse2
   3648  fb24				   .L0170		;  if musicData2[musicPointer]  =  255 then AUDV0  =  0 else AUDV0  =	4
   3649  fb24
   3650  fb24		       a6 db		      LDX	musicPointer
   3651  fb26		       bd 68 fb 	      LDA	musicData2,x
   3652  fb29		       c9 ff		      CMP	#255
   3653  fb2b		       d0 07		      BNE	.skipL0170
   3654  fb2d				   .condpart60
   3655  fb2d		       a9 00		      LDA	#0
   3656  fb2f		       85 19		      STA	AUDV0
   3657  fb31		       4c 38 fb 	      jmp	.skipelse3
   3658  fb34				   .skipL0170
   3659  fb34		       a9 04		      LDA	#4
   3660  fb36		       85 19		      STA	AUDV0
   3661  fb38				   .skipelse3
   3662  fb38				   .L0171		;  musicTimer	=  10
   3663  fb38
   3664  fb38		       a9 0a		      LDA	#10
   3665  fb3a		       85 de		      STA	musicTimer
   3666  fb3c				   .L0172		;  musicPointer  =  musicPointer  +  1
   3667  fb3c
   3668  fb3c		       e6 db		      INC	musicPointer
   3669  fb3e				   .L0173		;  if musicPointer  >	22 then musicPointer  =  0
   3670  fb3e
   3671  fb3e		       a9 16		      LDA	#22
   3672  fb40		       c5 db		      CMP	musicPointer
   3673  fb42		       b0 04		      BCS	.skipL0173
   3674  fb44				   .condpart61
   3675  fb44		       a9 00		      LDA	#0
   3676  fb46		       85 db		      STA	musicPointer
   3677  fb48				   .skipL0173
   3678  fb48				   .L0174		;  goto __volta_trilha
   3679  fb48
   3680  fb48		       4c 6d fa 	      jmp	.__volta_trilha
   3681  fb4b
   3682  fb4b				   .
   3683  fb4b							; 
   3684  fb4b
   3685  fb4b				   .
   3686  fb4b							; 
   3687  fb4b
   3688  fb4b				   .L0175		;  data musicData1
   3689  fb4b
   3690  fb4b		       4c 65 fb 	      JMP	.skipL0175
   3691  fb4e				   musicData1
   3692  fb4e		       1d ff 1d ff*	      .byte.b	29, -1, 29, -1, 29, -1
   3693  fb54
   3694  fb54		       1a ff 1a ff*	      .byte.b	26, -1, 26, -1, 26, -1
   3695  fb5a
   3696  fb5a		       18 ff 18 ff*	      .byte.b	24, -1, 24, -1, 24, -1
   3697  fb60
   3698  fb60		       13 13 13 13	      .byte.b	19, 19, 19, 19
   3699  fb64
   3700  fb64		       ff		      .byte.b	255
   3701  fb65
   3702  fb65				   .skipL0175
   3703  fb65				   .
   3704  fb65							; 
   3705  fb65
   3706  fb65				   .L0176		;  data musicData2
   3707  fb65
   3708  fb65		       4c 7f fb 	      JMP	.skipL0176
   3709  fb68				   musicData2
   3710  fb68		       17 ff 17 ff*	      .byte.b	23, -1, 23, -1, 23, -1
   3711  fb6e
   3712  fb6e		       1a ff 1a ff*	      .byte.b	26, -1, 26, -1, 26, -1
   3713  fb74
   3714  fb74		       1d ff 1d ff*	      .byte.b	29, -1, 29, -1, 29, -1
   3715  fb7a
   3716  fb7a		       17 17 17 17	      .byte.b	23, 23, 23, 23
   3717  fb7e
   3718  fb7e		       ff		      .byte.b	255
   3719  fb7f
   3720  fb7f				   .skipL0176
   3721  fb7f				   .
   3722  fb7f							; 
   3723  fb7f
   3724  fb7f				   .L0177		;  asm
   3725  fb7f
   3726  fb7f				   minikernel
   3727  fb7f
   3728  fb7f		       85 02		      sta	WSYNC
   3729  fb81
   3730  fb81		       a5 e2		      lda	_SC_Back
   3731  fb83
   3732  fb83		       85 09		      sta	COLUBK
   3733  fb85
   3734  fb85		       60		      rts
   3735  fb86
   3736  fb86				  -	      if	(<*) > (<(*+5))
   3737  fb86				  -	      repeat	($100-<*)
   3738  fb86				  -	      .byte	0
   3739  fb86				  -	      repend
   3740  fb86					      endif
   3741  fb86				   player41then_1
   3742  fb86		       28		      .byte.b	%0101000
   3743  fb87		       12		      .byte.b	%0010010
   3744  fb88		       48		      .byte.b	%1001000
   3745  fb89		       15		      .byte.b	%0010101
   3746  fb8a		       40		      .byte.b	%1000000
   3747  fb8b		       14		      .byte.b	%0010100
   3748  fb8c				  -	      if	(<*) > (<(*+5))
   3749  fb8c				  -	      repeat	($100-<*)
   3750  fb8c				  -	      .byte	0
   3751  fb8c				  -	      repend
   3752  fb8c					      endif
   3753  fb8c				   player42then_1
   3754  fb8c		       08		      .byte.b	%0001000
   3755  fb8d		       14		      .byte.b	%0010100
   3756  fb8e		       2a		      .byte.b	%0101010
   3757  fb8f		       14		      .byte.b	%0010100
   3758  fb90		       08		      .byte.b	%0001000
   3759  fb91		       00		      .byte.b	%0000000
   3760  fb92				  -	      if	(<*) > (<(*+8))
   3761  fb92				  -	      repeat	($100-<*)
   3762  fb92				  -	      .byte	0
   3763  fb92				  -	      repend
   3764  fb92					      endif
   3765  fb92				   playerL0130_0
   3766  fb92		       18		      .byte.b	%00011000
   3767  fb93		       3c		      .byte.b	%00111100
   3768  fb94		       7e		      .byte.b	%01111110
   3769  fb95		       66		      .byte.b	%01100110
   3770  fb96		       5a		      .byte.b	%01011010
   3771  fb97		       7e		      .byte.b	%01111110
   3772  fb98		       5a		      .byte.b	%01011010
   3773  fb99		       18		      .byte.b	%00011000
   3774  fb9a		       3c		      .byte.b	%00111100
   3775  fb9b				  -	      if	(<*) > (<(*+6))
   3776  fb9b				  -	      repeat	($100-<*)
   3777  fb9b				  -	      .byte	0
   3778  fb9b				  -	      repend
   3779  fb9b					      endif
   3780  fb9b				   playerL0136_0
   3781  fb9b		       81		      .byte.b	%10000001
   3782  fb9c		       81		      .byte.b	%10000001
   3783  fb9d		       99		      .byte.b	%10011001
   3784  fb9e		       ff		      .byte.b	%11111111
   3785  fb9f		       99		      .byte.b	%10011001
   3786  fba0		       81		      .byte.b	%10000001
   3787  fba1		       81		      .byte.b	%10000001
   3788  fba2				  -	      if	(<*) > (<(*+8))
   3789  fba2				  -	      repeat	($100-<*)
   3790  fba2				  -	      .byte	0
   3791  fba2				  -	      repend
   3792  fba2					      endif
   3793  fba2				   playerL0144_1
   3794  fba2		       49		      .byte.b	%1001001
   3795  fba3		       7f		      .byte.b	%1111111
   3796  fba4		       5d		      .byte.b	%1011101
   3797  fba5		       08		      .byte.b	%0001000
   3798  fba6		       08		      .byte.b	%0001000
   3799  fba7		       49		      .byte.b	%1001001
   3800  fba8		       22		      .byte.b	%0100010
   3801  fba9		       14		      .byte.b	%0010100
   3802  fbaa		       08		      .byte.b	%0001000
   3803  fbab				  -	      if	(<*) > (<(*+5))
   3804  fbab				  -	      repeat	($100-<*)
   3805  fbab				  -	      .byte	0
   3806  fbab				  -	      repend
   3807  fbab					      endif
   3808  fbab				   player52then_1
   3809  fbab		       49		      .byte.b	%1001001
   3810  fbac		       7f		      .byte.b	%1111111
   3811  fbad		       5d		      .byte.b	%1011101
   3812  fbae		       08		      .byte.b	%0001000
   3813  fbaf		       08		      .byte.b	%0001000
   3814  fbb0		       08		      .byte.b	%0001000
   3815  fbb1				  -	      if	(<*) > (<(*+5))
   3816  fbb1				  -	      repeat	($100-<*)
   3817  fbb1				  -	      .byte	0
   3818  fbb1				  -	      repend
   3819  fbb1					      endif
   3820  fbb1				   player53then_1
   3821  fbb1		       41		      .byte.b	%1000001
   3822  fbb2		       7f		      .byte.b	%1111111
   3823  fbb3		       5d		      .byte.b	%1011101
   3824  fbb4		       08		      .byte.b	%0001000
   3825  fbb5		       08		      .byte.b	%0001000
   3826  fbb6		       08		      .byte.b	%0001000
   3827  fbb7					      if	ECHOFIRST
      997 bytes of ROM space left
   3828  fbb7					      echo	"    ",[(scoretable - *)]d , "bytes of ROM space left")
   3829  fbb7					      endif
   3830  fbb7		       00 01	   ECHOFIRST  =	1
   3831  fbb7
   3832  fbb7
   3833  fbb7
   3834  fbb7							; Provided under the CC0 license. See the included LICENSE.txt for details.
   3835  fbb7
   3836  fbb7							; feel free to modify the score graphics - just keep each digit 8 high
   3837  fbb7							; and keep the conditional compilation stuff intact
   3838  fbb7				  -	      ifconst	ROM2k
   3839  fbb7				  -	      ORG	$F7AC-8
   3840  fbb7					      else
   3841  fbb7				  -	      ifconst	bankswitch
   3842  fbb7				  -	      if	bankswitch == 8
   3843  fbb7				  -	      ORG	$2F94-bscode_length
   3844  fbb7				  -	      RORG	$FF94-bscode_length
   3845  fbb7				  -	      endif
   3846  fbb7				  -	      if	bankswitch == 16
   3847  fbb7				  -	      ORG	$4F94-bscode_length
   3848  fbb7				  -	      RORG	$FF94-bscode_length
   3849  fbb7				  -	      endif
   3850  fbb7				  -	      if	bankswitch == 32
   3851  fbb7				  -	      ORG	$8F94-bscode_length
   3852  fbb7				  -	      RORG	$FF94-bscode_length
   3853  fbb7				  -	      endif
   3854  fbb7				  -	      if	bankswitch == 64
   3855  fbb7				  -	      ORG	$10F80-bscode_length
   3856  fbb7				  -	      RORG	$1FF80-bscode_length
   3857  fbb7				  -	      endif
   3858  fbb7					      else
   3859  ff9c					      ORG	$FF9C
   3860  ff9c					      endif
   3861  ff9c					      endif
   3862  ff9c
   3863  ff9c							; font equates
   3864  ff9c		       00 01	   .21stcentury =	1
   3865  ff9c		       00 02	   alarmclock =	2
   3866  ff9c		       00 03	   handwritten =	3
   3867  ff9c		       00 04	   interrupted =	4
   3868  ff9c		       00 05	   retroputer =	5
   3869  ff9c		       00 06	   whimsey    =	6
   3870  ff9c		       00 07	   tiny       =	7
   3871  ff9c		       00 08	   hex	      =	8
   3872  ff9c
   3873  ff9c				  -	      ifconst	font
   3874  ff9c				  -	      if	font == hex
   3875  ff9c				  -	      ORG	. - 48
   3876  ff9c				  -	      endif
   3877  ff9c					      endif
   3878  ff9c
   3879  ff9c				   scoretable
   3880  ff9c
   3881  ff9c				  -	      ifconst	font
   3882  ff9c				  -	      if	font == .21stcentury
   3883  ff9c				  -	      include	"score_graphics.asm.21stcentury"
   3884  ff9c				  -	      endif
   3885  ff9c				  -	      if	font == alarmclock
   3886  ff9c				  -	      include	"score_graphics.asm.alarmclock"
   3887  ff9c				  -	      endif
   3888  ff9c				  -	      if	font == handwritten
   3889  ff9c				  -	      include	"score_graphics.asm.handwritten"
   3890  ff9c				  -	      endif
   3891  ff9c				  -	      if	font == interrupted
   3892  ff9c				  -	      include	"score_graphics.asm.interrupted"
   3893  ff9c				  -	      endif
   3894  ff9c				  -	      if	font == retroputer
   3895  ff9c				  -	      include	"score_graphics.asm.retroputer"
   3896  ff9c				  -	      endif
   3897  ff9c				  -	      if	font == whimsey
   3898  ff9c				  -	      include	"score_graphics.asm.whimsey"
   3899  ff9c				  -	      endif
   3900  ff9c				  -	      if	font == tiny
   3901  ff9c				  -	      include	"score_graphics.asm.tiny"
   3902  ff9c				  -	      endif
   3903  ff9c				  -	      if	font == hex
   3904  ff9c				  -	      include	"score_graphics.asm.hex"
   3905  ff9c				  -	      endif
   3906  ff9c					      else		; default font
   3907  ff9c
   3908  ff9c		       3c		      .byte.b	%00111100
   3909  ff9d		       66		      .byte.b	%01100110
   3910  ff9e		       66		      .byte.b	%01100110
   3911  ff9f		       66		      .byte.b	%01100110
   3912  ffa0		       66		      .byte.b	%01100110
   3913  ffa1		       66		      .byte.b	%01100110
   3914  ffa2		       66		      .byte.b	%01100110
   3915  ffa3		       3c		      .byte.b	%00111100
   3916  ffa4
   3917  ffa4		       7e		      .byte.b	%01111110
   3918  ffa5		       18		      .byte.b	%00011000
   3919  ffa6		       18		      .byte.b	%00011000
   3920  ffa7		       18		      .byte.b	%00011000
   3921  ffa8		       18		      .byte.b	%00011000
   3922  ffa9		       38		      .byte.b	%00111000
   3923  ffaa		       18		      .byte.b	%00011000
   3924  ffab		       08		      .byte.b	%00001000
   3925  ffac
   3926  ffac		       7e		      .byte.b	%01111110
   3927  ffad		       60		      .byte.b	%01100000
   3928  ffae		       60		      .byte.b	%01100000
   3929  ffaf		       3c		      .byte.b	%00111100
   3930  ffb0		       06		      .byte.b	%00000110
   3931  ffb1		       06		      .byte.b	%00000110
   3932  ffb2		       46		      .byte.b	%01000110
   3933  ffb3		       3c		      .byte.b	%00111100
   3934  ffb4
   3935  ffb4		       3c		      .byte.b	%00111100
   3936  ffb5		       46		      .byte.b	%01000110
   3937  ffb6		       06		      .byte.b	%00000110
   3938  ffb7		       06		      .byte.b	%00000110
   3939  ffb8		       1c		      .byte.b	%00011100
   3940  ffb9		       06		      .byte.b	%00000110
   3941  ffba		       46		      .byte.b	%01000110
   3942  ffbb		       3c		      .byte.b	%00111100
   3943  ffbc
   3944  ffbc		       0c		      .byte.b	%00001100
   3945  ffbd		       0c		      .byte.b	%00001100
   3946  ffbe		       7e		      .byte.b	%01111110
   3947  ffbf		       4c		      .byte.b	%01001100
   3948  ffc0		       4c		      .byte.b	%01001100
   3949  ffc1		       2c		      .byte.b	%00101100
   3950  ffc2		       1c		      .byte.b	%00011100
   3951  ffc3		       0c		      .byte.b	%00001100
   3952  ffc4
   3953  ffc4		       3c		      .byte.b	%00111100
   3954  ffc5		       46		      .byte.b	%01000110
   3955  ffc6		       06		      .byte.b	%00000110
   3956  ffc7		       06		      .byte.b	%00000110
   3957  ffc8		       3c		      .byte.b	%00111100
   3958  ffc9		       60		      .byte.b	%01100000
   3959  ffca		       60		      .byte.b	%01100000
   3960  ffcb		       7e		      .byte.b	%01111110
   3961  ffcc
   3962  ffcc		       3c		      .byte.b	%00111100
   3963  ffcd		       66		      .byte.b	%01100110
   3964  ffce		       66		      .byte.b	%01100110
   3965  ffcf		       66		      .byte.b	%01100110
   3966  ffd0		       7c		      .byte.b	%01111100
   3967  ffd1		       60		      .byte.b	%01100000
   3968  ffd2		       62		      .byte.b	%01100010
   3969  ffd3		       3c		      .byte.b	%00111100
   3970  ffd4
   3971  ffd4		       30		      .byte.b	%00110000
   3972  ffd5		       30		      .byte.b	%00110000
   3973  ffd6		       30		      .byte.b	%00110000
   3974  ffd7		       18		      .byte.b	%00011000
   3975  ffd8		       0c		      .byte.b	%00001100
   3976  ffd9		       06		      .byte.b	%00000110
   3977  ffda		       42		      .byte.b	%01000010
   3978  ffdb		       3e		      .byte.b	%00111110
   3979  ffdc
   3980  ffdc		       3c		      .byte.b	%00111100
   3981  ffdd		       66		      .byte.b	%01100110
   3982  ffde		       66		      .byte.b	%01100110
   3983  ffdf		       66		      .byte.b	%01100110
   3984  ffe0		       3c		      .byte.b	%00111100
   3985  ffe1		       66		      .byte.b	%01100110
   3986  ffe2		       66		      .byte.b	%01100110
   3987  ffe3		       3c		      .byte.b	%00111100
   3988  ffe4
   3989  ffe4		       3c		      .byte.b	%00111100
   3990  ffe5		       46		      .byte.b	%01000110
   3991  ffe6		       06		      .byte.b	%00000110
   3992  ffe7		       3e		      .byte.b	%00111110
   3993  ffe8		       66		      .byte.b	%01100110
   3994  ffe9		       66		      .byte.b	%01100110
   3995  ffea		       66		      .byte.b	%01100110
   3996  ffeb		       3c		      .byte.b	%00111100
   3997  ffec
   3998  ffec					      ifnconst	DPC_kernel_options
   3999  ffec
   4000  ffec		       00		      .byte.b	%00000000
   4001  ffed		       00		      .byte.b	%00000000
   4002  ffee		       00		      .byte.b	%00000000
   4003  ffef		       00		      .byte.b	%00000000
   4004  fff0		       00		      .byte.b	%00000000
   4005  fff1		       00		      .byte.b	%00000000
   4006  fff2		       00		      .byte.b	%00000000
   4007  fff3		       00		      .byte.b	%00000000
   4008  fff4
   4009  fff4					      endif
   4010  fff4
   4011  fff4					      endif
   4012  fff4
   4013  fff4				  -	      ifconst	ROM2k
   4014  fff4				  -	      ORG	$F7FC
   4015  fff4					      else
   4016  fff4				  -	      ifconst	bankswitch
   4017  fff4				  -	      if	bankswitch == 8
   4018  fff4				  -	      ORG	$2FF4-bscode_length
   4019  fff4				  -	      RORG	$FFF4-bscode_length
   4020  fff4				  -	      endif
   4021  fff4				  -	      if	bankswitch == 16
   4022  fff4				  -	      ORG	$4FF4-bscode_length
   4023  fff4				  -	      RORG	$FFF4-bscode_length
   4024  fff4				  -	      endif
   4025  fff4				  -	      if	bankswitch == 32
   4026  fff4				  -	      ORG	$8FF4-bscode_length
   4027  fff4				  -	      RORG	$FFF4-bscode_length
   4028  fff4				  -	      endif
   4029  fff4				  -	      if	bankswitch == 64
   4030  fff4				  -	      ORG	$10FE0-bscode_length
   4031  fff4				  -	      RORG	$1FFE0-bscode_length
   4032  fff4				  -	      endif
   4033  fff4					      else
   4034  fffc					      ORG	$FFFC
   4035  fffc					      endif
   4036  fffc					      endif
   4037  fffc							; Provided under the CC0 license. See the included LICENSE.txt for details.
   4038  fffc
   4039  fffc				  -	      ifconst	bankswitch
   4040  fffc				  -	      if	bankswitch == 8
   4041  fffc				  -	      ORG	$2FFC
   4042  fffc				  -	      RORG	$FFFC
   4043  fffc				  -	      endif
   4044  fffc				  -	      if	bankswitch == 16
   4045  fffc				  -	      ORG	$4FFC
   4046  fffc				  -	      RORG	$FFFC
   4047  fffc				  -	      endif
   4048  fffc				  -	      if	bankswitch == 32
   4049  fffc				  -	      ORG	$8FFC
   4050  fffc				  -	      RORG	$FFFC
   4051  fffc				  -	      endif
   4052  fffc				  -	      if	bankswitch == 64
   4053  fffc				  -	      ORG	$10FF0
   4054  fffc				  -	      RORG	$1FFF0
   4055  fffc				  -	      lda	$ffe0	; we use wasted space to assist stella with EF format auto-detection
   4056  fffc				  -	      ORG	$10FF8
   4057  fffc				  -	      RORG	$1FFF8
   4058  fffc				  -	      ifconst	superchip
   4059  fffc				  -	      .byte	"E","F","S","C"
   4060  fffc				  -	      else
   4061  fffc				  -	      .byte	"E","F","E","F"
   4062  fffc				  -	      endif
   4063  fffc				  -	      ORG	$10FFC
   4064  fffc				  -	      RORG	$1FFFC
   4065  fffc				  -	      endif
   4066  fffc					      else
   4067  fffc				  -	      ifconst	ROM2k
   4068  fffc				  -	      ORG	$F7FC
   4069  fffc					      else
   4070  fffc					      ORG	$FFFC
   4071  fffc					      endif
   4072  fffc					      endif
   4073  fffc		       00 f0		      .word.w	(start & $ffff)
   4074  fffe		       00 f0		      .word.w	(start & $ffff)
