------- FILE d:\Batari Projects\RandomHoles\RandomHoles\randomholes.bas.asm LEVEL 1 PASS 3
      1  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  10000 ????
      3  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 2 PASS 3
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  10000 ????
      3  10000 ????						; VCS.H
      4  10000 ????						; Version 1.05, 13/November/2003
      5  10000 ????
      6  10000 ????		00 69	    VERSION_VCS =	105
      7  10000 ????
      8  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      9  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
     11  10000 ????						;
     12  10000 ????						; This file defines hardware registers and memory mapping for the
     13  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     14  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  10000 ????						; available at at http://www.atari2600.org/dasm
     16  10000 ????						;
     17  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     18  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     19  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     20  10000 ????						; with your views.  Please contribute, if you think you can improve this
     21  10000 ????						; file!
     22  10000 ????						;
     23  10000 ????						; Latest Revisions...
     24  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     25  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     26  10000 ????						;			    This will allow conditional code to verify VCS.H being
     27  10000 ????						;			    used for code assembly.
     28  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     29  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     30  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     31  10000 ????						;			 readability issue, and binary compatibility with disassembled
     32  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     33  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     34  10000 ????						;			 which was broken by the use of segments in this file, as
     35  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     36  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     37  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     38  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     39  10000 ????						;						   it is safe to leave it undefined, and the base address will
     40  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     41  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     42  10000 ????						;			  - register definitions are now generated through assignment
     43  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     44  10000 ????						;			    address architecture.
     45  10000 ????						; 1.0	22/MAR/2003		Initial release
     46  10000 ????
     47  10000 ????
     48  10000 ????						;-------------------------------------------------------------------------------
     49  10000 ????
     50  10000 ????						; TIA_BASE_ADDRESS
     51  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     52  10000 ????						; Normally 0, the base address should (externally, before including this file)
     53  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     54  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     55  10000 ????						; < $40 as a bankswitch.
     56  10000 ????
     57  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     58  10000 ????			   -TIA_BASE_ADDRESS =	0
     59  10000 ????				       ENDIF
     60  10000 ????
     61  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     62  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     63  10000 ????						; *OR* by declaring the label before including this file, eg:
     64  10000 ????						; TIA_BASE_ADDRESS = $40
     65  10000 ????						;   include "vcs.h"
     66  10000 ????
     67  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     68  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     69  10000 ????						; for the mirrored ROM hardware registers.
     70  10000 ????
     71  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     72  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     73  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     74  10000 ????
     75  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     76  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     77  10000 ????				       ENDIF
     78  10000 ????
     79  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     80  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     81  10000 ????				       ENDIF
     82  10000 ????
     83  10000 ????						;-------------------------------------------------------------------------------
     84  10000 ????
     85 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     86 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     87 U0000
     88 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     89 U0000
     90 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     91 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     92 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     93 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     94 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     95 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     96 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     97 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     98 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     99 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
    100 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
    101 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    102 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    103 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    104 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    105 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    106 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    107 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    108 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    109 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    110 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    111 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    112 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    113 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    114 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    115 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    116 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    117 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    118 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    119 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    120 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    121 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    122 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    123 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    124 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    125 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    126 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    127 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    128 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    129 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    130 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    131 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    132 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    133 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    134 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    135 U002d
    136 U002d							;-------------------------------------------------------------------------------
    137 U002d
    138 U000e ????				      SEG.U	TIA_REGISTERS_READ
    139 U0000					      ORG	TIA_BASE_READ_ADDRESS
    140 U0000
    141 U0000							;											bit 7	 bit 6
    142 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    143 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    144 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    145 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    146 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    147 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    148 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    149 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    150 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    151 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    152 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    153 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    154 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    155 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    156 U000e
    157 U000e							;-------------------------------------------------------------------------------
    158 U000e
    159 U0298 ????				      SEG.U	RIOT
    160 U0280					      ORG	$280
    161 U0280
    162 U0280							; RIOT MEMORY MAP
    163 U0280
    164 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    165 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    166 U0281
    167 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    168 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    169 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    170 U0284		       00	   INTIM      ds	1	; $284		Timer output
    171 U0285
    172 U0285		       00	   TIMINT     ds	1	; $285
    173 U0286
    174 U0286							; Unused/undefined registers ($285-$294)
    175 U0286
    176 U0286		       00		      ds	1	; $286
    177 U0287		       00		      ds	1	; $287
    178 U0288		       00		      ds	1	; $288
    179 U0289		       00		      ds	1	; $289
    180 U028a		       00		      ds	1	; $28A
    181 U028b		       00		      ds	1	; $28B
    182 U028c		       00		      ds	1	; $28C
    183 U028d		       00		      ds	1	; $28D
    184 U028e		       00		      ds	1	; $28E
    185 U028f		       00		      ds	1	; $28F
    186 U0290		       00		      ds	1	; $290
    187 U0291		       00		      ds	1	; $291
    188 U0292		       00		      ds	1	; $292
    189 U0293		       00		      ds	1	; $293
    190 U0294
    191 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    192 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    193 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    194 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    195 U0298
    196 U0298							;-------------------------------------------------------------------------------
    197 U0298							; The following required for back-compatibility with code which does not use
    198 U0298							; segments.
    199 U0298
    200  10000 ????				       SEG
    201  10000 ????
    202  10000 ????						; EOF
------- FILE d:\Batari Projects\RandomHoles\RandomHoles\randomholes.bas.asm
------- FILE macro.h LEVEL 2 PASS 3
      0  10000 ????				       include	"macro.h"
      1  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  10000 ????
      3  10000 ????						; MACRO.H
      4  10000 ????						; Version 1.05, 13/NOVEMBER/2003
      5  10000 ????
      6  10000 ????		00 69	    VERSION_MACRO =	105
      7  10000 ????
      8  10000 ????						;
      9  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
     11  10000 ????						;
     12  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     13  10000 ????						; It is distributed as a companion machine-specific support package
     14  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  10000 ????						; available at at http://www.atari2600.org/dasm
     16  10000 ????						;
     17  10000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     18  10000 ????						; contents, or would like to add something, please write to me
     19  10000 ????						; (atari2600@taswegian.com) with your contribution.
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						;
     23  10000 ????						; 1.05  14/NOV/2003	  - Added VERSION_MACRO equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify MACRO.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     27  10000 ????						;
     28  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     29  10000 ????						;
     30  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     31  10000 ????						;			   (standardised macro for vertical synch code)
     32  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     33  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     34  10000 ????						; 1.0	22/MAR/2003		Initial release
     35  10000 ????
     36  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     37  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     38  10000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     39  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     40  10000 ????						;   registers and require them to be defined first).
     41  10000 ????
     42  10000 ????						; Available macros...
     43  10000 ????						;   SLEEP n		 - sleep for n cycles
     44  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     45  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     46  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     47  10000 ????
     48  10000 ????						;-------------------------------------------------------------------------------
     49  10000 ????						; SLEEP duration
     50  10000 ????						; Original author: Thomas Jentzsch
     51  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     52  10000 ????						; useful for code where precise timing is required.
     53  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     54  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     55  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     56  10000 ????
     57  10000 ????				       MAC	sleep
     58  10000 ????			    .CYCLES    SET	{1}
     59  10000 ????
     60  10000 ????				       IF	.CYCLES < 2
     61  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     62  10000 ????				       ERR
     63  10000 ????				       ENDIF
     64  10000 ????
     65  10000 ????				       IF	.CYCLES & 1
     66  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     67  10000 ????				       nop	0
     68  10000 ????				       ELSE
     69  10000 ????				       bit	VSYNC
     70  10000 ????				       ENDIF
     71  10000 ????			    .CYCLES    SET	.CYCLES - 3
     72  10000 ????				       ENDIF
     73  10000 ????
     74  10000 ????				       REPEAT	.CYCLES / 2
     75  10000 ????				       nop
     76  10000 ????				       REPEND
     77  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     78  10000 ????
     79  10000 ????						;-------------------------------------------------------------------------------
     80  10000 ????						; VERTICAL_SYNC
     81  10000 ????						; Original author: Manuel Polik
     82  10000 ????						; Inserts the code required for a proper 3 scannline 
     83  10000 ????						; vertical sync sequence
     84  10000 ????						;
     85  10000 ????						; Note: Alters the accumulator
     86  10000 ????						;
     87  10000 ????						; IN:
     88  10000 ????						; OUT: A = 1
     89  10000 ????
     90  10000 ????				       MAC	vertical_sync
     91  10000 ????				       LDA	#$02	; A = VSYNC enable
     92  10000 ????				       STA	WSYNC	; Finish current line
     93  10000 ????				       STA	VSYNC	; Start vertical sync
     94  10000 ????				       STA	WSYNC	; 1st line vertical sync
     95  10000 ????				       STA	WSYNC	; 2nd line vertical sync
     96  10000 ????				       LSR		; A = VSYNC disable
     97  10000 ????				       STA	WSYNC	; 3rd line vertical sync
     98  10000 ????				       STA	VSYNC	; Stop vertical sync
     99  10000 ????				       ENDM
    100  10000 ????
    101  10000 ????						;-------------------------------------------------------------------------------
    102  10000 ????						; CLEAN_START
    103  10000 ????						; Original author: Andrew Davie
    104  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    105  10000 ????						; Sets stack pointer to $FF, and all registers to 0
    106  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    107  10000 ????						; Use as very first section of code on boot (ie: at reset)
    108  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    109  10000 ????
    110  10000 ????				       MAC	clean_start
    111  10000 ????				       sei
    112  10000 ????				       cld
    113  10000 ????
    114  10000 ????				       ldx	#0
    115  10000 ????				       txa
    116  10000 ????				       tay
    117  10000 ????			    .CLEAR_STACK dex
    118  10000 ????				       txs
    119  10000 ????				       pha
    120  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  10000 ????
    122  10000 ????				       ENDM
    123  10000 ????
    124  10000 ????						;-------------------------------------------------------
    125  10000 ????						; SET_POINTER
    126  10000 ????						; Original author: Manuel Rotschkar
    127  10000 ????						;
    128  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  10000 ????						;
    130  10000 ????						; Usage: SET_POINTER pointer, address
    131  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  10000 ????						;
    133  10000 ????						; Note: Alters the accumulator, NZ flags
    134  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  10000 ????						; IN 2: absolute address
    136  10000 ????
    137  10000 ????				       MAC	set_pointer
    138  10000 ????			    .POINTER   SET	{1}
    139  10000 ????			    .ADDRESS   SET	{2}
    140  10000 ????
    141  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  10000 ????				       STA	.POINTER	; Store in pointer
    143  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    144  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    145  10000 ????
    146  10000 ????				       ENDM
    147  10000 ????
    148  10000 ????						; EOF
------- FILE d:\Batari Projects\RandomHoles\RandomHoles\randomholes.bas.asm
------- FILE 2600basic.h LEVEL 2 PASS 3
      0  10000 ????				       include	"2600basic.h"
      1  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  10000 ????
      3  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 3 PASS 3
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  10000 ????
      3  10000 ????						; VCS.H
      4  10000 ????						; Version 1.05, 13/November/2003
      5  10000 ????
      6  10000 ????		00 69	    VERSION_VCS =	105
      7  10000 ????
      8  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      9  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
     11  10000 ????						;
     12  10000 ????						; This file defines hardware registers and memory mapping for the
     13  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     14  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  10000 ????						; available at at http://www.atari2600.org/dasm
     16  10000 ????						;
     17  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     18  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     19  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     20  10000 ????						; with your views.  Please contribute, if you think you can improve this
     21  10000 ????						; file!
     22  10000 ????						;
     23  10000 ????						; Latest Revisions...
     24  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     25  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     26  10000 ????						;			    This will allow conditional code to verify VCS.H being
     27  10000 ????						;			    used for code assembly.
     28  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     29  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     30  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     31  10000 ????						;			 readability issue, and binary compatibility with disassembled
     32  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     33  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     34  10000 ????						;			 which was broken by the use of segments in this file, as
     35  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     36  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     37  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     38  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     39  10000 ????						;						   it is safe to leave it undefined, and the base address will
     40  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     41  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     42  10000 ????						;			  - register definitions are now generated through assignment
     43  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     44  10000 ????						;			    address architecture.
     45  10000 ????						; 1.0	22/MAR/2003		Initial release
     46  10000 ????
     47  10000 ????
     48  10000 ????						;-------------------------------------------------------------------------------
     49  10000 ????
     50  10000 ????						; TIA_BASE_ADDRESS
     51  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     52  10000 ????						; Normally 0, the base address should (externally, before including this file)
     53  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     54  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     55  10000 ????						; < $40 as a bankswitch.
     56  10000 ????
     57  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     58  10000 ????			   -TIA_BASE_ADDRESS =	0
     59  10000 ????				       ENDIF
     60  10000 ????
     61  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     62  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     63  10000 ????						; *OR* by declaring the label before including this file, eg:
     64  10000 ????						; TIA_BASE_ADDRESS = $40
     65  10000 ????						;   include "vcs.h"
     66  10000 ????
     67  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     68  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     69  10000 ????						; for the mirrored ROM hardware registers.
     70  10000 ????
     71  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     72  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     73  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     74  10000 ????
     75  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     76  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     77  10000 ????				       ENDIF
     78  10000 ????
     79  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     80  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     81  10000 ????				       ENDIF
     82  10000 ????
     83  10000 ????						;-------------------------------------------------------------------------------
     84  10000 ????
     85 U002d					      SEG.U	TIA_REGISTERS_WRITE
     86 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     87 U0000
     88 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     89 U0000
     90 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     91 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     92 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     93 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     94 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     95 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     96 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     97 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     98 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     99 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
    100 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
    101 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    102 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    103 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    104 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    105 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    106 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    107 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    108 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    109 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    110 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    111 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    112 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    113 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    114 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    115 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    116 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    117 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    118 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    119 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    120 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    121 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    122 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    123 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    124 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    125 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    126 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    127 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    128 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    129 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    130 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    131 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    132 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    133 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    134 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    135 U002d
    136 U002d							;-------------------------------------------------------------------------------
    137 U002d
    138 U000e					      SEG.U	TIA_REGISTERS_READ
    139 U0000					      ORG	TIA_BASE_READ_ADDRESS
    140 U0000
    141 U0000							;											bit 7	 bit 6
    142 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    143 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    144 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    145 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    146 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    147 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    148 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    149 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    150 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    151 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    152 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    153 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    154 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    155 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    156 U000e
    157 U000e							;-------------------------------------------------------------------------------
    158 U000e
    159 U0298					      SEG.U	RIOT
    160 U0280					      ORG	$280
    161 U0280
    162 U0280							; RIOT MEMORY MAP
    163 U0280
    164 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    165 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    166 U0281
    167 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    168 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    169 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    170 U0284		       00	   INTIM      ds	1	; $284		Timer output
    171 U0285
    172 U0285		       00	   TIMINT     ds	1	; $285
    173 U0286
    174 U0286							; Unused/undefined registers ($285-$294)
    175 U0286
    176 U0286		       00		      ds	1	; $286
    177 U0287		       00		      ds	1	; $287
    178 U0288		       00		      ds	1	; $288
    179 U0289		       00		      ds	1	; $289
    180 U028a		       00		      ds	1	; $28A
    181 U028b		       00		      ds	1	; $28B
    182 U028c		       00		      ds	1	; $28C
    183 U028d		       00		      ds	1	; $28D
    184 U028e		       00		      ds	1	; $28E
    185 U028f		       00		      ds	1	; $28F
    186 U0290		       00		      ds	1	; $290
    187 U0291		       00		      ds	1	; $291
    188 U0292		       00		      ds	1	; $292
    189 U0293		       00		      ds	1	; $293
    190 U0294
    191 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    192 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    193 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    194 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    195 U0298
    196 U0298							;-------------------------------------------------------------------------------
    197 U0298							; The following required for back-compatibility with code which does not use
    198 U0298							; segments.
    199 U0298
    200  10000 ????				       SEG
    201  10000 ????
    202  10000 ????						; EOF
------- FILE 2600basic.h
------- FILE macro.h LEVEL 3 PASS 3
      0  10000 ????				       include	"macro.h"
      1  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  10000 ????
      3  10000 ????						; MACRO.H
      4  10000 ????						; Version 1.05, 13/NOVEMBER/2003
      5  10000 ????
      6  10000 ????		00 69	    VERSION_MACRO =	105
      7  10000 ????
      8  10000 ????						;
      9  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
     11  10000 ????						;
     12  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     13  10000 ????						; It is distributed as a companion machine-specific support package
     14  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  10000 ????						; available at at http://www.atari2600.org/dasm
     16  10000 ????						;
     17  10000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     18  10000 ????						; contents, or would like to add something, please write to me
     19  10000 ????						; (atari2600@taswegian.com) with your contribution.
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						;
     23  10000 ????						; 1.05  14/NOV/2003	  - Added VERSION_MACRO equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify MACRO.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     27  10000 ????						;
     28  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     29  10000 ????						;
     30  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     31  10000 ????						;			   (standardised macro for vertical synch code)
     32  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     33  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     34  10000 ????						; 1.0	22/MAR/2003		Initial release
     35  10000 ????
     36  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     37  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     38  10000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     39  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     40  10000 ????						;   registers and require them to be defined first).
     41  10000 ????
     42  10000 ????						; Available macros...
     43  10000 ????						;   SLEEP n		 - sleep for n cycles
     44  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     45  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     46  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     47  10000 ????
     48  10000 ????						;-------------------------------------------------------------------------------
     49  10000 ????						; SLEEP duration
     50  10000 ????						; Original author: Thomas Jentzsch
     51  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     52  10000 ????						; useful for code where precise timing is required.
     53  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     54  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     55  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     56  10000 ????
     57  10000 ????				       MAC	sleep
     58  10000 ????			    .CYCLES    SET	{1}
     59  10000 ????
     60  10000 ????				       IF	.CYCLES < 2
     61  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     62  10000 ????				       ERR
     63  10000 ????				       ENDIF
     64  10000 ????
     65  10000 ????				       IF	.CYCLES & 1
     66  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     67  10000 ????				       nop	0
     68  10000 ????				       ELSE
     69  10000 ????				       bit	VSYNC
     70  10000 ????				       ENDIF
     71  10000 ????			    .CYCLES    SET	.CYCLES - 3
     72  10000 ????				       ENDIF
     73  10000 ????
     74  10000 ????				       REPEAT	.CYCLES / 2
     75  10000 ????				       nop
     76  10000 ????				       REPEND
     77  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     78  10000 ????
     79  10000 ????						;-------------------------------------------------------------------------------
     80  10000 ????						; VERTICAL_SYNC
     81  10000 ????						; Original author: Manuel Polik
     82  10000 ????						; Inserts the code required for a proper 3 scannline 
     83  10000 ????						; vertical sync sequence
     84  10000 ????						;
     85  10000 ????						; Note: Alters the accumulator
     86  10000 ????						;
     87  10000 ????						; IN:
     88  10000 ????						; OUT: A = 1
     89  10000 ????
     90  10000 ????				       MAC	vertical_sync
     91  10000 ????				       LDA	#$02	; A = VSYNC enable
     92  10000 ????				       STA	WSYNC	; Finish current line
     93  10000 ????				       STA	VSYNC	; Start vertical sync
     94  10000 ????				       STA	WSYNC	; 1st line vertical sync
     95  10000 ????				       STA	WSYNC	; 2nd line vertical sync
     96  10000 ????				       LSR		; A = VSYNC disable
     97  10000 ????				       STA	WSYNC	; 3rd line vertical sync
     98  10000 ????				       STA	VSYNC	; Stop vertical sync
     99  10000 ????				       ENDM
    100  10000 ????
    101  10000 ????						;-------------------------------------------------------------------------------
    102  10000 ????						; CLEAN_START
    103  10000 ????						; Original author: Andrew Davie
    104  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    105  10000 ????						; Sets stack pointer to $FF, and all registers to 0
    106  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    107  10000 ????						; Use as very first section of code on boot (ie: at reset)
    108  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    109  10000 ????
    110  10000 ????				       MAC	clean_start
    111  10000 ????				       sei
    112  10000 ????				       cld
    113  10000 ????
    114  10000 ????				       ldx	#0
    115  10000 ????				       txa
    116  10000 ????				       tay
    117  10000 ????			    .CLEAR_STACK dex
    118  10000 ????				       txs
    119  10000 ????				       pha
    120  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  10000 ????
    122  10000 ????				       ENDM
    123  10000 ????
    124  10000 ????						;-------------------------------------------------------
    125  10000 ????						; SET_POINTER
    126  10000 ????						; Original author: Manuel Rotschkar
    127  10000 ????						;
    128  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  10000 ????						;
    130  10000 ????						; Usage: SET_POINTER pointer, address
    131  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  10000 ????						;
    133  10000 ????						; Note: Alters the accumulator, NZ flags
    134  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  10000 ????						; IN 2: absolute address
    136  10000 ????
    137  10000 ????				       MAC	set_pointer
    138  10000 ????			    .POINTER   SET	{1}
    139  10000 ????			    .ADDRESS   SET	{2}
    140  10000 ????
    141  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  10000 ????				       STA	.POINTER	; Store in pointer
    143  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    144  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    145  10000 ????
    146  10000 ????				       ENDM
    147  10000 ????
    148  10000 ????						; EOF
------- FILE 2600basic.h
------- FILE 2600basic_variable_redefs.h LEVEL 3 PASS 3
      0  10000 ????				       include	"2600basic_variable_redefs.h"
      1  10000 ????						; This file contains variable mapping and other information for the current project.
      2  10000 ????
      3  10000 ????		00 17	    musicData2_length =	.skipL0216-musicData2
      4  10000 ????
      5  10000 ????		00 17	    musicData1_length =	.skipL0215-musicData1
      6  10000 ????
      7  10000 ????		00 ed	    rand16     =	z
      8  10000 ????
      9  10000 ????		00 e6	    _cont_telas =	s
     10  10000 ????
     11  10000 ????		00 e5	    _cont_anima_morte =	r
     12  10000 ????
     13  10000 ????		00 e4	    _fases     =	q
     14  10000 ????
     15  10000 ????		00 e2	    _SC_Back   =	o
     16  10000 ????
     17  10000 ????		00 e1	    _animacao  =	n
     18  10000 ????
     19  10000 ????		00 e0	    _Ch1_Sound =	m
     20  10000 ????
     21  10000 ????		00 df	    _dificuldade =	l
     22  10000 ????
     23  10000 ????		00 de	    musicTimer =	k
     24  10000 ????
     25  10000 ????		00 dd	    _bit_supressores =	j
     26  10000 ????
     27  10000 ????		00 db	    musicPointer =	h
     28  10000 ????
     29  10000 ????		00 da	    _duracao_som1 =	g
     30  10000 ????
     31  10000 ????		00 d9	    _duracao_som0 =	f
     32  10000 ????
     33  10000 ????		00 d8	    _cont_escudo =	e
     34  10000 ????
     35  10000 ????		00 d4	    _Ch0_Sound =	a
     36  10000 ????
     37  10000 ????		00 01	    pfscore    =	1
     38  10000 ????
     39  10000 ????		00 01	    no_blank_lines =	1
------- FILE 2600basic.h
      7  10000 ????
      8  10000 ????		00 80	    player0x   =	$80
      9  10000 ????		00 81	    player1x   =	$81
     10  10000 ????		00 82	    missile0x  =	$82
     11  10000 ????		00 83	    missile1x  =	$83
     12  10000 ????		00 84	    ballx      =	$84
     13  10000 ????
     14  10000 ????		00 85	    objecty    =	$85
     15  10000 ????		00 85	    player0y   =	$85
     16  10000 ????		00 86	    player1y   =	$86
     17  10000 ????		00 87	    missile1height =	$87
     18  10000 ????		00 88	    missile1y  =	$88
     19  10000 ????		00 89	    bally      =	$89
     20  10000 ????
     21  10000 ????		00 87	    player1color =	$87	; replaces missile 1
     22  10000 ????
     23  10000 ????		00 8a	    player0pointer =	$8A	;uses $8A-$8B
     24  10000 ????		00 8a	    player0pointerlo =	$8A
     25  10000 ????		00 8b	    player0pointerhi =	$8B
     26  10000 ????		00 8c	    player1pointer =	$8C	; $8C-$8D
     27  10000 ????		00 8c	    player1pointerlo =	$8C
     28  10000 ????		00 8d	    player1pointerhi =	$8D
     29  10000 ????
     30  10000 ????		00 8e	    player0height =	$8E
     31  10000 ????		00 8f	    player1height =	$8F
     32  10000 ????		00 90	    missile0height =	$90
     33  10000 ????		00 91	    missile0y  =	$91
     34  10000 ????		00 92	    ballheight =	$92
     35  10000 ????
     36  10000 ????		00 90	    currentpaddle =	$90	; replaces missile 0 (and can't be used with playercolor)
     37  10000 ????		00 91	    paddle     =	$91	; replaces missile 0
     38  10000 ????		00 82	    player0colorstore =	$82	; replaces missile 0
     39  10000 ????		00 90	    player0color =	$90	; replaces missile 0
     40  10000 ????
     41  10000 ????		00 93	    score      =	$93	; $93-$95
     42  10000 ????		00 96	    scorepointers =	$96	; $96-$9B = 6 bytes
     43  10000 ????		00 9c	    temp1      =	$9C	;used by kernel.  can be used in program too, but
     44  10000 ????		00 9d	    temp2      =	$9D	;are obliterated when drawscreen is called.
     45  10000 ????		00 9e	    temp3      =	$9E
     46  10000 ????		00 9f	    temp4      =	$9F
     47  10000 ????		00 a0	    temp5      =	$A0
     48  10000 ????		00 a1	    temp6      =	$A1
     49  10000 ????
     50  10000 ????		00 a2	    rand       =	$A2
     51  10000 ????		00 a3	    scorecolor =	$A3
     52  10000 ????
     53  10000 ????		00 a4	    var0       =	$A4
     54  10000 ????		00 a5	    var1       =	$A5
     55  10000 ????		00 a6	    var2       =	$A6
     56  10000 ????		00 a7	    var3       =	$A7
     57  10000 ????		00 a8	    var4       =	$A8
     58  10000 ????		00 a9	    var5       =	$A9
     59  10000 ????		00 aa	    var6       =	$AA
     60  10000 ????		00 ab	    var7       =	$AB
     61  10000 ????		00 ac	    var8       =	$AC
     62  10000 ????		00 ad	    var9       =	$AD
     63  10000 ????		00 ae	    var10      =	$AE
     64  10000 ????		00 af	    var11      =	$AF
     65  10000 ????		00 b0	    var12      =	$B0
     66  10000 ????		00 b1	    var13      =	$B1
     67  10000 ????		00 b2	    var14      =	$B2
     68  10000 ????		00 b3	    var15      =	$B3
     69  10000 ????		00 b4	    var16      =	$B4
     70  10000 ????		00 b5	    var17      =	$B5
     71  10000 ????		00 b6	    var18      =	$B6
     72  10000 ????		00 b7	    var19      =	$B7
     73  10000 ????		00 b8	    var20      =	$B8
     74  10000 ????		00 b9	    var21      =	$B9
     75  10000 ????		00 ba	    var22      =	$BA
     76  10000 ????		00 bb	    var23      =	$BB
     77  10000 ????		00 bc	    var24      =	$BC
     78  10000 ????		00 bd	    var25      =	$BD
     79  10000 ????		00 be	    var26      =	$BE
     80  10000 ????		00 bf	    var27      =	$BF
     81  10000 ????		00 c0	    var28      =	$C0
     82  10000 ????		00 c1	    var29      =	$C1
     83  10000 ????		00 c2	    var30      =	$C2
     84  10000 ????		00 c3	    var31      =	$C3
     85  10000 ????		00 c4	    var32      =	$C4
     86  10000 ????		00 c5	    var33      =	$C5
     87  10000 ????		00 c6	    var34      =	$C6
     88  10000 ????		00 c7	    var35      =	$C7
     89  10000 ????		00 c8	    var36      =	$C8
     90  10000 ????		00 c9	    var37      =	$C9
     91  10000 ????		00 ca	    var38      =	$CA
     92  10000 ????		00 cb	    var39      =	$CB
     93  10000 ????		00 cc	    var40      =	$CC
     94  10000 ????		00 cd	    var41      =	$CD
     95  10000 ????		00 ce	    var42      =	$CE
     96  10000 ????		00 cf	    var43      =	$CF
     97  10000 ????		00 d0	    var44      =	$D0
     98  10000 ????		00 d1	    var45      =	$D1
     99  10000 ????		00 d2	    var46      =	$D2
    100  10000 ????		00 d3	    var47      =	$D3
    101  10000 ????
    102  10000 ????		00 d4	    A	       =	$d4
    103  10000 ????		00 d4	    a	       =	$d4
    104  10000 ????		00 d5	    B	       =	$d5
    105  10000 ????		00 d5	    b	       =	$d5
    106  10000 ????		00 d6	    C	       =	$d6
    107  10000 ????		00 d6	    c	       =	$d6
    108  10000 ????		00 d7	    D	       =	$d7
    109  10000 ????		00 d7	    d	       =	$d7
    110  10000 ????		00 d8	    E	       =	$d8
    111  10000 ????		00 d8	    e	       =	$d8
    112  10000 ????		00 d9	    F	       =	$d9
    113  10000 ????		00 d9	    f	       =	$d9
    114  10000 ????		00 da	    G	       =	$da
    115  10000 ????		00 da	    g	       =	$da
    116  10000 ????		00 db	    H	       =	$db
    117  10000 ????		00 db	    h	       =	$db
    118  10000 ????		00 dc	    I	       =	$dc
    119  10000 ????		00 dc	    i	       =	$dc
    120  10000 ????		00 dd	    J	       =	$dd
    121  10000 ????		00 dd	    j	       =	$dd
    122  10000 ????		00 de	    K	       =	$de
    123  10000 ????		00 de	    k	       =	$de
    124  10000 ????		00 df	    L	       =	$df
    125  10000 ????		00 df	    l	       =	$df
    126  10000 ????		00 e0	    M	       =	$e0
    127  10000 ????		00 e0	    m	       =	$e0
    128  10000 ????		00 e1	    N	       =	$e1
    129  10000 ????		00 e1	    n	       =	$e1
    130  10000 ????		00 e2	    O	       =	$e2
    131  10000 ????		00 e2	    o	       =	$e2
    132  10000 ????		00 e3	    P	       =	$e3
    133  10000 ????		00 e3	    p	       =	$e3
    134  10000 ????		00 e4	    Q	       =	$e4
    135  10000 ????		00 e4	    q	       =	$e4
    136  10000 ????		00 e5	    R	       =	$e5
    137  10000 ????		00 e5	    r	       =	$e5
    138  10000 ????		00 e6	    S	       =	$e6
    139  10000 ????		00 e6	    s	       =	$e6
    140  10000 ????		00 e7	    T	       =	$e7
    141  10000 ????		00 e7	    t	       =	$e7
    142  10000 ????		00 e8	    U	       =	$e8
    143  10000 ????		00 e8	    u	       =	$e8
    144  10000 ????		00 e9	    V	       =	$e9
    145  10000 ????		00 e9	    v	       =	$e9
    146  10000 ????		00 ea	    W	       =	$ea
    147  10000 ????		00 ea	    w	       =	$ea
    148  10000 ????		00 eb	    X	       =	$eb
    149  10000 ????		00 eb	    x	       =	$eb
    150  10000 ????		00 ec	    Y	       =	$ec
    151  10000 ????		00 ec	    y	       =	$ec
    152  10000 ????		00 ed	    Z	       =	$ed
    153  10000 ????		00 ed	    z	       =	$ed
    154  10000 ????
    155  10000 ????		00 ee	    temp7      =	$ee	; This is used to aid in bankswitching
    156  10000 ????		00 ef	    playfieldpos =	$ef
    157  10000 ????
    158  10000 ????						; available for other uses, or if unused, provide more stack space
    159  10000 ????
    160  10000 ????		00 f0	    aux1       =	$f0
    161  10000 ????		00 f1	    aux2       =	$f1
    162  10000 ????		00 f2	    aux3       =	$f2
    163  10000 ????		00 f3	    aux4       =	$f3
    164  10000 ????		00 f4	    aux5       =	$f4
    165  10000 ????		00 f5	    aux6       =	$f5
    166  10000 ????
    167  10000 ????						; playfield color/height pointers
    168  10000 ????		00 f0	    pfcolortable =	$f0	; and $d5
    169  10000 ????		00 f0	    pfheighttable =	$f0	; and $d5
    170  10000 ????						; the above pointers are the same because if color and height are both used together,
    171  10000 ????						; they must used absolute indexed and cannot use pointers
    172  10000 ????
    173  10000 ????		00 f2	    lifepointer =	$f2	; pointer to "lives" shape
    174  10000 ????						; upper 3 bits of $f2 contain the number of lives
    175  10000 ????		00 f4	    lifecolor  =	$f4
    176  10000 ????		00 f3	    lives      =	$f3	; # lives >> 5
    177  10000 ????		00 f5	    statusbarlength =	$f5	; only uses upper 5 bits; other bits free
    178  10000 ????
    179  10000 ????		00 f2	    pfscore1   =	$f2	; optional playfield bytes in score
    180  10000 ????		00 f3	    pfscore2   =	$f3
    181  10000 ????		00 f4	    pfscorecolor =	$f4
    182  10000 ????
    183  10000 ????		00 f6	    stack1     =	$f6
    184  10000 ????		00 f7	    stack2     =	$f7
    185  10000 ????		00 f8	    stack3     =	$f8
    186  10000 ????		00 f9	    stack4     =	$f9
    187  10000 ????						; the stack bytes above may be used in the kernel
    188  10000 ????						; stack = F6-F7, F8-F9, FA-FB, FC-FD, FE-FF
    189  10000 ????
    190  10000 ????				       MAC	return
    191  10000 ????				       ifnconst	bankswitch
    192  10000 ????				       rts
    193  10000 ????				       else
    194  10000 ????				       jmp	BS_return
    195  10000 ????				       endif
    196  10000 ????				       ENDM		; auto-return from either a regular or bankswitched module
    197  10000 ????
    198  10000 ????			   -	       ifconst	superchip
    199  10000 ????			   -playfieldbase =	$10D0
    200  10000 ????			   -	       include	superchip.h
    201  10000 ????				       else
    202  10000 ????		00 a4	    playfieldbase =	$A4
    203  10000 ????				       endif
    204  10000 ????
    205  10000 ????				       ifnconst	pfhalfwidth
    206  10000 ????		00 04	    pfwidth    =	4
    207  10000 ????		00 0e	    PF1L       =	PF1
    208  10000 ????		00 0f	    PF2L       =	PF2
    209  10000 ????		00 0e	    PF1R       =	PF1
    210  10000 ????		00 0f	    PF2R       =	PF2
    211  10000 ????		00 00	    pfadjust   =	0
    212  10000 ????			   -	       else
    213  10000 ????			   -pfwidth    =	2
    214  10000 ????			   -	       ifconst	pfcenter
    215  10000 ????			   -PF1L       =	$3F	; no effect
    216  10000 ????			   -PF2L       =	PF2
    217  10000 ????			   -PF1R       =	$3F
    218  10000 ????			   -PF2R       =	PF2	; no effect
    219  10000 ????			   -pfadjust   =	1
    220  10000 ????			   -	       else
    221  10000 ????			   -PF1L       =	PF1
    222  10000 ????			   -PF2L       =	PF2
    223  10000 ????			   -PF1R       =	$3F	; no effect
    224  10000 ????			   -PF2R       =	$3F	; no effect
    225  10000 ????			   -pfadjust   =	0
    226  10000 ????			   -	       endif
    227  10000 ????				       endif
    228  10000 ????
    229  10000 ????						; define playfield start based on height
    230  10000 ????				       ifnconst	pfres
    231  10000 ????		00 a4	    playfield  =	playfieldbase
    232  10000 ????			   -	       else
    233  10000 ????			   -playfield  =	playfieldbase-(pfres-12*(4/pfwidth))*pfwidth
    234  10000 ????				       endif
------- FILE d:\Batari Projects\RandomHoles\RandomHoles\randomholes.bas.asm
------- FILE 2600basic_variable_redefs.h LEVEL 2 PASS 3
      0  10000 ????				       include	"2600basic_variable_redefs.h"
      1  10000 ????						; This file contains variable mapping and other information for the current project.
      2  10000 ????
      3  10000 ????		00 17	    musicData2_length =	.skipL0216-musicData2
      4  10000 ????
      5  10000 ????		00 17	    musicData1_length =	.skipL0215-musicData1
      6  10000 ????
      7  10000 ????		00 ed	    rand16     =	z
      8  10000 ????
      9  10000 ????		00 e6	    _cont_telas =	s
     10  10000 ????
     11  10000 ????		00 e5	    _cont_anima_morte =	r
     12  10000 ????
     13  10000 ????		00 e4	    _fases     =	q
     14  10000 ????
     15  10000 ????		00 e2	    _SC_Back   =	o
     16  10000 ????
     17  10000 ????		00 e1	    _animacao  =	n
     18  10000 ????
     19  10000 ????		00 e0	    _Ch1_Sound =	m
     20  10000 ????
     21  10000 ????		00 df	    _dificuldade =	l
     22  10000 ????
     23  10000 ????		00 de	    musicTimer =	k
     24  10000 ????
     25  10000 ????		00 dd	    _bit_supressores =	j
     26  10000 ????
     27  10000 ????		00 db	    musicPointer =	h
     28  10000 ????
     29  10000 ????		00 da	    _duracao_som1 =	g
     30  10000 ????
     31  10000 ????		00 d9	    _duracao_som0 =	f
     32  10000 ????
     33  10000 ????		00 d8	    _cont_escudo =	e
     34  10000 ????
     35  10000 ????		00 d4	    _Ch0_Sound =	a
     36  10000 ????
     37  10000 ????		00 01	    pfscore    =	1
     38  10000 ????
     39  10000 ????		00 01	    no_blank_lines =	1
------- FILE d:\Batari Projects\RandomHoles\RandomHoles\randomholes.bas.asm
      8  10000 ????			   -	       ifconst	bankswitch
      9  10000 ????			   -	       if	bankswitch == 8
     10  10000 ????			   -	       ORG	$1000
     11  10000 ????			   -	       RORG	$D000
     12  10000 ????			   -	       endif
     13  10000 ????			   -	       if	bankswitch == 16
     14  10000 ????			   -	       ORG	$1000
     15  10000 ????			   -	       RORG	$9000
     16  10000 ????			   -	       endif
     17  10000 ????			   -	       if	bankswitch == 32
     18  10000 ????			   -	       ORG	$1000
     19  10000 ????			   -	       RORG	$1000
     20  10000 ????			   -	       endif
     21  10000 ????			   -	       if	bankswitch == 64
     22  10000 ????			   -	       ORG	$1000
     23  10000 ????			   -	       RORG	$1000
     24  10000 ????			   -	       endif
     25  10000 ????				       else
     26  f000					      ORG	$F000
     27  f000					      endif
     28  f000
     29  f000				  -	      ifconst	bankswitch_hotspot
     30  f000				  -	      if	bankswitch_hotspot = $083F	; 0840 bankswitching hotspot
     31  f000				  -	      .byte	0	; stop unexpected bankswitches
     32  f000				  -	      endif
     33  f000					      endif
     34  f000							; Provided under the CC0 license. See the included LICENSE.txt for details.
     35  f000
     36  f000				   start
     37  f000		       78		      sei
     38  f001		       d8		      cld
     39  f002		       a0 00		      ldy	#0
     40  f004		       a5 d0		      lda	$D0
     41  f006		       c9 2c		      cmp	#$2C	;check RAM location #1
     42  f008		       d0 07		      bne	MachineIs2600
     43  f00a		       a5 d1		      lda	$D1
     44  f00c		       c9 a9		      cmp	#$A9	;check RAM location #2
     45  f00e		       d0 01		      bne	MachineIs2600
     46  f010		       88		      dey
     47  f011				   MachineIs2600
     48  f011		       a2 00		      ldx	#0
     49  f013		       8a		      txa
     50  f014				   clearmem
     51  f014		       e8		      inx
     52  f015		       9a		      txs
     53  f016		       48		      pha
     54  f017		       d0 fb		      bne	clearmem
     55  f019		       84 9c		      sty	temp1
     56  f01b					      ifnconst	multisprite
     57  f01b				  -	      ifconst	pfrowheight
     58  f01b				  -	      lda	#pfrowheight
     59  f01b					      else
     60  f01b				  -	      ifconst	pfres
     61  f01b				  -	      lda	#(96/pfres)
     62  f01b					      else
     63  f01b		       a9 08		      lda	#8
     64  f01d					      endif
     65  f01d					      endif
     66  f01d		       85 ef		      sta	playfieldpos
     67  f01f					      endif
     68  f01f		       a2 05		      ldx	#5
     69  f021				   initscore
     70  f021		       a9 9c		      lda	#<scoretable
     71  f023		       95 96		      sta	scorepointers,x
     72  f025		       ca		      dex
     73  f026		       10 f9		      bpl	initscore
     74  f028		       a9 01		      lda	#1
     75  f02a		       85 0a		      sta	CTRLPF
     76  f02c		       0d 84 02 	      ora	INTIM
     77  f02f		       85 a2		      sta	rand
     78  f031
     79  f031				  -	      ifconst	multisprite
     80  f031				  -	      jsr	multisprite_setup
     81  f031					      endif
     82  f031
     83  f031					      ifnconst	bankswitch
     84  f031		       4c 6c f4 	      jmp	game
     85  f034				  -	      else
     86  f034				  -	      lda	#>(game-1)
     87  f034				  -	      pha
     88  f034				  -	      lda	#<(game-1)
     89  f034				  -	      pha
     90  f034				  -	      pha
     91  f034				  -	      pha
     92  f034				  -	      ldx	#1
     93  f034				  -	      jmp	BS_jsr
     94  f034					      endif
     95  f034							; Provided under the CC0 license. See the included LICENSE.txt for details.
     96  f034
     97  f034							; This is a 2-line kernel!
     98  f034					      ifnconst	vertical_reflect
     99  f034				   kernel
    100  f034					      endif
    101  f034		       85 02		      sta	WSYNC
    102  f036		       a9 ff		      lda	#255
    103  f038		       8d 96 02 	      sta	TIM64T
    104  f03b
    105  f03b		       a9 01		      lda	#1
    106  f03d		       85 27		      sta	VDELBL
    107  f03f		       85 25		      sta	VDELP0
    108  f041		       a6 92		      ldx	ballheight
    109  f043		       e8		      inx
    110  f044		       e8		      inx
    111  f045		       86 9f		      stx	temp4
    112  f047		       a5 86		      lda	player1y
    113  f049		       85 9e		      sta	temp3
    114  f04b
    115  f04b				  -	      ifconst	shakescreen
    116  f04b				  -	      jsr	doshakescreen
    117  f04b					      else
    118  f04b		       a6 90		      ldx	missile0height
    119  f04d		       e8		      inx
    120  f04e					      endif
    121  f04e
    122  f04e		       e8		      inx
    123  f04f		       86 f6		      stx	stack1
    124  f051
    125  f051		       a5 89		      lda	bally
    126  f053		       85 f7		      sta	stack2
    127  f055
    128  f055		       a5 85		      lda	player0y
    129  f057		       a2 00		      ldx	#0
    130  f059		       85 02		      sta	WSYNC
    131  f05b		       86 1b		      stx	GRP0
    132  f05d		       86 1c		      stx	GRP1
    133  f05f		       86 0e		      stx	PF1L
    134  f061		       86 0f		      stx	PF2
    135  f063		       86 2c		      stx	CXCLR
    136  f065				  -	      ifconst	readpaddle
    137  f065				  -	      stx	paddle
    138  f065					      else
      0  f065					      sleep	3
      1  f065				   .CYCLES    SET	3
      2  f065
      3  f065				  -	      IF	.CYCLES < 2
      4  f065				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f065				  -	      ERR
      6  f065					      ENDIF
      7  f065
      8  f065					      IF	.CYCLES & 1
      9  f065					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f065		       04 00		      nop	0
     11  f067				  -	      ELSE
     12  f067				  -	      bit	VSYNC
     13  f067					      ENDIF
     14  f067				   .CYCLES    SET	.CYCLES - 3
     15  f067					      ENDIF
     16  f067
     17  f067				  -	      REPEAT	.CYCLES / 2
     18  f067				  -	      nop
     19  f067					      REPEND
    140  f067					      endif
    141  f067
    142  f067		       95 9d		      sta	temp2,x
    143  f069
    144  f069							;store these so they can be retrieved later
    145  f069					      ifnconst	pfres
    146  f069		       a2 54		      ldx	#128-44+(4-pfwidth)*12
    147  f06b				  -	      else
    148  f06b				  -	      ldx	#132-pfres*pfwidth
    149  f06b					      endif
    150  f06b
    151  f06b		       c6 85		      dec	player0y
    152  f06d
    153  f06d		       a5 91		      lda	missile0y
    154  f06f		       85 a0		      sta	temp5
    155  f071		       a5 88		      lda	missile1y
    156  f073		       85 a1		      sta	temp6
    157  f075
    158  f075		       a5 ef		      lda	playfieldpos
    159  f077		       85 9c		      sta	temp1
    160  f079
    161  f079				  -	      ifconst	pfrowheight
    162  f079				  -	      lda	#pfrowheight+2
    163  f079					      else
    164  f079					      ifnconst	pfres
    165  f079		       a9 0a		      lda	#10
    166  f07b				  -	      else
    167  f07b				  -	      lda	#(96/pfres)+2	; try to come close to the real size
    168  f07b					      endif
    169  f07b					      endif
    170  f07b		       18		      clc
    171  f07c		       e5 ef		      sbc	playfieldpos
    172  f07e		       85 ef		      sta	playfieldpos
    173  f080		       4c a8 f0 	      jmp	.startkernel
    174  f083
    175  f083				   .skipDrawP0
    176  f083		       a9 00		      lda	#0
    177  f085		       a8		      tay
    178  f086		       4c d6 f0 	      jmp	.continueP0
    179  f089
    180  f089				   .skipDrawP1
    181  f089		       a9 00		      lda	#0
    182  f08b		       a8		      tay
    183  f08c		       4c b2 f0 	      jmp	.continueP1
    184  f08f
    185  f08f				   .kerloop		; enter at cycle 59??
    186  f08f
    187  f08f				   continuekernel
      0  f08f					      sleep	2
      1  f08f				   .CYCLES    SET	2
      2  f08f
      3  f08f				  -	      IF	.CYCLES < 2
      4  f08f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f08f				  -	      ERR
      6  f08f					      ENDIF
      7  f08f
      8  f08f				  -	      IF	.CYCLES & 1
      9  f08f				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f08f				  -	      nop	0
     11  f08f				  -	      ELSE
     12  f08f				  -	      bit	VSYNC
     13  f08f				  -	      ENDIF
     14  f08f				  -.CYCLES    SET	.CYCLES - 3
     15  f08f					      ENDIF
     16  f08f
     17  f08f					      REPEAT	.CYCLES / 2
     18  f08f		       ea		      nop
     19  f090					      REPEND
    189  f090				   continuekernel2
    190  f090		       a5 92		      lda	ballheight
    191  f092
    192  f092				  -	      ifconst	pfres
    193  f092				  -	      ldy	playfield+pfres*pfwidth-132,x
    194  f092				  -	      sty	PF1L	;3
    195  f092				  -	      ldy	playfield+pfres*pfwidth-131-pfadjust,x
    196  f092				  -	      sty	PF2L	;3
    197  f092				  -	      ldy	playfield+pfres*pfwidth-129,x
    198  f092				  -	      sty	PF1R	; 3 too early?
    199  f092				  -	      ldy	playfield+pfres*pfwidth-130-pfadjust,x
    200  f092				  -	      sty	PF2R	;3
    201  f092					      else
    202  f092		       b4 50		      ldy	playfield-48+pfwidth*12+44-128,x
    203  f094		       84 0e		      sty	PF1L	;3
    204  f096		       b4 51		      ldy	playfield-48+pfwidth*12+45-128-pfadjust,x	;4
    205  f098		       84 0f		      sty	PF2L	;3
    206  f09a		       b4 53		      ldy	playfield-48+pfwidth*12+47-128,x	;4
    207  f09c		       84 0e		      sty	PF1R	; 3 too early?
    208  f09e		       b4 52		      ldy	playfield-48+pfwidth*12+46-128-pfadjust,x	;4
    209  f0a0		       84 0f		      sty	PF2R	;3
    210  f0a2					      endif
    211  f0a2
    212  f0a2							; should be playfield+$38 for width=2
    213  f0a2
    214  f0a2		       c7 89		      dcp	bally
    215  f0a4		       2a		      rol
    216  f0a5		       2a		      rol
    217  f0a6							; rol
    218  f0a6							; rol
    219  f0a6				   goback
    220  f0a6		       85 1f		      sta	ENABL
    221  f0a8				   .startkernel
    222  f0a8		       a5 8f		      lda	player1height	;3
    223  f0aa		       c7 86		      dcp	player1y	;5
    224  f0ac		       90 db		      bcc	.skipDrawP1	;2
    225  f0ae		       a4 86		      ldy	player1y	;3
    226  f0b0		       b1 8c		      lda	(player1pointer),y	;5; player0pointer must be selected carefully by the compiler
    227  f0b2							; so it doesn't cross a page boundary!
    228  f0b2
    229  f0b2				   .continueP1
    230  f0b2		       85 1c		      sta	GRP1	;3
    231  f0b4
    232  f0b4					      ifnconst	player1colors
    233  f0b4		       a5 87		      lda	missile1height	;3
    234  f0b6		       c7 88		      dcp	missile1y	;5
    235  f0b8		       2a		      rol		;2
    236  f0b9		       2a		      rol		;2
    237  f0ba		       85 1e		      sta	ENAM1	;3
    238  f0bc				  -	      else
    239  f0bc				  -	      lda	(player1color),y
    240  f0bc				  -	      sta	COLUP1
    241  f0bc				  -	      ifnconst	playercolors
    242  f0bc				  -	      sleep	7
    243  f0bc				  -	      else
    244  f0bc				  -	      lda.w	player0colorstore
    245  f0bc				  -	      sta	COLUP0
    246  f0bc				  -	      endif
    247  f0bc					      endif
    248  f0bc
    249  f0bc				  -	      ifconst	pfres
    250  f0bc				  -	      lda	playfield+pfres*pfwidth-132,x
    251  f0bc				  -	      sta	PF1L	;3
    252  f0bc				  -	      lda	playfield+pfres*pfwidth-131-pfadjust,x
    253  f0bc				  -	      sta	PF2L	;3
    254  f0bc				  -	      lda	playfield+pfres*pfwidth-129,x
    255  f0bc				  -	      sta	PF1R	; 3 too early?
    256  f0bc				  -	      lda	playfield+pfres*pfwidth-130-pfadjust,x
    257  f0bc				  -	      sta	PF2R	;3
    258  f0bc					      else
    259  f0bc		       b5 50		      lda	playfield-48+pfwidth*12+44-128,x	;4
    260  f0be		       85 0e		      sta	PF1L	;3
    261  f0c0		       b5 51		      lda	playfield-48+pfwidth*12+45-128-pfadjust,x	;4
    262  f0c2		       85 0f		      sta	PF2L	;3
    263  f0c4		       b5 53		      lda	playfield-48+pfwidth*12+47-128,x	;4
    264  f0c6		       85 0e		      sta	PF1R	; 3 too early?
    265  f0c8		       b5 52		      lda	playfield-48+pfwidth*12+46-128-pfadjust,x	;4
    266  f0ca		       85 0f		      sta	PF2R	;3
    267  f0cc					      endif
    268  f0cc							; sleep 3
    269  f0cc
    270  f0cc		       a5 8e		      lda	player0height
    271  f0ce		       c7 85		      dcp	player0y
    272  f0d0		       90 b1		      bcc	.skipDrawP0
    273  f0d2		       a4 85		      ldy	player0y
    274  f0d4		       b1 8a		      lda	(player0pointer),y
    275  f0d6				   .continueP0
    276  f0d6		       85 1b		      sta	GRP0
    277  f0d8
    278  f0d8				  -	      ifnconst	no_blank_lines
    279  f0d8				  -	      ifnconst	playercolors
    280  f0d8				  -	      lda	missile0height	;3
    281  f0d8				  -	      dcp	missile0y	;5
    282  f0d8				  -	      sbc	stack1
    283  f0d8				  -	      sta	ENAM0	;3
    284  f0d8				  -	      else
    285  f0d8				  -	      lda	(player0color),y
    286  f0d8				  -	      sta	player0colorstore
    287  f0d8				  -	      sleep	6
    288  f0d8				  -	      endif
    289  f0d8				  -	      dec	temp1
    290  f0d8				  -	      bne	continuekernel
    291  f0d8					      else
    292  f0d8		       c6 9c		      dec	temp1
    293  f0da		       f0 09		      beq	altkernel2
    294  f0dc				  -	      ifconst	readpaddle
    295  f0dc				  -	      ldy	currentpaddle
    296  f0dc				  -	      lda	INPT0,y
    297  f0dc				  -	      bpl	noreadpaddle
    298  f0dc				  -	      inc	paddle
    299  f0dc				  -	      jmp	continuekernel2
    300  f0dc				  -noreadpaddle
    301  f0dc				  -	      sleep	2
    302  f0dc				  -	      jmp	continuekernel
    303  f0dc					      else
    304  f0dc					      ifnconst	playercolors
    305  f0dc				  -	      ifconst	PFcolors
    306  f0dc				  -	      txa
    307  f0dc				  -	      tay
    308  f0dc				  -	      lda	(pfcolortable),y
    309  f0dc				  -	      ifnconst	backgroundchange
    310  f0dc				  -	      sta	COLUPF
    311  f0dc				  -	      else
    312  f0dc				  -	      sta	COLUBK
    313  f0dc				  -	      endif
    314  f0dc				  -	      jmp	continuekernel
    315  f0dc					      else
    316  f0dc				  -	      ifconst	kernelmacrodef
    317  f0dc				  -	      kernelmacro
    318  f0dc					      else
      0  f0dc					      sleep	12
      1  f0dc				   .CYCLES    SET	12
      2  f0dc
      3  f0dc				  -	      IF	.CYCLES < 2
      4  f0dc				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0dc				  -	      ERR
      6  f0dc					      ENDIF
      7  f0dc
      8  f0dc				  -	      IF	.CYCLES & 1
      9  f0dc				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0dc				  -	      nop	0
     11  f0dc				  -	      ELSE
     12  f0dc				  -	      bit	VSYNC
     13  f0dc				  -	      ENDIF
     14  f0dc				  -.CYCLES    SET	.CYCLES - 3
     15  f0dc					      ENDIF
     16  f0dc
     17  f0dc					      REPEAT	.CYCLES / 2
     18  f0dc		       ea		      nop
     17  f0dc					      REPEND
     18  f0dd		       ea		      nop
     17  f0dd					      REPEND
     18  f0de		       ea		      nop
     17  f0de					      REPEND
     18  f0df		       ea		      nop
     17  f0df					      REPEND
     18  f0e0		       ea		      nop
     17  f0e0					      REPEND
     18  f0e1		       ea		      nop
     19  f0e2					      REPEND
    320  f0e2					      endif
    321  f0e2					      endif
    322  f0e2				  -	      else
    323  f0e2				  -	      lda	(player0color),y
    324  f0e2				  -	      sta	player0colorstore
    325  f0e2				  -	      sleep	4
    326  f0e2					      endif
    327  f0e2		       4c 8f f0 	      jmp	continuekernel
    328  f0e5					      endif
    329  f0e5				   altkernel2
    330  f0e5		       8a		      txa
    331  f0e6					      ifnconst	vertical_reflect
    332  f0e6		       cb fc		      sbx	#256-pfwidth
    333  f0e8				  -	      else
    334  f0e8				  -	      sbx	#256-pfwidth/2
    335  f0e8					      endif
    336  f0e8		       30 1b		      bmi	lastkernelline
    337  f0ea				  -	      ifconst	pfrowheight
    338  f0ea				  -	      lda	#pfrowheight
    339  f0ea					      else
    340  f0ea					      ifnconst	pfres
    341  f0ea		       a9 08		      lda	#8
    342  f0ec				  -	      else
    343  f0ec				  -	      lda	#(96/pfres)	; try to come close to the real size
    344  f0ec					      endif
    345  f0ec					      endif
    346  f0ec		       85 9c		      sta	temp1
    347  f0ee		       4c 8f f0 	      jmp	continuekernel
    348  f0f1					      endif
    349  f0f1
    350  f0f1				   altkernel
    351  f0f1
    352  f0f1				  -	      ifconst	PFmaskvalue
    353  f0f1				  -	      lda	#PFmaskvalue
    354  f0f1					      else
    355  f0f1		       a9 00		      lda	#0
    356  f0f3					      endif
    357  f0f3		       85 0e		      sta	PF1L
    358  f0f5		       85 0f		      sta	PF2
    359  f0f7
    360  f0f7
    361  f0f7							;sleep 3
    362  f0f7
    363  f0f7							;28 cycles to fix things
    364  f0f7							;minus 11=17
    365  f0f7
    366  f0f7							; lax temp4
    367  f0f7							; clc
    368  f0f7		       8a		      txa
    369  f0f8					      ifnconst	vertical_reflect
    370  f0f8		       cb fc		      sbx	#256-pfwidth
    371  f0fa				  -	      else
    372  f0fa				  -	      sbx	#256-pfwidth/2
    373  f0fa					      endif
    374  f0fa
    375  f0fa		       30 09		      bmi	lastkernelline
    376  f0fc
    377  f0fc				  -	      ifconst	PFcolorandheight
    378  f0fc				  -	      ifconst	pfres
    379  f0fc				  -	      ldy	playfieldcolorandheight-131+pfres*pfwidth,x
    380  f0fc				  -	      else
    381  f0fc				  -	      ldy	playfieldcolorandheight-87,x
    382  f0fc				  -	      endif
    383  f0fc				  -	      ifnconst	backgroundchange
    384  f0fc				  -	      sty	COLUPF
    385  f0fc				  -	      else
    386  f0fc				  -	      sty	COLUBK
    387  f0fc				  -	      endif
    388  f0fc				  -	      ifconst	pfres
    389  f0fc				  -	      lda	playfieldcolorandheight-132+pfres*pfwidth,x
    390  f0fc				  -	      else
    391  f0fc				  -	      lda	playfieldcolorandheight-88,x
    392  f0fc				  -	      endif
    393  f0fc				  -	      sta.w	temp1
    394  f0fc					      endif
    395  f0fc				  -	      ifconst	PFheights
    396  f0fc				  -	      lsr
    397  f0fc				  -	      lsr
    398  f0fc				  -	      tay
    399  f0fc				  -	      lda	(pfheighttable),y
    400  f0fc				  -	      sta.w	temp1
    401  f0fc					      endif
    402  f0fc				  -	      ifconst	PFcolors
    403  f0fc				  -	      tay
    404  f0fc				  -	      lda	(pfcolortable),y
    405  f0fc				  -	      ifnconst	backgroundchange
    406  f0fc				  -	      sta	COLUPF
    407  f0fc				  -	      else
    408  f0fc				  -	      sta	COLUBK
    409  f0fc				  -	      endif
    410  f0fc				  -	      ifconst	pfrowheight
    411  f0fc				  -	      lda	#pfrowheight
    412  f0fc				  -	      else
    413  f0fc				  -	      ifnconst	pfres
    414  f0fc				  -	      lda	#8
    415  f0fc				  -	      else
    416  f0fc				  -	      lda	#(96/pfres)	; try to come close to the real size
    417  f0fc				  -	      endif
    418  f0fc				  -	      endif
    419  f0fc				  -	      sta	temp1
    420  f0fc					      endif
    421  f0fc					      ifnconst	PFcolorandheight
    422  f0fc					      ifnconst	PFcolors
    423  f0fc					      ifnconst	PFheights
    424  f0fc				  -	      ifnconst	no_blank_lines
    425  f0fc				  -			; read paddle 0
    426  f0fc				  -			; lo-res paddle read
    427  f0fc				  -			; bit INPT0
    428  f0fc				  -			; bmi paddleskipread
    429  f0fc				  -			; inc paddle0
    430  f0fc				  -			;donepaddleskip
    431  f0fc				  -	      sleep	10
    432  f0fc				  -	      ifconst	pfrowheight
    433  f0fc				  -	      lda	#pfrowheight
    434  f0fc				  -	      else
    435  f0fc				  -	      ifnconst	pfres
    436  f0fc				  -	      lda	#8
    437  f0fc				  -	      else
    438  f0fc				  -	      lda	#(96/pfres)	; try to come close to the real size
    439  f0fc				  -	      endif
    440  f0fc				  -	      endif
    441  f0fc				  -	      sta	temp1
    442  f0fc					      endif
    443  f0fc					      endif
    444  f0fc					      endif
    445  f0fc					      endif
    446  f0fc
    447  f0fc
    448  f0fc		       a5 92		      lda	ballheight
    449  f0fe		       c7 89		      dcp	bally
    450  f100		       e5 9f		      sbc	temp4
    451  f102
    452  f102
    453  f102		       4c a6 f0 	      jmp	goback
    454  f105
    455  f105
    456  f105				  -	      ifnconst	no_blank_lines
    457  f105				  -lastkernelline
    458  f105				  -	      ifnconst	PFcolors
    459  f105				  -	      sleep	10
    460  f105				  -	      else
    461  f105				  -	      ldy	#124
    462  f105				  -	      lda	(pfcolortable),y
    463  f105				  -	      sta	COLUPF
    464  f105				  -	      endif
    465  f105				  -
    466  f105				  -	      ifconst	PFheights
    467  f105				  -	      ldx	#1
    468  f105				  -			;sleep 4
    469  f105				  -	      sleep	3	; this was over 1 cycle
    470  f105				  -	      else
    471  f105				  -	      ldx	playfieldpos
    472  f105				  -			;sleep 3
    473  f105				  -	      sleep	2	; this was over 1 cycle
    474  f105				  -	      endif
    475  f105				  -
    476  f105				  -	      jmp	enterlastkernel
    477  f105				  -
    478  f105					      else
    479  f105				   lastkernelline
    480  f105
    481  f105				  -	      ifconst	PFheights
    482  f105				  -	      ldx	#1
    483  f105				  -			;sleep 5
    484  f105				  -	      sleep	4	; this was over 1 cycle
    485  f105					      else
    486  f105		       a6 ef		      ldx	playfieldpos
    487  f107							;sleep 4
      0  f107					      sleep	3	; this was over 1 cycle
      1  f107				   .CYCLES    SET	3
      2  f107
      3  f107				  -	      IF	.CYCLES < 2
      4  f107				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f107				  -	      ERR
      6  f107					      ENDIF
      7  f107
      8  f107					      IF	.CYCLES & 1
      9  f107					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f107		       04 00		      nop	0
     11  f109				  -	      ELSE
     12  f109				  -	      bit	VSYNC
     13  f109					      ENDIF
     14  f109				   .CYCLES    SET	.CYCLES - 3
     15  f109					      ENDIF
     16  f109
     17  f109				  -	      REPEAT	.CYCLES / 2
     18  f109				  -	      nop
     19  f109					      REPEND
    489  f109					      endif
    490  f109
    491  f109		       e0 00		      cpx	#0
    492  f10b		       d0 0a		      bne	.enterfromNBL
    493  f10d		       4c 78 f1 	      jmp	no_blank_lines_bailout
    494  f110					      endif
    495  f110
    496  f110				  -	      if	((<*)>$d5)
    497  f110				  -	      align	256
    498  f110					      endif
    499  f110							; this is a kludge to prevent page wrapping - fix!!!
    500  f110
    501  f110				   .skipDrawlastP1
    502  f110		       a9 00		      lda	#0
    503  f112		       a8		      tay		; added so we don't cross a page
    504  f113		       4c 3d f1 	      jmp	.continuelastP1
    505  f116
    506  f116				   .endkerloop		; enter at cycle 59??
    507  f116
    508  f116		       ea		      nop
    509  f117
    510  f117				   .enterfromNBL
    511  f117				  -	      ifconst	pfres
    512  f117				  -	      ldy.w	playfield+pfres*pfwidth-4
    513  f117				  -	      sty	PF1L	;3
    514  f117				  -	      ldy.w	playfield+pfres*pfwidth-3-pfadjust
    515  f117				  -	      sty	PF2L	;3
    516  f117				  -	      ldy.w	playfield+pfres*pfwidth-1
    517  f117				  -	      sty	PF1R	; possibly too early?
    518  f117				  -	      ldy.w	playfield+pfres*pfwidth-2-pfadjust
    519  f117				  -	      sty	PF2R	;3
    520  f117					      else
    521  f117		       ac d0 00 	      ldy.w	playfield-48+pfwidth*12+44
    522  f11a		       84 0e		      sty	PF1L	;3
    523  f11c		       ac d1 00 	      ldy.w	playfield-48+pfwidth*12+45-pfadjust
    524  f11f		       84 0f		      sty	PF2L	;3
    525  f121		       ac d3 00 	      ldy.w	playfield-48+pfwidth*12+47
    526  f124		       84 0e		      sty	PF1R	; possibly too early?
    527  f126		       ac d2 00 	      ldy.w	playfield-48+pfwidth*12+46-pfadjust
    528  f129		       84 0f		      sty	PF2R	;3
    529  f12b					      endif
    530  f12b
    531  f12b				   enterlastkernel
    532  f12b		       a5 92		      lda	ballheight
    533  f12d
    534  f12d							; tya
    535  f12d		       c7 89		      dcp	bally
    536  f12f							; sleep 4
    537  f12f
    538  f12f							; sbc stack3
    539  f12f		       2a		      rol
    540  f130		       2a		      rol
    541  f131		       85 1f		      sta	ENABL
    542  f133
    543  f133		       a5 8f		      lda	player1height	;3
    544  f135		       c7 86		      dcp	player1y	;5
    545  f137		       90 d7		      bcc	.skipDrawlastP1
    546  f139		       a4 86		      ldy	player1y	;3
    547  f13b		       b1 8c		      lda	(player1pointer),y	;5; player0pointer must be selected carefully by the compiler
    548  f13d							; so it doesn't cross a page boundary!
    549  f13d
    550  f13d				   .continuelastP1
    551  f13d		       85 1c		      sta	GRP1	;3
    552  f13f
    553  f13f					      ifnconst	player1colors
    554  f13f		       a5 87		      lda	missile1height	;3
    555  f141		       c7 88		      dcp	missile1y	;5
    556  f143				  -	      else
    557  f143				  -	      lda	(player1color),y
    558  f143				  -	      sta	COLUP1
    559  f143					      endif
    560  f143
    561  f143		       ca		      dex
    562  f144							;dec temp4 ; might try putting this above PF writes
    563  f144		       f0 34		      beq	endkernel
    564  f146
    565  f146
    566  f146				  -	      ifconst	pfres
    567  f146				  -	      ldy.w	playfield+pfres*pfwidth-4
    568  f146				  -	      sty	PF1L	;3
    569  f146				  -	      ldy.w	playfield+pfres*pfwidth-3-pfadjust
    570  f146				  -	      sty	PF2L	;3
    571  f146				  -	      ldy.w	playfield+pfres*pfwidth-1
    572  f146				  -	      sty	PF1R	; possibly too early?
    573  f146				  -	      ldy.w	playfield+pfres*pfwidth-2-pfadjust
    574  f146				  -	      sty	PF2R	;3
    575  f146					      else
    576  f146		       ac d0 00 	      ldy.w	playfield-48+pfwidth*12+44
    577  f149		       84 0e		      sty	PF1L	;3
    578  f14b		       ac d1 00 	      ldy.w	playfield-48+pfwidth*12+45-pfadjust
    579  f14e		       84 0f		      sty	PF2L	;3
    580  f150		       ac d3 00 	      ldy.w	playfield-48+pfwidth*12+47
    581  f153		       84 0e		      sty	PF1R	; possibly too early?
    582  f155		       ac d2 00 	      ldy.w	playfield-48+pfwidth*12+46-pfadjust
    583  f158		       84 0f		      sty	PF2R	;3
    584  f15a					      endif
    585  f15a
    586  f15a					      ifnconst	player1colors
    587  f15a		       2a		      rol		;2
    588  f15b		       2a		      rol		;2
    589  f15c		       85 1e		      sta	ENAM1	;3
    590  f15e				  -	      else
    591  f15e				  -	      ifnconst	playercolors
    592  f15e				  -	      sleep	7
    593  f15e				  -	      else
    594  f15e				  -	      lda.w	player0colorstore
    595  f15e				  -	      sta	COLUP0
    596  f15e				  -	      endif
    597  f15e					      endif
    598  f15e
    599  f15e		       ad 8e 00 	      lda.w	player0height
    600  f161		       c7 85		      dcp	player0y
    601  f163		       90 0d		      bcc	.skipDrawlastP0
    602  f165		       a4 85		      ldy	player0y
    603  f167		       b1 8a		      lda	(player0pointer),y
    604  f169				   .continuelastP0
    605  f169		       85 1b		      sta	GRP0
    606  f16b
    607  f16b
    608  f16b
    609  f16b				  -	      ifnconst	no_blank_lines
    610  f16b				  -	      lda	missile0height	;3
    611  f16b				  -	      dcp	missile0y	;5
    612  f16b				  -	      sbc	stack1
    613  f16b				  -	      sta	ENAM0	;3
    614  f16b				  -	      jmp	.endkerloop
    615  f16b					      else
    616  f16b				  -	      ifconst	readpaddle
    617  f16b				  -	      ldy	currentpaddle
    618  f16b				  -	      lda	INPT0,y
    619  f16b				  -	      bpl	noreadpaddle2
    620  f16b				  -	      inc	paddle
    621  f16b				  -	      jmp	.endkerloop
    622  f16b				  -noreadpaddle2
    623  f16b				  -	      sleep	4
    624  f16b				  -	      jmp	.endkerloop
    625  f16b					      else		; no_blank_lines and no paddle reading
    626  f16b		       68		      pla
    627  f16c		       48		      pha		; 14 cycles in 4 bytes
    628  f16d		       68		      pla
    629  f16e		       48		      pha
    630  f16f							; sleep 14
    631  f16f		       4c 16 f1 	      jmp	.endkerloop
    632  f172					      endif
    633  f172					      endif
    634  f172
    635  f172
    636  f172							; ifconst donepaddleskip
    637  f172							;paddleskipread
    638  f172							; this is kind of lame, since it requires 4 cycles from a page boundary crossing
    639  f172							; plus we get a lo-res paddle read
    640  f172							; bmi donepaddleskip
    641  f172							; endif
    642  f172
    643  f172				   .skipDrawlastP0
    644  f172		       a9 00		      lda	#0
    645  f174		       a8		      tay
    646  f175		       4c 69 f1 	      jmp	.continuelastP0
    647  f178
    648  f178					      ifconst	no_blank_lines
    649  f178				   no_blank_lines_bailout
    650  f178		       a2 00		      ldx	#0
    651  f17a					      endif
    652  f17a
    653  f17a				   endkernel
    654  f17a							; 6 digit score routine
    655  f17a		       86 0e		      stx	PF1
    656  f17c		       86 0f		      stx	PF2
    657  f17e		       86 0d		      stx	PF0
    658  f180		       18		      clc
    659  f181
    660  f181				  -	      ifconst	pfrowheight
    661  f181				  -	      lda	#pfrowheight+2
    662  f181					      else
    663  f181					      ifnconst	pfres
    664  f181		       a9 0a		      lda	#10
    665  f183				  -	      else
    666  f183				  -	      lda	#(96/pfres)+2	; try to come close to the real size
    667  f183					      endif
    668  f183					      endif
    669  f183
    670  f183		       e5 ef		      sbc	playfieldpos
    671  f185		       85 ef		      sta	playfieldpos
    672  f187		       8a		      txa
    673  f188
    674  f188				  -	      ifconst	shakescreen
    675  f188				  -	      bit	shakescreen
    676  f188				  -	      bmi	noshakescreen2
    677  f188				  -	      ldx	#$3D
    678  f188				  -noshakescreen2
    679  f188					      endif
    680  f188
    681  f188		       95 02		      sta	WSYNC,x
    682  f18a
    683  f18a							; STA WSYNC ;first one, need one more
    684  f18a		       85 0b		      sta	REFP0
    685  f18c		       85 0c		      sta	REFP1
    686  f18e		       85 1b		      STA	GRP0
    687  f190		       85 1c		      STA	GRP1
    688  f192							; STA PF1
    689  f192							; STA PF2
    690  f192		       85 2b		      sta	HMCLR
    691  f194		       85 1d		      sta	ENAM0
    692  f196		       85 1e		      sta	ENAM1
    693  f198		       85 1f		      sta	ENABL
    694  f19a
    695  f19a		       a5 9d		      lda	temp2	;restore variables that were obliterated by kernel
    696  f19c		       85 85		      sta	player0y
    697  f19e		       a5 9e		      lda	temp3
    698  f1a0		       85 86		      sta	player1y
    699  f1a2					      ifnconst	player1colors
    700  f1a2		       a5 a1		      lda	temp6
    701  f1a4		       85 88		      sta	missile1y
    702  f1a6					      endif
    703  f1a6					      ifnconst	playercolors
    704  f1a6					      ifnconst	readpaddle
    705  f1a6		       a5 a0		      lda	temp5
    706  f1a8		       85 91		      sta	missile0y
    707  f1aa					      endif
    708  f1aa					      endif
    709  f1aa		       a5 f7		      lda	stack2
    710  f1ac		       85 89		      sta	bally
    711  f1ae
    712  f1ae							; strangely, this isn't required any more. might have
    713  f1ae							; resulted from the no_blank_lines score bounce fix
    714  f1ae							;ifconst no_blank_lines
    715  f1ae							;sta WSYNC
    716  f1ae							;endif
    717  f1ae
    718  f1ae		       ad 84 02 	      lda	INTIM
    719  f1b1		       18		      clc
    720  f1b2					      ifnconst	vblank_time
    721  f1b2		       69 8e		      adc	#43+12+87
    722  f1b4				  -	      else
    723  f1b4				  -	      adc	#vblank_time+12+87
    724  f1b4				  -
    725  f1b4					      endif
    726  f1b4							; sta WSYNC
    727  f1b4		       8d 96 02 	      sta	TIM64T
    728  f1b7
    729  f1b7					      ifconst	minikernel
    730  f1b7		       20 20 fc 	      jsr	minikernel
    731  f1ba					      endif
    732  f1ba
    733  f1ba							; now reassign temp vars for score pointers
    734  f1ba
    735  f1ba							; score pointers contain:
    736  f1ba							; score1-5: lo1,lo2,lo3,lo4,lo5,lo6
    737  f1ba							; swap lo2->temp1
    738  f1ba							; swap lo4->temp3
    739  f1ba							; swap lo6->temp5
    740  f1ba					      ifnconst	noscore
    741  f1ba		       a5 97		      lda	scorepointers+1
    742  f1bc							; ldy temp1
    743  f1bc		       85 9c		      sta	temp1
    744  f1be							; sty scorepointers+1
    745  f1be
    746  f1be		       a5 99		      lda	scorepointers+3
    747  f1c0							; ldy temp3
    748  f1c0		       85 9e		      sta	temp3
    749  f1c2							; sty scorepointers+3
    750  f1c2
    751  f1c2
    752  f1c2		       85 2b		      sta	HMCLR
    753  f1c4		       ba		      tsx
    754  f1c5		       86 f6		      stx	stack1
    755  f1c7		       a2 e0		      ldx	#$E0
    756  f1c9		       86 20		      stx	HMP0
    757  f1cb
    758  f1cb		       a5 a3		      LDA	scorecolor
    759  f1cd		       85 06		      STA	COLUP0
    760  f1cf		       85 07		      STA	COLUP1
    761  f1d1				  -	      ifconst	scorefade
    762  f1d1				  -	      STA	stack2
    763  f1d1					      endif
    764  f1d1					      ifconst	pfscore
    765  f1d1		       a5 f4		      lda	pfscorecolor
    766  f1d3		       85 08		      sta	COLUPF
    767  f1d5					      endif
    768  f1d5		       85 02		      sta	WSYNC
    769  f1d7		       a2 00		      ldx	#0
    770  f1d9		       86 1b		      STx	GRP0
    771  f1db		       86 1c		      STx	GRP1	; seems to be needed because of vdel
    772  f1dd
    773  f1dd		       a5 9b		      lda	scorepointers+5
    774  f1df							; ldy temp5
    775  f1df		       95 a0		      sta	temp5,x
    776  f1e1							; sty scorepointers+5
    777  f1e1		       a9 ff		      lda	#>scoretable
    778  f1e3		       85 97		      sta	scorepointers+1
    779  f1e5		       85 99		      sta	scorepointers+3
    780  f1e7		       85 9b		      sta	scorepointers+5
    781  f1e9		       85 9d		      sta	temp2
    782  f1eb		       85 9f		      sta	temp4
    783  f1ed		       85 a1		      sta	temp6
    784  f1ef		       a0 07		      LDY	#7
    785  f1f1		       84 25		      STY	VDELP0
    786  f1f3		       85 10		      STA	RESP0
    787  f1f5		       85 11		      STA	RESP1
    788  f1f7
    789  f1f7
    790  f1f7		       a9 03		      LDA	#$03
    791  f1f9		       85 04		      STA	NUSIZ0
    792  f1fb		       85 05		      STA	NUSIZ1
    793  f1fd		       85 26		      STA	VDELP1
    794  f1ff		       a9 f0		      LDA	#$F0
    795  f201		       85 21		      STA	HMP1
    796  f203		       b1 96		      lda	(scorepointers),y
    797  f205		       85 1b		      sta	GRP0
    798  f207		       85 2a		      STA	HMOVE	; cycle 73 ?
    799  f209		       4c 15 f2 	      jmp	beginscore
    800  f20c
    801  f20c
    802  f20c				  -	      if	((<*)>$d4)
    803  f20c				  -	      align	256	; kludge that potentially wastes space! should be fixed!
    804  f20c					      endif
    805  f20c
    806  f20c				   loop2
    807  f20c		       b1 96		      lda	(scorepointers),y	;+5 68 204
    808  f20e		       85 1b		      sta	GRP0	;+3 71 213 D1 -- -- --
    809  f210					      ifconst	pfscore
    810  f210		       ad f2 00 	      lda.w	pfscore1
    811  f213		       85 0e		      sta	PF1
    812  f215				  -	      else
    813  f215				  -	      ifconst	scorefade
    814  f215				  -	      sleep	2
    815  f215				  -	      dec	stack2	; decrement the temporary scorecolor
    816  f215				  -	      else
    817  f215				  -	      sleep	7
    818  f215				  -	      endif
    819  f215					      endif
    820  f215							; cycle 0
    821  f215				   beginscore
    822  f215		       b1 9e		      lda	(scorepointers+$8),y	;+5 5 15
    823  f217		       85 1c		      sta	GRP1	;+3 8 24 D1 D1 D2 --
    824  f219		       b1 9c		      lda	(scorepointers+$6),y	;+5 13 39
    825  f21b		       85 1b		      sta	GRP0	;+3 16 48 D3 D1 D2 D2
    826  f21d		       b3 98		      lax	(scorepointers+$2),y	;+5 29 87
    827  f21f		       9a		      txs
    828  f220		       b3 9a		      lax	(scorepointers+$4),y	;+5 36 108
    829  f222				  -	      ifconst	scorefade
    830  f222				  -	      lda	stack2
    831  f222					      else
      0  f222					      sleep	3
      1  f222				   .CYCLES    SET	3
      2  f222
      3  f222				  -	      IF	.CYCLES < 2
      4  f222				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f222				  -	      ERR
      6  f222					      ENDIF
      7  f222
      8  f222					      IF	.CYCLES & 1
      9  f222					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f222		       04 00		      nop	0
     11  f224				  -	      ELSE
     12  f224				  -	      bit	VSYNC
     13  f224					      ENDIF
     14  f224				   .CYCLES    SET	.CYCLES - 3
     15  f224					      ENDIF
     16  f224
     17  f224				  -	      REPEAT	.CYCLES / 2
     18  f224				  -	      nop
     19  f224					      REPEND
    833  f224					      endif
    834  f224
    835  f224					      ifconst	pfscore
    836  f224		       a5 f3		      lda	pfscore2
    837  f226		       85 0e		      sta	PF1
    838  f228				  -	      else
    839  f228				  -	      ifconst	scorefade
    840  f228				  -	      sta	COLUP0
    841  f228				  -	      sta	COLUP1
    842  f228				  -	      else
    843  f228				  -	      sleep	6
    844  f228				  -	      endif
    845  f228					      endif
    846  f228
    847  f228		       b1 a0		      lda	(scorepointers+$A),y	;+5 21 63
    848  f22a		       86 1c		      stx	GRP1	;+3 44 132 D3 D3 D4 D2!
    849  f22c		       ba		      tsx
    850  f22d		       86 1b		      stx	GRP0	;+3 47 141 D5 D3! D4 D4
    851  f22f		       85 1c		      sta	GRP1	;+3 50 150 D5 D5 D6 D4!
    852  f231		       84 1b		      sty	GRP0	;+3 53 159 D4* D5! D6 D6
    853  f233		       88		      dey
    854  f234		       10 d6		      bpl	loop2	;+2 60 180
    855  f236
    856  f236		       a6 f6		      ldx	stack1
    857  f238		       9a		      txs
    858  f239							; lda scorepointers+1
    859  f239		       a4 9c		      ldy	temp1
    860  f23b							; sta temp1
    861  f23b		       84 97		      sty	scorepointers+1
    862  f23d
    863  f23d		       a9 00		      LDA	#0
    864  f23f		       85 0e		      sta	PF1
    865  f241		       85 1b		      STA	GRP0
    866  f243		       85 1c		      STA	GRP1
    867  f245		       85 25		      STA	VDELP0
    868  f247		       85 26		      STA	VDELP1	;do we need these
    869  f249		       85 04		      STA	NUSIZ0
    870  f24b		       85 05		      STA	NUSIZ1
    871  f24d
    872  f24d							; lda scorepointers+3
    873  f24d		       a4 9e		      ldy	temp3
    874  f24f							; sta temp3
    875  f24f		       84 99		      sty	scorepointers+3
    876  f251
    877  f251							; lda scorepointers+5
    878  f251		       a4 a0		      ldy	temp5
    879  f253							; sta temp5
    880  f253		       84 9b		      sty	scorepointers+5
    881  f255					      endif		;noscore
    882  f255		       a9 c2		      LDA	#%11000010
    883  f257		       85 02		      sta	WSYNC
    884  f259		       85 01		      STA	VBLANK
      0  f25b					      RETURN
      1  f25b					      ifnconst	bankswitch
      2  f25b		       60		      rts
      3  f25c				  -	      else
      4  f25c				  -	      jmp	BS_return
      5  f25c					      endif
    886  f25c
    887  f25c				  -	      ifconst	shakescreen
    888  f25c				  -doshakescreen
    889  f25c				  -	      bit	shakescreen
    890  f25c				  -	      bmi	noshakescreen
    891  f25c				  -	      sta	WSYNC
    892  f25c				  -noshakescreen
    893  f25c				  -	      ldx	missile0height
    894  f25c				  -	      inx
    895  f25c				  -	      rts
    896  f25c					      endif
    897  f25c
    898  f25c							; Provided under the CC0 license. See the included LICENSE.txt for details.
    899  f25c
    900  f25c							; playfield drawing routines
    901  f25c							; you get a 32x12 bitmapped display in a single color :)
    902  f25c							; 0-31 and 0-11
    903  f25c
    904  f25c				   pfclear		; clears playfield - or fill with pattern
    905  f25c				  -	      ifconst	pfres
    906  f25c				  -	      ldx	#pfres*pfwidth-1
    907  f25c					      else
    908  f25c		       a2 2f		      ldx	#47-(4-pfwidth)*12	; will this work?
    909  f25e					      endif
    910  f25e				   pfclear_loop
    911  f25e					      ifnconst	superchip
    912  f25e		       95 a4		      sta	playfield,x
    913  f260				  -	      else
    914  f260				  -	      sta	playfield-128,x
    915  f260					      endif
    916  f260		       ca		      dex
    917  f261		       10 fb		      bpl	pfclear_loop
      0  f263					      RETURN
      1  f263					      ifnconst	bankswitch
      2  f263		       60		      rts
      3  f264				  -	      else
      4  f264				  -	      jmp	BS_return
      5  f264					      endif
    919  f264
    920  f264				   setuppointers
    921  f264		       86 9d		      stx	temp2	; store on.off.flip value
    922  f266		       aa		      tax		; put x-value in x 
    923  f267		       4a		      lsr
    924  f268		       4a		      lsr
    925  f269		       4a		      lsr		; divide x pos by 8 
    926  f26a		       85 9c		      sta	temp1
    927  f26c		       98		      tya
    928  f26d		       0a		      asl
    929  f26e					      if	pfwidth=4
    930  f26e		       0a		      asl		; multiply y pos by 4
    931  f26f					      endif		; else multiply by 2
    932  f26f		       18		      clc
    933  f270		       65 9c		      adc	temp1	; add them together to get actual memory location offset
    934  f272		       a8		      tay		; put the value in y
    935  f273		       a5 9d		      lda	temp2	; restore on.off.flip value
    936  f275		       60		      rts
    937  f276
    938  f276				   pfread
    939  f276							;x=xvalue, y=yvalue
    940  f276		       20 64 f2 	      jsr	setuppointers
    941  f279		       bd de f2 	      lda	setbyte,x
    942  f27c		       39 a4 00 	      and	playfield,y
    943  f27f		       5d de f2 	      eor	setbyte,x
    944  f282							; beq readzero
    945  f282							; lda #1
    946  f282							; readzero
      0  f282					      RETURN
      1  f282					      ifnconst	bankswitch
      2  f282		       60		      rts
      3  f283				  -	      else
      4  f283				  -	      jmp	BS_return
      5  f283					      endif
    948  f283
    949  f283				   pfpixel
    950  f283							;x=xvalue, y=yvalue, a=0,1,2
    951  f283		       20 64 f2 	      jsr	setuppointers
    952  f286
    953  f286				  -	      ifconst	bankswitch
    954  f286				  -	      lda	temp2	; load on.off.flip value (0,1, or 2)
    955  f286				  -	      beq	pixelon_r	; if "on" go to on
    956  f286				  -	      lsr
    957  f286				  -	      bcs	pixeloff_r	; value is 1 if true
    958  f286				  -	      lda	playfield,y	; if here, it's "flip"
    959  f286				  -	      eor	setbyte,x
    960  f286				  -	      ifconst	superchip
    961  f286				  -	      sta	playfield-128,y
    962  f286				  -	      else
    963  f286				  -	      sta	playfield,y
    964  f286				  -	      endif
    965  f286				  -	      RETURN
    966  f286				  -pixelon_r
    967  f286				  -	      lda	playfield,y
    968  f286				  -	      ora	setbyte,x
    969  f286				  -	      ifconst	superchip
    970  f286				  -	      sta	playfield-128,y
    971  f286				  -	      else
    972  f286				  -	      sta	playfield,y
    973  f286				  -	      endif
    974  f286				  -	      RETURN
    975  f286				  -pixeloff_r
    976  f286				  -	      lda	setbyte,x
    977  f286				  -	      eor	#$ff
    978  f286				  -	      and	playfield,y
    979  f286				  -	      ifconst	superchip
    980  f286				  -	      sta	playfield-128,y
    981  f286				  -	      else
    982  f286				  -	      sta	playfield,y
    983  f286				  -	      endif
    984  f286				  -	      RETURN
    985  f286				  -
    986  f286					      else
    987  f286		       4c b7 f2 	      jmp	plotpoint
    988  f289					      endif
    989  f289
    990  f289				   pfhline
    991  f289							;x=xvalue, y=yvalue, a=0,1,2, temp3=endx
    992  f289		       20 64 f2 	      jsr	setuppointers
    993  f28c		       4c 96 f2 	      jmp	noinc
    994  f28f				   keepgoing
    995  f28f		       e8		      inx
    996  f290		       8a		      txa
    997  f291		       29 07		      and	#7
    998  f293		       d0 01		      bne	noinc
    999  f295		       c8		      iny
   1000  f296				   noinc
   1001  f296		       20 b7 f2 	      jsr	plotpoint
   1002  f299		       e4 9e		      cpx	temp3
   1003  f29b		       30 f2		      bmi	keepgoing
      0  f29d					      RETURN
      1  f29d					      ifnconst	bankswitch
      2  f29d		       60		      rts
      3  f29e				  -	      else
      4  f29e				  -	      jmp	BS_return
      5  f29e					      endif
   1005  f29e
   1006  f29e				   pfvline
   1007  f29e							;x=xvalue, y=yvalue, a=0,1,2, temp3=endx
   1008  f29e		       20 64 f2 	      jsr	setuppointers
   1009  f2a1		       84 9c		      sty	temp1	; store memory location offset
   1010  f2a3		       e6 9e		      inc	temp3	; increase final x by 1 
   1011  f2a5		       a5 9e		      lda	temp3
   1012  f2a7		       0a		      asl
   1013  f2a8					      if	pfwidth=4
   1014  f2a8		       0a		      asl		; multiply by 4
   1015  f2a9					      endif		; else multiply by 2
   1016  f2a9		       85 9e		      sta	temp3	; store it
   1017  f2ab							; Thanks to Michael Rideout for fixing a bug in this code
   1018  f2ab							; right now, temp1=y=starting memory location, temp3=final
   1019  f2ab							; x should equal original x value
   1020  f2ab				   keepgoingy
   1021  f2ab		       20 b7 f2 	      jsr	plotpoint
   1022  f2ae		       c8		      iny
   1023  f2af		       c8		      iny
   1024  f2b0					      if	pfwidth=4
   1025  f2b0		       c8		      iny
   1026  f2b1		       c8		      iny
   1027  f2b2					      endif
   1028  f2b2		       c4 9e		      cpy	temp3
   1029  f2b4		       30 f5		      bmi	keepgoingy
      0  f2b6					      RETURN
      1  f2b6					      ifnconst	bankswitch
      2  f2b6		       60		      rts
      3  f2b7				  -	      else
      4  f2b7				  -	      jmp	BS_return
      5  f2b7					      endif
   1031  f2b7
   1032  f2b7				   plotpoint
   1033  f2b7		       a5 9d		      lda	temp2	; load on.off.flip value (0,1, or 2)
   1034  f2b9		       f0 0d		      beq	pixelon	; if "on" go to on
   1035  f2bb		       4a		      lsr
   1036  f2bc		       b0 14		      bcs	pixeloff	; value is 1 if true
   1037  f2be		       b9 a4 00 	      lda	playfield,y	; if here, it's "flip"
   1038  f2c1		       5d de f2 	      eor	setbyte,x
   1039  f2c4				  -	      ifconst	superchip
   1040  f2c4				  -	      sta	playfield-128,y
   1041  f2c4					      else
   1042  f2c4		       99 a4 00 	      sta	playfield,y
   1043  f2c7					      endif
   1044  f2c7		       60		      rts
   1045  f2c8				   pixelon
   1046  f2c8		       b9 a4 00 	      lda	playfield,y
   1047  f2cb		       1d de f2 	      ora	setbyte,x
   1048  f2ce				  -	      ifconst	superchip
   1049  f2ce				  -	      sta	playfield-128,y
   1050  f2ce					      else
   1051  f2ce		       99 a4 00 	      sta	playfield,y
   1052  f2d1					      endif
   1053  f2d1		       60		      rts
   1054  f2d2				   pixeloff
   1055  f2d2		       bd de f2 	      lda	setbyte,x
   1056  f2d5		       49 ff		      eor	#$ff
   1057  f2d7		       39 a4 00 	      and	playfield,y
   1058  f2da				  -	      ifconst	superchip
   1059  f2da				  -	      sta	playfield-128,y
   1060  f2da					      else
   1061  f2da		       99 a4 00 	      sta	playfield,y
   1062  f2dd					      endif
   1063  f2dd		       60		      rts
   1064  f2de
   1065  f2de				   setbyte
   1066  f2de					      ifnconst	pfcenter
   1067  f2de		       80		      .byte.b	$80
   1068  f2df		       40		      .byte.b	$40
   1069  f2e0		       20		      .byte.b	$20
   1070  f2e1		       10		      .byte.b	$10
   1071  f2e2		       08		      .byte.b	$08
   1072  f2e3		       04		      .byte.b	$04
   1073  f2e4		       02		      .byte.b	$02
   1074  f2e5		       01		      .byte.b	$01
   1075  f2e6					      endif
   1076  f2e6		       01		      .byte.b	$01
   1077  f2e7		       02		      .byte.b	$02
   1078  f2e8		       04		      .byte.b	$04
   1079  f2e9		       08		      .byte.b	$08
   1080  f2ea		       10		      .byte.b	$10
   1081  f2eb		       20		      .byte.b	$20
   1082  f2ec		       40		      .byte.b	$40
   1083  f2ed		       80		      .byte.b	$80
   1084  f2ee		       80		      .byte.b	$80
   1085  f2ef		       40		      .byte.b	$40
   1086  f2f0		       20		      .byte.b	$20
   1087  f2f1		       10		      .byte.b	$10
   1088  f2f2		       08		      .byte.b	$08
   1089  f2f3		       04		      .byte.b	$04
   1090  f2f4		       02		      .byte.b	$02
   1091  f2f5		       01		      .byte.b	$01
   1092  f2f6		       01		      .byte.b	$01
   1093  f2f7		       02		      .byte.b	$02
   1094  f2f8		       04		      .byte.b	$04
   1095  f2f9		       08		      .byte.b	$08
   1096  f2fa		       10		      .byte.b	$10
   1097  f2fb		       20		      .byte.b	$20
   1098  f2fc		       40		      .byte.b	$40
   1099  f2fd		       80		      .byte.b	$80
   1100  f2fe							; Provided under the CC0 license. See the included LICENSE.txt for details.
   1101  f2fe
   1102  f2fe				   pfscroll		;(a=0 left, 1 right, 2 up, 4 down, 6=upup, 12=downdown)
   1103  f2fe		       d0 13		      bne	notleft
   1104  f300							;left
   1105  f300				  -	      ifconst	pfres
   1106  f300				  -	      ldx	#pfres*4
   1107  f300					      else
   1108  f300		       a2 30		      ldx	#48
   1109  f302					      endif
   1110  f302				   leftloop
   1111  f302		       b5 a3		      lda	playfield-1,x
   1112  f304		       4a		      lsr
   1113  f305
   1114  f305				  -	      ifconst	superchip
   1115  f305				  -	      lda	playfield-2,x
   1116  f305				  -	      rol
   1117  f305				  -	      sta	playfield-130,x
   1118  f305				  -	      lda	playfield-3,x
   1119  f305				  -	      ror
   1120  f305				  -	      sta	playfield-131,x
   1121  f305				  -	      lda	playfield-4,x
   1122  f305				  -	      rol
   1123  f305				  -	      sta	playfield-132,x
   1124  f305				  -	      lda	playfield-1,x
   1125  f305				  -	      ror
   1126  f305				  -	      sta	playfield-129,x
   1127  f305					      else
   1128  f305		       36 a2		      rol	playfield-2,x
   1129  f307		       76 a1		      ror	playfield-3,x
   1130  f309		       36 a0		      rol	playfield-4,x
   1131  f30b		       76 a3		      ror	playfield-1,x
   1132  f30d					      endif
   1133  f30d
   1134  f30d		       8a		      txa
   1135  f30e		       cb 04		      sbx	#4
   1136  f310		       d0 f0		      bne	leftloop
      0  f312					      RETURN
      1  f312					      ifnconst	bankswitch
      2  f312		       60		      rts
      3  f313				  -	      else
      4  f313				  -	      jmp	BS_return
      5  f313					      endif
   1138  f313
   1139  f313				   notleft
   1140  f313		       4a		      lsr
   1141  f314		       90 13		      bcc	notright
   1142  f316							;right
   1143  f316
   1144  f316				  -	      ifconst	pfres
   1145  f316				  -	      ldx	#pfres*4
   1146  f316					      else
   1147  f316		       a2 30		      ldx	#48
   1148  f318					      endif
   1149  f318				   rightloop
   1150  f318		       b5 a0		      lda	playfield-4,x
   1151  f31a		       4a		      lsr
   1152  f31b				  -	      ifconst	superchip
   1153  f31b				  -	      lda	playfield-3,x
   1154  f31b				  -	      rol
   1155  f31b				  -	      sta	playfield-131,x
   1156  f31b				  -	      lda	playfield-2,x
   1157  f31b				  -	      ror
   1158  f31b				  -	      sta	playfield-130,x
   1159  f31b				  -	      lda	playfield-1,x
   1160  f31b				  -	      rol
   1161  f31b				  -	      sta	playfield-129,x
   1162  f31b				  -	      lda	playfield-4,x
   1163  f31b				  -	      ror
   1164  f31b				  -	      sta	playfield-132,x
   1165  f31b					      else
   1166  f31b		       36 a1		      rol	playfield-3,x
   1167  f31d		       76 a2		      ror	playfield-2,x
   1168  f31f		       36 a3		      rol	playfield-1,x
   1169  f321		       76 a0		      ror	playfield-4,x
   1170  f323					      endif
   1171  f323		       8a		      txa
   1172  f324		       cb 04		      sbx	#4
   1173  f326		       d0 f0		      bne	rightloop
      0  f328					      RETURN
      1  f328					      ifnconst	bankswitch
      2  f328		       60		      rts
      3  f329				  -	      else
      4  f329				  -	      jmp	BS_return
      5  f329					      endif
   1175  f329
   1176  f329				   notright
   1177  f329		       4a		      lsr
   1178  f32a		       90 49		      bcc	notup
   1179  f32c							;up
   1180  f32c		       4a		      lsr
   1181  f32d		       90 02		      bcc	onedecup
   1182  f32f		       c6 ef		      dec	playfieldpos
   1183  f331				   onedecup
   1184  f331		       c6 ef		      dec	playfieldpos
   1185  f333		       f0 02		      beq	shiftdown
   1186  f335		       10 3d		      bpl	noshiftdown2
   1187  f337				   shiftdown
   1188  f337				  -	      ifconst	pfrowheight
   1189  f337				  -	      lda	#pfrowheight
   1190  f337					      else
   1191  f337					      ifnconst	pfres
   1192  f337		       a9 08		      lda	#8
   1193  f339				  -	      else
   1194  f339				  -	      lda	#(96/pfres)	; try to come close to the real size
   1195  f339					      endif
   1196  f339					      endif
   1197  f339
   1198  f339		       85 ef		      sta	playfieldpos
   1199  f33b		       a5 a7		      lda	playfield+3
   1200  f33d		       85 9f		      sta	temp4
   1201  f33f		       a5 a6		      lda	playfield+2
   1202  f341		       85 9e		      sta	temp3
   1203  f343		       a5 a5		      lda	playfield+1
   1204  f345		       85 9d		      sta	temp2
   1205  f347		       a5 a4		      lda	playfield
   1206  f349		       85 9c		      sta	temp1
   1207  f34b		       a2 00		      ldx	#0
   1208  f34d				   up2
   1209  f34d		       b5 a8		      lda	playfield+4,x
   1210  f34f				  -	      ifconst	superchip
   1211  f34f				  -	      sta	playfield-128,x
   1212  f34f				  -	      lda	playfield+5,x
   1213  f34f				  -	      sta	playfield-127,x
   1214  f34f				  -	      lda	playfield+6,x
   1215  f34f				  -	      sta	playfield-126,x
   1216  f34f				  -	      lda	playfield+7,x
   1217  f34f				  -	      sta	playfield-125,x
   1218  f34f					      else
   1219  f34f		       95 a4		      sta	playfield,x
   1220  f351		       b5 a9		      lda	playfield+5,x
   1221  f353		       95 a5		      sta	playfield+1,x
   1222  f355		       b5 aa		      lda	playfield+6,x
   1223  f357		       95 a6		      sta	playfield+2,x
   1224  f359		       b5 ab		      lda	playfield+7,x
   1225  f35b		       95 a7		      sta	playfield+3,x
   1226  f35d					      endif
   1227  f35d		       8a		      txa
   1228  f35e		       cb fc		      sbx	#252
   1229  f360				  -	      ifconst	pfres
   1230  f360				  -	      cpx	#(pfres-1)*4
   1231  f360					      else
   1232  f360		       e0 2c		      cpx	#44
   1233  f362					      endif
   1234  f362		       d0 e9		      bne	up2
   1235  f364
   1236  f364		       a5 9f		      lda	temp4
   1237  f366
   1238  f366				  -	      ifconst	superchip
   1239  f366				  -	      ifconst	pfres
   1240  f366				  -	      sta	playfield+pfres*4-129
   1241  f366				  -	      lda	temp3
   1242  f366				  -	      sta	playfield+pfres*4-130
   1243  f366				  -	      lda	temp2
   1244  f366				  -	      sta	playfield+pfres*4-131
   1245  f366				  -	      lda	temp1
   1246  f366				  -	      sta	playfield+pfres*4-132
   1247  f366				  -	      else
   1248  f366				  -	      sta	playfield+47-128
   1249  f366				  -	      lda	temp3
   1250  f366				  -	      sta	playfield+46-128
   1251  f366				  -	      lda	temp2
   1252  f366				  -	      sta	playfield+45-128
   1253  f366				  -	      lda	temp1
   1254  f366				  -	      sta	playfield+44-128
   1255  f366				  -	      endif
   1256  f366					      else
   1257  f366				  -	      ifconst	pfres
   1258  f366				  -	      sta	playfield+pfres*4-1
   1259  f366				  -	      lda	temp3
   1260  f366				  -	      sta	playfield+pfres*4-2
   1261  f366				  -	      lda	temp2
   1262  f366				  -	      sta	playfield+pfres*4-3
   1263  f366				  -	      lda	temp1
   1264  f366				  -	      sta	playfield+pfres*4-4
   1265  f366					      else
   1266  f366		       85 d3		      sta	playfield+47
   1267  f368		       a5 9e		      lda	temp3
   1268  f36a		       85 d2		      sta	playfield+46
   1269  f36c		       a5 9d		      lda	temp2
   1270  f36e		       85 d1		      sta	playfield+45
   1271  f370		       a5 9c		      lda	temp1
   1272  f372		       85 d0		      sta	playfield+44
   1273  f374					      endif
   1274  f374					      endif
   1275  f374				   noshiftdown2
      0  f374					      RETURN
      1  f374					      ifnconst	bankswitch
      2  f374		       60		      rts
      3  f375				  -	      else
      4  f375				  -	      jmp	BS_return
      5  f375					      endif
   1277  f375
   1278  f375
   1279  f375				   notup
   1280  f375							;down
   1281  f375		       4a		      lsr
   1282  f376		       b0 02		      bcs	oneincup
   1283  f378		       e6 ef		      inc	playfieldpos
   1284  f37a				   oneincup
   1285  f37a		       e6 ef		      inc	playfieldpos
   1286  f37c		       a5 ef		      lda	playfieldpos
   1287  f37e
   1288  f37e				  -	      ifconst	pfrowheight
   1289  f37e				  -	      cmp	#pfrowheight+1
   1290  f37e					      else
   1291  f37e					      ifnconst	pfres
   1292  f37e		       c9 09		      cmp	#9
   1293  f380				  -	      else
   1294  f380				  -	      cmp	#(96/pfres)+1	; try to come close to the real size
   1295  f380					      endif
   1296  f380					      endif
   1297  f380
   1298  f380		       90 3b		      bcc	noshiftdown
   1299  f382		       a9 01		      lda	#1
   1300  f384		       85 ef		      sta	playfieldpos
   1301  f386
   1302  f386				  -	      ifconst	pfres
   1303  f386				  -	      lda	playfield+pfres*4-1
   1304  f386				  -	      sta	temp4
   1305  f386				  -	      lda	playfield+pfres*4-2
   1306  f386				  -	      sta	temp3
   1307  f386				  -	      lda	playfield+pfres*4-3
   1308  f386				  -	      sta	temp2
   1309  f386				  -	      lda	playfield+pfres*4-4
   1310  f386					      else
   1311  f386		       a5 d3		      lda	playfield+47
   1312  f388		       85 9f		      sta	temp4
   1313  f38a		       a5 d2		      lda	playfield+46
   1314  f38c		       85 9e		      sta	temp3
   1315  f38e		       a5 d1		      lda	playfield+45
   1316  f390		       85 9d		      sta	temp2
   1317  f392		       a5 d0		      lda	playfield+44
   1318  f394					      endif
   1319  f394
   1320  f394		       85 9c		      sta	temp1
   1321  f396
   1322  f396				  -	      ifconst	pfres
   1323  f396				  -	      ldx	#(pfres-1)*4
   1324  f396					      else
   1325  f396		       a2 2c		      ldx	#44
   1326  f398					      endif
   1327  f398				   down2
   1328  f398		       b5 a3		      lda	playfield-1,x
   1329  f39a				  -	      ifconst	superchip
   1330  f39a				  -	      sta	playfield-125,x
   1331  f39a				  -	      lda	playfield-2,x
   1332  f39a				  -	      sta	playfield-126,x
   1333  f39a				  -	      lda	playfield-3,x
   1334  f39a				  -	      sta	playfield-127,x
   1335  f39a				  -	      lda	playfield-4,x
   1336  f39a				  -	      sta	playfield-128,x
   1337  f39a					      else
   1338  f39a		       95 a7		      sta	playfield+3,x
   1339  f39c		       b5 a2		      lda	playfield-2,x
   1340  f39e		       95 a6		      sta	playfield+2,x
   1341  f3a0		       b5 a1		      lda	playfield-3,x
   1342  f3a2		       95 a5		      sta	playfield+1,x
   1343  f3a4		       b5 a0		      lda	playfield-4,x
   1344  f3a6		       95 a4		      sta	playfield,x
   1345  f3a8					      endif
   1346  f3a8		       8a		      txa
   1347  f3a9		       cb 04		      sbx	#4
   1348  f3ab		       d0 eb		      bne	down2
   1349  f3ad
   1350  f3ad		       a5 9f		      lda	temp4
   1351  f3af				  -	      ifconst	superchip
   1352  f3af				  -	      sta	playfield-125
   1353  f3af				  -	      lda	temp3
   1354  f3af				  -	      sta	playfield-126
   1355  f3af				  -	      lda	temp2
   1356  f3af				  -	      sta	playfield-127
   1357  f3af				  -	      lda	temp1
   1358  f3af				  -	      sta	playfield-128
   1359  f3af					      else
   1360  f3af		       85 a7		      sta	playfield+3
   1361  f3b1		       a5 9e		      lda	temp3
   1362  f3b3		       85 a6		      sta	playfield+2
   1363  f3b5		       a5 9d		      lda	temp2
   1364  f3b7		       85 a5		      sta	playfield+1
   1365  f3b9		       a5 9c		      lda	temp1
   1366  f3bb		       85 a4		      sta	playfield
   1367  f3bd					      endif
   1368  f3bd				   noshiftdown
      0  f3bd					      RETURN
      1  f3bd					      ifnconst	bankswitch
      2  f3bd		       60		      rts
      3  f3be				  -	      else
      4  f3be				  -	      jmp	BS_return
      5  f3be					      endif
   1370  f3be							; Provided under the CC0 license. See the included LICENSE.txt for details.
   1371  f3be
   1372  f3be							;standard routines needed for pretty much all games
   1373  f3be							; just the random number generator is left - maybe we should remove this asm file altogether?
   1374  f3be							; repositioning code and score pointer setup moved to overscan
   1375  f3be							; read switches, joysticks now compiler generated (more efficient)
   1376  f3be
   1377  f3be				   randomize
   1378  f3be		       a5 a2		      lda	rand
   1379  f3c0		       4a		      lsr
   1380  f3c1					      ifconst	rand16
   1381  f3c1		       26 ed		      rol	rand16
   1382  f3c3					      endif
   1383  f3c3		       90 02		      bcc	noeor
   1384  f3c5		       49 b4		      eor	#$B4
   1385  f3c7				   noeor
   1386  f3c7		       85 a2		      sta	rand
   1387  f3c9					      ifconst	rand16
   1388  f3c9		       45 ed		      eor	rand16
   1389  f3cb					      endif
      0  f3cb					      RETURN
      1  f3cb					      ifnconst	bankswitch
      2  f3cb		       60		      rts
      3  f3cc				  -	      else
      4  f3cc				  -	      jmp	BS_return
      5  f3cc					      endif
   1391  f3cc							; Provided under the CC0 license. See the included LICENSE.txt for details.
   1392  f3cc
   1393  f3cc				   drawscreen
   1394  f3cc				  -	      ifconst	debugscore
   1395  f3cc				  -	      ldx	#14
   1396  f3cc				  -	      lda	INTIM	; display # cycles left in the score
   1397  f3cc				  -
   1398  f3cc				  -	      ifconst	mincycles
   1399  f3cc				  -	      lda	mincycles
   1400  f3cc				  -	      cmp	INTIM
   1401  f3cc				  -	      lda	mincycles
   1402  f3cc				  -	      bcc	nochange
   1403  f3cc				  -	      lda	INTIM
   1404  f3cc				  -	      sta	mincycles
   1405  f3cc				  -nochange
   1406  f3cc				  -	      endif
   1407  f3cc				  -
   1408  f3cc				  -			; cmp #$2B
   1409  f3cc				  -			; bcs no_cycles_left
   1410  f3cc				  -	      bmi	cycles_left
   1411  f3cc				  -	      ldx	#64
   1412  f3cc				  -	      eor	#$ff	;make negative
   1413  f3cc				  -cycles_left
   1414  f3cc				  -	      stx	scorecolor
   1415  f3cc				  -	      and	#$7f	; clear sign bit
   1416  f3cc				  -	      tax
   1417  f3cc				  -	      lda	scorebcd,x
   1418  f3cc				  -	      sta	score+2
   1419  f3cc				  -	      lda	scorebcd1,x
   1420  f3cc				  -	      sta	score+1
   1421  f3cc				  -	      jmp	done_debugscore
   1422  f3cc				  -scorebcd
   1423  f3cc				  -	      .byte	$00, $64, $28, $92, $56, $20, $84, $48, $12, $76, $40
   1424  f3cc				  -	      .byte	$04, $68, $32, $96, $60, $24, $88, $52, $16, $80, $44
   1425  f3cc				  -	      .byte	$08, $72, $36, $00, $64, $28, $92, $56, $20, $84, $48
   1426  f3cc				  -	      .byte	$12, $76, $40, $04, $68, $32, $96, $60, $24, $88
   1427  f3cc				  -scorebcd1
   1428  f3cc				  -	      .byte	0, 0, 1, 1, 2, 3, 3, 4, 5, 5, 6
   1429  f3cc				  -	      .byte	7, 7, 8, 8, 9, $10, $10, $11, $12, $12, $13
   1430  f3cc				  -	      .byte	$14, $14, $15, $16, $16, $17, $17, $18, $19, $19, $20
   1431  f3cc				  -	      .byte	$21, $21, $22, $23, $23, $24, $24, $25, $26, $26
   1432  f3cc				  -done_debugscore
   1433  f3cc					      endif
   1434  f3cc
   1435  f3cc				  -	      ifconst	debugcycles
   1436  f3cc				  -	      lda	INTIM	; if we go over, it mucks up the background color
   1437  f3cc				  -			; cmp #$2B
   1438  f3cc				  -			; BCC overscan
   1439  f3cc				  -	      bmi	overscan
   1440  f3cc				  -	      sta	COLUBK
   1441  f3cc				  -	      bcs	doneoverscan
   1442  f3cc					      endif
   1443  f3cc
   1444  f3cc				   overscan
   1445  f3cc				  -	      ifconst	interlaced
   1446  f3cc				  -	      PHP
   1447  f3cc				  -	      PLA
   1448  f3cc				  -	      EOR	#4	; flip interrupt bit
   1449  f3cc				  -	      PHA
   1450  f3cc				  -	      PLP
   1451  f3cc				  -	      AND	#4	; isolate the interrupt bit
   1452  f3cc				  -	      TAX		; save it for later
   1453  f3cc					      endif
   1454  f3cc
   1455  f3cc				   overscanloop
   1456  f3cc		       ad 84 02 	      lda	INTIM	;wait for sync
   1457  f3cf		       30 fb		      bmi	overscanloop
   1458  f3d1				   doneoverscan
   1459  f3d1
   1460  f3d1							;do VSYNC
   1461  f3d1
   1462  f3d1				  -	      ifconst	interlaced
   1463  f3d1				  -	      CPX	#4
   1464  f3d1				  -	      BNE	oddframevsync
   1465  f3d1					      endif
   1466  f3d1
   1467  f3d1		       a9 02		      lda	#2
   1468  f3d3		       85 02		      sta	WSYNC
   1469  f3d5		       85 00		      sta	VSYNC
   1470  f3d7		       85 02		      STA	WSYNC
   1471  f3d9		       85 02		      STA	WSYNC
   1472  f3db		       4a		      lsr
   1473  f3dc		       85 02		      STA	WSYNC
   1474  f3de		       85 00		      STA	VSYNC
   1475  f3e0		       85 01		      sta	VBLANK
   1476  f3e2					      ifnconst	overscan_time
   1477  f3e2		       a9 a5		      lda	#37+128
   1478  f3e4				  -	      else
   1479  f3e4				  -	      lda	#overscan_time+128
   1480  f3e4					      endif
   1481  f3e4		       8d 96 02 	      sta	TIM64T
   1482  f3e7
   1483  f3e7				  -	      ifconst	interlaced
   1484  f3e7				  -	      jmp	postsync
   1485  f3e7				  -
   1486  f3e7				  -oddframevsync
   1487  f3e7				  -	      sta	WSYNC
   1488  f3e7				  -
   1489  f3e7				  -	      LDA	($80,X)	; 11 waste
   1490  f3e7				  -	      LDA	($80,X)	; 11 waste
   1491  f3e7				  -	      LDA	($80,X)	; 11 waste
   1492  f3e7				  -
   1493  f3e7				  -	      lda	#2
   1494  f3e7				  -	      sta	VSYNC
   1495  f3e7				  -	      sta	WSYNC
   1496  f3e7				  -	      sta	WSYNC
   1497  f3e7				  -	      sta	WSYNC
   1498  f3e7				  -
   1499  f3e7				  -	      LDA	($80,X)	; 11 waste
   1500  f3e7				  -	      LDA	($80,X)	; 11 waste
   1501  f3e7				  -	      LDA	($80,X)	; 11 waste
   1502  f3e7				  -
   1503  f3e7				  -	      lda	#0
   1504  f3e7				  -	      sta	VSYNC
   1505  f3e7				  -	      sta	VBLANK
   1506  f3e7				  -	      ifnconst	overscan_time
   1507  f3e7				  -	      lda	#37+128
   1508  f3e7				  -	      else
   1509  f3e7				  -	      lda	#overscan_time+128
   1510  f3e7				  -	      endif
   1511  f3e7				  -	      sta	TIM64T
   1512  f3e7				  -
   1513  f3e7				  -postsync
   1514  f3e7					      endif
   1515  f3e7
   1516  f3e7				  -	      ifconst	legacy
   1517  f3e7				  -	      if	legacy < 100
   1518  f3e7				  -	      ldx	#4
   1519  f3e7				  -adjustloop
   1520  f3e7				  -	      lda	player0x,x
   1521  f3e7				  -	      sec
   1522  f3e7				  -	      sbc	#14	;?
   1523  f3e7				  -	      sta	player0x,x
   1524  f3e7				  -	      dex
   1525  f3e7				  -	      bpl	adjustloop
   1526  f3e7				  -	      endif
   1527  f3e7					      endif
   1528  f3e7				  -	      if	((<*)>$e9)&&((<*)<$fa)
   1529  f3e7				  -	      repeat	($fa-(<*))
   1530  f3e7				  -	      nop
   1531  f3e7				  -	      repend
   1532  f3e7					      endif
   1533  f3e7		       85 02		      sta	WSYNC
   1534  f3e9		       a2 04		      ldx	#4
      0  f3eb					      SLEEP	3
      1  f3eb				   .CYCLES    SET	3
      2  f3eb
      3  f3eb				  -	      IF	.CYCLES < 2
      4  f3eb				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f3eb				  -	      ERR
      6  f3eb					      ENDIF
      7  f3eb
      8  f3eb					      IF	.CYCLES & 1
      9  f3eb					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f3eb		       04 00		      nop	0
     11  f3ed				  -	      ELSE
     12  f3ed				  -	      bit	VSYNC
     13  f3ed					      ENDIF
     14  f3ed				   .CYCLES    SET	.CYCLES - 3
     15  f3ed					      ENDIF
     16  f3ed
     17  f3ed				  -	      REPEAT	.CYCLES / 2
     18  f3ed				  -	      nop
     19  f3ed					      REPEND
   1536  f3ed				   HorPosLoop		; 5
   1537  f3ed		       b5 80		      lda	player0x,X	;+4 9
   1538  f3ef		       38		      sec		;+2 11
   1539  f3f0				   DivideLoop
   1540  f3f0		       e9 0f		      sbc	#15
   1541  f3f2		       b0 fc		      bcs	DivideLoop	;+4 15
   1542  f3f4		       95 9c		      sta	temp1,X	;+4 19
   1543  f3f6		       95 10		      sta	RESP0,X	;+4 23
   1544  f3f8		       85 02		      sta	WSYNC
   1545  f3fa		       ca		      dex
   1546  f3fb		       10 f0		      bpl	HorPosLoop	;+5 5
   1547  f3fd							; 4
   1548  f3fd
   1549  f3fd		       a2 04		      ldx	#4
   1550  f3ff		       b4 9c		      ldy	temp1,X
   1551  f401		       b9 5d f3 	      lda	repostable-256,Y
   1552  f404		       95 20		      sta	HMP0,X	;+14 18
   1553  f406
   1554  f406		       ca		      dex
   1555  f407		       b4 9c		      ldy	temp1,X
   1556  f409		       b9 5d f3 	      lda	repostable-256,Y
   1557  f40c		       95 20		      sta	HMP0,X	;+14 32
   1558  f40e
   1559  f40e		       ca		      dex
   1560  f40f		       b4 9c		      ldy	temp1,X
   1561  f411		       b9 5d f3 	      lda	repostable-256,Y
   1562  f414		       95 20		      sta	HMP0,X	;+14 46
   1563  f416
   1564  f416		       ca		      dex
   1565  f417		       b4 9c		      ldy	temp1,X
   1566  f419		       b9 5d f3 	      lda	repostable-256,Y
   1567  f41c		       95 20		      sta	HMP0,X	;+14 60
   1568  f41e
   1569  f41e		       ca		      dex
   1570  f41f		       b4 9c		      ldy	temp1,X
   1571  f421		       b9 5d f3 	      lda	repostable-256,Y
   1572  f424		       95 20		      sta	HMP0,X	;+14 74
   1573  f426
   1574  f426		       85 02		      sta	WSYNC
   1575  f428
   1576  f428		       85 2a		      sta	HMOVE	;+3 3
   1577  f42a
   1578  f42a
   1579  f42a				  -	      ifconst	legacy
   1580  f42a				  -	      if	legacy < 100
   1581  f42a				  -	      ldx	#4
   1582  f42a				  -adjustloop2
   1583  f42a				  -	      lda	player0x,x
   1584  f42a				  -	      clc
   1585  f42a				  -	      adc	#14	;?
   1586  f42a				  -	      sta	player0x,x
   1587  f42a				  -	      dex
   1588  f42a				  -	      bpl	adjustloop2
   1589  f42a				  -	      endif
   1590  f42a					      endif
   1591  f42a
   1592  f42a
   1593  f42a
   1594  f42a
   1595  f42a							;set score pointers
   1596  f42a		       a7 95		      lax	score+2
   1597  f42c		       20 5d f4 	      jsr	scorepointerset
   1598  f42f		       84 9b		      sty	scorepointers+5
   1599  f431		       86 98		      stx	scorepointers+2
   1600  f433		       a7 94		      lax	score+1
   1601  f435		       20 5d f4 	      jsr	scorepointerset
   1602  f438		       84 9a		      sty	scorepointers+4
   1603  f43a		       86 97		      stx	scorepointers+1
   1604  f43c		       a7 93		      lax	score
   1605  f43e		       20 5d f4 	      jsr	scorepointerset
   1606  f441		       84 99		      sty	scorepointers+3
   1607  f443		       86 96		      stx	scorepointers
   1608  f445
   1609  f445				   vblk
   1610  f445							; run possible vblank bB code
   1611  f445				  -	      ifconst	vblank_bB_code
   1612  f445				  -	      jsr	vblank_bB_code
   1613  f445					      endif
   1614  f445				   vblk2
   1615  f445		       ad 84 02 	      LDA	INTIM
   1616  f448		       30 fb		      bmi	vblk2
   1617  f44a		       4c 34 f0 	      jmp	kernel
   1618  f44d
   1619  f44d
   1620  f44d		       80 70 60 50*	      .byte.b	$80,$70,$60,$50,$40,$30,$20,$10,$00
   1621  f456		       f0 e0 d0 c0*	      .byte.b	$F0,$E0,$D0,$C0,$B0,$A0,$90
   1622  f45d				   repostable
   1623  f45d
   1624  f45d				   scorepointerset
   1625  f45d		       29 0f		      and	#$0F
   1626  f45f		       0a		      asl
   1627  f460		       0a		      asl
   1628  f461		       0a		      asl
   1629  f462		       69 9c		      adc	#<scoretable
   1630  f464		       a8		      tay
   1631  f465		       8a		      txa
   1632  f466							; and #$F0
   1633  f466							; lsr
   1634  f466		       4b f0		      asr	#$F0
   1635  f468		       69 9c		      adc	#<scoretable
   1636  f46a		       aa		      tax
   1637  f46b		       60		      rts
   1638  f46c				   game
   1639  f46c				   .
   1640  f46c							; 
   1641  f46c
   1642  f46c				   .L00 		;  rem teste jogo 1
   1643  f46c
   1644  f46c				   .L01 		;  rem por Heitor Maciel
   1645  f46c
   1646  f46c				   .
   1647  f46c							; 
   1648  f46c
   1649  f46c				   .L02 		;  set kernel_options no_blank_lines
   1650  f46c
   1651  f46c				   .L03 		;  const pfscore  =  1
   1652  f46c
   1653  f46c				   .
   1654  f46c							; 
   1655  f46c
   1656  f46c				   .L04 		;  dim _Ch0_Sound  =  a
   1657  f46c
   1658  f46c				   .
   1659  f46c							; 
   1660  f46c
   1661  f46c				   .
   1662  f46c							; 
   1663  f46c
   1664  f46c				   .
   1665  f46c							; 
   1666  f46c
   1667  f46c				   .L05 		;  dim _cont_escudo  =  e
   1668  f46c
   1669  f46c				   .L06 		;  dim _duracao_som0  =  f
   1670  f46c
   1671  f46c				   .L07 		;  dim _duracao_som1  =  g
   1672  f46c
   1673  f46c				   .L08 		;  dim musicPointer  =  h
   1674  f46c
   1675  f46c				   .
   1676  f46c							; 
   1677  f46c
   1678  f46c				   .L09 		;  dim _bit_supressores  =  j
   1679  f46c
   1680  f46c				   .
   1681  f46c							; 
   1682  f46c
   1683  f46c				   .
   1684  f46c							; 
   1685  f46c
   1686  f46c				   .
   1687  f46c							; 
   1688  f46c
   1689  f46c				   .
   1690  f46c							; 
   1691  f46c
   1692  f46c				   .
   1693  f46c							; 
   1694  f46c
   1695  f46c				   .
   1696  f46c							; 
   1697  f46c
   1698  f46c				   .
   1699  f46c							; 
   1700  f46c
   1701  f46c				   .L010		;  dim musicTimer  =  k
   1702  f46c
   1703  f46c				   .L011		;  dim _dificuldade  =  l
   1704  f46c
   1705  f46c				   .L012		;  dim _Ch1_Sound  =  m
   1706  f46c
   1707  f46c				   .L013		;  dim _animacao  =  n
   1708  f46c
   1709  f46c				   .L014		;  dim _SC_Back  =  o
   1710  f46c
   1711  f46c				   .
   1712  f46c							; 
   1713  f46c
   1714  f46c				   .L015		;  dim _fases	=  q
   1715  f46c
   1716  f46c				   .L016		;  dim _cont_anima_morte  =  r
   1717  f46c
   1718  f46c				   .L017		;  dim _cont_telas  =	s
   1719  f46c
   1720  f46c				   .
   1721  f46c							; 
   1722  f46c
   1723  f46c				   .
   1724  f46c							; 
   1725  f46c
   1726  f46c				   .
   1727  f46c							; 
   1728  f46c
   1729  f46c				   .L018		;  dim rand16	=  z
   1730  f46c
   1731  f46c				   .
   1732  f46c							; 
   1733  f46c
   1734  f46c				   .L019		;  gosub __playfield_transicao
   1735  f46c
   1736  f46c		       20 1c fb 	      jsr	.__playfield_transicao
   1737  f46f
   1738  f46f				   .
   1739  f46f							; 
   1740  f46f
   1741  f46f				   .__title_screen
   1742  f46f							; __title_screen
   1743  f46f
   1744  f46f				   .L020		;  AUDC0  =  12
   1745  f46f
   1746  f46f		       a9 0c		      LDA	#12
   1747  f471		       85 15		      STA	AUDC0
   1748  f473				   .L021		;  AUDC1  =  1
   1749  f473
   1750  f473		       a9 01		      LDA	#1
   1751  f475		       85 16		      STA	AUDC1
   1752  f477				   .
   1753  f477							; 
   1754  f477
   1755  f477				   .L022		;  if joy0fire then e	=  1
   1756  f477
   1757  f477		       24 0c		      bit	INPT4
   1758  f479		       30 04		      BMI	.skipL022
   1759  f47b				   .condpart0
   1760  f47b		       a9 01		      LDA	#1
   1761  f47d		       85 d8		      STA	e
   1762  f47f				   .skipL022
   1763  f47f				   .L023		;  if e  =  0 then goto __skip_sound_title
   1764  f47f
   1765  f47f		       a5 d8		      LDA	e
   1766  f481		       c9 00		      CMP	#0
   1767  f483		       d0 03		      BNE	.skipL023
   1768  f485				   .condpart1
   1769  f485		       4c 93 f4 	      jmp	.__skip_sound_title
   1770  f488
   1771  f488				   .skipL023
   1772  f488				   .L024		;  if musicTimer  =  0 then goto changeMusicNoteTitle
   1773  f488
   1774  f488		       a5 de		      LDA	musicTimer
   1775  f48a		       c9 00		      CMP	#0
   1776  f48c		       d0 03		      BNE	.skipL024
   1777  f48e				   .condpart2
   1778  f48e		       4c a3 fb 	      jmp	.changeMusicNoteTitle
   1779  f491
   1780  f491				   .skipL024
   1781  f491				   .
   1782  f491							; 
   1783  f491
   1784  f491				   .__volta_trilha_title
   1785  f491							; __volta_trilha_title
   1786  f491
   1787  f491				   .L025		;  musicTimer	=  musicTimer  -  1
   1788  f491
   1789  f491		       c6 de		      DEC	musicTimer
   1790  f493				   .__skip_sound_title
   1791  f493							; __skip_sound_title
   1792  f493
   1793  f493				   .
   1794  f493							; 
   1795  f493
   1796  f493				   .L026		;  pfscore1  =  0  :  scorecolor  =  $00
   1797  f493
   1798  f493		       a9 00		      LDA	#0
   1799  f495		       85 f2		      STA	pfscore1
   1800  f497		       a9 00		      LDA	#$00
   1801  f499		       85 a3		      STA	scorecolor
   1802  f49b				   .L027		;  gosub __nave
   1803  f49b
   1804  f49b		       20 15 fa 	      jsr	.__nave
   1805  f49e
   1806  f49e				   .L028		;  _animacao  =  10
   1807  f49e
   1808  f49e		       a9 0a		      LDA	#10
   1809  f4a0		       85 e1		      STA	_animacao
   1810  f4a2				   .L029		;  drawscreen
   1811  f4a2
   1812  f4a2		       20 cc f3 	      jsr	drawscreen
   1813  f4a5				   .L030		;  COLUBK = $00
   1814  f4a5
   1815  f4a5		       a9 00		      LDA	#$00
   1816  f4a7		       85 09		      STA	COLUBK
   1817  f4a9				   .L031		;  COLUPF = $06
   1818  f4a9
   1819  f4a9		       a9 06		      LDA	#$06
   1820  f4ab		       85 08		      STA	COLUPF
   1821  f4ad				   .L032		;  player0y  =  0
   1822  f4ad
   1823  f4ad		       a9 00		      LDA	#0
   1824  f4af		       85 85		      STA	player0y
   1825  f4b1				   .L033		;  COLUP1  =  $0E
   1826  f4b1
   1827  f4b1		       a9 0e		      LDA	#$0E
   1828  f4b3		       85 07		      STA	COLUP1
   1829  f4b5				   .L034		;  player1y  =  85
   1830  f4b5
   1831  f4b5		       a9 55		      LDA	#85
   1832  f4b7		       85 86		      STA	player1y
   1833  f4b9				   .L035		;  player1x  =  75
   1834  f4b9
   1835  f4b9		       a9 4b		      LDA	#75
   1836  f4bb		       85 81		      STA	player1x
   1837  f4bd				   .
   1838  f4bd							; 
   1839  f4bd
   1840  f4bd				   .L036		;  if joy0fire then e	=  1
   1841  f4bd
   1842  f4bd		       24 0c		      bit	INPT4
   1843  f4bf		       30 04		      BMI	.skipL036
   1844  f4c1				   .condpart3
   1845  f4c1		       a9 01		      LDA	#1
   1846  f4c3		       85 d8		      STA	e
   1847  f4c5				   .skipL036
   1848  f4c5				   .L037		;  if e  =  1 then pfscroll down
   1849  f4c5
   1850  f4c5		       a5 d8		      LDA	e
   1851  f4c7		       c9 01		      CMP	#1
   1852  f4c9		       d0 05		      BNE	.skipL037
   1853  f4cb				   .condpart4
   1854  f4cb		       a9 04		      LDA	#4
   1855  f4cd		       20 fe f2 	      jsr	pfscroll
   1856  f4d0				   .skipL037
   1857  f4d0				   .
   1858  f4d0							; 
   1859  f4d0
   1860  f4d0				   .L038		;  if !pfread ( 0 , 11 )  then goto __reset_game
   1861  f4d0
   1862  f4d0		       a9 00		      LDA	#0
   1863  f4d2		       a0 0b		      LDY	#11
   1864  f4d4		       20 76 f2 	      jsr	pfread
   1865  f4d7		       f0 03		      BEQ	.skipL038
   1866  f4d9				   .condpart5
   1867  f4d9		       4c df f4 	      jmp	.__reset_game
   1868  f4dc
   1869  f4dc				   .skipL038
   1870  f4dc				   .L039		;  goto __title_screen
   1871  f4dc
   1872  f4dc		       4c 6f f4 	      jmp	.__title_screen
   1873  f4df
   1874  f4df				   .
   1875  f4df							; 
   1876  f4df
   1877  f4df				   .__reset_game
   1878  f4df							; __reset_game
   1879  f4df
   1880  f4df				   .
   1881  f4df							; 
   1882  f4df
   1883  f4df				   .
   1884  f4df							; 
   1885  f4df
   1886  f4df				   .L040		;  a  =  0  :	d  =  0  :  e  =  0  :	f  =  0  :  g  =  0  :	h  =  0
   1887  f4df
   1888  f4df		       a9 00		      LDA	#0
   1889  f4e1		       85 d4		      STA	a
   1890  f4e3		       85 d7		      STA	d
   1891  f4e5		       85 d8		      STA	e
   1892  f4e7		       85 d9		      STA	f
   1893  f4e9		       85 da		      STA	g
   1894  f4eb		       85 db		      STA	h
   1895  f4ed				   .L041		;  j  =  0  :	k  =  0  :  l  =  0  :	m  =  0  :  n  =  0  :	o  =  0  :  p  =  0  :	q  =  0  :  r  =  0
   1896  f4ed
   1897  f4ed		       a9 00		      LDA	#0
   1898  f4ef		       85 dd		      STA	j
   1899  f4f1		       85 de		      STA	k
   1900  f4f3		       85 df		      STA	l
   1901  f4f5		       85 e0		      STA	m
   1902  f4f7		       85 e1		      STA	n
   1903  f4f9		       85 e2		      STA	o
   1904  f4fb		       85 e3		      STA	p
   1905  f4fd		       85 e4		      STA	q
   1906  f4ff		       85 e5		      STA	r
   1907  f501				   .L042		;  s  =  0  :	t  =  0  :  u  =  0  :	v  =  0  :  w  =  0  :	x  =  0  :  y  =  0
   1908  f501
   1909  f501		       a9 00		      LDA	#0
   1910  f503		       85 e6		      STA	s
   1911  f505		       85 e7		      STA	t
   1912  f507		       85 e8		      STA	u
   1913  f509		       85 e9		      STA	v
   1914  f50b		       85 ea		      STA	w
   1915  f50d		       85 eb		      STA	x
   1916  f50f		       85 ec		      STA	y
   1917  f511				   .
   1918  f511							; 
   1919  f511
   1920  f511				   .L043		;  rem DESLIGA O SOM
   1921  f511
   1922  f511				   .L044		;  AUDV0  =  0  :  AUDV1  =  0
   1923  f511
   1924  f511		       a9 00		      LDA	#0
   1925  f513		       85 19		      STA	AUDV0
   1926  f515		       85 1a		      STA	AUDV1
   1927  f517				   .
   1928  f517							; 
   1929  f517
   1930  f517				   .L045		;  score  =  0
   1931  f517
   1932  f517		       a9 00		      LDA	#$00
   1933  f519		       85 95		      STA	score+2
   1934  f51b		       a9 00		      LDA	#$00
   1935  f51d		       85 94		      STA	score+1
   1936  f51f		       a9 00		      LDA	#$00
   1937  f521		       85 93		      STA	score
   1938  f523				   .L046		;  scorecolor	=  $00
   1939  f523
   1940  f523		       a9 00		      LDA	#$00
   1941  f525		       85 a3		      STA	scorecolor
   1942  f527				   .L047		;  missile1y  =  0
   1943  f527
   1944  f527		       a9 00		      LDA	#0
   1945  f529		       85 88		      STA	missile1y
   1946  f52b				   .L048		;  bally  =  0
   1947  f52b
   1948  f52b		       a9 00		      LDA	#0
   1949  f52d		       85 89		      STA	bally
   1950  f52f				   .L049		;  COLUP1  =  00
   1951  f52f
   1952  f52f		       a9 00		      LDA	#00
   1953  f531		       85 07		      STA	COLUP1
   1954  f533				   .
   1955  f533							; 
   1956  f533
   1957  f533				   .L050		;  player1x  =  75  :	player1y  =  85
   1958  f533
   1959  f533		       a9 4b		      LDA	#75
   1960  f535		       85 81		      STA	player1x
   1961  f537		       a9 55		      LDA	#85
   1962  f539		       85 86		      STA	player1y
   1963  f53b				   .L051		;  player0x  =  20  :	player0y  =  1
   1964  f53b
   1965  f53b		       a9 14		      LDA	#20
   1966  f53d		       85 80		      STA	player0x
   1967  f53f		       a9 01		      LDA	#1
   1968  f541		       85 85		      STA	player0y
   1969  f543				   .
   1970  f543							; 
   1971  f543
   1972  f543				   .L052		;  pfscore1 = %00010101  :  pfscorecolor  =  $40
   1973  f543
   1974  f543		       a9 15		      LDA	#%00010101
   1975  f545		       85 f2		      STA	pfscore1
   1976  f547		       a9 40		      LDA	#$40
   1977  f549		       85 f4		      STA	pfscorecolor
   1978  f54b				   .L053		;  pfscore2 = %00010101
   1979  f54b
   1980  f54b		       a9 15		      LDA	#%00010101
   1981  f54d		       85 f3		      STA	pfscore2
   1982  f54f				   .L054		;  missile1height = 5
   1983  f54f
   1984  f54f		       a9 05		      LDA	#5
   1985  f551		       85 87		      STA	missile1height
   1986  f553				   .
   1987  f553							; 
   1988  f553
   1989  f553				   .
   1990  f553							; 
   1991  f553
   1992  f553				   .
   1993  f553							; 
   1994  f553
   1995  f553				   .L055		;  _SC_Back  =  $70
   1996  f553
   1997  f553		       a9 70		      LDA	#$70
   1998  f555		       85 e2		      STA	_SC_Back
   1999  f557				   .
   2000  f557							; 
   2001  f557
   2002  f557				   .
   2003  f557							; 
   2004  f557
   2005  f557				   .__Main_Loop
   2006  f557							; __Main_Loop
   2007  f557
   2008  f557				   .
   2009  f557							; 
   2010  f557
   2011  f557				   .
   2012  f557							; 
   2013  f557
   2014  f557				   .L056		;  scorecolor	=  14
   2015  f557
   2016  f557		       a9 0e		      LDA	#14
   2017  f559		       85 a3		      STA	scorecolor
   2018  f55b				   .
   2019  f55b							; 
   2020  f55b
   2021  f55b				   .
   2022  f55b							; 
   2023  f55b
   2024  f55b				   .L057		;  if player1x  <  20	||  player1x  >  133 then _bit_supressores{6}  =  1 else _bit_supressores{6}  =  0
   2025  f55b
   2026  f55b		       a5 81		      LDA	player1x
   2027  f55d		       c9 14		      CMP	#20
   2028  f55f		       b0 03		      BCS	.skipL057
   2029  f561				   .condpart6
   2030  f561		       4c 6a f5 	      jmp	.condpart7
   2031  f564				   .skipL057
   2032  f564		       a9 85		      LDA	#133
   2033  f566		       c5 81		      CMP	player1x
   2034  f568		       b0 09		      BCS	.skip0OR
   2035  f56a				   .condpart7
   2036  f56a		       a5 dd		      LDA	_bit_supressores
   2037  f56c		       09 40		      ORA	#64
   2038  f56e		       85 dd		      STA	_bit_supressores
   2039  f570		       4c 79 f5 	      jmp	.skipelse0
   2040  f573				   .skip0OR
   2041  f573		       a5 dd		      LDA	_bit_supressores
   2042  f575		       29 bf		      AND	#191
   2043  f577		       85 dd		      STA	_bit_supressores
   2044  f579				   .skipelse0
   2045  f579				   .
   2046  f579							; 
   2047  f579
   2048  f579				   .
   2049  f579							; 
   2050  f579
   2051  f579				   .L058		;  if _bit_supressores{6} then goto __skip_aceletarion_point
   2052  f579
   2053  f579		       24 dd		      BIT	_bit_supressores
   2054  f57b		       50 03		      BVC	.skipL058
   2055  f57d				   .condpart8
   2056  f57d		       4c a1 f5 	      jmp	.__skip_aceletarion_point
   2057  f580
   2058  f580				   .skipL058
   2059  f580				   .L059		;  if joy0up then pfscroll down  :  score  =  score  +  1
   2060  f580
   2061  f580		       a9 10		      lda	#$10
   2062  f582		       2c 80 02 	      bit	SWCHA
   2063  f585		       d0 1a		      BNE	.skipL059
   2064  f587				   .condpart9
   2065  f587		       a9 04		      LDA	#4
   2066  f589		       20 fe f2 	      jsr	pfscroll
   2067  f58c		       f8		      SED
   2068  f58d		       18		      CLC
   2069  f58e		       a5 95		      LDA	score+2
   2070  f590		       69 01		      ADC	#$01
   2071  f592		       85 95		      STA	score+2
   2072  f594		       a5 94		      LDA	score+1
   2073  f596		       69 00		      ADC	#$00
   2074  f598		       85 94		      STA	score+1
   2075  f59a		       a5 93		      LDA	score
   2076  f59c		       69 00		      ADC	#$00
   2077  f59e		       85 93		      STA	score
   2078  f5a0		       d8		      CLD
   2079  f5a1				   .skipL059
   2080  f5a1				   .__skip_aceletarion_point
   2081  f5a1							; __skip_aceletarion_point
   2082  f5a1
   2083  f5a1				   .
   2084  f5a1							; 
   2085  f5a1
   2086  f5a1				   .
   2087  f5a1							; 
   2088  f5a1
   2089  f5a1				   .L060		;  if joy0left  &&  player1x  >  1 then player1x  =  player1x	-  1  :  goto __skip_joy
   2090  f5a1
   2091  f5a1		       2c 80 02 	      bit	SWCHA
   2092  f5a4		       70 0b		      BVS	.skipL060
   2093  f5a6				   .condpart10
   2094  f5a6		       a9 01		      LDA	#1
   2095  f5a8		       c5 81		      CMP	player1x
   2096  f5aa		       b0 05		      BCS	.skip10then
   2097  f5ac				   .condpart11
   2098  f5ac		       c6 81		      DEC	player1x
   2099  f5ae		       4c c1 f5 	      jmp	.__skip_joy
   2100  f5b1
   2101  f5b1				   .skip10then
   2102  f5b1				   .skipL060
   2103  f5b1				   .L061		;  if joy0right  &&  player1x	<  150 then player1x  =  player1x  +  1  :  goto __skip_joy
   2104  f5b1
   2105  f5b1		       2c 80 02 	      bit	SWCHA
   2106  f5b4		       30 0b		      BMI	.skipL061
   2107  f5b6				   .condpart12
   2108  f5b6		       a5 81		      LDA	player1x
   2109  f5b8		       c9 96		      CMP	#150
   2110  f5ba		       b0 05		      BCS	.skip12then
   2111  f5bc				   .condpart13
   2112  f5bc		       e6 81		      INC	player1x
   2113  f5be		       4c c1 f5 	      jmp	.__skip_joy
   2114  f5c1
   2115  f5c1				   .skip12then
   2116  f5c1				   .skipL061
   2117  f5c1				   .
   2118  f5c1							; 
   2119  f5c1
   2120  f5c1				   .__skip_joy
   2121  f5c1							; __skip_joy
   2122  f5c1
   2123  f5c1				   .
   2124  f5c1							; 
   2125  f5c1
   2126  f5c1				   .
   2127  f5c1							; 
   2128  f5c1
   2129  f5c1				   .
   2130  f5c1							; 
   2131  f5c1
   2132  f5c1				   .L062		;  if !_bit_supressores{4} then gosub __nave
   2133  f5c1
   2134  f5c1		       a5 dd		      LDA	_bit_supressores
   2135  f5c3		       29 10		      AND	#16
   2136  f5c5		       d0 03		      BNE	.skipL062
   2137  f5c7				   .condpart14
   2138  f5c7		       20 15 fa 	      jsr	.__nave
   2139  f5ca
   2140  f5ca				   .skipL062
   2141  f5ca				   .L063		;  if _bit_supressores{4} then goto __skip_escudo
   2142  f5ca
   2143  f5ca		       a5 dd		      LDA	_bit_supressores
   2144  f5cc		       29 10		      AND	#16
   2145  f5ce		       f0 03		      BEQ	.skipL063
   2146  f5d0				   .condpart15
   2147  f5d0		       4c f6 f5 	      jmp	.__skip_escudo
   2148  f5d3
   2149  f5d3				   .skipL063
   2150  f5d3				   .L064		;  if pfscore1  =  0 then _bit_supressores{4}	=  0  :  goto __skip_escudo
   2151  f5d3
   2152  f5d3		       a5 f2		      LDA	pfscore1
   2153  f5d5		       c9 00		      CMP	#0
   2154  f5d7		       d0 09		      BNE	.skipL064
   2155  f5d9				   .condpart16
   2156  f5d9		       a5 dd		      LDA	_bit_supressores
   2157  f5db		       29 ef		      AND	#239
   2158  f5dd		       85 dd		      STA	_bit_supressores
   2159  f5df		       4c f6 f5 	      jmp	.__skip_escudo
   2160  f5e2
   2161  f5e2				   .skipL064
   2162  f5e2				   .L065		;  if joy0down then _bit_supressores{4}  =  1	:  e  =  40  :	goto __escudo
   2163  f5e2
   2164  f5e2		       a9 20		      lda	#$20
   2165  f5e4		       2c 80 02 	      bit	SWCHA
   2166  f5e7		       d0 0d		      BNE	.skipL065
   2167  f5e9				   .condpart17
   2168  f5e9		       a5 dd		      LDA	_bit_supressores
   2169  f5eb		       09 10		      ORA	#16
   2170  f5ed		       85 dd		      STA	_bit_supressores
   2171  f5ef		       a9 28		      LDA	#40
   2172  f5f1		       85 d8		      STA	e
   2173  f5f3		       4c 06 fa 	      jmp	.__escudo
   2174  f5f6
   2175  f5f6				   .skipL065
   2176  f5f6				   .__skip_escudo
   2177  f5f6							; __skip_escudo
   2178  f5f6
   2179  f5f6				   .
   2180  f5f6							; 
   2181  f5f6
   2182  f5f6				   .
   2183  f5f6							; 
   2184  f5f6
   2185  f5f6				   .L066		;  if missile1y  >  240 then _bit_supressores{1}  =  0  :  goto __skip_missile1
   2186  f5f6
   2187  f5f6		       a9 f0		      LDA	#240
   2188  f5f8		       c5 88		      CMP	missile1y
   2189  f5fa		       b0 09		      BCS	.skipL066
   2190  f5fc				   .condpart18
   2191  f5fc		       a5 dd		      LDA	_bit_supressores
   2192  f5fe		       29 fd		      AND	#253
   2193  f600		       85 dd		      STA	_bit_supressores
   2194  f602		       4c 0c f6 	      jmp	.__skip_missile1
   2195  f605
   2196  f605				   .skipL066
   2197  f605				   .L067		;  missile1y  =  missile1y  -	2
   2198  f605
   2199  f605		       a5 88		      LDA	missile1y
   2200  f607		       38		      SEC
   2201  f608		       e9 02		      SBC	#2
   2202  f60a		       85 88		      STA	missile1y
   2203  f60c				   .__skip_missile1
   2204  f60c							; __skip_missile1
   2205  f60c
   2206  f60c				   .L068		;  if _bit_supressores{1} then __skip_fire
   2207  f60c
   2208  f60c		       a5 dd		      LDA	_bit_supressores
   2209  f60e		       29 02		      AND	#2
   2210  f610		       d0 26		      bne	.__skip_fire
   2211  f612				   .L069		;  if joy0fire then AUDV0  =  0  :  _duracao_som0  =  10  :  _bit_supressores{1}  =  1  :  _bit_supressores{3}  =  1  :  missile1y  =	player1y  -  3 : missile1x  =  player1x  +  5
   2212  f612
   2213  f612		       24 0c		      bit	INPT4
   2214  f614		       30 22		      BMI	.skipL069
   2215  f616				   .condpart19
   2216  f616		       a9 00		      LDA	#0
   2217  f618		       85 19		      STA	AUDV0
   2218  f61a		       a9 0a		      LDA	#10
   2219  f61c		       85 d9		      STA	_duracao_som0
   2220  f61e		       a5 dd		      LDA	_bit_supressores
   2221  f620		       09 02		      ORA	#2
   2222  f622		       85 dd		      STA	_bit_supressores
   2223  f624		       a5 dd		      LDA	_bit_supressores
   2224  f626		       09 08		      ORA	#8
   2225  f628		       85 dd		      STA	_bit_supressores
   2226  f62a		       a5 86		      LDA	player1y
   2227  f62c		       38		      SEC
   2228  f62d		       e9 03		      SBC	#3
   2229  f62f		       85 88		      STA	missile1y
   2230  f631		       a5 81		      LDA	player1x
   2231  f633		       18		      CLC
   2232  f634		       69 05		      ADC	#5
   2233  f636		       85 83		      STA	missile1x
   2234  f638				   .skipL069
   2235  f638				   .__skip_fire
   2236  f638							; __skip_fire
   2237  f638
   2238  f638				   .
   2239  f638							; 
   2240  f638
   2241  f638				   .
   2242  f638							; 
   2243  f638
   2244  f638				   .
   2245  f638							; 
   2246  f638
   2247  f638				   .__fases
   2248  f638							; __fases
   2249  f638
   2250  f638				   .L070		;  if _cont_telas  >=	10  &&	!_bit_supressores{5} then _cont_telas  =  10  :  _bit_supressores{5}  =  1
   2251  f638
   2252  f638		       a5 e6		      LDA	_cont_telas
   2253  f63a		       c9 0a		      CMP	#10
   2254  f63c		       90 10		      BCC	.skipL070
   2255  f63e				   .condpart20
   2256  f63e		       a5 dd		      LDA	_bit_supressores
   2257  f640		       29 20		      AND	#32
   2258  f642		       d0 0a		      BNE	.skip20then
   2259  f644				   .condpart21
   2260  f644		       a9 0a		      LDA	#10
   2261  f646		       85 e6		      STA	_cont_telas
   2262  f648		       a5 dd		      LDA	_bit_supressores
   2263  f64a		       09 20		      ORA	#32
   2264  f64c		       85 dd		      STA	_bit_supressores
   2265  f64e				   .skip20then
   2266  f64e				   .skipL070
   2267  f64e				   .L071		;  if _bit_supressores{5} then goto __transicao
   2268  f64e
   2269  f64e		       a5 dd		      LDA	_bit_supressores
   2270  f650		       29 20		      AND	#32
   2271  f652		       f0 03		      BEQ	.skipL071
   2272  f654				   .condpart22
   2273  f654		       4c 66 fa 	      jmp	.__transicao
   2274  f657
   2275  f657				   .skipL071
   2276  f657				   .
   2277  f657							; 
   2278  f657
   2279  f657				   .__skip_transicao
   2280  f657							; __skip_transicao
   2281  f657
   2282  f657				   .L072		;  if _fases  >  100 then _fases  =  0
   2283  f657
   2284  f657		       a9 64		      LDA	#100
   2285  f659		       c5 e4		      CMP	_fases
   2286  f65b		       b0 04		      BCS	.skipL072
   2287  f65d				   .condpart23
   2288  f65d		       a9 00		      LDA	#0
   2289  f65f		       85 e4		      STA	_fases
   2290  f661				   .skipL072
   2291  f661				   .
   2292  f661							; 
   2293  f661
   2294  f661				   .L073		;  if _fases  =  0 then COLUPF  =  $00  :  COLUBK  =  $8A  :  gosub __regular	:  gosub __inimigo_bomba
   2295  f661
   2296  f661		       a5 e4		      LDA	_fases
   2297  f663		       c9 00		      CMP	#0
   2298  f665		       d0 0e		      BNE	.skipL073
   2299  f667				   .condpart24
   2300  f667		       a9 00		      LDA	#$00
   2301  f669		       85 08		      STA	COLUPF
   2302  f66b		       a9 8a		      LDA	#$8A
   2303  f66d		       85 09		      STA	COLUBK
   2304  f66f		       20 85 f8 	      jsr	.__regular
   2305  f672		       20 3c f9 	      jsr	.__inimigo_bomba
   2306  f675
   2307  f675				   .skipL073
   2308  f675				   .
   2309  f675							; 
   2310  f675
   2311  f675				   .L074		;  if _fases  >=  1 then COLUPF  =  $04  :  COLUBK  =	$00  :	COLUP1	=  14  :  gosub __regular  :  goto __item_shield
   2312  f675
   2313  f675		       a5 e4		      LDA	_fases
   2314  f677		       c9 01		      CMP	#1
   2315  f679		       90 12		      BCC	.skipL074
   2316  f67b				   .condpart25
   2317  f67b		       a9 04		      LDA	#$04
   2318  f67d		       85 08		      STA	COLUPF
   2319  f67f		       a9 00		      LDA	#$00
   2320  f681		       85 09		      STA	COLUBK
   2321  f683		       a9 0e		      LDA	#14
   2322  f685		       85 07		      STA	COLUP1
   2323  f687		       20 85 f8 	      jsr	.__regular
   2324  f68a		       4c 44 fa 	      jmp	.__item_shield
   2325  f68d
   2326  f68d				   .skipL074
   2327  f68d				   .L075		;  if _fases  >=  1 then COLUPF  =  $04  :  COLUBK  =	$00  :	COLUP1	=  14  :  gosub __regular  :  gosub __inimigo_tie
   2328  f68d
   2329  f68d		       a5 e4		      LDA	_fases
   2330  f68f		       c9 01		      CMP	#1
   2331  f691		       90 12		      BCC	.skipL075
   2332  f693				   .condpart26
   2333  f693		       a9 04		      LDA	#$04
   2334  f695		       85 08		      STA	COLUPF
   2335  f697		       a9 00		      LDA	#$00
   2336  f699		       85 09		      STA	COLUBK
   2337  f69b		       a9 0e		      LDA	#14
   2338  f69d		       85 07		      STA	COLUP1
   2339  f69f		       20 85 f8 	      jsr	.__regular
   2340  f6a2		       20 96 f9 	      jsr	.__inimigo_tie
   2341  f6a5
   2342  f6a5				   .skipL075
   2343  f6a5				   .__skip_item_shield
   2344  f6a5							; __skip_item_shield
   2345  f6a5
   2346  f6a5				   .
   2347  f6a5							; 
   2348  f6a5
   2349  f6a5				   .L076		;  _animacao  =  _animacao  +	1
   2350  f6a5
   2351  f6a5		       e6 e1		      INC	_animacao
   2352  f6a7				   .L077		;  if _animacao  =  21 then _animacao	=  0
   2353  f6a7
   2354  f6a7		       a5 e1		      LDA	_animacao
   2355  f6a9		       c9 15		      CMP	#21
   2356  f6ab		       d0 04		      BNE	.skipL077
   2357  f6ad				   .condpart27
   2358  f6ad		       a9 00		      LDA	#0
   2359  f6af		       85 e1		      STA	_animacao
   2360  f6b1				   .skipL077
   2361  f6b1				   .
   2362  f6b1							; 
   2363  f6b1
   2364  f6b1				   .L078		;  _cont_escudo  =  _cont_escudo  -  1
   2365  f6b1
   2366  f6b1		       c6 d8		      DEC	_cont_escudo
   2367  f6b3				   .L079		;  if _cont_escudo  =	0  &&  _bit_supressores{4} then pfscore1  =  pfscore1 / 4  :  _bit_supressores{4}  =  0
   2368  f6b3
   2369  f6b3		       a5 d8		      LDA	_cont_escudo
   2370  f6b5		       c9 00		      CMP	#0
   2371  f6b7		       d0 12		      BNE	.skipL079
   2372  f6b9				   .condpart28
   2373  f6b9		       a5 dd		      LDA	_bit_supressores
   2374  f6bb		       29 10		      AND	#16
   2375  f6bd		       f0 0c		      BEQ	.skip28then
   2376  f6bf				   .condpart29
   2377  f6bf		       a5 f2		      LDA	pfscore1
   2378  f6c1		       4a		      lsr
   2379  f6c2		       4a		      lsr
   2380  f6c3		       85 f2		      STA	pfscore1
   2381  f6c5		       a5 dd		      LDA	_bit_supressores
   2382  f6c7		       29 ef		      AND	#239
   2383  f6c9		       85 dd		      STA	_bit_supressores
   2384  f6cb				   .skip28then
   2385  f6cb				   .skipL079
   2386  f6cb				   .
   2387  f6cb							; 
   2388  f6cb
   2389  f6cb				   .L080		;  if _fases  <  4 then c  =  d  +  8	:  goto __skip_dificuldade
   2390  f6cb
   2391  f6cb		       a5 e4		      LDA	_fases
   2392  f6cd		       c9 04		      CMP	#4
   2393  f6cf		       b0 0a		      BCS	.skipL080
   2394  f6d1				   .condpart30
   2395  f6d1		       a5 d7		      LDA	d
   2396  f6d3		       18		      CLC
   2397  f6d4		       69 08		      ADC	#8
   2398  f6d6		       85 d6		      STA	c
   2399  f6d8		       4c 34 f7 	      jmp	.__skip_dificuldade
   2400  f6db
   2401  f6db				   .skipL080
   2402  f6db				   .L081		;  if _fases  <  8 then c  =  d  +  6	:  goto __skip_dificuldade
   2403  f6db
   2404  f6db		       a5 e4		      LDA	_fases
   2405  f6dd		       c9 08		      CMP	#8
   2406  f6df		       b0 0a		      BCS	.skipL081
   2407  f6e1				   .condpart31
   2408  f6e1		       a5 d7		      LDA	d
   2409  f6e3		       18		      CLC
   2410  f6e4		       69 06		      ADC	#6
   2411  f6e6		       85 d6		      STA	c
   2412  f6e8		       4c 34 f7 	      jmp	.__skip_dificuldade
   2413  f6eb
   2414  f6eb				   .skipL081
   2415  f6eb				   .
   2416  f6eb							; 
   2417  f6eb
   2418  f6eb				   .L082		;  if _fases  <  12 then goto __randomicos
   2419  f6eb
   2420  f6eb		       a5 e4		      LDA	_fases
   2421  f6ed		       c9 0c		      CMP	#12
   2422  f6ef		       b0 03		      BCS	.skipL082
   2423  f6f1				   .condpart32
   2424  f6f1		       4c f4 f6 	      jmp	.__randomicos
   2425  f6f4
   2426  f6f4				   .skipL082
   2427  f6f4				   .
   2428  f6f4							; 
   2429  f6f4
   2430  f6f4				   .__randomicos
   2431  f6f4							; __randomicos
   2432  f6f4
   2433  f6f4				   .
   2434  f6f4							; 
   2435  f6f4
   2436  f6f4				   .L083		;  if _dificuldade  =	0 then c  =  d	+  8  :  goto __skip_dificuldade
   2437  f6f4
   2438  f6f4		       a5 df		      LDA	_dificuldade
   2439  f6f6		       c9 00		      CMP	#0
   2440  f6f8		       d0 0a		      BNE	.skipL083
   2441  f6fa				   .condpart33
   2442  f6fa		       a5 d7		      LDA	d
   2443  f6fc		       18		      CLC
   2444  f6fd		       69 08		      ADC	#8
   2445  f6ff		       85 d6		      STA	c
   2446  f701		       4c 34 f7 	      jmp	.__skip_dificuldade
   2447  f704
   2448  f704				   .skipL083
   2449  f704				   .L084		;  if _dificuldade  =	1 then c  =  d	+  6  :  goto __skip_dificuldade
   2450  f704
   2451  f704		       a5 df		      LDA	_dificuldade
   2452  f706		       c9 01		      CMP	#1
   2453  f708		       d0 0a		      BNE	.skipL084
   2454  f70a				   .condpart34
   2455  f70a		       a5 d7		      LDA	d
   2456  f70c		       18		      CLC
   2457  f70d		       69 06		      ADC	#6
   2458  f70f		       85 d6		      STA	c
   2459  f711		       4c 34 f7 	      jmp	.__skip_dificuldade
   2460  f714
   2461  f714				   .skipL084
   2462  f714				   .L085		;  if _dificuldade  =	2 then c  =  d	+  4  :  goto __skip_dificuldade
   2463  f714
   2464  f714		       a5 df		      LDA	_dificuldade
   2465  f716		       c9 02		      CMP	#2
   2466  f718		       d0 0a		      BNE	.skipL085
   2467  f71a				   .condpart35
   2468  f71a		       a5 d7		      LDA	d
   2469  f71c		       18		      CLC
   2470  f71d		       69 04		      ADC	#4
   2471  f71f		       85 d6		      STA	c
   2472  f721		       4c 34 f7 	      jmp	.__skip_dificuldade
   2473  f724
   2474  f724				   .skipL085
   2475  f724				   .L086		;  if _dificuldade  =	3 then c  =  d	+  2  :  goto __skip_dificuldade
   2476  f724
   2477  f724		       a5 df		      LDA	_dificuldade
   2478  f726		       c9 03		      CMP	#3
   2479  f728		       d0 0a		      BNE	.skipL086
   2480  f72a				   .condpart36
   2481  f72a		       a5 d7		      LDA	d
   2482  f72c		       18		      CLC
   2483  f72d		       69 02		      ADC	#2
   2484  f72f		       85 d6		      STA	c
   2485  f731		       4c 34 f7 	      jmp	.__skip_dificuldade
   2486  f734
   2487  f734				   .skipL086
   2488  f734				   .
   2489  f734							; 
   2490  f734
   2491  f734				   .__skip_dificuldade
   2492  f734							; __skip_dificuldade
   2493  f734
   2494  f734				   .
   2495  f734							; 
   2496  f734
   2497  f734				   .
   2498  f734							; 
   2499  f734
   2500  f734				   .
   2501  f734							; 
   2502  f734
   2503  f734				   .L087		;  pfhline d 1 c off
   2504  f734
   2505  f734		       a2 01		      LDX	#1
   2506  f736		       a5 d6		      LDA	c
   2507  f738		       85 9e		      STA	temp3
   2508  f73a		       a0 01		      LDY	#1
   2509  f73c		       a5 d7		      LDA	d
   2510  f73e		       20 89 f2 	      jsr	pfhline
   2511  f741				   .L088		;  goto __pfscroll
   2512  f741
   2513  f741		       4c 7d f8 	      jmp	.__pfscroll
   2514  f744
   2515  f744				   .
   2516  f744							; 
   2517  f744
   2518  f744				   .__skip_scroll
   2519  f744							; __skip_scroll
   2520  f744
   2521  f744				   .L089		;  drawscreen
   2522  f744
   2523  f744		       20 cc f3 	      jsr	drawscreen
   2524  f747				   .
   2525  f747							; 
   2526  f747
   2527  f747				   .
   2528  f747							; 
   2529  f747
   2530  f747				   .L090		;  if _bit_supressores{4} then goto __skip_collision  :  rem se escudo on pula as colisoes
   2531  f747
   2532  f747		       a5 dd		      LDA	_bit_supressores
   2533  f749		       29 10		      AND	#16
   2534  f74b		       f0 03		      BEQ	.skipL090
   2535  f74d				   .condpart37
   2536  f74d		       4c 86 f7 	      jmp	.__skip_collision
   2537  f750				   .skipL090
   2538  f750				   .
   2539  f750							; 
   2540  f750
   2541  f750				   .L091		;  if collision(ball,player1) then _duracao_som0  =  80  :  pfscore2  =  pfscore2 / 4	:  goto __perde_vida
   2542  f750
   2543  f750		       24 03		      bit	CXP1FB
   2544  f752		       50 0d		      BVC	.skipL091
   2545  f754				   .condpart38
   2546  f754		       a9 50		      LDA	#80
   2547  f756		       85 d9		      STA	_duracao_som0
   2548  f758		       a5 f3		      LDA	pfscore2
   2549  f75a		       4a		      lsr
   2550  f75b		       4a		      lsr
   2551  f75c		       85 f3		      STA	pfscore2
   2552  f75e		       4c c1 f8 	      jmp	.__perde_vida
   2553  f761
   2554  f761				   .skipL091
   2555  f761				   .L092		;  if collision(ball,missile1) then bally  =  100  :  missile1y  =  0
   2556  f761
   2557  f761		       24 05		      bit	CXM1FB
   2558  f763		       50 08		      BVC	.skipL092
   2559  f765				   .condpart39
   2560  f765		       a9 64		      LDA	#100
   2561  f767		       85 89		      STA	bally
   2562  f769		       a9 00		      LDA	#0
   2563  f76b		       85 88		      STA	missile1y
   2564  f76d				   .skipL092
   2565  f76d				   .L093		;  if collision(player1,playfield) then _duracao_som0	=  80  :  pfscore2  =  pfscore2 / 4  :	goto __perde_vida
   2566  f76d
   2567  f76d		       24 03		      bit	CXP1FB
   2568  f76f		       10 0d		      BPL	.skipL093
   2569  f771				   .condpart40
   2570  f771		       a9 50		      LDA	#80
   2571  f773		       85 d9		      STA	_duracao_som0
   2572  f775		       a5 f3		      LDA	pfscore2
   2573  f777		       4a		      lsr
   2574  f778		       4a		      lsr
   2575  f779		       85 f3		      STA	pfscore2
   2576  f77b		       4c c1 f8 	      jmp	.__perde_vida
   2577  f77e
   2578  f77e				   .skipL093
   2579  f77e				   .L094		;  if collision(missile1,playfield) then missile1y  =	1
   2580  f77e
   2581  f77e		       24 05		      bit	CXM1FB
   2582  f780		       10 04		      BPL	.skipL094
   2583  f782				   .condpart41
   2584  f782		       a9 01		      LDA	#1
   2585  f784		       85 88		      STA	missile1y
   2586  f786				   .skipL094
   2587  f786				   .
   2588  f786							; 
   2589  f786
   2590  f786				   .__skip_perde_vida
   2591  f786							; __skip_perde_vida
   2592  f786
   2593  f786				   .__skip_collision
   2594  f786							; __skip_collision
   2595  f786
   2596  f786				   .
   2597  f786							; 
   2598  f786
   2599  f786				   .
   2600  f786							; 
   2601  f786
   2602  f786				   .L095		;  if _fases  =  0 then goto __fase0
   2603  f786
   2604  f786		       a5 e4		      LDA	_fases
   2605  f788		       c9 00		      CMP	#0
   2606  f78a		       d0 03		      BNE	.skipL095
   2607  f78c				   .condpart42
   2608  f78c		       4c 98 f7 	      jmp	.__fase0
   2609  f78f
   2610  f78f				   .skipL095
   2611  f78f				   .L096		;  if _fases  >=  1 then goto __fase1
   2612  f78f
   2613  f78f		       a5 e4		      LDA	_fases
   2614  f791		       c9 01		      CMP	#1
   2615  f793		       90 03		      BCC	.skipL096
   2616  f795				   .condpart43
   2617  f795		       4c d3 f7 	      jmp	.__fase1
   2618  f798
   2619  f798				   .skipL096
   2620  f798				   .
   2621  f798							; 
   2622  f798
   2623  f798				   .
   2624  f798							; 
   2625  f798
   2626  f798				   .__fase0
   2627  f798							; __fase0
   2628  f798
   2629  f798				   .L097		;  if collision(missile1,player0) then missile1y  =  0  :  bally = 0  :  _bit_supressores{3}  =  0  :	_duracao_som0  =  10  :  score	=  score  +  100  :  player0y  =  0
   2630  f798
   2631  f798		       24 01		      bit	CXM1P
   2632  f79a		       10 23		      BPL	.skipL097
   2633  f79c				   .condpart44
   2634  f79c		       a9 00		      LDA	#0
   2635  f79e		       85 88		      STA	missile1y
   2636  f7a0		       85 89		      STA	bally
   2637  f7a2		       a5 dd		      LDA	_bit_supressores
   2638  f7a4		       29 f7		      AND	#247
   2639  f7a6		       85 dd		      STA	_bit_supressores
   2640  f7a8		       a9 0a		      LDA	#10
   2641  f7aa		       85 d9		      STA	_duracao_som0
   2642  f7ac		       f8		      SED
   2643  f7ad		       18		      CLC
   2644  f7ae		       a5 94		      LDA	score+1
   2645  f7b0		       69 01		      ADC	#$01
   2646  f7b2		       85 94		      STA	score+1
   2647  f7b4		       a5 93		      LDA	score
   2648  f7b6		       69 00		      ADC	#$00
   2649  f7b8		       85 93		      STA	score
   2650  f7ba		       d8		      CLD
   2651  f7bb		       a9 00		      LDA	#0
   2652  f7bd		       85 85		      STA	player0y
   2653  f7bf				   .skipL097
   2654  f7bf				   .L098		;  if collision(player0,player1) then _duracao_som0  =  80  :	pfscore2  =  pfscore2 / 4  :  goto __perde_vida
   2655  f7bf
   2656  f7bf		       24 07		      bit	CXPPMM
   2657  f7c1		       10 0d		      BPL	.skipL098
   2658  f7c3				   .condpart45
   2659  f7c3		       a9 50		      LDA	#80
   2660  f7c5		       85 d9		      STA	_duracao_som0
   2661  f7c7		       a5 f3		      LDA	pfscore2
   2662  f7c9		       4a		      lsr
   2663  f7ca		       4a		      lsr
   2664  f7cb		       85 f3		      STA	pfscore2
   2665  f7cd		       4c c1 f8 	      jmp	.__perde_vida
   2666  f7d0
   2667  f7d0				   .skipL098
   2668  f7d0				   .L099		;  goto __skip_collision_fases
   2669  f7d0
   2670  f7d0		       4c 22 f8 	      jmp	.__skip_collision_fases
   2671  f7d3
   2672  f7d3				   .__fase1
   2673  f7d3							; __fase1
   2674  f7d3
   2675  f7d3				   .L0100		;  if collision(missile1,player0) then missile1y  =  0  :  bally = 0  :  _bit_supressores{3}  =  0  :	_duracao_som0  =  10  :  score	=  score  +  100  :  player0y  =  0
   2676  f7d3
   2677  f7d3		       24 01		      bit	CXM1P
   2678  f7d5		       10 23		      BPL	.skipL0100
   2679  f7d7				   .condpart46
   2680  f7d7		       a9 00		      LDA	#0
   2681  f7d9		       85 88		      STA	missile1y
   2682  f7db		       85 89		      STA	bally
   2683  f7dd		       a5 dd		      LDA	_bit_supressores
   2684  f7df		       29 f7		      AND	#247
   2685  f7e1		       85 dd		      STA	_bit_supressores
   2686  f7e3		       a9 0a		      LDA	#10
   2687  f7e5		       85 d9		      STA	_duracao_som0
   2688  f7e7		       f8		      SED
   2689  f7e8		       18		      CLC
   2690  f7e9		       a5 94		      LDA	score+1
   2691  f7eb		       69 01		      ADC	#$01
   2692  f7ed		       85 94		      STA	score+1
   2693  f7ef		       a5 93		      LDA	score
   2694  f7f1		       69 00		      ADC	#$00
   2695  f7f3		       85 93		      STA	score
   2696  f7f5		       d8		      CLD
   2697  f7f6		       a9 00		      LDA	#0
   2698  f7f8		       85 85		      STA	player0y
   2699  f7fa				   .skipL0100
   2700  f7fa				   .L0101		;  if collision(player0,player1)  &&  !_bit_supressores{6} then _duracao_som0	=  80  :  pfscore2  =  pfscore2 / 4  :	goto __perde_vida
   2701  f7fa
   2702  f7fa		       24 07		      bit	CXPPMM
   2703  f7fc		       10 11		      BPL	.skipL0101
   2704  f7fe				   .condpart47
   2705  f7fe		       24 dd		      BIT	_bit_supressores
   2706  f800		       70 0d		      BVS	.skip47then
   2707  f802				   .condpart48
   2708  f802		       a9 50		      LDA	#80
   2709  f804		       85 d9		      STA	_duracao_som0
   2710  f806		       a5 f3		      LDA	pfscore2
   2711  f808		       4a		      lsr
   2712  f809		       4a		      lsr
   2713  f80a		       85 f3		      STA	pfscore2
   2714  f80c		       4c c1 f8 	      jmp	.__perde_vida
   2715  f80f
   2716  f80f				   .skip47then
   2717  f80f				   .skipL0101
   2718  f80f				   .L0102		;  if collision(player0,player1)  &&  _bit_supressores{6} then player0y  =  0	:  pfscore1  =	%00010101
   2719  f80f
   2720  f80f		       24 07		      bit	CXPPMM
   2721  f811		       10 0c		      BPL	.skipL0102
   2722  f813				   .condpart49
   2723  f813		       24 dd		      BIT	_bit_supressores
   2724  f815		       50 08		      BVC	.skip49then
   2725  f817				   .condpart50
   2726  f817		       a9 00		      LDA	#0
   2727  f819		       85 85		      STA	player0y
   2728  f81b		       a9 15		      LDA	#%00010101
   2729  f81d		       85 f2		      STA	pfscore1
   2730  f81f				   .skip49then
   2731  f81f				   .skipL0102
   2732  f81f				   .
   2733  f81f							; 
   2734  f81f
   2735  f81f				   .L0103		;  goto __skip_collision_fases
   2736  f81f
   2737  f81f		       4c 22 f8 	      jmp	.__skip_collision_fases
   2738  f822
   2739  f822				   .
   2740  f822							; 
   2741  f822
   2742  f822				   .__skip_collision_fases
   2743  f822							; __skip_collision_fases
   2744  f822
   2745  f822				   .
   2746  f822							; 
   2747  f822
   2748  f822				   .
   2749  f822							; 
   2750  f822
   2751  f822				   .L0104		;  if _bit_supressores{3} then goto __skip_som_morte_inimigo
   2752  f822
   2753  f822		       a5 dd		      LDA	_bit_supressores
   2754  f824		       29 08		      AND	#8
   2755  f826		       f0 03		      BEQ	.skipL0104
   2756  f828				   .condpart51
   2757  f828		       4c 46 f8 	      jmp	.__skip_som_morte_inimigo
   2758  f82b
   2759  f82b				   .skipL0104
   2760  f82b				   .L0105		;  if _duracao_som0  =  0 then AUDV0  =  0  :	goto __skip_som_morte_inimigo
   2761  f82b
   2762  f82b		       a5 d9		      LDA	_duracao_som0
   2763  f82d		       c9 00		      CMP	#0
   2764  f82f		       d0 07		      BNE	.skipL0105
   2765  f831				   .condpart52
   2766  f831		       a9 00		      LDA	#0
   2767  f833		       85 19		      STA	AUDV0
   2768  f835		       4c 46 f8 	      jmp	.__skip_som_morte_inimigo
   2769  f838
   2770  f838				   .skipL0105
   2771  f838				   .
   2772  f838							; 
   2773  f838
   2774  f838				   .L0106		;  AUDV0  =  15  :  rem volume
   2775  f838
   2776  f838		       a9 0f		      LDA	#15
   2777  f83a		       85 19		      STA	AUDV0
   2778  f83c				   .L0107		;  AUDC0  =  12  :  rem tom
   2779  f83c
   2780  f83c		       a9 0c		      LDA	#12
   2781  f83e		       85 15		      STA	AUDC0
   2782  f840				   .L0108		;  AUDF0  =  10  :  rem distorcao
   2783  f840
   2784  f840		       a9 0a		      LDA	#10
   2785  f842		       85 17		      STA	AUDF0
   2786  f844				   .L0109		;  _duracao_som0  =  _duracao_som0  -	1
   2787  f844
   2788  f844		       c6 d9		      DEC	_duracao_som0
   2789  f846				   .__skip_som_morte_inimigo
   2790  f846							; __skip_som_morte_inimigo
   2791  f846
   2792  f846				   .
   2793  f846							; 
   2794  f846
   2795  f846				   .
   2796  f846							; 
   2797  f846
   2798  f846				   .L0110		;  if !_bit_supressores{3} then goto __skip_som_tiro
   2799  f846
   2800  f846		       a5 dd		      LDA	_bit_supressores
   2801  f848		       29 08		      AND	#8
   2802  f84a		       d0 03		      BNE	.skipL0110
   2803  f84c				   .condpart53
   2804  f84c		       4c 70 f8 	      jmp	.__skip_som_tiro
   2805  f84f
   2806  f84f				   .skipL0110
   2807  f84f				   .L0111		;  if _duracao_som0  =  0 then AUDV0  =  0  :	_bit_supressores{3}  =	0  :  goto __skip_som_tiro
   2808  f84f
   2809  f84f		       a5 d9		      LDA	_duracao_som0
   2810  f851		       c9 00		      CMP	#0
   2811  f853		       d0 0d		      BNE	.skipL0111
   2812  f855				   .condpart54
   2813  f855		       a9 00		      LDA	#0
   2814  f857		       85 19		      STA	AUDV0
   2815  f859		       a5 dd		      LDA	_bit_supressores
   2816  f85b		       29 f7		      AND	#247
   2817  f85d		       85 dd		      STA	_bit_supressores
   2818  f85f		       4c 70 f8 	      jmp	.__skip_som_tiro
   2819  f862
   2820  f862				   .skipL0111
   2821  f862				   .L0112		;  AUDV0 = 15	:  rem volume
   2822  f862
   2823  f862		       a9 0f		      LDA	#15
   2824  f864		       85 19		      STA	AUDV0
   2825  f866				   .L0113		;  AUDC0  =  8  :  rem tom
   2826  f866
   2827  f866		       a9 08		      LDA	#8
   2828  f868		       85 15		      STA	AUDC0
   2829  f86a				   .L0114		;  AUDF0  =  8  :  rem distorcao
   2830  f86a
   2831  f86a		       a9 08		      LDA	#8
   2832  f86c		       85 17		      STA	AUDF0
   2833  f86e				   .L0115		;  _duracao_som0  =  _duracao_som0  -	1
   2834  f86e
   2835  f86e		       c6 d9		      DEC	_duracao_som0
   2836  f870				   .__skip_som_tiro
   2837  f870							; __skip_som_tiro
   2838  f870
   2839  f870				   .
   2840  f870							; 
   2841  f870
   2842  f870				   .
   2843  f870							; 
   2844  f870
   2845  f870				   .
   2846  f870							; 
   2847  f870
   2848  f870				   .
   2849  f870							; 
   2850  f870
   2851  f870				   .L0116		;  if switchreset then goto __reset_game
   2852  f870
   2853  f870		       a9 01		      lda	#1
   2854  f872		       2c 82 02 	      bit	SWCHB
   2855  f875		       d0 03		      BNE	.skipL0116
   2856  f877				   .condpart55
   2857  f877		       4c df f4 	      jmp	.__reset_game
   2858  f87a
   2859  f87a				   .skipL0116
   2860  f87a				   .L0117		;  goto __Main_Loop
   2861  f87a
   2862  f87a		       4c 57 f5 	      jmp	.__Main_Loop
   2863  f87d
   2864  f87d				   .
   2865  f87d							; 
   2866  f87d
   2867  f87d				   .
   2868  f87d							; 
   2869  f87d
   2870  f87d				   .__pfscroll
   2871  f87d							; __pfscroll
   2872  f87d
   2873  f87d				   .L0118		;  pfscroll down
   2874  f87d
   2875  f87d		       a9 04		      LDA	#4
   2876  f87f		       20 fe f2 	      jsr	pfscroll
   2877  f882				   .L0119		;  goto __skip_scroll
   2878  f882
   2879  f882		       4c 44 f7 	      jmp	.__skip_scroll
   2880  f885
   2881  f885				   .
   2882  f885							; 
   2883  f885
   2884  f885				   .
   2885  f885							; 
   2886  f885
   2887  f885				   .__regular
   2888  f885							; __regular
   2889  f885
   2890  f885				   .
   2891  f885							; 
   2892  f885
   2893  f885				   .L0120		;  if !pfread ( 0 , 11 )  then _dificuldade  =   ( rand & 3 )	 :  goto __redesenha else return thisbank
   2894  f885
   2895  f885		       a9 00		      LDA	#0
   2896  f887		       a0 0b		      LDY	#11
   2897  f889		       20 76 f2 	      jsr	pfread
   2898  f88c		       f0 0d		      BEQ	.skipL0120
   2899  f88e				   .condpart56
   2900  f88e							; complex statement detected
   2901  f88e		       20 be f3 	      jsr	randomize
   2902  f891		       29 03		      AND	#3
   2903  f893		       85 df		      STA	_dificuldade
   2904  f895		       4c 9c f8 	      jmp	.__redesenha
   2905  f898		       4c 9c f8 	      jmp	.skipelse1
   2906  f89b				   .skipL0120
   2907  f89b		       60		      RTS
   2908  f89c				   .skipelse1
   2909  f89c				   .
   2910  f89c							; 
   2911  f89c
   2912  f89c				   .__redesenha
   2913  f89c							; __redesenha
   2914  f89c
   2915  f89c				   .L0121		;  if player1x  >  19	&&  player1x  <  134 then _cont_telas  =  _cont_telas  +  1
   2916  f89c
   2917  f89c		       a9 13		      LDA	#19
   2918  f89e		       c5 81		      CMP	player1x
   2919  f8a0		       b0 08		      BCS	.skipL0121
   2920  f8a2				   .condpart57
   2921  f8a2		       a5 81		      LDA	player1x
   2922  f8a4		       c9 86		      CMP	#134
   2923  f8a6		       b0 02		      BCS	.skip57then
   2924  f8a8				   .condpart58
   2925  f8a8		       e6 e6		      INC	_cont_telas
   2926  f8aa				   .skip57then
   2927  f8aa				   .skipL0121
   2928  f8aa				   .L0122		;  d  =   ( rand / 16 )   +  1
   2929  f8aa
   2930  f8aa							; complex statement detected
   2931  f8aa		       20 be f3 	      jsr	randomize
   2932  f8ad		       4a		      lsr
   2933  f8ae		       4a		      lsr
   2934  f8af		       4a		      lsr
   2935  f8b0		       4a		      lsr
   2936  f8b1		       18		      CLC
   2937  f8b2		       69 01		      ADC	#1
   2938  f8b4		       85 d7		      STA	d
   2939  f8b6				   .L0123		;  d  =  d  +	2
   2940  f8b6
   2941  f8b6		       a5 d7		      LDA	d
   2942  f8b8		       18		      CLC
   2943  f8b9		       69 02		      ADC	#2
   2944  f8bb		       85 d7		      STA	d
   2945  f8bd				   .L0124		;  gosub __playfield_regular
   2946  f8bd
   2947  f8bd		       20 de fa 	      jsr	.__playfield_regular
   2948  f8c0
   2949  f8c0				   .
   2950  f8c0							; 
   2951  f8c0
   2952  f8c0				   .L0125		;  return thisbank
   2953  f8c0
   2954  f8c0		       60		      RTS
   2955  f8c1				   .
   2956  f8c1							; 
   2957  f8c1
   2958  f8c1				   .
   2959  f8c1							; 
   2960  f8c1
   2961  f8c1				   .__perde_vida
   2962  f8c1							; __perde_vida
   2963  f8c1
   2964  f8c1				   .L0126		;  gosub __playfield_regular
   2965  f8c1
   2966  f8c1		       20 de fa 	      jsr	.__playfield_regular
   2967  f8c4
   2968  f8c4				   .L0127		;  bally  =  0
   2969  f8c4
   2970  f8c4		       a9 00		      LDA	#0
   2971  f8c6		       85 89		      STA	bally
   2972  f8c8				   .L0128		;  missile1y  =  0
   2973  f8c8
   2974  f8c8		       a9 00		      LDA	#0
   2975  f8ca		       85 88		      STA	missile1y
   2976  f8cc				   .L0129		;  COLUPF  =  10
   2977  f8cc
   2978  f8cc		       a9 0a		      LDA	#10
   2979  f8ce		       85 08		      STA	COLUPF
   2980  f8d0				   .L0130		;  COLUBK  =  25
   2981  f8d0
   2982  f8d0		       a9 19		      LDA	#25
   2983  f8d2		       85 09		      STA	COLUBK
   2984  f8d4				   .L0131		;  COLUP1  =  $40
   2985  f8d4
   2986  f8d4		       a9 40		      LDA	#$40
   2987  f8d6		       85 07		      STA	COLUP1
   2988  f8d8				   .L0132		;  player0y  =  0
   2989  f8d8
   2990  f8d8		       a9 00		      LDA	#0
   2991  f8da		       85 85		      STA	player0y
   2992  f8dc				   .L0133		;  _cont_anima_morte  =  _cont_anima_morte  +	1
   2993  f8dc
   2994  f8dc		       e6 e5		      INC	_cont_anima_morte
   2995  f8de				   .
   2996  f8de							; 
   2997  f8de
   2998  f8de				   .L0134		;  if _cont_anima_morte  =  20 then player1:
   2999  f8de
   3000  f8de		       a5 e5		      LDA	_cont_anima_morte
   3001  f8e0		       c9 14		      CMP	#20
   3002  f8e2		       d0 0c		      BNE	.skipL0134
   3003  f8e4				   .condpart59
   3004  f8e4		       a2 27		      LDX	#<player59then_1
   3005  f8e6		       86 8c		      STX	player1pointerlo
   3006  f8e8		       a9 fc		      LDA	#>player59then_1
   3007  f8ea		       85 8d		      STA	player1pointerhi
   3008  f8ec		       a9 05		      LDA	#5
   3009  f8ee		       85 8f		      STA	player1height
   3010  f8f0				   .skipL0134
   3011  f8f0				   .L0135		;  if _cont_anima_morte  =  40 then player1:
   3012  f8f0
   3013  f8f0		       a5 e5		      LDA	_cont_anima_morte
   3014  f8f2		       c9 28		      CMP	#40
   3015  f8f4		       d0 0c		      BNE	.skipL0135
   3016  f8f6				   .condpart60
   3017  f8f6		       a2 2d		      LDX	#<player60then_1
   3018  f8f8		       86 8c		      STX	player1pointerlo
   3019  f8fa		       a9 fc		      LDA	#>player60then_1
   3020  f8fc		       85 8d		      STA	player1pointerhi
   3021  f8fe		       a9 05		      LDA	#5
   3022  f900		       85 8f		      STA	player1height
   3023  f902				   .skipL0135
   3024  f902				   .L0136		;  drawscreen
   3025  f902
   3026  f902		       20 cc f3 	      jsr	drawscreen
   3027  f905				   .
   3028  f905							; 
   3029  f905
   3030  f905				   .L0137		;  if _cont_anima_morte  =  40 then _cont_anima_morte	=  0
   3031  f905
   3032  f905		       a5 e5		      LDA	_cont_anima_morte
   3033  f907		       c9 28		      CMP	#40
   3034  f909		       d0 04		      BNE	.skipL0137
   3035  f90b				   .condpart61
   3036  f90b		       a9 00		      LDA	#0
   3037  f90d		       85 e5		      STA	_cont_anima_morte
   3038  f90f				   .skipL0137
   3039  f90f				   .
   3040  f90f							; 
   3041  f90f
   3042  f90f				   .
   3043  f90f							; 
   3044  f90f
   3045  f90f				   .L0138		;  if _duracao_som0  =  0 then AUDV0  =  0  :	goto __skip_som_explosao
   3046  f90f
   3047  f90f		       a5 d9		      LDA	_duracao_som0
   3048  f911		       c9 00		      CMP	#0
   3049  f913		       d0 07		      BNE	.skipL0138
   3050  f915				   .condpart62
   3051  f915		       a9 00		      LDA	#0
   3052  f917		       85 19		      STA	AUDV0
   3053  f919		       4c 2a f9 	      jmp	.__skip_som_explosao
   3054  f91c
   3055  f91c				   .skipL0138
   3056  f91c				   .L0139		;  _duracao_som0  =  _duracao_som0  -	1
   3057  f91c
   3058  f91c		       c6 d9		      DEC	_duracao_som0
   3059  f91e				   .L0140		;  AUDV0  =  8  :  rem volume
   3060  f91e
   3061  f91e		       a9 08		      LDA	#8
   3062  f920		       85 19		      STA	AUDV0
   3063  f922				   .L0141		;  AUDC0  =  8 :  rem tom
   3064  f922
   3065  f922		       a9 08		      LDA	#8
   3066  f924		       85 15		      STA	AUDC0
   3067  f926				   .L0142		;  AUDF0  =  25  :  rem distorcao
   3068  f926
   3069  f926		       a9 19		      LDA	#25
   3070  f928		       85 17		      STA	AUDF0
   3071  f92a				   .__skip_som_explosao
   3072  f92a							; __skip_som_explosao
   3073  f92a
   3074  f92a				   .L0143		;  if joy0fire then _duracao_som0  =  0  :  player1x  =  80  :  goto __skip_perde_vida
   3075  f92a
   3076  f92a		       24 0c		      bit	INPT4
   3077  f92c		       30 0b		      BMI	.skipL0143
   3078  f92e				   .condpart63
   3079  f92e		       a9 00		      LDA	#0
   3080  f930		       85 d9		      STA	_duracao_som0
   3081  f932		       a9 50		      LDA	#80
   3082  f934		       85 81		      STA	player1x
   3083  f936		       4c 86 f7 	      jmp	.__skip_perde_vida
   3084  f939
   3085  f939				   .skipL0143
   3086  f939				   .L0144		;  goto __perde_vida
   3087  f939
   3088  f939		       4c c1 f8 	      jmp	.__perde_vida
   3089  f93c
   3090  f93c				   .
   3091  f93c							; 
   3092  f93c
   3093  f93c				   .
   3094  f93c							; 
   3095  f93c
   3096  f93c				   .__inimigo_bomba
   3097  f93c							; __inimigo_bomba
   3098  f93c
   3099  f93c				   .L0145		;  COLUP0  =  $40
   3100  f93c
   3101  f93c		       a9 40		      LDA	#$40
   3102  f93e		       85 06		      STA	COLUP0
   3103  f940				   .L0146		;  player0:
   3104  f940
   3105  f940		       a2 33		      LDX	#<playerL0146_0
   3106  f942		       86 8a		      STX	player0pointerlo
   3107  f944		       a9 fc		      LDA	#>playerL0146_0
   3108  f946		       85 8b		      STA	player0pointerhi
   3109  f948		       a9 08		      LDA	#8
   3110  f94a		       85 8e		      STA	player0height
   3111  f94c				   .
   3112  f94c							; 
   3113  f94c
   3114  f94c				   .L0147		;  player0y  =  player0y + 2
   3115  f94c
   3116  f94c		       a5 85		      LDA	player0y
   3117  f94e		       18		      CLC
   3118  f94f		       69 02		      ADC	#2
   3119  f951		       85 85		      STA	player0y
   3120  f953				   .L0148		;  if joy0up then player0y  =	player0y  +  2
   3121  f953
   3122  f953		       a9 10		      lda	#$10
   3123  f955		       2c 80 02 	      bit	SWCHA
   3124  f958		       d0 07		      BNE	.skipL0148
   3125  f95a				   .condpart64
   3126  f95a		       a5 85		      LDA	player0y
   3127  f95c		       18		      CLC
   3128  f95d		       69 02		      ADC	#2
   3129  f95f		       85 85		      STA	player0y
   3130  f961				   .skipL0148
   3131  f961				   .
   3132  f961							; 
   3133  f961
   3134  f961				   .L0149		;  if player0y  <=  2 then player0x  =   ( rand & 63 )   +   ( rand & 31 )   +   ( rand & 15 )   +   ( rand & 1 )   +	21
   3135  f961
   3136  f961		       a9 02		      LDA	#2
   3137  f963		       c5 85		      CMP	player0y
   3138  f965		       90 2e		      BCC	.skipL0149
   3139  f967				   .condpart65
   3140  f967							; complex statement detected
   3141  f967		       20 be f3 	      jsr	randomize
   3142  f96a		       29 3f		      AND	#63
   3143  f96c		       48		      PHA
   3144  f96d		       20 be f3 	      jsr	randomize
   3145  f970		       29 1f		      AND	#31
   3146  f972		       ba		      TSX
   3147  f973		       e8		      INX
   3148  f974		       9a		      TXS
   3149  f975		       18		      CLC
   3150  f976		       75 00		      ADC	$00,x
   3151  f978		       48		      PHA
   3152  f979		       20 be f3 	      jsr	randomize
   3153  f97c		       29 0f		      AND	#15
   3154  f97e		       ba		      TSX
   3155  f97f		       e8		      INX
   3156  f980		       9a		      TXS
   3157  f981		       18		      CLC
   3158  f982		       75 00		      ADC	$00,x
   3159  f984		       48		      PHA
   3160  f985		       20 be f3 	      jsr	randomize
   3161  f988		       29 01		      AND	#1
   3162  f98a		       ba		      TSX
   3163  f98b		       e8		      INX
   3164  f98c		       9a		      TXS
   3165  f98d		       18		      CLC
   3166  f98e		       75 00		      ADC	$00,x
   3167  f990		       18		      CLC
   3168  f991		       69 15		      ADC	#21
   3169  f993		       85 80		      STA	player0x
   3170  f995				   .skipL0149
   3171  f995				   .L0150		;  return thisbank
   3172  f995
   3173  f995		       60		      RTS
   3174  f996				   .
   3175  f996							; 
   3176  f996
   3177  f996				   .__inimigo_tie
   3178  f996							; __inimigo_tie
   3179  f996
   3180  f996				   .L0151		;  COLUP0  =  $04
   3181  f996
   3182  f996		       a9 04		      LDA	#$04
   3183  f998		       85 06		      STA	COLUP0
   3184  f99a				   .L0152		;  player0:
   3185  f99a
   3186  f99a		       a2 3c		      LDX	#<playerL0152_0
   3187  f99c		       86 8a		      STX	player0pointerlo
   3188  f99e		       a9 fc		      LDA	#>playerL0152_0
   3189  f9a0		       85 8b		      STA	player0pointerhi
   3190  f9a2		       a9 06		      LDA	#6
   3191  f9a4		       85 8e		      STA	player0height
   3192  f9a6				   .
   3193  f9a6							; 
   3194  f9a6
   3195  f9a6				   .L0153		;  if player0y  >  10 then goto __skip_tie
   3196  f9a6
   3197  f9a6		       a9 0a		      LDA	#10
   3198  f9a8		       c5 85		      CMP	player0y
   3199  f9aa		       b0 03		      BCS	.skipL0153
   3200  f9ac				   .condpart66
   3201  f9ac		       4c ee f9 	      jmp	.__skip_tie
   3202  f9af
   3203  f9af				   .skipL0153
   3204  f9af				   .
   3205  f9af							; 
   3206  f9af
   3207  f9af				   .L0154		;  if _bit_supressores{2} then goto __volta else goto __vai
   3208  f9af
   3209  f9af		       a5 dd		      LDA	_bit_supressores
   3210  f9b1		       29 04		      AND	#4
   3211  f9b3		       f0 06		      BEQ	.skipL0154
   3212  f9b5				   .condpart67
   3213  f9b5		       4c be f9 	      jmp	.__volta
   3214  f9b8		       4c be f9 	      jmp	.skipelse2
   3215  f9bb				   .skipL0154
   3216  f9bb		       4c d6 f9 	      jmp	.__vai
   3217  f9be
   3218  f9be				   .skipelse2
   3219  f9be				   .
   3220  f9be							; 
   3221  f9be
   3222  f9be				   .__volta
   3223  f9be							; __volta
   3224  f9be
   3225  f9be				   .L0155		;  player0x  =  player0x  -  1
   3226  f9be
   3227  f9be		       c6 80		      DEC	player0x
   3228  f9c0				   .L0156		;  if player0x  <=  30 then player0y  =  player0y  +  5  :  _bit_supressores{2}  =  0
   3229  f9c0
   3230  f9c0		       a9 1e		      LDA	#30
   3231  f9c2		       c5 80		      CMP	player0x
   3232  f9c4		       90 0d		      BCC	.skipL0156
   3233  f9c6				   .condpart68
   3234  f9c6		       a5 85		      LDA	player0y
   3235  f9c8		       18		      CLC
   3236  f9c9		       69 05		      ADC	#5
   3237  f9cb		       85 85		      STA	player0y
   3238  f9cd		       a5 dd		      LDA	_bit_supressores
   3239  f9cf		       29 fb		      AND	#251
   3240  f9d1		       85 dd		      STA	_bit_supressores
   3241  f9d3				   .skipL0156
   3242  f9d3				   .L0157		;  goto __skip_vai_volta_tie
   3243  f9d3
   3244  f9d3		       4c 05 fa 	      jmp	.__skip_vai_volta_tie
   3245  f9d6
   3246  f9d6				   .__vai
   3247  f9d6							; __vai
   3248  f9d6
   3249  f9d6				   .L0158		;  player0x  =  player0x  +  1
   3250  f9d6
   3251  f9d6		       e6 80		      INC	player0x
   3252  f9d8				   .L0159		;  if player0x  >=  120 then player0y	=  player0y  +	5  :  _bit_supressores{2}  =  1
   3253  f9d8
   3254  f9d8		       a5 80		      LDA	player0x
   3255  f9da		       c9 78		      CMP	#120
   3256  f9dc		       90 0d		      BCC	.skipL0159
   3257  f9de				   .condpart69
   3258  f9de		       a5 85		      LDA	player0y
   3259  f9e0		       18		      CLC
   3260  f9e1		       69 05		      ADC	#5
   3261  f9e3		       85 85		      STA	player0y
   3262  f9e5		       a5 dd		      LDA	_bit_supressores
   3263  f9e7		       09 04		      ORA	#4
   3264  f9e9		       85 dd		      STA	_bit_supressores
   3265  f9eb				   .skipL0159
   3266  f9eb				   .L0160		;  goto __skip_vai_volta_tie
   3267  f9eb
   3268  f9eb		       4c 05 fa 	      jmp	.__skip_vai_volta_tie
   3269  f9ee
   3270  f9ee				   .__skip_tie
   3271  f9ee							; __skip_tie
   3272  f9ee
   3273  f9ee				   .
   3274  f9ee							; 
   3275  f9ee
   3276  f9ee				   .L0161		;  if player1x  >  player0x then player0x  =  player0x  +  1
   3277  f9ee
   3278  f9ee		       a5 80		      LDA	player0x
   3279  f9f0		       c5 81		      CMP	player1x
   3280  f9f2		       b0 02		      BCS	.skipL0161
   3281  f9f4				   .condpart70
   3282  f9f4		       e6 80		      INC	player0x
   3283  f9f6				   .skipL0161
   3284  f9f6				   .L0162		;  if player1x  <  player0x then player0x  =  player0x  -  1
   3285  f9f6
   3286  f9f6		       a5 81		      LDA	player1x
   3287  f9f8		       c5 80		      CMP	player0x
   3288  f9fa		       b0 02		      BCS	.skipL0162
   3289  f9fc				   .condpart71
   3290  f9fc		       c6 80		      DEC	player0x
   3291  f9fe				   .skipL0162
   3292  f9fe				   .L0163		;  player0y  =  player0y  +  2
   3293  f9fe
   3294  f9fe		       a5 85		      LDA	player0y
   3295  fa00		       18		      CLC
   3296  fa01		       69 02		      ADC	#2
   3297  fa03		       85 85		      STA	player0y
   3298  fa05				   .
   3299  fa05							; 
   3300  fa05
   3301  fa05				   .
   3302  fa05							; 
   3303  fa05
   3304  fa05				   .__skip_vai_volta_tie
   3305  fa05							; __skip_vai_volta_tie
   3306  fa05
   3307  fa05				   .
   3308  fa05							; 
   3309  fa05
   3310  fa05				   .
   3311  fa05							; 
   3312  fa05
   3313  fa05				   .L0164		;  return thisbank
   3314  fa05
   3315  fa05		       60		      RTS
   3316  fa06				   .
   3317  fa06							; 
   3318  fa06
   3319  fa06				   .
   3320  fa06							; 
   3321  fa06
   3322  fa06				   .__escudo
   3323  fa06							; __escudo
   3324  fa06
   3325  fa06				   .L0165		;  player1:
   3326  fa06
   3327  fa06		       a2 43		      LDX	#<playerL0165_1
   3328  fa08		       86 8c		      STX	player1pointerlo
   3329  fa0a		       a9 fc		      LDA	#>playerL0165_1
   3330  fa0c		       85 8d		      STA	player1pointerhi
   3331  fa0e		       a9 08		      LDA	#8
   3332  fa10		       85 8f		      STA	player1height
   3333  fa12				   .L0166		;  goto __skip_escudo
   3334  fa12
   3335  fa12		       4c f6 f5 	      jmp	.__skip_escudo
   3336  fa15
   3337  fa15				   .
   3338  fa15							; 
   3339  fa15
   3340  fa15				   .__nave
   3341  fa15							; __nave
   3342  fa15
   3343  fa15				   .L0167		;  if _animacao  =  10  ||  joy0up then player1:
   3344  fa15
   3345  fa15		       a5 e1		      LDA	_animacao
   3346  fa17		       c9 0a		      CMP	#10
   3347  fa19		       d0 03		      BNE	.skipL0167
   3348  fa1b				   .condpart72
   3349  fa1b		       4c 25 fa 	      jmp	.condpart73
   3350  fa1e				   .skipL0167
   3351  fa1e		       a9 10		      lda	#$10
   3352  fa20		       2c 80 02 	      bit	SWCHA
   3353  fa23		       d0 0c		      BNE	.skip8OR
   3354  fa25				   .condpart73
   3355  fa25		       a2 4c		      LDX	#<player73then_1
   3356  fa27		       86 8c		      STX	player1pointerlo
   3357  fa29		       a9 fc		      LDA	#>player73then_1
   3358  fa2b		       85 8d		      STA	player1pointerhi
   3359  fa2d		       a9 05		      LDA	#5
   3360  fa2f		       85 8f		      STA	player1height
   3361  fa31				   .skip8OR
   3362  fa31				   .
   3363  fa31							; 
   3364  fa31
   3365  fa31				   .L0168		;  if _animacao  =  20 then player1:
   3366  fa31
   3367  fa31		       a5 e1		      LDA	_animacao
   3368  fa33		       c9 14		      CMP	#20
   3369  fa35		       d0 0c		      BNE	.skipL0168
   3370  fa37				   .condpart74
   3371  fa37		       a2 52		      LDX	#<player74then_1
   3372  fa39		       86 8c		      STX	player1pointerlo
   3373  fa3b		       a9 fc		      LDA	#>player74then_1
   3374  fa3d		       85 8d		      STA	player1pointerhi
   3375  fa3f		       a9 05		      LDA	#5
   3376  fa41		       85 8f		      STA	player1height
   3377  fa43				   .skipL0168
   3378  fa43				   .
   3379  fa43							; 
   3380  fa43
   3381  fa43				   .L0169		;  return thisbank
   3382  fa43
   3383  fa43		       60		      RTS
   3384  fa44				   .
   3385  fa44							; 
   3386  fa44
   3387  fa44				   .
   3388  fa44							; 
   3389  fa44
   3390  fa44				   .__item_shield
   3391  fa44							; __item_shield
   3392  fa44
   3393  fa44				   .L0170		;  COLUP0  =  12
   3394  fa44
   3395  fa44		       a9 0c		      LDA	#12
   3396  fa46		       85 06		      STA	COLUP0
   3397  fa48				   .L0171		;  if joy0up then player0y  =	player0y  +  1
   3398  fa48
   3399  fa48		       a9 10		      lda	#$10
   3400  fa4a		       2c 80 02 	      bit	SWCHA
   3401  fa4d		       d0 02		      BNE	.skipL0171
   3402  fa4f				   .condpart75
   3403  fa4f		       e6 85		      INC	player0y
   3404  fa51				   .skipL0171
   3405  fa51				   .L0172		;  player0y  =  player0y  +  1
   3406  fa51
   3407  fa51		       e6 85		      INC	player0y
   3408  fa53				   .
   3409  fa53							; 
   3410  fa53
   3411  fa53				   .L0173		;  player0x  =  5
   3412  fa53
   3413  fa53		       a9 05		      LDA	#5
   3414  fa55		       85 80		      STA	player0x
   3415  fa57				   .L0174		;  player0:
   3416  fa57
   3417  fa57		       a2 58		      LDX	#<playerL0174_0
   3418  fa59		       86 8a		      STX	player0pointerlo
   3419  fa5b		       a9 fc		      LDA	#>playerL0174_0
   3420  fa5d		       85 8b		      STA	player0pointerhi
   3421  fa5f		       a9 09		      LDA	#9
   3422  fa61		       85 8e		      STA	player0height
   3423  fa63				   .L0175		;  goto __skip_item_shield
   3424  fa63
   3425  fa63		       4c a5 f6 	      jmp	.__skip_item_shield
   3426  fa66
   3427  fa66				   .
   3428  fa66							; 
   3429  fa66
   3430  fa66				   .
   3431  fa66							; 
   3432  fa66
   3433  fa66				   .__transicao
   3434  fa66							; __transicao
   3435  fa66
   3436  fa66				   .L0176		;  v  =  0
   3437  fa66
   3438  fa66		       a9 00		      LDA	#0
   3439  fa68		       85 e9		      STA	v
   3440  fa6a				   .__main_transicao
   3441  fa6a							; __main_transicao
   3442  fa6a
   3443  fa6a				   .L0177		;  missile1y  =  0
   3444  fa6a
   3445  fa6a		       a9 00		      LDA	#0
   3446  fa6c		       85 88		      STA	missile1y
   3447  fa6e				   .L0178		;  bally  =  100
   3448  fa6e
   3449  fa6e		       a9 64		      LDA	#100
   3450  fa70		       85 89		      STA	bally
   3451  fa72				   .
   3452  fa72							; 
   3453  fa72
   3454  fa72				   .L0179		;  AUDC0  =  12
   3455  fa72
   3456  fa72		       a9 0c		      LDA	#12
   3457  fa74		       85 15		      STA	AUDC0
   3458  fa76				   .L0180		;  AUDC1  =  1
   3459  fa76
   3460  fa76		       a9 01		      LDA	#1
   3461  fa78		       85 16		      STA	AUDC1
   3462  fa7a				   .
   3463  fa7a							; 
   3464  fa7a
   3465  fa7a				   .L0181		;  if musicTimer  =  0 then goto changeMusicNoteTransicao
   3466  fa7a
   3467  fa7a		       a5 de		      LDA	musicTimer
   3468  fa7c		       c9 00		      CMP	#0
   3469  fa7e		       d0 03		      BNE	.skipL0181
   3470  fa80				   .condpart76
   3471  fa80		       4c 5a fb 	      jmp	.changeMusicNoteTransicao
   3472  fa83
   3473  fa83				   .skipL0181
   3474  fa83				   .__volta_trilha_transicao
   3475  fa83							; __volta_trilha_transicao
   3476  fa83
   3477  fa83				   .L0182		;  musicTimer	=  musicTimer  -  1
   3478  fa83
   3479  fa83		       c6 de		      DEC	musicTimer
   3480  fa85				   .
   3481  fa85							; 
   3482  fa85
   3483  fa85				   .
   3484  fa85							; 
   3485  fa85
   3486  fa85				   .L0183		;  player0y  =  0
   3487  fa85
   3488  fa85		       a9 00		      LDA	#0
   3489  fa87		       85 85		      STA	player0y
   3490  fa89				   .L0184		;  gosub __playfield_transicao
   3491  fa89
   3492  fa89		       20 1c fb 	      jsr	.__playfield_transicao
   3493  fa8c
   3494  fa8c				   .L0185		;  drawscreen
   3495  fa8c
   3496  fa8c		       20 cc f3 	      jsr	drawscreen
   3497  fa8f				   .
   3498  fa8f							; 
   3499  fa8f
   3500  fa8f				   .L0186		;  if player1x  =  75 then goto __move_up
   3501  fa8f
   3502  fa8f		       a5 81		      LDA	player1x
   3503  fa91		       c9 4b		      CMP	#75
   3504  fa93		       d0 03		      BNE	.skipL0186
   3505  fa95				   .condpart77
   3506  fa95		       4c ab fa 	      jmp	.__move_up
   3507  fa98
   3508  fa98				   .skipL0186
   3509  fa98				   .L0187		;  if player1x  >  75 then goto __move_esquerda
   3510  fa98
   3511  fa98		       a9 4b		      LDA	#75
   3512  fa9a		       c5 81		      CMP	player1x
   3513  fa9c		       b0 03		      BCS	.skipL0187
   3514  fa9e				   .condpart78
   3515  fa9e		       4c a6 fa 	      jmp	.__move_esquerda
   3516  faa1
   3517  faa1				   .skipL0187
   3518  faa1				   .
   3519  faa1							; 
   3520  faa1
   3521  faa1				   .L0188		;  player1x  =  player1x  +  1  :  goto __skip_move
   3522  faa1
   3523  faa1		       e6 81		      INC	player1x
   3524  faa3		       4c b6 fa 	      jmp	.__skip_move
   3525  faa6
   3526  faa6				   .__move_esquerda
   3527  faa6							; __move_esquerda
   3528  faa6
   3529  faa6				   .L0189		;  player1x  =  player1x  -  1  :  goto __skip_move
   3530  faa6
   3531  faa6		       c6 81		      DEC	player1x
   3532  faa8		       4c b6 fa 	      jmp	.__skip_move
   3533  faab
   3534  faab				   .__move_up
   3535  faab							; __move_up
   3536  faab
   3537  faab				   .L0190		;  if player1y  =  0 then goto __skip_move
   3538  faab
   3539  faab		       a5 86		      LDA	player1y
   3540  faad		       c9 00		      CMP	#0
   3541  faaf		       d0 03		      BNE	.skipL0190
   3542  fab1				   .condpart79
   3543  fab1		       4c b6 fa 	      jmp	.__skip_move
   3544  fab4
   3545  fab4				   .skipL0190
   3546  fab4				   .L0191		;  player1y  =  player1y  -  1
   3547  fab4
   3548  fab4		       c6 86		      DEC	player1y
   3549  fab6				   .__skip_move
   3550  fab6							; __skip_move
   3551  fab6
   3552  fab6				   .
   3553  fab6							; 
   3554  fab6
   3555  fab6				   .L0192		;  v  =  v  +	1
   3556  fab6
   3557  fab6		       e6 e9		      INC	v
   3558  fab8				   .L0193		;  if v  =  250 then v  =  0  :  _fases  =  _fases  +	1  :  _bit_supressores{5}  =  0  :  _cont_telas  =  0  :  AUDV0  =  0  :  AUDV1  =  0  :  musicPointer	=  0  :  player1y  =  85  :  goto __skip_transicao
   3559  fab8
   3560  fab8		       a5 e9		      LDA	v
   3561  faba		       c9 fa		      CMP	#250
   3562  fabc		       d0 1d		      BNE	.skipL0193
   3563  fabe				   .condpart80
   3564  fabe		       a9 00		      LDA	#0
   3565  fac0		       85 e9		      STA	v
   3566  fac2		       e6 e4		      INC	_fases
   3567  fac4		       a5 dd		      LDA	_bit_supressores
   3568  fac6		       29 df		      AND	#223
   3569  fac8		       85 dd		      STA	_bit_supressores
   3570  faca		       a9 00		      LDA	#0
   3571  facc		       85 e6		      STA	_cont_telas
   3572  face		       85 19		      STA	AUDV0
   3573  fad0		       85 1a		      STA	AUDV1
   3574  fad2		       85 db		      STA	musicPointer
   3575  fad4		       a9 55		      LDA	#85
   3576  fad6		       85 86		      STA	player1y
   3577  fad8		       4c 57 f6 	      jmp	.__skip_transicao
   3578  fadb
   3579  fadb				   .skipL0193
   3580  fadb				   .L0194		;  goto __main_transicao
   3581  fadb
   3582  fadb		       4c 6a fa 	      jmp	.__main_transicao
   3583  fade
   3584  fade				   .
   3585  fade							; 
   3586  fade
   3587  fade				   .
   3588  fade							; 
   3589  fade
   3590  fade				   .__playfield_regular
   3591  fade							; __playfield_regular
   3592  fade
   3593  fade				   .L0195		;  playfield:
   3594  fade
   3595  fade				  -	      ifconst	pfres
   3596  fade				  -	      ldx	#(12>pfres)*(pfres*pfwidth-1)+(12<=pfres)*47
   3597  fade					      else
   3598  fade		       a2 2f		      ldx	#((12*pfwidth-1)*((12*pfwidth-1)<47))+(47*((12*pfwidth-1)>=47))
   3599  fae0					      endif
   3600  fae0		       4c 13 fb 	      jmp	pflabel0
   3601  fae3				   PF_data0
   3602  fae3		       7f ff		      .byte.b	%01111111, %11111111
   3603  fae5					      if	(pfwidth>2)
   3604  fae5		       ff 7f		      .byte.b	%11111111, %01111111
   3605  fae7					      endif
   3606  fae7		       aa 55		      .byte.b	%10101010, %01010101
   3607  fae9					      if	(pfwidth>2)
   3608  fae9		       aa 95		      .byte.b	%10101010, %10010101
   3609  faeb					      endif
   3610  faeb		       80 00		      .byte.b	%10000000, %00000000
   3611  faed					      if	(pfwidth>2)
   3612  faed		       00 80		      .byte.b	%00000000, %10000000
   3613  faef					      endif
   3614  faef		       80 00		      .byte.b	%10000000, %00000000
   3615  faf1					      if	(pfwidth>2)
   3616  faf1		       00 80		      .byte.b	%00000000, %10000000
   3617  faf3					      endif
   3618  faf3		       80 00		      .byte.b	%10000000, %00000000
   3619  faf5					      if	(pfwidth>2)
   3620  faf5		       00 80		      .byte.b	%00000000, %10000000
   3621  faf7					      endif
   3622  faf7		       80 00		      .byte.b	%10000000, %00000000
   3623  faf9					      if	(pfwidth>2)
   3624  faf9		       00 80		      .byte.b	%00000000, %10000000
   3625  fafb					      endif
   3626  fafb		       80 00		      .byte.b	%10000000, %00000000
   3627  fafd					      if	(pfwidth>2)
   3628  fafd		       00 80		      .byte.b	%00000000, %10000000
   3629  faff					      endif
   3630  faff		       80 00		      .byte.b	%10000000, %00000000
   3631  fb01					      if	(pfwidth>2)
   3632  fb01		       00 80		      .byte.b	%00000000, %10000000
   3633  fb03					      endif
   3634  fb03		       80 00		      .byte.b	%10000000, %00000000
   3635  fb05					      if	(pfwidth>2)
   3636  fb05		       00 80		      .byte.b	%00000000, %10000000
   3637  fb07					      endif
   3638  fb07		       80 00		      .byte.b	%10000000, %00000000
   3639  fb09					      if	(pfwidth>2)
   3640  fb09		       00 80		      .byte.b	%00000000, %10000000
   3641  fb0b					      endif
   3642  fb0b		       80 00		      .byte.b	%10000000, %00000000
   3643  fb0d					      if	(pfwidth>2)
   3644  fb0d		       00 80		      .byte.b	%00000000, %10000000
   3645  fb0f					      endif
   3646  fb0f		       80 00		      .byte.b	%10000000, %00000000
   3647  fb11					      if	(pfwidth>2)
   3648  fb11		       00 80		      .byte.b	%00000000, %10000000
   3649  fb13					      endif
   3650  fb13				   pflabel0
   3651  fb13		       bd e3 fa 	      lda	PF_data0,x
   3652  fb16		       95 a4		      sta	playfield,x
   3653  fb18		       ca		      dex
   3654  fb19		       10 f8		      bpl	pflabel0
   3655  fb1b				   .L0196		;  return thisbank
   3656  fb1b
   3657  fb1b		       60		      RTS
   3658  fb1c				   .
   3659  fb1c							; 
   3660  fb1c
   3661  fb1c				   .
   3662  fb1c							; 
   3663  fb1c
   3664  fb1c				   .__playfield_transicao
   3665  fb1c							; __playfield_transicao
   3666  fb1c
   3667  fb1c				   .L0197		;  playfield:
   3668  fb1c
   3669  fb1c				  -	      ifconst	pfres
   3670  fb1c				  -	      ldx	#(12>pfres)*(pfres*pfwidth-1)+(12<=pfres)*47
   3671  fb1c					      else
   3672  fb1c		       a2 2f		      ldx	#((12*pfwidth-1)*((12*pfwidth-1)<47))+(47*((12*pfwidth-1)>=47))
   3673  fb1e					      endif
   3674  fb1e		       4c 51 fb 	      jmp	pflabel1
   3675  fb21				   PF_data1
   3676  fb21		       7f 1f		      .byte.b	%01111111, %00011111
   3677  fb23					      if	(pfwidth>2)
   3678  fb23		       3f 7f		      .byte.b	%00111111, %01111111
   3679  fb25					      endif
   3680  fb25		       aa 15		      .byte.b	%10101010, %00010101
   3681  fb27					      if	(pfwidth>2)
   3682  fb27		       2a 95		      .byte.b	%00101010, %10010101
   3683  fb29					      endif
   3684  fb29		       80 00		      .byte.b	%10000000, %00000000
   3685  fb2b					      if	(pfwidth>2)
   3686  fb2b		       00 80		      .byte.b	%00000000, %10000000
   3687  fb2d					      endif
   3688  fb2d		       80 00		      .byte.b	%10000000, %00000000
   3689  fb2f					      if	(pfwidth>2)
   3690  fb2f		       00 80		      .byte.b	%00000000, %10000000
   3691  fb31					      endif
   3692  fb31		       80 00		      .byte.b	%10000000, %00000000
   3693  fb33					      if	(pfwidth>2)
   3694  fb33		       00 80		      .byte.b	%00000000, %10000000
   3695  fb35					      endif
   3696  fb35		       80 00		      .byte.b	%10000000, %00000000
   3697  fb37					      if	(pfwidth>2)
   3698  fb37		       00 80		      .byte.b	%00000000, %10000000
   3699  fb39					      endif
   3700  fb39		       80 00		      .byte.b	%10000000, %00000000
   3701  fb3b					      if	(pfwidth>2)
   3702  fb3b		       00 80		      .byte.b	%00000000, %10000000
   3703  fb3d					      endif
   3704  fb3d		       80 00		      .byte.b	%10000000, %00000000
   3705  fb3f					      if	(pfwidth>2)
   3706  fb3f		       00 80		      .byte.b	%00000000, %10000000
   3707  fb41					      endif
   3708  fb41		       80 00		      .byte.b	%10000000, %00000000
   3709  fb43					      if	(pfwidth>2)
   3710  fb43		       00 80		      .byte.b	%00000000, %10000000
   3711  fb45					      endif
   3712  fb45		       80 00		      .byte.b	%10000000, %00000000
   3713  fb47					      if	(pfwidth>2)
   3714  fb47		       00 80		      .byte.b	%00000000, %10000000
   3715  fb49					      endif
   3716  fb49		       80 00		      .byte.b	%10000000, %00000000
   3717  fb4b					      if	(pfwidth>2)
   3718  fb4b		       00 80		      .byte.b	%00000000, %10000000
   3719  fb4d					      endif
   3720  fb4d		       80 00		      .byte.b	%10000000, %00000000
   3721  fb4f					      if	(pfwidth>2)
   3722  fb4f		       00 80		      .byte.b	%00000000, %10000000
   3723  fb51					      endif
   3724  fb51				   pflabel1
   3725  fb51		       bd 21 fb 	      lda	PF_data1,x
   3726  fb54		       95 a4		      sta	playfield,x
   3727  fb56		       ca		      dex
   3728  fb57		       10 f8		      bpl	pflabel1
   3729  fb59				   .L0198		;  return thisbank
   3730  fb59
   3731  fb59		       60		      RTS
   3732  fb5a				   .
   3733  fb5a							; 
   3734  fb5a
   3735  fb5a				   .changeMusicNoteTransicao
   3736  fb5a							; changeMusicNoteTransicao
   3737  fb5a
   3738  fb5a				   .L0199		;  AUDF0  =  musicData1[musicPointer]
   3739  fb5a
   3740  fb5a		       a6 db		      LDX	musicPointer
   3741  fb5c		       bd ef fb 	      LDA	musicData1,x
   3742  fb5f		       85 17		      STA	AUDF0
   3743  fb61				   .L0200		;  AUDF1  =  musicData2[musicPointer]
   3744  fb61
   3745  fb61		       a6 db		      LDX	musicPointer
   3746  fb63		       bd 09 fc 	      LDA	musicData2,x
   3747  fb66		       85 18		      STA	AUDF1
   3748  fb68				   .L0201		;  if musicData1[musicPointer]  =  255 then AUDV1  =  0 else AUDV1  =	6
   3749  fb68
   3750  fb68		       a6 db		      LDX	musicPointer
   3751  fb6a		       bd ef fb 	      LDA	musicData1,x
   3752  fb6d		       c9 ff		      CMP	#255
   3753  fb6f		       d0 07		      BNE	.skipL0201
   3754  fb71				   .condpart81
   3755  fb71		       a9 00		      LDA	#0
   3756  fb73		       85 1a		      STA	AUDV1
   3757  fb75		       4c 7c fb 	      jmp	.skipelse3
   3758  fb78				   .skipL0201
   3759  fb78		       a9 06		      LDA	#6
   3760  fb7a		       85 1a		      STA	AUDV1
   3761  fb7c				   .skipelse3
   3762  fb7c				   .L0202		;  if musicData2[musicPointer]  =  255 then AUDV0  =  0 else AUDV0  =	4
   3763  fb7c
   3764  fb7c		       a6 db		      LDX	musicPointer
   3765  fb7e		       bd 09 fc 	      LDA	musicData2,x
   3766  fb81		       c9 ff		      CMP	#255
   3767  fb83		       d0 07		      BNE	.skipL0202
   3768  fb85				   .condpart82
   3769  fb85		       a9 00		      LDA	#0
   3770  fb87		       85 19		      STA	AUDV0
   3771  fb89		       4c 90 fb 	      jmp	.skipelse4
   3772  fb8c				   .skipL0202
   3773  fb8c		       a9 04		      LDA	#4
   3774  fb8e		       85 19		      STA	AUDV0
   3775  fb90				   .skipelse4
   3776  fb90				   .L0203		;  musicTimer	=  10
   3777  fb90
   3778  fb90		       a9 0a		      LDA	#10
   3779  fb92		       85 de		      STA	musicTimer
   3780  fb94				   .L0204		;  musicPointer  =  musicPointer  +  1
   3781  fb94
   3782  fb94		       e6 db		      INC	musicPointer
   3783  fb96				   .L0205		;  if musicPointer  >	22 then musicPointer  =  0
   3784  fb96
   3785  fb96		       a9 16		      LDA	#22
   3786  fb98		       c5 db		      CMP	musicPointer
   3787  fb9a		       b0 04		      BCS	.skipL0205
   3788  fb9c				   .condpart83
   3789  fb9c		       a9 00		      LDA	#0
   3790  fb9e		       85 db		      STA	musicPointer
   3791  fba0				   .skipL0205
   3792  fba0				   .L0206		;  goto __volta_trilha_transicao
   3793  fba0
   3794  fba0		       4c 83 fa 	      jmp	.__volta_trilha_transicao
   3795  fba3
   3796  fba3				   .
   3797  fba3							; 
   3798  fba3
   3799  fba3				   .changeMusicNoteTitle
   3800  fba3							; changeMusicNoteTitle
   3801  fba3
   3802  fba3				   .L0207		;  AUDF0  =  musicData1[musicPointer]
   3803  fba3
   3804  fba3		       a6 db		      LDX	musicPointer
   3805  fba5		       bd ef fb 	      LDA	musicData1,x
   3806  fba8		       85 17		      STA	AUDF0
   3807  fbaa				   .L0208		;  AUDF1  =  musicData2[musicPointer]
   3808  fbaa
   3809  fbaa		       a6 db		      LDX	musicPointer
   3810  fbac		       bd 09 fc 	      LDA	musicData2,x
   3811  fbaf		       85 18		      STA	AUDF1
   3812  fbb1				   .L0209		;  if musicData1[musicPointer]  =  255 then AUDV1  =  0 else AUDV1  =	6
   3813  fbb1
   3814  fbb1		       a6 db		      LDX	musicPointer
   3815  fbb3		       bd ef fb 	      LDA	musicData1,x
   3816  fbb6		       c9 ff		      CMP	#255
   3817  fbb8		       d0 07		      BNE	.skipL0209
   3818  fbba				   .condpart84
   3819  fbba		       a9 00		      LDA	#0
   3820  fbbc		       85 1a		      STA	AUDV1
   3821  fbbe		       4c c5 fb 	      jmp	.skipelse5
   3822  fbc1				   .skipL0209
   3823  fbc1		       a9 06		      LDA	#6
   3824  fbc3		       85 1a		      STA	AUDV1
   3825  fbc5				   .skipelse5
   3826  fbc5				   .L0210		;  if musicData2[musicPointer]  =  255 then AUDV0  =  0 else AUDV0  =	4
   3827  fbc5
   3828  fbc5		       a6 db		      LDX	musicPointer
   3829  fbc7		       bd 09 fc 	      LDA	musicData2,x
   3830  fbca		       c9 ff		      CMP	#255
   3831  fbcc		       d0 07		      BNE	.skipL0210
   3832  fbce				   .condpart85
   3833  fbce		       a9 00		      LDA	#0
   3834  fbd0		       85 19		      STA	AUDV0
   3835  fbd2		       4c d9 fb 	      jmp	.skipelse6
   3836  fbd5				   .skipL0210
   3837  fbd5		       a9 04		      LDA	#4
   3838  fbd7		       85 19		      STA	AUDV0
   3839  fbd9				   .skipelse6
   3840  fbd9				   .L0211		;  musicTimer	=  10
   3841  fbd9
   3842  fbd9		       a9 0a		      LDA	#10
   3843  fbdb		       85 de		      STA	musicTimer
   3844  fbdd				   .L0212		;  musicPointer  =  musicPointer  +  1
   3845  fbdd
   3846  fbdd		       e6 db		      INC	musicPointer
   3847  fbdf				   .L0213		;  if musicPointer  >	22 then musicPointer  =  0
   3848  fbdf
   3849  fbdf		       a9 16		      LDA	#22
   3850  fbe1		       c5 db		      CMP	musicPointer
   3851  fbe3		       b0 04		      BCS	.skipL0213
   3852  fbe5				   .condpart86
   3853  fbe5		       a9 00		      LDA	#0
   3854  fbe7		       85 db		      STA	musicPointer
   3855  fbe9				   .skipL0213
   3856  fbe9				   .L0214		;  goto __volta_trilha_title
   3857  fbe9
   3858  fbe9		       4c 91 f4 	      jmp	.__volta_trilha_title
   3859  fbec
   3860  fbec				   .
   3861  fbec							; 
   3862  fbec
   3863  fbec				   .
   3864  fbec							; 
   3865  fbec
   3866  fbec				   .L0215		;  data musicData1
   3867  fbec
   3868  fbec		       4c 06 fc 	      JMP	.skipL0215
   3869  fbef				   musicData1
   3870  fbef		       1d ff 1d ff*	      .byte.b	29, -1, 29, -1, 29, -1
   3871  fbf5
   3872  fbf5		       1a ff 1a ff*	      .byte.b	26, -1, 26, -1, 26, -1
   3873  fbfb
   3874  fbfb		       18 ff 18 ff*	      .byte.b	24, -1, 24, -1, 24, -1
   3875  fc01
   3876  fc01		       13 13 13 13	      .byte.b	19, 19, 19, 19
   3877  fc05
   3878  fc05		       ff		      .byte.b	255
   3879  fc06
   3880  fc06				   .skipL0215
   3881  fc06				   .
   3882  fc06							; 
   3883  fc06
   3884  fc06				   .L0216		;  data musicData2
   3885  fc06
   3886  fc06		       4c 20 fc 	      JMP	.skipL0216
   3887  fc09				   musicData2
   3888  fc09		       17 ff 17 ff*	      .byte.b	23, -1, 23, -1, 23, -1
   3889  fc0f
   3890  fc0f		       1a ff 1a ff*	      .byte.b	26, -1, 26, -1, 26, -1
   3891  fc15
   3892  fc15		       1d ff 1d ff*	      .byte.b	29, -1, 29, -1, 29, -1
   3893  fc1b
   3894  fc1b		       17 17 17 17	      .byte.b	23, 23, 23, 23
   3895  fc1f
   3896  fc1f		       ff		      .byte.b	255
   3897  fc20
   3898  fc20				   .skipL0216
   3899  fc20				   .
   3900  fc20							; 
   3901  fc20
   3902  fc20				   .L0217		;  asm
   3903  fc20
   3904  fc20				   minikernel
   3905  fc20
   3906  fc20		       85 02		      sta	WSYNC
   3907  fc22
   3908  fc22		       a5 e2		      lda	_SC_Back
   3909  fc24
   3910  fc24		       85 09		      sta	COLUBK
   3911  fc26
   3912  fc26		       60		      rts
   3913  fc27
   3914  fc27				  -	      if	(<*) > (<(*+5))
   3915  fc27				  -	      repeat	($100-<*)
   3916  fc27				  -	      .byte	0
   3917  fc27				  -	      repend
   3918  fc27					      endif
   3919  fc27				   player59then_1
   3920  fc27		       28		      .byte.b	%0101000
   3921  fc28		       12		      .byte.b	%0010010
   3922  fc29		       48		      .byte.b	%1001000
   3923  fc2a		       15		      .byte.b	%0010101
   3924  fc2b		       40		      .byte.b	%1000000
   3925  fc2c		       14		      .byte.b	%0010100
   3926  fc2d				  -	      if	(<*) > (<(*+5))
   3927  fc2d				  -	      repeat	($100-<*)
   3928  fc2d				  -	      .byte	0
   3929  fc2d				  -	      repend
   3930  fc2d					      endif
   3931  fc2d				   player60then_1
   3932  fc2d		       08		      .byte.b	%0001000
   3933  fc2e		       14		      .byte.b	%0010100
   3934  fc2f		       2a		      .byte.b	%0101010
   3935  fc30		       14		      .byte.b	%0010100
   3936  fc31		       08		      .byte.b	%0001000
   3937  fc32		       00		      .byte.b	%0000000
   3938  fc33				  -	      if	(<*) > (<(*+8))
   3939  fc33				  -	      repeat	($100-<*)
   3940  fc33				  -	      .byte	0
   3941  fc33				  -	      repend
   3942  fc33					      endif
   3943  fc33				   playerL0146_0
   3944  fc33		       18		      .byte.b	%00011000
   3945  fc34		       3c		      .byte.b	%00111100
   3946  fc35		       7e		      .byte.b	%01111110
   3947  fc36		       66		      .byte.b	%01100110
   3948  fc37		       5a		      .byte.b	%01011010
   3949  fc38		       7e		      .byte.b	%01111110
   3950  fc39		       5a		      .byte.b	%01011010
   3951  fc3a		       18		      .byte.b	%00011000
   3952  fc3b		       3c		      .byte.b	%00111100
   3953  fc3c				  -	      if	(<*) > (<(*+6))
   3954  fc3c				  -	      repeat	($100-<*)
   3955  fc3c				  -	      .byte	0
   3956  fc3c				  -	      repend
   3957  fc3c					      endif
   3958  fc3c				   playerL0152_0
   3959  fc3c		       81		      .byte.b	%10000001
   3960  fc3d		       81		      .byte.b	%10000001
   3961  fc3e		       99		      .byte.b	%10011001
   3962  fc3f		       ff		      .byte.b	%11111111
   3963  fc40		       99		      .byte.b	%10011001
   3964  fc41		       81		      .byte.b	%10000001
   3965  fc42		       81		      .byte.b	%10000001
   3966  fc43				  -	      if	(<*) > (<(*+8))
   3967  fc43				  -	      repeat	($100-<*)
   3968  fc43				  -	      .byte	0
   3969  fc43				  -	      repend
   3970  fc43					      endif
   3971  fc43				   playerL0165_1
   3972  fc43		       49		      .byte.b	%1001001
   3973  fc44		       7f		      .byte.b	%1111111
   3974  fc45		       5d		      .byte.b	%1011101
   3975  fc46		       08		      .byte.b	%0001000
   3976  fc47		       08		      .byte.b	%0001000
   3977  fc48		       49		      .byte.b	%1001001
   3978  fc49		       22		      .byte.b	%0100010
   3979  fc4a		       14		      .byte.b	%0010100
   3980  fc4b		       08		      .byte.b	%0001000
   3981  fc4c				  -	      if	(<*) > (<(*+5))
   3982  fc4c				  -	      repeat	($100-<*)
   3983  fc4c				  -	      .byte	0
   3984  fc4c				  -	      repend
   3985  fc4c					      endif
   3986  fc4c				   player73then_1
   3987  fc4c		       49		      .byte.b	%1001001
   3988  fc4d		       7f		      .byte.b	%1111111
   3989  fc4e		       5d		      .byte.b	%1011101
   3990  fc4f		       08		      .byte.b	%0001000
   3991  fc50		       08		      .byte.b	%0001000
   3992  fc51		       08		      .byte.b	%0001000
   3993  fc52				  -	      if	(<*) > (<(*+5))
   3994  fc52				  -	      repeat	($100-<*)
   3995  fc52				  -	      .byte	0
   3996  fc52				  -	      repend
   3997  fc52					      endif
   3998  fc52				   player74then_1
   3999  fc52		       41		      .byte.b	%1000001
   4000  fc53		       7f		      .byte.b	%1111111
   4001  fc54		       5d		      .byte.b	%1011101
   4002  fc55		       08		      .byte.b	%0001000
   4003  fc56		       08		      .byte.b	%0001000
   4004  fc57		       08		      .byte.b	%0001000
   4005  fc58				  -	      if	(<*) > (<(*+9))
   4006  fc58				  -	      repeat	($100-<*)
   4007  fc58				  -	      .byte	0
   4008  fc58				  -	      repend
   4009  fc58					      endif
   4010  fc58				   playerL0174_0
   4011  fc58		       3c		      .byte.b	%00111100
   4012  fc59		       42		      .byte.b	%01000010
   4013  fc5a		       bd		      .byte.b	%10111101
   4014  fc5b		       85		      .byte.b	%10000101
   4015  fc5c		       85		      .byte.b	%10000101
   4016  fc5d		       bd		      .byte.b	%10111101
   4017  fc5e		       a1		      .byte.b	%10100001
   4018  fc5f		       bd		      .byte.b	%10111101
   4019  fc60		       42		      .byte.b	%01000010
   4020  fc61		       3c		      .byte.b	%00111100
   4021  fc62					      if	ECHOFIRST
      826 bytes of ROM space left
   4022  fc62					      echo	"    ",[(scoretable - *)]d , "bytes of ROM space left")
   4023  fc62					      endif
   4024  fc62		       00 01	   ECHOFIRST  =	1
   4025  fc62
   4026  fc62
   4027  fc62
   4028  fc62							; Provided under the CC0 license. See the included LICENSE.txt for details.
   4029  fc62
   4030  fc62							; feel free to modify the score graphics - just keep each digit 8 high
   4031  fc62							; and keep the conditional compilation stuff intact
   4032  fc62				  -	      ifconst	ROM2k
   4033  fc62				  -	      ORG	$F7AC-8
   4034  fc62					      else
   4035  fc62				  -	      ifconst	bankswitch
   4036  fc62				  -	      if	bankswitch == 8
   4037  fc62				  -	      ORG	$2F94-bscode_length
   4038  fc62				  -	      RORG	$FF94-bscode_length
   4039  fc62				  -	      endif
   4040  fc62				  -	      if	bankswitch == 16
   4041  fc62				  -	      ORG	$4F94-bscode_length
   4042  fc62				  -	      RORG	$FF94-bscode_length
   4043  fc62				  -	      endif
   4044  fc62				  -	      if	bankswitch == 32
   4045  fc62				  -	      ORG	$8F94-bscode_length
   4046  fc62				  -	      RORG	$FF94-bscode_length
   4047  fc62				  -	      endif
   4048  fc62				  -	      if	bankswitch == 64
   4049  fc62				  -	      ORG	$10F80-bscode_length
   4050  fc62				  -	      RORG	$1FF80-bscode_length
   4051  fc62				  -	      endif
   4052  fc62					      else
   4053  ff9c					      ORG	$FF9C
   4054  ff9c					      endif
   4055  ff9c					      endif
   4056  ff9c
   4057  ff9c							; font equates
   4058  ff9c		       00 01	   .21stcentury =	1
   4059  ff9c		       00 02	   alarmclock =	2
   4060  ff9c		       00 03	   handwritten =	3
   4061  ff9c		       00 04	   interrupted =	4
   4062  ff9c		       00 05	   retroputer =	5
   4063  ff9c		       00 06	   whimsey    =	6
   4064  ff9c		       00 07	   tiny       =	7
   4065  ff9c		       00 08	   hex	      =	8
   4066  ff9c
   4067  ff9c				  -	      ifconst	font
   4068  ff9c				  -	      if	font == hex
   4069  ff9c				  -	      ORG	. - 48
   4070  ff9c				  -	      endif
   4071  ff9c					      endif
   4072  ff9c
   4073  ff9c				   scoretable
   4074  ff9c
   4075  ff9c				  -	      ifconst	font
   4076  ff9c				  -	      if	font == .21stcentury
   4077  ff9c				  -	      include	"score_graphics.asm.21stcentury"
   4078  ff9c				  -	      endif
   4079  ff9c				  -	      if	font == alarmclock
   4080  ff9c				  -	      include	"score_graphics.asm.alarmclock"
   4081  ff9c				  -	      endif
   4082  ff9c				  -	      if	font == handwritten
   4083  ff9c				  -	      include	"score_graphics.asm.handwritten"
   4084  ff9c				  -	      endif
   4085  ff9c				  -	      if	font == interrupted
   4086  ff9c				  -	      include	"score_graphics.asm.interrupted"
   4087  ff9c				  -	      endif
   4088  ff9c				  -	      if	font == retroputer
   4089  ff9c				  -	      include	"score_graphics.asm.retroputer"
   4090  ff9c				  -	      endif
   4091  ff9c				  -	      if	font == whimsey
   4092  ff9c				  -	      include	"score_graphics.asm.whimsey"
   4093  ff9c				  -	      endif
   4094  ff9c				  -	      if	font == tiny
   4095  ff9c				  -	      include	"score_graphics.asm.tiny"
   4096  ff9c				  -	      endif
   4097  ff9c				  -	      if	font == hex
   4098  ff9c				  -	      include	"score_graphics.asm.hex"
   4099  ff9c				  -	      endif
   4100  ff9c					      else		; default font
   4101  ff9c
   4102  ff9c		       3c		      .byte.b	%00111100
   4103  ff9d		       66		      .byte.b	%01100110
   4104  ff9e		       66		      .byte.b	%01100110
   4105  ff9f		       66		      .byte.b	%01100110
   4106  ffa0		       66		      .byte.b	%01100110
   4107  ffa1		       66		      .byte.b	%01100110
   4108  ffa2		       66		      .byte.b	%01100110
   4109  ffa3		       3c		      .byte.b	%00111100
   4110  ffa4
   4111  ffa4		       7e		      .byte.b	%01111110
   4112  ffa5		       18		      .byte.b	%00011000
   4113  ffa6		       18		      .byte.b	%00011000
   4114  ffa7		       18		      .byte.b	%00011000
   4115  ffa8		       18		      .byte.b	%00011000
   4116  ffa9		       38		      .byte.b	%00111000
   4117  ffaa		       18		      .byte.b	%00011000
   4118  ffab		       08		      .byte.b	%00001000
   4119  ffac
   4120  ffac		       7e		      .byte.b	%01111110
   4121  ffad		       60		      .byte.b	%01100000
   4122  ffae		       60		      .byte.b	%01100000
   4123  ffaf		       3c		      .byte.b	%00111100
   4124  ffb0		       06		      .byte.b	%00000110
   4125  ffb1		       06		      .byte.b	%00000110
   4126  ffb2		       46		      .byte.b	%01000110
   4127  ffb3		       3c		      .byte.b	%00111100
   4128  ffb4
   4129  ffb4		       3c		      .byte.b	%00111100
   4130  ffb5		       46		      .byte.b	%01000110
   4131  ffb6		       06		      .byte.b	%00000110
   4132  ffb7		       06		      .byte.b	%00000110
   4133  ffb8		       1c		      .byte.b	%00011100
   4134  ffb9		       06		      .byte.b	%00000110
   4135  ffba		       46		      .byte.b	%01000110
   4136  ffbb		       3c		      .byte.b	%00111100
   4137  ffbc
   4138  ffbc		       0c		      .byte.b	%00001100
   4139  ffbd		       0c		      .byte.b	%00001100
   4140  ffbe		       7e		      .byte.b	%01111110
   4141  ffbf		       4c		      .byte.b	%01001100
   4142  ffc0		       4c		      .byte.b	%01001100
   4143  ffc1		       2c		      .byte.b	%00101100
   4144  ffc2		       1c		      .byte.b	%00011100
   4145  ffc3		       0c		      .byte.b	%00001100
   4146  ffc4
   4147  ffc4		       3c		      .byte.b	%00111100
   4148  ffc5		       46		      .byte.b	%01000110
   4149  ffc6		       06		      .byte.b	%00000110
   4150  ffc7		       06		      .byte.b	%00000110
   4151  ffc8		       3c		      .byte.b	%00111100
   4152  ffc9		       60		      .byte.b	%01100000
   4153  ffca		       60		      .byte.b	%01100000
   4154  ffcb		       7e		      .byte.b	%01111110
   4155  ffcc
   4156  ffcc		       3c		      .byte.b	%00111100
   4157  ffcd		       66		      .byte.b	%01100110
   4158  ffce		       66		      .byte.b	%01100110
   4159  ffcf		       66		      .byte.b	%01100110
   4160  ffd0		       7c		      .byte.b	%01111100
   4161  ffd1		       60		      .byte.b	%01100000
   4162  ffd2		       62		      .byte.b	%01100010
   4163  ffd3		       3c		      .byte.b	%00111100
   4164  ffd4
   4165  ffd4		       30		      .byte.b	%00110000
   4166  ffd5		       30		      .byte.b	%00110000
   4167  ffd6		       30		      .byte.b	%00110000
   4168  ffd7		       18		      .byte.b	%00011000
   4169  ffd8		       0c		      .byte.b	%00001100
   4170  ffd9		       06		      .byte.b	%00000110
   4171  ffda		       42		      .byte.b	%01000010
   4172  ffdb		       3e		      .byte.b	%00111110
   4173  ffdc
   4174  ffdc		       3c		      .byte.b	%00111100
   4175  ffdd		       66		      .byte.b	%01100110
   4176  ffde		       66		      .byte.b	%01100110
   4177  ffdf		       66		      .byte.b	%01100110
   4178  ffe0		       3c		      .byte.b	%00111100
   4179  ffe1		       66		      .byte.b	%01100110
   4180  ffe2		       66		      .byte.b	%01100110
   4181  ffe3		       3c		      .byte.b	%00111100
   4182  ffe4
   4183  ffe4		       3c		      .byte.b	%00111100
   4184  ffe5		       46		      .byte.b	%01000110
   4185  ffe6		       06		      .byte.b	%00000110
   4186  ffe7		       3e		      .byte.b	%00111110
   4187  ffe8		       66		      .byte.b	%01100110
   4188  ffe9		       66		      .byte.b	%01100110
   4189  ffea		       66		      .byte.b	%01100110
   4190  ffeb		       3c		      .byte.b	%00111100
   4191  ffec
   4192  ffec					      ifnconst	DPC_kernel_options
   4193  ffec
   4194  ffec		       00		      .byte.b	%00000000
   4195  ffed		       00		      .byte.b	%00000000
   4196  ffee		       00		      .byte.b	%00000000
   4197  ffef		       00		      .byte.b	%00000000
   4198  fff0		       00		      .byte.b	%00000000
   4199  fff1		       00		      .byte.b	%00000000
   4200  fff2		       00		      .byte.b	%00000000
   4201  fff3		       00		      .byte.b	%00000000
   4202  fff4
   4203  fff4					      endif
   4204  fff4
   4205  fff4					      endif
   4206  fff4
   4207  fff4				  -	      ifconst	ROM2k
   4208  fff4				  -	      ORG	$F7FC
   4209  fff4					      else
   4210  fff4				  -	      ifconst	bankswitch
   4211  fff4				  -	      if	bankswitch == 8
   4212  fff4				  -	      ORG	$2FF4-bscode_length
   4213  fff4				  -	      RORG	$FFF4-bscode_length
   4214  fff4				  -	      endif
   4215  fff4				  -	      if	bankswitch == 16
   4216  fff4				  -	      ORG	$4FF4-bscode_length
   4217  fff4				  -	      RORG	$FFF4-bscode_length
   4218  fff4				  -	      endif
   4219  fff4				  -	      if	bankswitch == 32
   4220  fff4				  -	      ORG	$8FF4-bscode_length
   4221  fff4				  -	      RORG	$FFF4-bscode_length
   4222  fff4				  -	      endif
   4223  fff4				  -	      if	bankswitch == 64
   4224  fff4				  -	      ORG	$10FE0-bscode_length
   4225  fff4				  -	      RORG	$1FFE0-bscode_length
   4226  fff4				  -	      endif
   4227  fff4					      else
   4228  fffc					      ORG	$FFFC
   4229  fffc					      endif
   4230  fffc					      endif
   4231  fffc							; Provided under the CC0 license. See the included LICENSE.txt for details.
   4232  fffc
   4233  fffc				  -	      ifconst	bankswitch
   4234  fffc				  -	      if	bankswitch == 8
   4235  fffc				  -	      ORG	$2FFC
   4236  fffc				  -	      RORG	$FFFC
   4237  fffc				  -	      endif
   4238  fffc				  -	      if	bankswitch == 16
   4239  fffc				  -	      ORG	$4FFC
   4240  fffc				  -	      RORG	$FFFC
   4241  fffc				  -	      endif
   4242  fffc				  -	      if	bankswitch == 32
   4243  fffc				  -	      ORG	$8FFC
   4244  fffc				  -	      RORG	$FFFC
   4245  fffc				  -	      endif
   4246  fffc				  -	      if	bankswitch == 64
   4247  fffc				  -	      ORG	$10FF0
   4248  fffc				  -	      RORG	$1FFF0
   4249  fffc				  -	      lda	$ffe0	; we use wasted space to assist stella with EF format auto-detection
   4250  fffc				  -	      ORG	$10FF8
   4251  fffc				  -	      RORG	$1FFF8
   4252  fffc				  -	      ifconst	superchip
   4253  fffc				  -	      .byte	"E","F","S","C"
   4254  fffc				  -	      else
   4255  fffc				  -	      .byte	"E","F","E","F"
   4256  fffc				  -	      endif
   4257  fffc				  -	      ORG	$10FFC
   4258  fffc				  -	      RORG	$1FFFC
   4259  fffc				  -	      endif
   4260  fffc					      else
   4261  fffc				  -	      ifconst	ROM2k
   4262  fffc				  -	      ORG	$F7FC
   4263  fffc					      else
   4264  fffc					      ORG	$FFFC
   4265  fffc					      endif
   4266  fffc					      endif
   4267  fffc		       00 f0		      .word.w	(start & $ffff)
   4268  fffe		       00 f0		      .word.w	(start & $ffff)
