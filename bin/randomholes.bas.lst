------- FILE d:\Batari Projects\RandomHoles\RandomHoles\randomholes.bas.asm LEVEL 1 PASS 3
      1  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  10000 ????
      3  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 2 PASS 3
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  10000 ????
      3  10000 ????						; VCS.H
      4  10000 ????						; Version 1.05, 13/November/2003
      5  10000 ????
      6  10000 ????		00 69	    VERSION_VCS =	105
      7  10000 ????
      8  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      9  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
     11  10000 ????						;
     12  10000 ????						; This file defines hardware registers and memory mapping for the
     13  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     14  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  10000 ????						; available at at http://www.atari2600.org/dasm
     16  10000 ????						;
     17  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     18  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     19  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     20  10000 ????						; with your views.  Please contribute, if you think you can improve this
     21  10000 ????						; file!
     22  10000 ????						;
     23  10000 ????						; Latest Revisions...
     24  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     25  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     26  10000 ????						;			    This will allow conditional code to verify VCS.H being
     27  10000 ????						;			    used for code assembly.
     28  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     29  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     30  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     31  10000 ????						;			 readability issue, and binary compatibility with disassembled
     32  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     33  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     34  10000 ????						;			 which was broken by the use of segments in this file, as
     35  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     36  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     37  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     38  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     39  10000 ????						;						   it is safe to leave it undefined, and the base address will
     40  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     41  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     42  10000 ????						;			  - register definitions are now generated through assignment
     43  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     44  10000 ????						;			    address architecture.
     45  10000 ????						; 1.0	22/MAR/2003		Initial release
     46  10000 ????
     47  10000 ????
     48  10000 ????						;-------------------------------------------------------------------------------
     49  10000 ????
     50  10000 ????						; TIA_BASE_ADDRESS
     51  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     52  10000 ????						; Normally 0, the base address should (externally, before including this file)
     53  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     54  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     55  10000 ????						; < $40 as a bankswitch.
     56  10000 ????
     57  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     58  10000 ????			   -TIA_BASE_ADDRESS =	0
     59  10000 ????				       ENDIF
     60  10000 ????
     61  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     62  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     63  10000 ????						; *OR* by declaring the label before including this file, eg:
     64  10000 ????						; TIA_BASE_ADDRESS = $40
     65  10000 ????						;   include "vcs.h"
     66  10000 ????
     67  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     68  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     69  10000 ????						; for the mirrored ROM hardware registers.
     70  10000 ????
     71  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     72  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     73  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     74  10000 ????
     75  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     76  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     77  10000 ????				       ENDIF
     78  10000 ????
     79  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     80  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     81  10000 ????				       ENDIF
     82  10000 ????
     83  10000 ????						;-------------------------------------------------------------------------------
     84  10000 ????
     85 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     86 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     87 U0000
     88 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     89 U0000
     90 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     91 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     92 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     93 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     94 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     95 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     96 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     97 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     98 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     99 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
    100 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
    101 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    102 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    103 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    104 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    105 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    106 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    107 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    108 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    109 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    110 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    111 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    112 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    113 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    114 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    115 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    116 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    117 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    118 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    119 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    120 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    121 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    122 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    123 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    124 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    125 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    126 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    127 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    128 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    129 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    130 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    131 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    132 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    133 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    134 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    135 U002d
    136 U002d							;-------------------------------------------------------------------------------
    137 U002d
    138 U000e ????				      SEG.U	TIA_REGISTERS_READ
    139 U0000					      ORG	TIA_BASE_READ_ADDRESS
    140 U0000
    141 U0000							;											bit 7	 bit 6
    142 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    143 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    144 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    145 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    146 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    147 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    148 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    149 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    150 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    151 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    152 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    153 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    154 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    155 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    156 U000e
    157 U000e							;-------------------------------------------------------------------------------
    158 U000e
    159 U0298 ????				      SEG.U	RIOT
    160 U0280					      ORG	$280
    161 U0280
    162 U0280							; RIOT MEMORY MAP
    163 U0280
    164 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    165 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    166 U0281
    167 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    168 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    169 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    170 U0284		       00	   INTIM      ds	1	; $284		Timer output
    171 U0285
    172 U0285		       00	   TIMINT     ds	1	; $285
    173 U0286
    174 U0286							; Unused/undefined registers ($285-$294)
    175 U0286
    176 U0286		       00		      ds	1	; $286
    177 U0287		       00		      ds	1	; $287
    178 U0288		       00		      ds	1	; $288
    179 U0289		       00		      ds	1	; $289
    180 U028a		       00		      ds	1	; $28A
    181 U028b		       00		      ds	1	; $28B
    182 U028c		       00		      ds	1	; $28C
    183 U028d		       00		      ds	1	; $28D
    184 U028e		       00		      ds	1	; $28E
    185 U028f		       00		      ds	1	; $28F
    186 U0290		       00		      ds	1	; $290
    187 U0291		       00		      ds	1	; $291
    188 U0292		       00		      ds	1	; $292
    189 U0293		       00		      ds	1	; $293
    190 U0294
    191 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    192 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    193 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    194 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    195 U0298
    196 U0298							;-------------------------------------------------------------------------------
    197 U0298							; The following required for back-compatibility with code which does not use
    198 U0298							; segments.
    199 U0298
    200  10000 ????				       SEG
    201  10000 ????
    202  10000 ????						; EOF
------- FILE d:\Batari Projects\RandomHoles\RandomHoles\randomholes.bas.asm
------- FILE macro.h LEVEL 2 PASS 3
      0  10000 ????				       include	"macro.h"
      1  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  10000 ????
      3  10000 ????						; MACRO.H
      4  10000 ????						; Version 1.05, 13/NOVEMBER/2003
      5  10000 ????
      6  10000 ????		00 69	    VERSION_MACRO =	105
      7  10000 ????
      8  10000 ????						;
      9  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
     11  10000 ????						;
     12  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     13  10000 ????						; It is distributed as a companion machine-specific support package
     14  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  10000 ????						; available at at http://www.atari2600.org/dasm
     16  10000 ????						;
     17  10000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     18  10000 ????						; contents, or would like to add something, please write to me
     19  10000 ????						; (atari2600@taswegian.com) with your contribution.
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						;
     23  10000 ????						; 1.05  14/NOV/2003	  - Added VERSION_MACRO equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify MACRO.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     27  10000 ????						;
     28  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     29  10000 ????						;
     30  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     31  10000 ????						;			   (standardised macro for vertical synch code)
     32  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     33  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     34  10000 ????						; 1.0	22/MAR/2003		Initial release
     35  10000 ????
     36  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     37  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     38  10000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     39  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     40  10000 ????						;   registers and require them to be defined first).
     41  10000 ????
     42  10000 ????						; Available macros...
     43  10000 ????						;   SLEEP n		 - sleep for n cycles
     44  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     45  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     46  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     47  10000 ????
     48  10000 ????						;-------------------------------------------------------------------------------
     49  10000 ????						; SLEEP duration
     50  10000 ????						; Original author: Thomas Jentzsch
     51  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     52  10000 ????						; useful for code where precise timing is required.
     53  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     54  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     55  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     56  10000 ????
     57  10000 ????				       MAC	sleep
     58  10000 ????			    .CYCLES    SET	{1}
     59  10000 ????
     60  10000 ????				       IF	.CYCLES < 2
     61  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     62  10000 ????				       ERR
     63  10000 ????				       ENDIF
     64  10000 ????
     65  10000 ????				       IF	.CYCLES & 1
     66  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     67  10000 ????				       nop	0
     68  10000 ????				       ELSE
     69  10000 ????				       bit	VSYNC
     70  10000 ????				       ENDIF
     71  10000 ????			    .CYCLES    SET	.CYCLES - 3
     72  10000 ????				       ENDIF
     73  10000 ????
     74  10000 ????				       REPEAT	.CYCLES / 2
     75  10000 ????				       nop
     76  10000 ????				       REPEND
     77  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     78  10000 ????
     79  10000 ????						;-------------------------------------------------------------------------------
     80  10000 ????						; VERTICAL_SYNC
     81  10000 ????						; Original author: Manuel Polik
     82  10000 ????						; Inserts the code required for a proper 3 scannline 
     83  10000 ????						; vertical sync sequence
     84  10000 ????						;
     85  10000 ????						; Note: Alters the accumulator
     86  10000 ????						;
     87  10000 ????						; IN:
     88  10000 ????						; OUT: A = 1
     89  10000 ????
     90  10000 ????				       MAC	vertical_sync
     91  10000 ????				       LDA	#$02	; A = VSYNC enable
     92  10000 ????				       STA	WSYNC	; Finish current line
     93  10000 ????				       STA	VSYNC	; Start vertical sync
     94  10000 ????				       STA	WSYNC	; 1st line vertical sync
     95  10000 ????				       STA	WSYNC	; 2nd line vertical sync
     96  10000 ????				       LSR		; A = VSYNC disable
     97  10000 ????				       STA	WSYNC	; 3rd line vertical sync
     98  10000 ????				       STA	VSYNC	; Stop vertical sync
     99  10000 ????				       ENDM
    100  10000 ????
    101  10000 ????						;-------------------------------------------------------------------------------
    102  10000 ????						; CLEAN_START
    103  10000 ????						; Original author: Andrew Davie
    104  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    105  10000 ????						; Sets stack pointer to $FF, and all registers to 0
    106  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    107  10000 ????						; Use as very first section of code on boot (ie: at reset)
    108  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    109  10000 ????
    110  10000 ????				       MAC	clean_start
    111  10000 ????				       sei
    112  10000 ????				       cld
    113  10000 ????
    114  10000 ????				       ldx	#0
    115  10000 ????				       txa
    116  10000 ????				       tay
    117  10000 ????			    .CLEAR_STACK dex
    118  10000 ????				       txs
    119  10000 ????				       pha
    120  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  10000 ????
    122  10000 ????				       ENDM
    123  10000 ????
    124  10000 ????						;-------------------------------------------------------
    125  10000 ????						; SET_POINTER
    126  10000 ????						; Original author: Manuel Rotschkar
    127  10000 ????						;
    128  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  10000 ????						;
    130  10000 ????						; Usage: SET_POINTER pointer, address
    131  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  10000 ????						;
    133  10000 ????						; Note: Alters the accumulator, NZ flags
    134  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  10000 ????						; IN 2: absolute address
    136  10000 ????
    137  10000 ????				       MAC	set_pointer
    138  10000 ????			    .POINTER   SET	{1}
    139  10000 ????			    .ADDRESS   SET	{2}
    140  10000 ????
    141  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  10000 ????				       STA	.POINTER	; Store in pointer
    143  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    144  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    145  10000 ????
    146  10000 ????				       ENDM
    147  10000 ????
    148  10000 ????						; EOF
------- FILE d:\Batari Projects\RandomHoles\RandomHoles\randomholes.bas.asm
------- FILE 2600basic.h LEVEL 2 PASS 3
      0  10000 ????				       include	"2600basic.h"
      1  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  10000 ????
      3  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 3 PASS 3
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  10000 ????
      3  10000 ????						; VCS.H
      4  10000 ????						; Version 1.05, 13/November/2003
      5  10000 ????
      6  10000 ????		00 69	    VERSION_VCS =	105
      7  10000 ????
      8  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      9  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
     11  10000 ????						;
     12  10000 ????						; This file defines hardware registers and memory mapping for the
     13  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     14  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  10000 ????						; available at at http://www.atari2600.org/dasm
     16  10000 ????						;
     17  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     18  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     19  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     20  10000 ????						; with your views.  Please contribute, if you think you can improve this
     21  10000 ????						; file!
     22  10000 ????						;
     23  10000 ????						; Latest Revisions...
     24  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     25  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     26  10000 ????						;			    This will allow conditional code to verify VCS.H being
     27  10000 ????						;			    used for code assembly.
     28  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     29  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     30  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     31  10000 ????						;			 readability issue, and binary compatibility with disassembled
     32  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     33  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     34  10000 ????						;			 which was broken by the use of segments in this file, as
     35  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     36  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     37  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     38  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     39  10000 ????						;						   it is safe to leave it undefined, and the base address will
     40  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     41  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     42  10000 ????						;			  - register definitions are now generated through assignment
     43  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     44  10000 ????						;			    address architecture.
     45  10000 ????						; 1.0	22/MAR/2003		Initial release
     46  10000 ????
     47  10000 ????
     48  10000 ????						;-------------------------------------------------------------------------------
     49  10000 ????
     50  10000 ????						; TIA_BASE_ADDRESS
     51  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     52  10000 ????						; Normally 0, the base address should (externally, before including this file)
     53  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     54  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     55  10000 ????						; < $40 as a bankswitch.
     56  10000 ????
     57  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     58  10000 ????			   -TIA_BASE_ADDRESS =	0
     59  10000 ????				       ENDIF
     60  10000 ????
     61  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     62  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     63  10000 ????						; *OR* by declaring the label before including this file, eg:
     64  10000 ????						; TIA_BASE_ADDRESS = $40
     65  10000 ????						;   include "vcs.h"
     66  10000 ????
     67  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     68  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     69  10000 ????						; for the mirrored ROM hardware registers.
     70  10000 ????
     71  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     72  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     73  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     74  10000 ????
     75  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     76  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     77  10000 ????				       ENDIF
     78  10000 ????
     79  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     80  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     81  10000 ????				       ENDIF
     82  10000 ????
     83  10000 ????						;-------------------------------------------------------------------------------
     84  10000 ????
     85 U002d					      SEG.U	TIA_REGISTERS_WRITE
     86 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     87 U0000
     88 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     89 U0000
     90 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     91 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     92 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     93 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     94 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     95 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     96 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     97 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     98 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     99 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
    100 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
    101 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    102 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    103 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    104 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    105 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    106 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    107 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    108 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    109 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    110 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    111 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    112 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    113 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    114 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    115 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    116 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    117 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    118 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    119 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    120 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    121 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    122 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    123 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    124 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    125 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    126 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    127 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    128 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    129 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    130 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    131 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    132 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    133 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    134 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    135 U002d
    136 U002d							;-------------------------------------------------------------------------------
    137 U002d
    138 U000e					      SEG.U	TIA_REGISTERS_READ
    139 U0000					      ORG	TIA_BASE_READ_ADDRESS
    140 U0000
    141 U0000							;											bit 7	 bit 6
    142 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    143 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    144 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    145 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    146 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    147 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    148 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    149 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    150 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    151 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    152 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    153 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    154 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    155 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    156 U000e
    157 U000e							;-------------------------------------------------------------------------------
    158 U000e
    159 U0298					      SEG.U	RIOT
    160 U0280					      ORG	$280
    161 U0280
    162 U0280							; RIOT MEMORY MAP
    163 U0280
    164 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    165 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    166 U0281
    167 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    168 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    169 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    170 U0284		       00	   INTIM      ds	1	; $284		Timer output
    171 U0285
    172 U0285		       00	   TIMINT     ds	1	; $285
    173 U0286
    174 U0286							; Unused/undefined registers ($285-$294)
    175 U0286
    176 U0286		       00		      ds	1	; $286
    177 U0287		       00		      ds	1	; $287
    178 U0288		       00		      ds	1	; $288
    179 U0289		       00		      ds	1	; $289
    180 U028a		       00		      ds	1	; $28A
    181 U028b		       00		      ds	1	; $28B
    182 U028c		       00		      ds	1	; $28C
    183 U028d		       00		      ds	1	; $28D
    184 U028e		       00		      ds	1	; $28E
    185 U028f		       00		      ds	1	; $28F
    186 U0290		       00		      ds	1	; $290
    187 U0291		       00		      ds	1	; $291
    188 U0292		       00		      ds	1	; $292
    189 U0293		       00		      ds	1	; $293
    190 U0294
    191 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    192 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    193 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    194 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    195 U0298
    196 U0298							;-------------------------------------------------------------------------------
    197 U0298							; The following required for back-compatibility with code which does not use
    198 U0298							; segments.
    199 U0298
    200  10000 ????				       SEG
    201  10000 ????
    202  10000 ????						; EOF
------- FILE 2600basic.h
------- FILE macro.h LEVEL 3 PASS 3
      0  10000 ????				       include	"macro.h"
      1  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  10000 ????
      3  10000 ????						; MACRO.H
      4  10000 ????						; Version 1.05, 13/NOVEMBER/2003
      5  10000 ????
      6  10000 ????		00 69	    VERSION_MACRO =	105
      7  10000 ????
      8  10000 ????						;
      9  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
     11  10000 ????						;
     12  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     13  10000 ????						; It is distributed as a companion machine-specific support package
     14  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  10000 ????						; available at at http://www.atari2600.org/dasm
     16  10000 ????						;
     17  10000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     18  10000 ????						; contents, or would like to add something, please write to me
     19  10000 ????						; (atari2600@taswegian.com) with your contribution.
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						;
     23  10000 ????						; 1.05  14/NOV/2003	  - Added VERSION_MACRO equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify MACRO.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     27  10000 ????						;
     28  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     29  10000 ????						;
     30  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     31  10000 ????						;			   (standardised macro for vertical synch code)
     32  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     33  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     34  10000 ????						; 1.0	22/MAR/2003		Initial release
     35  10000 ????
     36  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     37  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     38  10000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     39  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     40  10000 ????						;   registers and require them to be defined first).
     41  10000 ????
     42  10000 ????						; Available macros...
     43  10000 ????						;   SLEEP n		 - sleep for n cycles
     44  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     45  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     46  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     47  10000 ????
     48  10000 ????						;-------------------------------------------------------------------------------
     49  10000 ????						; SLEEP duration
     50  10000 ????						; Original author: Thomas Jentzsch
     51  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     52  10000 ????						; useful for code where precise timing is required.
     53  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     54  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     55  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     56  10000 ????
     57  10000 ????				       MAC	sleep
     58  10000 ????			    .CYCLES    SET	{1}
     59  10000 ????
     60  10000 ????				       IF	.CYCLES < 2
     61  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     62  10000 ????				       ERR
     63  10000 ????				       ENDIF
     64  10000 ????
     65  10000 ????				       IF	.CYCLES & 1
     66  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     67  10000 ????				       nop	0
     68  10000 ????				       ELSE
     69  10000 ????				       bit	VSYNC
     70  10000 ????				       ENDIF
     71  10000 ????			    .CYCLES    SET	.CYCLES - 3
     72  10000 ????				       ENDIF
     73  10000 ????
     74  10000 ????				       REPEAT	.CYCLES / 2
     75  10000 ????				       nop
     76  10000 ????				       REPEND
     77  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     78  10000 ????
     79  10000 ????						;-------------------------------------------------------------------------------
     80  10000 ????						; VERTICAL_SYNC
     81  10000 ????						; Original author: Manuel Polik
     82  10000 ????						; Inserts the code required for a proper 3 scannline 
     83  10000 ????						; vertical sync sequence
     84  10000 ????						;
     85  10000 ????						; Note: Alters the accumulator
     86  10000 ????						;
     87  10000 ????						; IN:
     88  10000 ????						; OUT: A = 1
     89  10000 ????
     90  10000 ????				       MAC	vertical_sync
     91  10000 ????				       LDA	#$02	; A = VSYNC enable
     92  10000 ????				       STA	WSYNC	; Finish current line
     93  10000 ????				       STA	VSYNC	; Start vertical sync
     94  10000 ????				       STA	WSYNC	; 1st line vertical sync
     95  10000 ????				       STA	WSYNC	; 2nd line vertical sync
     96  10000 ????				       LSR		; A = VSYNC disable
     97  10000 ????				       STA	WSYNC	; 3rd line vertical sync
     98  10000 ????				       STA	VSYNC	; Stop vertical sync
     99  10000 ????				       ENDM
    100  10000 ????
    101  10000 ????						;-------------------------------------------------------------------------------
    102  10000 ????						; CLEAN_START
    103  10000 ????						; Original author: Andrew Davie
    104  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    105  10000 ????						; Sets stack pointer to $FF, and all registers to 0
    106  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    107  10000 ????						; Use as very first section of code on boot (ie: at reset)
    108  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    109  10000 ????
    110  10000 ????				       MAC	clean_start
    111  10000 ????				       sei
    112  10000 ????				       cld
    113  10000 ????
    114  10000 ????				       ldx	#0
    115  10000 ????				       txa
    116  10000 ????				       tay
    117  10000 ????			    .CLEAR_STACK dex
    118  10000 ????				       txs
    119  10000 ????				       pha
    120  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  10000 ????
    122  10000 ????				       ENDM
    123  10000 ????
    124  10000 ????						;-------------------------------------------------------
    125  10000 ????						; SET_POINTER
    126  10000 ????						; Original author: Manuel Rotschkar
    127  10000 ????						;
    128  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  10000 ????						;
    130  10000 ????						; Usage: SET_POINTER pointer, address
    131  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  10000 ????						;
    133  10000 ????						; Note: Alters the accumulator, NZ flags
    134  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  10000 ????						; IN 2: absolute address
    136  10000 ????
    137  10000 ????				       MAC	set_pointer
    138  10000 ????			    .POINTER   SET	{1}
    139  10000 ????			    .ADDRESS   SET	{2}
    140  10000 ????
    141  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  10000 ????				       STA	.POINTER	; Store in pointer
    143  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    144  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    145  10000 ????
    146  10000 ????				       ENDM
    147  10000 ????
    148  10000 ????						; EOF
------- FILE 2600basic.h
------- FILE 2600basic_variable_redefs.h LEVEL 3 PASS 3
      0  10000 ????				       include	"2600basic_variable_redefs.h"
      1  10000 ????						; This file contains variable mapping and other information for the current project.
      2  10000 ????
      3  10000 ????		00 17	    musicData2_length =	.skipL0250-musicData2
      4  10000 ????
      5  10000 ????		00 17	    musicData1_length =	.skipL0249-musicData1
      6  10000 ????
      7  10000 ????		00 ed	    rand16     =	z
      8  10000 ????
      9  10000 ????		00 e6	    _cont_telas =	s
     10  10000 ????
     11  10000 ????		00 e5	    _cont_anima_morte =	r
     12  10000 ????
     13  10000 ????		00 e4	    _fases     =	q
     14  10000 ????
     15  10000 ????		00 e2	    _SC_Back   =	o
     16  10000 ????
     17  10000 ????		00 e1	    _animacao  =	n
     18  10000 ????
     19  10000 ????		00 e0	    _Ch1_Sound =	m
     20  10000 ????
     21  10000 ????		00 df	    _dificuldade =	l
     22  10000 ????
     23  10000 ????		00 de	    musicTimer =	k
     24  10000 ????
     25  10000 ????		00 dd	    _bit_supressores =	j
     26  10000 ????
     27  10000 ????		00 db	    musicPointer =	h
     28  10000 ????
     29  10000 ????		00 da	    _duracao_som1 =	g
     30  10000 ????
     31  10000 ????		00 d9	    _duracao_som0 =	f
     32  10000 ????
     33  10000 ????		00 d8	    _cont_escudo =	e
     34  10000 ????
     35  10000 ????		00 d4	    _Ch0_Sound =	a
     36  10000 ????
     37  10000 ????		00 01	    pfscore    =	1
     38  10000 ????
     39  10000 ????		00 01	    no_blank_lines =	1
------- FILE 2600basic.h
      7  10000 ????
      8  10000 ????		00 80	    player0x   =	$80
      9  10000 ????		00 81	    player1x   =	$81
     10  10000 ????		00 82	    missile0x  =	$82
     11  10000 ????		00 83	    missile1x  =	$83
     12  10000 ????		00 84	    ballx      =	$84
     13  10000 ????
     14  10000 ????		00 85	    objecty    =	$85
     15  10000 ????		00 85	    player0y   =	$85
     16  10000 ????		00 86	    player1y   =	$86
     17  10000 ????		00 87	    missile1height =	$87
     18  10000 ????		00 88	    missile1y  =	$88
     19  10000 ????		00 89	    bally      =	$89
     20  10000 ????
     21  10000 ????		00 87	    player1color =	$87	; replaces missile 1
     22  10000 ????
     23  10000 ????		00 8a	    player0pointer =	$8A	;uses $8A-$8B
     24  10000 ????		00 8a	    player0pointerlo =	$8A
     25  10000 ????		00 8b	    player0pointerhi =	$8B
     26  10000 ????		00 8c	    player1pointer =	$8C	; $8C-$8D
     27  10000 ????		00 8c	    player1pointerlo =	$8C
     28  10000 ????		00 8d	    player1pointerhi =	$8D
     29  10000 ????
     30  10000 ????		00 8e	    player0height =	$8E
     31  10000 ????		00 8f	    player1height =	$8F
     32  10000 ????		00 90	    missile0height =	$90
     33  10000 ????		00 91	    missile0y  =	$91
     34  10000 ????		00 92	    ballheight =	$92
     35  10000 ????
     36  10000 ????		00 90	    currentpaddle =	$90	; replaces missile 0 (and can't be used with playercolor)
     37  10000 ????		00 91	    paddle     =	$91	; replaces missile 0
     38  10000 ????		00 82	    player0colorstore =	$82	; replaces missile 0
     39  10000 ????		00 90	    player0color =	$90	; replaces missile 0
     40  10000 ????
     41  10000 ????		00 93	    score      =	$93	; $93-$95
     42  10000 ????		00 96	    scorepointers =	$96	; $96-$9B = 6 bytes
     43  10000 ????		00 9c	    temp1      =	$9C	;used by kernel.  can be used in program too, but
     44  10000 ????		00 9d	    temp2      =	$9D	;are obliterated when drawscreen is called.
     45  10000 ????		00 9e	    temp3      =	$9E
     46  10000 ????		00 9f	    temp4      =	$9F
     47  10000 ????		00 a0	    temp5      =	$A0
     48  10000 ????		00 a1	    temp6      =	$A1
     49  10000 ????
     50  10000 ????		00 a2	    rand       =	$A2
     51  10000 ????		00 a3	    scorecolor =	$A3
     52  10000 ????
     53  10000 ????		00 a4	    var0       =	$A4
     54  10000 ????		00 a5	    var1       =	$A5
     55  10000 ????		00 a6	    var2       =	$A6
     56  10000 ????		00 a7	    var3       =	$A7
     57  10000 ????		00 a8	    var4       =	$A8
     58  10000 ????		00 a9	    var5       =	$A9
     59  10000 ????		00 aa	    var6       =	$AA
     60  10000 ????		00 ab	    var7       =	$AB
     61  10000 ????		00 ac	    var8       =	$AC
     62  10000 ????		00 ad	    var9       =	$AD
     63  10000 ????		00 ae	    var10      =	$AE
     64  10000 ????		00 af	    var11      =	$AF
     65  10000 ????		00 b0	    var12      =	$B0
     66  10000 ????		00 b1	    var13      =	$B1
     67  10000 ????		00 b2	    var14      =	$B2
     68  10000 ????		00 b3	    var15      =	$B3
     69  10000 ????		00 b4	    var16      =	$B4
     70  10000 ????		00 b5	    var17      =	$B5
     71  10000 ????		00 b6	    var18      =	$B6
     72  10000 ????		00 b7	    var19      =	$B7
     73  10000 ????		00 b8	    var20      =	$B8
     74  10000 ????		00 b9	    var21      =	$B9
     75  10000 ????		00 ba	    var22      =	$BA
     76  10000 ????		00 bb	    var23      =	$BB
     77  10000 ????		00 bc	    var24      =	$BC
     78  10000 ????		00 bd	    var25      =	$BD
     79  10000 ????		00 be	    var26      =	$BE
     80  10000 ????		00 bf	    var27      =	$BF
     81  10000 ????		00 c0	    var28      =	$C0
     82  10000 ????		00 c1	    var29      =	$C1
     83  10000 ????		00 c2	    var30      =	$C2
     84  10000 ????		00 c3	    var31      =	$C3
     85  10000 ????		00 c4	    var32      =	$C4
     86  10000 ????		00 c5	    var33      =	$C5
     87  10000 ????		00 c6	    var34      =	$C6
     88  10000 ????		00 c7	    var35      =	$C7
     89  10000 ????		00 c8	    var36      =	$C8
     90  10000 ????		00 c9	    var37      =	$C9
     91  10000 ????		00 ca	    var38      =	$CA
     92  10000 ????		00 cb	    var39      =	$CB
     93  10000 ????		00 cc	    var40      =	$CC
     94  10000 ????		00 cd	    var41      =	$CD
     95  10000 ????		00 ce	    var42      =	$CE
     96  10000 ????		00 cf	    var43      =	$CF
     97  10000 ????		00 d0	    var44      =	$D0
     98  10000 ????		00 d1	    var45      =	$D1
     99  10000 ????		00 d2	    var46      =	$D2
    100  10000 ????		00 d3	    var47      =	$D3
    101  10000 ????
    102  10000 ????		00 d4	    A	       =	$d4
    103  10000 ????		00 d4	    a	       =	$d4
    104  10000 ????		00 d5	    B	       =	$d5
    105  10000 ????		00 d5	    b	       =	$d5
    106  10000 ????		00 d6	    C	       =	$d6
    107  10000 ????		00 d6	    c	       =	$d6
    108  10000 ????		00 d7	    D	       =	$d7
    109  10000 ????		00 d7	    d	       =	$d7
    110  10000 ????		00 d8	    E	       =	$d8
    111  10000 ????		00 d8	    e	       =	$d8
    112  10000 ????		00 d9	    F	       =	$d9
    113  10000 ????		00 d9	    f	       =	$d9
    114  10000 ????		00 da	    G	       =	$da
    115  10000 ????		00 da	    g	       =	$da
    116  10000 ????		00 db	    H	       =	$db
    117  10000 ????		00 db	    h	       =	$db
    118  10000 ????		00 dc	    I	       =	$dc
    119  10000 ????		00 dc	    i	       =	$dc
    120  10000 ????		00 dd	    J	       =	$dd
    121  10000 ????		00 dd	    j	       =	$dd
    122  10000 ????		00 de	    K	       =	$de
    123  10000 ????		00 de	    k	       =	$de
    124  10000 ????		00 df	    L	       =	$df
    125  10000 ????		00 df	    l	       =	$df
    126  10000 ????		00 e0	    M	       =	$e0
    127  10000 ????		00 e0	    m	       =	$e0
    128  10000 ????		00 e1	    N	       =	$e1
    129  10000 ????		00 e1	    n	       =	$e1
    130  10000 ????		00 e2	    O	       =	$e2
    131  10000 ????		00 e2	    o	       =	$e2
    132  10000 ????		00 e3	    P	       =	$e3
    133  10000 ????		00 e3	    p	       =	$e3
    134  10000 ????		00 e4	    Q	       =	$e4
    135  10000 ????		00 e4	    q	       =	$e4
    136  10000 ????		00 e5	    R	       =	$e5
    137  10000 ????		00 e5	    r	       =	$e5
    138  10000 ????		00 e6	    S	       =	$e6
    139  10000 ????		00 e6	    s	       =	$e6
    140  10000 ????		00 e7	    T	       =	$e7
    141  10000 ????		00 e7	    t	       =	$e7
    142  10000 ????		00 e8	    U	       =	$e8
    143  10000 ????		00 e8	    u	       =	$e8
    144  10000 ????		00 e9	    V	       =	$e9
    145  10000 ????		00 e9	    v	       =	$e9
    146  10000 ????		00 ea	    W	       =	$ea
    147  10000 ????		00 ea	    w	       =	$ea
    148  10000 ????		00 eb	    X	       =	$eb
    149  10000 ????		00 eb	    x	       =	$eb
    150  10000 ????		00 ec	    Y	       =	$ec
    151  10000 ????		00 ec	    y	       =	$ec
    152  10000 ????		00 ed	    Z	       =	$ed
    153  10000 ????		00 ed	    z	       =	$ed
    154  10000 ????
    155  10000 ????		00 ee	    temp7      =	$ee	; This is used to aid in bankswitching
    156  10000 ????		00 ef	    playfieldpos =	$ef
    157  10000 ????
    158  10000 ????						; available for other uses, or if unused, provide more stack space
    159  10000 ????
    160  10000 ????		00 f0	    aux1       =	$f0
    161  10000 ????		00 f1	    aux2       =	$f1
    162  10000 ????		00 f2	    aux3       =	$f2
    163  10000 ????		00 f3	    aux4       =	$f3
    164  10000 ????		00 f4	    aux5       =	$f4
    165  10000 ????		00 f5	    aux6       =	$f5
    166  10000 ????
    167  10000 ????						; playfield color/height pointers
    168  10000 ????		00 f0	    pfcolortable =	$f0	; and $d5
    169  10000 ????		00 f0	    pfheighttable =	$f0	; and $d5
    170  10000 ????						; the above pointers are the same because if color and height are both used together,
    171  10000 ????						; they must used absolute indexed and cannot use pointers
    172  10000 ????
    173  10000 ????		00 f2	    lifepointer =	$f2	; pointer to "lives" shape
    174  10000 ????						; upper 3 bits of $f2 contain the number of lives
    175  10000 ????		00 f4	    lifecolor  =	$f4
    176  10000 ????		00 f3	    lives      =	$f3	; # lives >> 5
    177  10000 ????		00 f5	    statusbarlength =	$f5	; only uses upper 5 bits; other bits free
    178  10000 ????
    179  10000 ????		00 f2	    pfscore1   =	$f2	; optional playfield bytes in score
    180  10000 ????		00 f3	    pfscore2   =	$f3
    181  10000 ????		00 f4	    pfscorecolor =	$f4
    182  10000 ????
    183  10000 ????		00 f6	    stack1     =	$f6
    184  10000 ????		00 f7	    stack2     =	$f7
    185  10000 ????		00 f8	    stack3     =	$f8
    186  10000 ????		00 f9	    stack4     =	$f9
    187  10000 ????						; the stack bytes above may be used in the kernel
    188  10000 ????						; stack = F6-F7, F8-F9, FA-FB, FC-FD, FE-FF
    189  10000 ????
    190  10000 ????				       MAC	return
    191  10000 ????				       ifnconst	bankswitch
    192  10000 ????				       rts
    193  10000 ????				       else
    194  10000 ????				       jmp	BS_return
    195  10000 ????				       endif
    196  10000 ????				       ENDM		; auto-return from either a regular or bankswitched module
    197  10000 ????
    198  10000 ????			   -	       ifconst	superchip
    199  10000 ????			   -playfieldbase =	$10D0
    200  10000 ????			   -	       include	superchip.h
    201  10000 ????				       else
    202  10000 ????		00 a4	    playfieldbase =	$A4
    203  10000 ????				       endif
    204  10000 ????
    205  10000 ????				       ifnconst	pfhalfwidth
    206  10000 ????		00 04	    pfwidth    =	4
    207  10000 ????		00 0e	    PF1L       =	PF1
    208  10000 ????		00 0f	    PF2L       =	PF2
    209  10000 ????		00 0e	    PF1R       =	PF1
    210  10000 ????		00 0f	    PF2R       =	PF2
    211  10000 ????		00 00	    pfadjust   =	0
    212  10000 ????			   -	       else
    213  10000 ????			   -pfwidth    =	2
    214  10000 ????			   -	       ifconst	pfcenter
    215  10000 ????			   -PF1L       =	$3F	; no effect
    216  10000 ????			   -PF2L       =	PF2
    217  10000 ????			   -PF1R       =	$3F
    218  10000 ????			   -PF2R       =	PF2	; no effect
    219  10000 ????			   -pfadjust   =	1
    220  10000 ????			   -	       else
    221  10000 ????			   -PF1L       =	PF1
    222  10000 ????			   -PF2L       =	PF2
    223  10000 ????			   -PF1R       =	$3F	; no effect
    224  10000 ????			   -PF2R       =	$3F	; no effect
    225  10000 ????			   -pfadjust   =	0
    226  10000 ????			   -	       endif
    227  10000 ????				       endif
    228  10000 ????
    229  10000 ????						; define playfield start based on height
    230  10000 ????				       ifnconst	pfres
    231  10000 ????		00 a4	    playfield  =	playfieldbase
    232  10000 ????			   -	       else
    233  10000 ????			   -playfield  =	playfieldbase-(pfres-12*(4/pfwidth))*pfwidth
    234  10000 ????				       endif
------- FILE d:\Batari Projects\RandomHoles\RandomHoles\randomholes.bas.asm
------- FILE 2600basic_variable_redefs.h LEVEL 2 PASS 3
      0  10000 ????				       include	"2600basic_variable_redefs.h"
      1  10000 ????						; This file contains variable mapping and other information for the current project.
      2  10000 ????
      3  10000 ????		00 17	    musicData2_length =	.skipL0250-musicData2
      4  10000 ????
      5  10000 ????		00 17	    musicData1_length =	.skipL0249-musicData1
      6  10000 ????
      7  10000 ????		00 ed	    rand16     =	z
      8  10000 ????
      9  10000 ????		00 e6	    _cont_telas =	s
     10  10000 ????
     11  10000 ????		00 e5	    _cont_anima_morte =	r
     12  10000 ????
     13  10000 ????		00 e4	    _fases     =	q
     14  10000 ????
     15  10000 ????		00 e2	    _SC_Back   =	o
     16  10000 ????
     17  10000 ????		00 e1	    _animacao  =	n
     18  10000 ????
     19  10000 ????		00 e0	    _Ch1_Sound =	m
     20  10000 ????
     21  10000 ????		00 df	    _dificuldade =	l
     22  10000 ????
     23  10000 ????		00 de	    musicTimer =	k
     24  10000 ????
     25  10000 ????		00 dd	    _bit_supressores =	j
     26  10000 ????
     27  10000 ????		00 db	    musicPointer =	h
     28  10000 ????
     29  10000 ????		00 da	    _duracao_som1 =	g
     30  10000 ????
     31  10000 ????		00 d9	    _duracao_som0 =	f
     32  10000 ????
     33  10000 ????		00 d8	    _cont_escudo =	e
     34  10000 ????
     35  10000 ????		00 d4	    _Ch0_Sound =	a
     36  10000 ????
     37  10000 ????		00 01	    pfscore    =	1
     38  10000 ????
     39  10000 ????		00 01	    no_blank_lines =	1
------- FILE d:\Batari Projects\RandomHoles\RandomHoles\randomholes.bas.asm
      8  10000 ????			   -	       ifconst	bankswitch
      9  10000 ????			   -	       if	bankswitch == 8
     10  10000 ????			   -	       ORG	$1000
     11  10000 ????			   -	       RORG	$D000
     12  10000 ????			   -	       endif
     13  10000 ????			   -	       if	bankswitch == 16
     14  10000 ????			   -	       ORG	$1000
     15  10000 ????			   -	       RORG	$9000
     16  10000 ????			   -	       endif
     17  10000 ????			   -	       if	bankswitch == 32
     18  10000 ????			   -	       ORG	$1000
     19  10000 ????			   -	       RORG	$1000
     20  10000 ????			   -	       endif
     21  10000 ????			   -	       if	bankswitch == 64
     22  10000 ????			   -	       ORG	$1000
     23  10000 ????			   -	       RORG	$1000
     24  10000 ????			   -	       endif
     25  10000 ????				       else
     26  f000					      ORG	$F000
     27  f000					      endif
     28  f000
     29  f000				  -	      ifconst	bankswitch_hotspot
     30  f000				  -	      if	bankswitch_hotspot = $083F	; 0840 bankswitching hotspot
     31  f000				  -	      .byte	0	; stop unexpected bankswitches
     32  f000				  -	      endif
     33  f000					      endif
     34  f000							; Provided under the CC0 license. See the included LICENSE.txt for details.
     35  f000
     36  f000				   start
     37  f000		       78		      sei
     38  f001		       d8		      cld
     39  f002		       a0 00		      ldy	#0
     40  f004		       a5 d0		      lda	$D0
     41  f006		       c9 2c		      cmp	#$2C	;check RAM location #1
     42  f008		       d0 07		      bne	MachineIs2600
     43  f00a		       a5 d1		      lda	$D1
     44  f00c		       c9 a9		      cmp	#$A9	;check RAM location #2
     45  f00e		       d0 01		      bne	MachineIs2600
     46  f010		       88		      dey
     47  f011				   MachineIs2600
     48  f011		       a2 00		      ldx	#0
     49  f013		       8a		      txa
     50  f014				   clearmem
     51  f014		       e8		      inx
     52  f015		       9a		      txs
     53  f016		       48		      pha
     54  f017		       d0 fb		      bne	clearmem
     55  f019		       84 9c		      sty	temp1
     56  f01b					      ifnconst	multisprite
     57  f01b				  -	      ifconst	pfrowheight
     58  f01b				  -	      lda	#pfrowheight
     59  f01b					      else
     60  f01b				  -	      ifconst	pfres
     61  f01b				  -	      lda	#(96/pfres)
     62  f01b					      else
     63  f01b		       a9 08		      lda	#8
     64  f01d					      endif
     65  f01d					      endif
     66  f01d		       85 ef		      sta	playfieldpos
     67  f01f					      endif
     68  f01f		       a2 05		      ldx	#5
     69  f021				   initscore
     70  f021		       a9 9c		      lda	#<scoretable
     71  f023		       95 96		      sta	scorepointers,x
     72  f025		       ca		      dex
     73  f026		       10 f9		      bpl	initscore
     74  f028		       a9 01		      lda	#1
     75  f02a		       85 0a		      sta	CTRLPF
     76  f02c		       0d 84 02 	      ora	INTIM
     77  f02f		       85 a2		      sta	rand
     78  f031
     79  f031				  -	      ifconst	multisprite
     80  f031				  -	      jsr	multisprite_setup
     81  f031					      endif
     82  f031
     83  f031					      ifnconst	bankswitch
     84  f031		       4c 6c f4 	      jmp	game
     85  f034				  -	      else
     86  f034				  -	      lda	#>(game-1)
     87  f034				  -	      pha
     88  f034				  -	      lda	#<(game-1)
     89  f034				  -	      pha
     90  f034				  -	      pha
     91  f034				  -	      pha
     92  f034				  -	      ldx	#1
     93  f034				  -	      jmp	BS_jsr
     94  f034					      endif
     95  f034							; Provided under the CC0 license. See the included LICENSE.txt for details.
     96  f034
     97  f034							; This is a 2-line kernel!
     98  f034					      ifnconst	vertical_reflect
     99  f034				   kernel
    100  f034					      endif
    101  f034		       85 02		      sta	WSYNC
    102  f036		       a9 ff		      lda	#255
    103  f038		       8d 96 02 	      sta	TIM64T
    104  f03b
    105  f03b		       a9 01		      lda	#1
    106  f03d		       85 27		      sta	VDELBL
    107  f03f		       85 25		      sta	VDELP0
    108  f041		       a6 92		      ldx	ballheight
    109  f043		       e8		      inx
    110  f044		       e8		      inx
    111  f045		       86 9f		      stx	temp4
    112  f047		       a5 86		      lda	player1y
    113  f049		       85 9e		      sta	temp3
    114  f04b
    115  f04b				  -	      ifconst	shakescreen
    116  f04b				  -	      jsr	doshakescreen
    117  f04b					      else
    118  f04b		       a6 90		      ldx	missile0height
    119  f04d		       e8		      inx
    120  f04e					      endif
    121  f04e
    122  f04e		       e8		      inx
    123  f04f		       86 f6		      stx	stack1
    124  f051
    125  f051		       a5 89		      lda	bally
    126  f053		       85 f7		      sta	stack2
    127  f055
    128  f055		       a5 85		      lda	player0y
    129  f057		       a2 00		      ldx	#0
    130  f059		       85 02		      sta	WSYNC
    131  f05b		       86 1b		      stx	GRP0
    132  f05d		       86 1c		      stx	GRP1
    133  f05f		       86 0e		      stx	PF1L
    134  f061		       86 0f		      stx	PF2
    135  f063		       86 2c		      stx	CXCLR
    136  f065				  -	      ifconst	readpaddle
    137  f065				  -	      stx	paddle
    138  f065					      else
      0  f065					      sleep	3
      1  f065				   .CYCLES    SET	3
      2  f065
      3  f065				  -	      IF	.CYCLES < 2
      4  f065				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f065				  -	      ERR
      6  f065					      ENDIF
      7  f065
      8  f065					      IF	.CYCLES & 1
      9  f065					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f065		       04 00		      nop	0
     11  f067				  -	      ELSE
     12  f067				  -	      bit	VSYNC
     13  f067					      ENDIF
     14  f067				   .CYCLES    SET	.CYCLES - 3
     15  f067					      ENDIF
     16  f067
     17  f067				  -	      REPEAT	.CYCLES / 2
     18  f067				  -	      nop
     19  f067					      REPEND
    140  f067					      endif
    141  f067
    142  f067		       95 9d		      sta	temp2,x
    143  f069
    144  f069							;store these so they can be retrieved later
    145  f069					      ifnconst	pfres
    146  f069		       a2 54		      ldx	#128-44+(4-pfwidth)*12
    147  f06b				  -	      else
    148  f06b				  -	      ldx	#132-pfres*pfwidth
    149  f06b					      endif
    150  f06b
    151  f06b		       c6 85		      dec	player0y
    152  f06d
    153  f06d		       a5 91		      lda	missile0y
    154  f06f		       85 a0		      sta	temp5
    155  f071		       a5 88		      lda	missile1y
    156  f073		       85 a1		      sta	temp6
    157  f075
    158  f075		       a5 ef		      lda	playfieldpos
    159  f077		       85 9c		      sta	temp1
    160  f079
    161  f079				  -	      ifconst	pfrowheight
    162  f079				  -	      lda	#pfrowheight+2
    163  f079					      else
    164  f079					      ifnconst	pfres
    165  f079		       a9 0a		      lda	#10
    166  f07b				  -	      else
    167  f07b				  -	      lda	#(96/pfres)+2	; try to come close to the real size
    168  f07b					      endif
    169  f07b					      endif
    170  f07b		       18		      clc
    171  f07c		       e5 ef		      sbc	playfieldpos
    172  f07e		       85 ef		      sta	playfieldpos
    173  f080		       4c a8 f0 	      jmp	.startkernel
    174  f083
    175  f083				   .skipDrawP0
    176  f083		       a9 00		      lda	#0
    177  f085		       a8		      tay
    178  f086		       4c d6 f0 	      jmp	.continueP0
    179  f089
    180  f089				   .skipDrawP1
    181  f089		       a9 00		      lda	#0
    182  f08b		       a8		      tay
    183  f08c		       4c b2 f0 	      jmp	.continueP1
    184  f08f
    185  f08f				   .kerloop		; enter at cycle 59??
    186  f08f
    187  f08f				   continuekernel
      0  f08f					      sleep	2
      1  f08f				   .CYCLES    SET	2
      2  f08f
      3  f08f				  -	      IF	.CYCLES < 2
      4  f08f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f08f				  -	      ERR
      6  f08f					      ENDIF
      7  f08f
      8  f08f				  -	      IF	.CYCLES & 1
      9  f08f				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f08f				  -	      nop	0
     11  f08f				  -	      ELSE
     12  f08f				  -	      bit	VSYNC
     13  f08f				  -	      ENDIF
     14  f08f				  -.CYCLES    SET	.CYCLES - 3
     15  f08f					      ENDIF
     16  f08f
     17  f08f					      REPEAT	.CYCLES / 2
     18  f08f		       ea		      nop
     19  f090					      REPEND
    189  f090				   continuekernel2
    190  f090		       a5 92		      lda	ballheight
    191  f092
    192  f092				  -	      ifconst	pfres
    193  f092				  -	      ldy	playfield+pfres*pfwidth-132,x
    194  f092				  -	      sty	PF1L	;3
    195  f092				  -	      ldy	playfield+pfres*pfwidth-131-pfadjust,x
    196  f092				  -	      sty	PF2L	;3
    197  f092				  -	      ldy	playfield+pfres*pfwidth-129,x
    198  f092				  -	      sty	PF1R	; 3 too early?
    199  f092				  -	      ldy	playfield+pfres*pfwidth-130-pfadjust,x
    200  f092				  -	      sty	PF2R	;3
    201  f092					      else
    202  f092		       b4 50		      ldy	playfield-48+pfwidth*12+44-128,x
    203  f094		       84 0e		      sty	PF1L	;3
    204  f096		       b4 51		      ldy	playfield-48+pfwidth*12+45-128-pfadjust,x	;4
    205  f098		       84 0f		      sty	PF2L	;3
    206  f09a		       b4 53		      ldy	playfield-48+pfwidth*12+47-128,x	;4
    207  f09c		       84 0e		      sty	PF1R	; 3 too early?
    208  f09e		       b4 52		      ldy	playfield-48+pfwidth*12+46-128-pfadjust,x	;4
    209  f0a0		       84 0f		      sty	PF2R	;3
    210  f0a2					      endif
    211  f0a2
    212  f0a2							; should be playfield+$38 for width=2
    213  f0a2
    214  f0a2		       c7 89		      dcp	bally
    215  f0a4		       2a		      rol
    216  f0a5		       2a		      rol
    217  f0a6							; rol
    218  f0a6							; rol
    219  f0a6				   goback
    220  f0a6		       85 1f		      sta	ENABL
    221  f0a8				   .startkernel
    222  f0a8		       a5 8f		      lda	player1height	;3
    223  f0aa		       c7 86		      dcp	player1y	;5
    224  f0ac		       90 db		      bcc	.skipDrawP1	;2
    225  f0ae		       a4 86		      ldy	player1y	;3
    226  f0b0		       b1 8c		      lda	(player1pointer),y	;5; player0pointer must be selected carefully by the compiler
    227  f0b2							; so it doesn't cross a page boundary!
    228  f0b2
    229  f0b2				   .continueP1
    230  f0b2		       85 1c		      sta	GRP1	;3
    231  f0b4
    232  f0b4					      ifnconst	player1colors
    233  f0b4		       a5 87		      lda	missile1height	;3
    234  f0b6		       c7 88		      dcp	missile1y	;5
    235  f0b8		       2a		      rol		;2
    236  f0b9		       2a		      rol		;2
    237  f0ba		       85 1e		      sta	ENAM1	;3
    238  f0bc				  -	      else
    239  f0bc				  -	      lda	(player1color),y
    240  f0bc				  -	      sta	COLUP1
    241  f0bc				  -	      ifnconst	playercolors
    242  f0bc				  -	      sleep	7
    243  f0bc				  -	      else
    244  f0bc				  -	      lda.w	player0colorstore
    245  f0bc				  -	      sta	COLUP0
    246  f0bc				  -	      endif
    247  f0bc					      endif
    248  f0bc
    249  f0bc				  -	      ifconst	pfres
    250  f0bc				  -	      lda	playfield+pfres*pfwidth-132,x
    251  f0bc				  -	      sta	PF1L	;3
    252  f0bc				  -	      lda	playfield+pfres*pfwidth-131-pfadjust,x
    253  f0bc				  -	      sta	PF2L	;3
    254  f0bc				  -	      lda	playfield+pfres*pfwidth-129,x
    255  f0bc				  -	      sta	PF1R	; 3 too early?
    256  f0bc				  -	      lda	playfield+pfres*pfwidth-130-pfadjust,x
    257  f0bc				  -	      sta	PF2R	;3
    258  f0bc					      else
    259  f0bc		       b5 50		      lda	playfield-48+pfwidth*12+44-128,x	;4
    260  f0be		       85 0e		      sta	PF1L	;3
    261  f0c0		       b5 51		      lda	playfield-48+pfwidth*12+45-128-pfadjust,x	;4
    262  f0c2		       85 0f		      sta	PF2L	;3
    263  f0c4		       b5 53		      lda	playfield-48+pfwidth*12+47-128,x	;4
    264  f0c6		       85 0e		      sta	PF1R	; 3 too early?
    265  f0c8		       b5 52		      lda	playfield-48+pfwidth*12+46-128-pfadjust,x	;4
    266  f0ca		       85 0f		      sta	PF2R	;3
    267  f0cc					      endif
    268  f0cc							; sleep 3
    269  f0cc
    270  f0cc		       a5 8e		      lda	player0height
    271  f0ce		       c7 85		      dcp	player0y
    272  f0d0		       90 b1		      bcc	.skipDrawP0
    273  f0d2		       a4 85		      ldy	player0y
    274  f0d4		       b1 8a		      lda	(player0pointer),y
    275  f0d6				   .continueP0
    276  f0d6		       85 1b		      sta	GRP0
    277  f0d8
    278  f0d8				  -	      ifnconst	no_blank_lines
    279  f0d8				  -	      ifnconst	playercolors
    280  f0d8				  -	      lda	missile0height	;3
    281  f0d8				  -	      dcp	missile0y	;5
    282  f0d8				  -	      sbc	stack1
    283  f0d8				  -	      sta	ENAM0	;3
    284  f0d8				  -	      else
    285  f0d8				  -	      lda	(player0color),y
    286  f0d8				  -	      sta	player0colorstore
    287  f0d8				  -	      sleep	6
    288  f0d8				  -	      endif
    289  f0d8				  -	      dec	temp1
    290  f0d8				  -	      bne	continuekernel
    291  f0d8					      else
    292  f0d8		       c6 9c		      dec	temp1
    293  f0da		       f0 09		      beq	altkernel2
    294  f0dc				  -	      ifconst	readpaddle
    295  f0dc				  -	      ldy	currentpaddle
    296  f0dc				  -	      lda	INPT0,y
    297  f0dc				  -	      bpl	noreadpaddle
    298  f0dc				  -	      inc	paddle
    299  f0dc				  -	      jmp	continuekernel2
    300  f0dc				  -noreadpaddle
    301  f0dc				  -	      sleep	2
    302  f0dc				  -	      jmp	continuekernel
    303  f0dc					      else
    304  f0dc					      ifnconst	playercolors
    305  f0dc				  -	      ifconst	PFcolors
    306  f0dc				  -	      txa
    307  f0dc				  -	      tay
    308  f0dc				  -	      lda	(pfcolortable),y
    309  f0dc				  -	      ifnconst	backgroundchange
    310  f0dc				  -	      sta	COLUPF
    311  f0dc				  -	      else
    312  f0dc				  -	      sta	COLUBK
    313  f0dc				  -	      endif
    314  f0dc				  -	      jmp	continuekernel
    315  f0dc					      else
    316  f0dc				  -	      ifconst	kernelmacrodef
    317  f0dc				  -	      kernelmacro
    318  f0dc					      else
      0  f0dc					      sleep	12
      1  f0dc				   .CYCLES    SET	12
      2  f0dc
      3  f0dc				  -	      IF	.CYCLES < 2
      4  f0dc				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0dc				  -	      ERR
      6  f0dc					      ENDIF
      7  f0dc
      8  f0dc				  -	      IF	.CYCLES & 1
      9  f0dc				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0dc				  -	      nop	0
     11  f0dc				  -	      ELSE
     12  f0dc				  -	      bit	VSYNC
     13  f0dc				  -	      ENDIF
     14  f0dc				  -.CYCLES    SET	.CYCLES - 3
     15  f0dc					      ENDIF
     16  f0dc
     17  f0dc					      REPEAT	.CYCLES / 2
     18  f0dc		       ea		      nop
     17  f0dc					      REPEND
     18  f0dd		       ea		      nop
     17  f0dd					      REPEND
     18  f0de		       ea		      nop
     17  f0de					      REPEND
     18  f0df		       ea		      nop
     17  f0df					      REPEND
     18  f0e0		       ea		      nop
     17  f0e0					      REPEND
     18  f0e1		       ea		      nop
     19  f0e2					      REPEND
    320  f0e2					      endif
    321  f0e2					      endif
    322  f0e2				  -	      else
    323  f0e2				  -	      lda	(player0color),y
    324  f0e2				  -	      sta	player0colorstore
    325  f0e2				  -	      sleep	4
    326  f0e2					      endif
    327  f0e2		       4c 8f f0 	      jmp	continuekernel
    328  f0e5					      endif
    329  f0e5				   altkernel2
    330  f0e5		       8a		      txa
    331  f0e6					      ifnconst	vertical_reflect
    332  f0e6		       cb fc		      sbx	#256-pfwidth
    333  f0e8				  -	      else
    334  f0e8				  -	      sbx	#256-pfwidth/2
    335  f0e8					      endif
    336  f0e8		       30 1b		      bmi	lastkernelline
    337  f0ea				  -	      ifconst	pfrowheight
    338  f0ea				  -	      lda	#pfrowheight
    339  f0ea					      else
    340  f0ea					      ifnconst	pfres
    341  f0ea		       a9 08		      lda	#8
    342  f0ec				  -	      else
    343  f0ec				  -	      lda	#(96/pfres)	; try to come close to the real size
    344  f0ec					      endif
    345  f0ec					      endif
    346  f0ec		       85 9c		      sta	temp1
    347  f0ee		       4c 8f f0 	      jmp	continuekernel
    348  f0f1					      endif
    349  f0f1
    350  f0f1				   altkernel
    351  f0f1
    352  f0f1				  -	      ifconst	PFmaskvalue
    353  f0f1				  -	      lda	#PFmaskvalue
    354  f0f1					      else
    355  f0f1		       a9 00		      lda	#0
    356  f0f3					      endif
    357  f0f3		       85 0e		      sta	PF1L
    358  f0f5		       85 0f		      sta	PF2
    359  f0f7
    360  f0f7
    361  f0f7							;sleep 3
    362  f0f7
    363  f0f7							;28 cycles to fix things
    364  f0f7							;minus 11=17
    365  f0f7
    366  f0f7							; lax temp4
    367  f0f7							; clc
    368  f0f7		       8a		      txa
    369  f0f8					      ifnconst	vertical_reflect
    370  f0f8		       cb fc		      sbx	#256-pfwidth
    371  f0fa				  -	      else
    372  f0fa				  -	      sbx	#256-pfwidth/2
    373  f0fa					      endif
    374  f0fa
    375  f0fa		       30 09		      bmi	lastkernelline
    376  f0fc
    377  f0fc				  -	      ifconst	PFcolorandheight
    378  f0fc				  -	      ifconst	pfres
    379  f0fc				  -	      ldy	playfieldcolorandheight-131+pfres*pfwidth,x
    380  f0fc				  -	      else
    381  f0fc				  -	      ldy	playfieldcolorandheight-87,x
    382  f0fc				  -	      endif
    383  f0fc				  -	      ifnconst	backgroundchange
    384  f0fc				  -	      sty	COLUPF
    385  f0fc				  -	      else
    386  f0fc				  -	      sty	COLUBK
    387  f0fc				  -	      endif
    388  f0fc				  -	      ifconst	pfres
    389  f0fc				  -	      lda	playfieldcolorandheight-132+pfres*pfwidth,x
    390  f0fc				  -	      else
    391  f0fc				  -	      lda	playfieldcolorandheight-88,x
    392  f0fc				  -	      endif
    393  f0fc				  -	      sta.w	temp1
    394  f0fc					      endif
    395  f0fc				  -	      ifconst	PFheights
    396  f0fc				  -	      lsr
    397  f0fc				  -	      lsr
    398  f0fc				  -	      tay
    399  f0fc				  -	      lda	(pfheighttable),y
    400  f0fc				  -	      sta.w	temp1
    401  f0fc					      endif
    402  f0fc				  -	      ifconst	PFcolors
    403  f0fc				  -	      tay
    404  f0fc				  -	      lda	(pfcolortable),y
    405  f0fc				  -	      ifnconst	backgroundchange
    406  f0fc				  -	      sta	COLUPF
    407  f0fc				  -	      else
    408  f0fc				  -	      sta	COLUBK
    409  f0fc				  -	      endif
    410  f0fc				  -	      ifconst	pfrowheight
    411  f0fc				  -	      lda	#pfrowheight
    412  f0fc				  -	      else
    413  f0fc				  -	      ifnconst	pfres
    414  f0fc				  -	      lda	#8
    415  f0fc				  -	      else
    416  f0fc				  -	      lda	#(96/pfres)	; try to come close to the real size
    417  f0fc				  -	      endif
    418  f0fc				  -	      endif
    419  f0fc				  -	      sta	temp1
    420  f0fc					      endif
    421  f0fc					      ifnconst	PFcolorandheight
    422  f0fc					      ifnconst	PFcolors
    423  f0fc					      ifnconst	PFheights
    424  f0fc				  -	      ifnconst	no_blank_lines
    425  f0fc				  -			; read paddle 0
    426  f0fc				  -			; lo-res paddle read
    427  f0fc				  -			; bit INPT0
    428  f0fc				  -			; bmi paddleskipread
    429  f0fc				  -			; inc paddle0
    430  f0fc				  -			;donepaddleskip
    431  f0fc				  -	      sleep	10
    432  f0fc				  -	      ifconst	pfrowheight
    433  f0fc				  -	      lda	#pfrowheight
    434  f0fc				  -	      else
    435  f0fc				  -	      ifnconst	pfres
    436  f0fc				  -	      lda	#8
    437  f0fc				  -	      else
    438  f0fc				  -	      lda	#(96/pfres)	; try to come close to the real size
    439  f0fc				  -	      endif
    440  f0fc				  -	      endif
    441  f0fc				  -	      sta	temp1
    442  f0fc					      endif
    443  f0fc					      endif
    444  f0fc					      endif
    445  f0fc					      endif
    446  f0fc
    447  f0fc
    448  f0fc		       a5 92		      lda	ballheight
    449  f0fe		       c7 89		      dcp	bally
    450  f100		       e5 9f		      sbc	temp4
    451  f102
    452  f102
    453  f102		       4c a6 f0 	      jmp	goback
    454  f105
    455  f105
    456  f105				  -	      ifnconst	no_blank_lines
    457  f105				  -lastkernelline
    458  f105				  -	      ifnconst	PFcolors
    459  f105				  -	      sleep	10
    460  f105				  -	      else
    461  f105				  -	      ldy	#124
    462  f105				  -	      lda	(pfcolortable),y
    463  f105				  -	      sta	COLUPF
    464  f105				  -	      endif
    465  f105				  -
    466  f105				  -	      ifconst	PFheights
    467  f105				  -	      ldx	#1
    468  f105				  -			;sleep 4
    469  f105				  -	      sleep	3	; this was over 1 cycle
    470  f105				  -	      else
    471  f105				  -	      ldx	playfieldpos
    472  f105				  -			;sleep 3
    473  f105				  -	      sleep	2	; this was over 1 cycle
    474  f105				  -	      endif
    475  f105				  -
    476  f105				  -	      jmp	enterlastkernel
    477  f105				  -
    478  f105					      else
    479  f105				   lastkernelline
    480  f105
    481  f105				  -	      ifconst	PFheights
    482  f105				  -	      ldx	#1
    483  f105				  -			;sleep 5
    484  f105				  -	      sleep	4	; this was over 1 cycle
    485  f105					      else
    486  f105		       a6 ef		      ldx	playfieldpos
    487  f107							;sleep 4
      0  f107					      sleep	3	; this was over 1 cycle
      1  f107				   .CYCLES    SET	3
      2  f107
      3  f107				  -	      IF	.CYCLES < 2
      4  f107				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f107				  -	      ERR
      6  f107					      ENDIF
      7  f107
      8  f107					      IF	.CYCLES & 1
      9  f107					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f107		       04 00		      nop	0
     11  f109				  -	      ELSE
     12  f109				  -	      bit	VSYNC
     13  f109					      ENDIF
     14  f109				   .CYCLES    SET	.CYCLES - 3
     15  f109					      ENDIF
     16  f109
     17  f109				  -	      REPEAT	.CYCLES / 2
     18  f109				  -	      nop
     19  f109					      REPEND
    489  f109					      endif
    490  f109
    491  f109		       e0 00		      cpx	#0
    492  f10b		       d0 0a		      bne	.enterfromNBL
    493  f10d		       4c 78 f1 	      jmp	no_blank_lines_bailout
    494  f110					      endif
    495  f110
    496  f110				  -	      if	((<*)>$d5)
    497  f110				  -	      align	256
    498  f110					      endif
    499  f110							; this is a kludge to prevent page wrapping - fix!!!
    500  f110
    501  f110				   .skipDrawlastP1
    502  f110		       a9 00		      lda	#0
    503  f112		       a8		      tay		; added so we don't cross a page
    504  f113		       4c 3d f1 	      jmp	.continuelastP1
    505  f116
    506  f116				   .endkerloop		; enter at cycle 59??
    507  f116
    508  f116		       ea		      nop
    509  f117
    510  f117				   .enterfromNBL
    511  f117				  -	      ifconst	pfres
    512  f117				  -	      ldy.w	playfield+pfres*pfwidth-4
    513  f117				  -	      sty	PF1L	;3
    514  f117				  -	      ldy.w	playfield+pfres*pfwidth-3-pfadjust
    515  f117				  -	      sty	PF2L	;3
    516  f117				  -	      ldy.w	playfield+pfres*pfwidth-1
    517  f117				  -	      sty	PF1R	; possibly too early?
    518  f117				  -	      ldy.w	playfield+pfres*pfwidth-2-pfadjust
    519  f117				  -	      sty	PF2R	;3
    520  f117					      else
    521  f117		       ac d0 00 	      ldy.w	playfield-48+pfwidth*12+44
    522  f11a		       84 0e		      sty	PF1L	;3
    523  f11c		       ac d1 00 	      ldy.w	playfield-48+pfwidth*12+45-pfadjust
    524  f11f		       84 0f		      sty	PF2L	;3
    525  f121		       ac d3 00 	      ldy.w	playfield-48+pfwidth*12+47
    526  f124		       84 0e		      sty	PF1R	; possibly too early?
    527  f126		       ac d2 00 	      ldy.w	playfield-48+pfwidth*12+46-pfadjust
    528  f129		       84 0f		      sty	PF2R	;3
    529  f12b					      endif
    530  f12b
    531  f12b				   enterlastkernel
    532  f12b		       a5 92		      lda	ballheight
    533  f12d
    534  f12d							; tya
    535  f12d		       c7 89		      dcp	bally
    536  f12f							; sleep 4
    537  f12f
    538  f12f							; sbc stack3
    539  f12f		       2a		      rol
    540  f130		       2a		      rol
    541  f131		       85 1f		      sta	ENABL
    542  f133
    543  f133		       a5 8f		      lda	player1height	;3
    544  f135		       c7 86		      dcp	player1y	;5
    545  f137		       90 d7		      bcc	.skipDrawlastP1
    546  f139		       a4 86		      ldy	player1y	;3
    547  f13b		       b1 8c		      lda	(player1pointer),y	;5; player0pointer must be selected carefully by the compiler
    548  f13d							; so it doesn't cross a page boundary!
    549  f13d
    550  f13d				   .continuelastP1
    551  f13d		       85 1c		      sta	GRP1	;3
    552  f13f
    553  f13f					      ifnconst	player1colors
    554  f13f		       a5 87		      lda	missile1height	;3
    555  f141		       c7 88		      dcp	missile1y	;5
    556  f143				  -	      else
    557  f143				  -	      lda	(player1color),y
    558  f143				  -	      sta	COLUP1
    559  f143					      endif
    560  f143
    561  f143		       ca		      dex
    562  f144							;dec temp4 ; might try putting this above PF writes
    563  f144		       f0 34		      beq	endkernel
    564  f146
    565  f146
    566  f146				  -	      ifconst	pfres
    567  f146				  -	      ldy.w	playfield+pfres*pfwidth-4
    568  f146				  -	      sty	PF1L	;3
    569  f146				  -	      ldy.w	playfield+pfres*pfwidth-3-pfadjust
    570  f146				  -	      sty	PF2L	;3
    571  f146				  -	      ldy.w	playfield+pfres*pfwidth-1
    572  f146				  -	      sty	PF1R	; possibly too early?
    573  f146				  -	      ldy.w	playfield+pfres*pfwidth-2-pfadjust
    574  f146				  -	      sty	PF2R	;3
    575  f146					      else
    576  f146		       ac d0 00 	      ldy.w	playfield-48+pfwidth*12+44
    577  f149		       84 0e		      sty	PF1L	;3
    578  f14b		       ac d1 00 	      ldy.w	playfield-48+pfwidth*12+45-pfadjust
    579  f14e		       84 0f		      sty	PF2L	;3
    580  f150		       ac d3 00 	      ldy.w	playfield-48+pfwidth*12+47
    581  f153		       84 0e		      sty	PF1R	; possibly too early?
    582  f155		       ac d2 00 	      ldy.w	playfield-48+pfwidth*12+46-pfadjust
    583  f158		       84 0f		      sty	PF2R	;3
    584  f15a					      endif
    585  f15a
    586  f15a					      ifnconst	player1colors
    587  f15a		       2a		      rol		;2
    588  f15b		       2a		      rol		;2
    589  f15c		       85 1e		      sta	ENAM1	;3
    590  f15e				  -	      else
    591  f15e				  -	      ifnconst	playercolors
    592  f15e				  -	      sleep	7
    593  f15e				  -	      else
    594  f15e				  -	      lda.w	player0colorstore
    595  f15e				  -	      sta	COLUP0
    596  f15e				  -	      endif
    597  f15e					      endif
    598  f15e
    599  f15e		       ad 8e 00 	      lda.w	player0height
    600  f161		       c7 85		      dcp	player0y
    601  f163		       90 0d		      bcc	.skipDrawlastP0
    602  f165		       a4 85		      ldy	player0y
    603  f167		       b1 8a		      lda	(player0pointer),y
    604  f169				   .continuelastP0
    605  f169		       85 1b		      sta	GRP0
    606  f16b
    607  f16b
    608  f16b
    609  f16b				  -	      ifnconst	no_blank_lines
    610  f16b				  -	      lda	missile0height	;3
    611  f16b				  -	      dcp	missile0y	;5
    612  f16b				  -	      sbc	stack1
    613  f16b				  -	      sta	ENAM0	;3
    614  f16b				  -	      jmp	.endkerloop
    615  f16b					      else
    616  f16b				  -	      ifconst	readpaddle
    617  f16b				  -	      ldy	currentpaddle
    618  f16b				  -	      lda	INPT0,y
    619  f16b				  -	      bpl	noreadpaddle2
    620  f16b				  -	      inc	paddle
    621  f16b				  -	      jmp	.endkerloop
    622  f16b				  -noreadpaddle2
    623  f16b				  -	      sleep	4
    624  f16b				  -	      jmp	.endkerloop
    625  f16b					      else		; no_blank_lines and no paddle reading
    626  f16b		       68		      pla
    627  f16c		       48		      pha		; 14 cycles in 4 bytes
    628  f16d		       68		      pla
    629  f16e		       48		      pha
    630  f16f							; sleep 14
    631  f16f		       4c 16 f1 	      jmp	.endkerloop
    632  f172					      endif
    633  f172					      endif
    634  f172
    635  f172
    636  f172							; ifconst donepaddleskip
    637  f172							;paddleskipread
    638  f172							; this is kind of lame, since it requires 4 cycles from a page boundary crossing
    639  f172							; plus we get a lo-res paddle read
    640  f172							; bmi donepaddleskip
    641  f172							; endif
    642  f172
    643  f172				   .skipDrawlastP0
    644  f172		       a9 00		      lda	#0
    645  f174		       a8		      tay
    646  f175		       4c 69 f1 	      jmp	.continuelastP0
    647  f178
    648  f178					      ifconst	no_blank_lines
    649  f178				   no_blank_lines_bailout
    650  f178		       a2 00		      ldx	#0
    651  f17a					      endif
    652  f17a
    653  f17a				   endkernel
    654  f17a							; 6 digit score routine
    655  f17a		       86 0e		      stx	PF1
    656  f17c		       86 0f		      stx	PF2
    657  f17e		       86 0d		      stx	PF0
    658  f180		       18		      clc
    659  f181
    660  f181				  -	      ifconst	pfrowheight
    661  f181				  -	      lda	#pfrowheight+2
    662  f181					      else
    663  f181					      ifnconst	pfres
    664  f181		       a9 0a		      lda	#10
    665  f183				  -	      else
    666  f183				  -	      lda	#(96/pfres)+2	; try to come close to the real size
    667  f183					      endif
    668  f183					      endif
    669  f183
    670  f183		       e5 ef		      sbc	playfieldpos
    671  f185		       85 ef		      sta	playfieldpos
    672  f187		       8a		      txa
    673  f188
    674  f188				  -	      ifconst	shakescreen
    675  f188				  -	      bit	shakescreen
    676  f188				  -	      bmi	noshakescreen2
    677  f188				  -	      ldx	#$3D
    678  f188				  -noshakescreen2
    679  f188					      endif
    680  f188
    681  f188		       95 02		      sta	WSYNC,x
    682  f18a
    683  f18a							; STA WSYNC ;first one, need one more
    684  f18a		       85 0b		      sta	REFP0
    685  f18c		       85 0c		      sta	REFP1
    686  f18e		       85 1b		      STA	GRP0
    687  f190		       85 1c		      STA	GRP1
    688  f192							; STA PF1
    689  f192							; STA PF2
    690  f192		       85 2b		      sta	HMCLR
    691  f194		       85 1d		      sta	ENAM0
    692  f196		       85 1e		      sta	ENAM1
    693  f198		       85 1f		      sta	ENABL
    694  f19a
    695  f19a		       a5 9d		      lda	temp2	;restore variables that were obliterated by kernel
    696  f19c		       85 85		      sta	player0y
    697  f19e		       a5 9e		      lda	temp3
    698  f1a0		       85 86		      sta	player1y
    699  f1a2					      ifnconst	player1colors
    700  f1a2		       a5 a1		      lda	temp6
    701  f1a4		       85 88		      sta	missile1y
    702  f1a6					      endif
    703  f1a6					      ifnconst	playercolors
    704  f1a6					      ifnconst	readpaddle
    705  f1a6		       a5 a0		      lda	temp5
    706  f1a8		       85 91		      sta	missile0y
    707  f1aa					      endif
    708  f1aa					      endif
    709  f1aa		       a5 f7		      lda	stack2
    710  f1ac		       85 89		      sta	bally
    711  f1ae
    712  f1ae							; strangely, this isn't required any more. might have
    713  f1ae							; resulted from the no_blank_lines score bounce fix
    714  f1ae							;ifconst no_blank_lines
    715  f1ae							;sta WSYNC
    716  f1ae							;endif
    717  f1ae
    718  f1ae		       ad 84 02 	      lda	INTIM
    719  f1b1		       18		      clc
    720  f1b2					      ifnconst	vblank_time
    721  f1b2		       69 8e		      adc	#43+12+87
    722  f1b4				  -	      else
    723  f1b4				  -	      adc	#vblank_time+12+87
    724  f1b4				  -
    725  f1b4					      endif
    726  f1b4							; sta WSYNC
    727  f1b4		       8d 96 02 	      sta	TIM64T
    728  f1b7
    729  f1b7					      ifconst	minikernel
    730  f1b7		       20 2a fd 	      jsr	minikernel
    731  f1ba					      endif
    732  f1ba
    733  f1ba							; now reassign temp vars for score pointers
    734  f1ba
    735  f1ba							; score pointers contain:
    736  f1ba							; score1-5: lo1,lo2,lo3,lo4,lo5,lo6
    737  f1ba							; swap lo2->temp1
    738  f1ba							; swap lo4->temp3
    739  f1ba							; swap lo6->temp5
    740  f1ba					      ifnconst	noscore
    741  f1ba		       a5 97		      lda	scorepointers+1
    742  f1bc							; ldy temp1
    743  f1bc		       85 9c		      sta	temp1
    744  f1be							; sty scorepointers+1
    745  f1be
    746  f1be		       a5 99		      lda	scorepointers+3
    747  f1c0							; ldy temp3
    748  f1c0		       85 9e		      sta	temp3
    749  f1c2							; sty scorepointers+3
    750  f1c2
    751  f1c2
    752  f1c2		       85 2b		      sta	HMCLR
    753  f1c4		       ba		      tsx
    754  f1c5		       86 f6		      stx	stack1
    755  f1c7		       a2 e0		      ldx	#$E0
    756  f1c9		       86 20		      stx	HMP0
    757  f1cb
    758  f1cb		       a5 a3		      LDA	scorecolor
    759  f1cd		       85 06		      STA	COLUP0
    760  f1cf		       85 07		      STA	COLUP1
    761  f1d1				  -	      ifconst	scorefade
    762  f1d1				  -	      STA	stack2
    763  f1d1					      endif
    764  f1d1					      ifconst	pfscore
    765  f1d1		       a5 f4		      lda	pfscorecolor
    766  f1d3		       85 08		      sta	COLUPF
    767  f1d5					      endif
    768  f1d5		       85 02		      sta	WSYNC
    769  f1d7		       a2 00		      ldx	#0
    770  f1d9		       86 1b		      STx	GRP0
    771  f1db		       86 1c		      STx	GRP1	; seems to be needed because of vdel
    772  f1dd
    773  f1dd		       a5 9b		      lda	scorepointers+5
    774  f1df							; ldy temp5
    775  f1df		       95 a0		      sta	temp5,x
    776  f1e1							; sty scorepointers+5
    777  f1e1		       a9 ff		      lda	#>scoretable
    778  f1e3		       85 97		      sta	scorepointers+1
    779  f1e5		       85 99		      sta	scorepointers+3
    780  f1e7		       85 9b		      sta	scorepointers+5
    781  f1e9		       85 9d		      sta	temp2
    782  f1eb		       85 9f		      sta	temp4
    783  f1ed		       85 a1		      sta	temp6
    784  f1ef		       a0 07		      LDY	#7
    785  f1f1		       84 25		      STY	VDELP0
    786  f1f3		       85 10		      STA	RESP0
    787  f1f5		       85 11		      STA	RESP1
    788  f1f7
    789  f1f7
    790  f1f7		       a9 03		      LDA	#$03
    791  f1f9		       85 04		      STA	NUSIZ0
    792  f1fb		       85 05		      STA	NUSIZ1
    793  f1fd		       85 26		      STA	VDELP1
    794  f1ff		       a9 f0		      LDA	#$F0
    795  f201		       85 21		      STA	HMP1
    796  f203		       b1 96		      lda	(scorepointers),y
    797  f205		       85 1b		      sta	GRP0
    798  f207		       85 2a		      STA	HMOVE	; cycle 73 ?
    799  f209		       4c 15 f2 	      jmp	beginscore
    800  f20c
    801  f20c
    802  f20c				  -	      if	((<*)>$d4)
    803  f20c				  -	      align	256	; kludge that potentially wastes space! should be fixed!
    804  f20c					      endif
    805  f20c
    806  f20c				   loop2
    807  f20c		       b1 96		      lda	(scorepointers),y	;+5 68 204
    808  f20e		       85 1b		      sta	GRP0	;+3 71 213 D1 -- -- --
    809  f210					      ifconst	pfscore
    810  f210		       ad f2 00 	      lda.w	pfscore1
    811  f213		       85 0e		      sta	PF1
    812  f215				  -	      else
    813  f215				  -	      ifconst	scorefade
    814  f215				  -	      sleep	2
    815  f215				  -	      dec	stack2	; decrement the temporary scorecolor
    816  f215				  -	      else
    817  f215				  -	      sleep	7
    818  f215				  -	      endif
    819  f215					      endif
    820  f215							; cycle 0
    821  f215				   beginscore
    822  f215		       b1 9e		      lda	(scorepointers+$8),y	;+5 5 15
    823  f217		       85 1c		      sta	GRP1	;+3 8 24 D1 D1 D2 --
    824  f219		       b1 9c		      lda	(scorepointers+$6),y	;+5 13 39
    825  f21b		       85 1b		      sta	GRP0	;+3 16 48 D3 D1 D2 D2
    826  f21d		       b3 98		      lax	(scorepointers+$2),y	;+5 29 87
    827  f21f		       9a		      txs
    828  f220		       b3 9a		      lax	(scorepointers+$4),y	;+5 36 108
    829  f222				  -	      ifconst	scorefade
    830  f222				  -	      lda	stack2
    831  f222					      else
      0  f222					      sleep	3
      1  f222				   .CYCLES    SET	3
      2  f222
      3  f222				  -	      IF	.CYCLES < 2
      4  f222				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f222				  -	      ERR
      6  f222					      ENDIF
      7  f222
      8  f222					      IF	.CYCLES & 1
      9  f222					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f222		       04 00		      nop	0
     11  f224				  -	      ELSE
     12  f224				  -	      bit	VSYNC
     13  f224					      ENDIF
     14  f224				   .CYCLES    SET	.CYCLES - 3
     15  f224					      ENDIF
     16  f224
     17  f224				  -	      REPEAT	.CYCLES / 2
     18  f224				  -	      nop
     19  f224					      REPEND
    833  f224					      endif
    834  f224
    835  f224					      ifconst	pfscore
    836  f224		       a5 f3		      lda	pfscore2
    837  f226		       85 0e		      sta	PF1
    838  f228				  -	      else
    839  f228				  -	      ifconst	scorefade
    840  f228				  -	      sta	COLUP0
    841  f228				  -	      sta	COLUP1
    842  f228				  -	      else
    843  f228				  -	      sleep	6
    844  f228				  -	      endif
    845  f228					      endif
    846  f228
    847  f228		       b1 a0		      lda	(scorepointers+$A),y	;+5 21 63
    848  f22a		       86 1c		      stx	GRP1	;+3 44 132 D3 D3 D4 D2!
    849  f22c		       ba		      tsx
    850  f22d		       86 1b		      stx	GRP0	;+3 47 141 D5 D3! D4 D4
    851  f22f		       85 1c		      sta	GRP1	;+3 50 150 D5 D5 D6 D4!
    852  f231		       84 1b		      sty	GRP0	;+3 53 159 D4* D5! D6 D6
    853  f233		       88		      dey
    854  f234		       10 d6		      bpl	loop2	;+2 60 180
    855  f236
    856  f236		       a6 f6		      ldx	stack1
    857  f238		       9a		      txs
    858  f239							; lda scorepointers+1
    859  f239		       a4 9c		      ldy	temp1
    860  f23b							; sta temp1
    861  f23b		       84 97		      sty	scorepointers+1
    862  f23d
    863  f23d		       a9 00		      LDA	#0
    864  f23f		       85 0e		      sta	PF1
    865  f241		       85 1b		      STA	GRP0
    866  f243		       85 1c		      STA	GRP1
    867  f245		       85 25		      STA	VDELP0
    868  f247		       85 26		      STA	VDELP1	;do we need these
    869  f249		       85 04		      STA	NUSIZ0
    870  f24b		       85 05		      STA	NUSIZ1
    871  f24d
    872  f24d							; lda scorepointers+3
    873  f24d		       a4 9e		      ldy	temp3
    874  f24f							; sta temp3
    875  f24f		       84 99		      sty	scorepointers+3
    876  f251
    877  f251							; lda scorepointers+5
    878  f251		       a4 a0		      ldy	temp5
    879  f253							; sta temp5
    880  f253		       84 9b		      sty	scorepointers+5
    881  f255					      endif		;noscore
    882  f255		       a9 c2		      LDA	#%11000010
    883  f257		       85 02		      sta	WSYNC
    884  f259		       85 01		      STA	VBLANK
      0  f25b					      RETURN
      1  f25b					      ifnconst	bankswitch
      2  f25b		       60		      rts
      3  f25c				  -	      else
      4  f25c				  -	      jmp	BS_return
      5  f25c					      endif
    886  f25c
    887  f25c				  -	      ifconst	shakescreen
    888  f25c				  -doshakescreen
    889  f25c				  -	      bit	shakescreen
    890  f25c				  -	      bmi	noshakescreen
    891  f25c				  -	      sta	WSYNC
    892  f25c				  -noshakescreen
    893  f25c				  -	      ldx	missile0height
    894  f25c				  -	      inx
    895  f25c				  -	      rts
    896  f25c					      endif
    897  f25c
    898  f25c							; Provided under the CC0 license. See the included LICENSE.txt for details.
    899  f25c
    900  f25c							; playfield drawing routines
    901  f25c							; you get a 32x12 bitmapped display in a single color :)
    902  f25c							; 0-31 and 0-11
    903  f25c
    904  f25c				   pfclear		; clears playfield - or fill with pattern
    905  f25c				  -	      ifconst	pfres
    906  f25c				  -	      ldx	#pfres*pfwidth-1
    907  f25c					      else
    908  f25c		       a2 2f		      ldx	#47-(4-pfwidth)*12	; will this work?
    909  f25e					      endif
    910  f25e				   pfclear_loop
    911  f25e					      ifnconst	superchip
    912  f25e		       95 a4		      sta	playfield,x
    913  f260				  -	      else
    914  f260				  -	      sta	playfield-128,x
    915  f260					      endif
    916  f260		       ca		      dex
    917  f261		       10 fb		      bpl	pfclear_loop
      0  f263					      RETURN
      1  f263					      ifnconst	bankswitch
      2  f263		       60		      rts
      3  f264				  -	      else
      4  f264				  -	      jmp	BS_return
      5  f264					      endif
    919  f264
    920  f264				   setuppointers
    921  f264		       86 9d		      stx	temp2	; store on.off.flip value
    922  f266		       aa		      tax		; put x-value in x 
    923  f267		       4a		      lsr
    924  f268		       4a		      lsr
    925  f269		       4a		      lsr		; divide x pos by 8 
    926  f26a		       85 9c		      sta	temp1
    927  f26c		       98		      tya
    928  f26d		       0a		      asl
    929  f26e					      if	pfwidth=4
    930  f26e		       0a		      asl		; multiply y pos by 4
    931  f26f					      endif		; else multiply by 2
    932  f26f		       18		      clc
    933  f270		       65 9c		      adc	temp1	; add them together to get actual memory location offset
    934  f272		       a8		      tay		; put the value in y
    935  f273		       a5 9d		      lda	temp2	; restore on.off.flip value
    936  f275		       60		      rts
    937  f276
    938  f276				   pfread
    939  f276							;x=xvalue, y=yvalue
    940  f276		       20 64 f2 	      jsr	setuppointers
    941  f279		       bd de f2 	      lda	setbyte,x
    942  f27c		       39 a4 00 	      and	playfield,y
    943  f27f		       5d de f2 	      eor	setbyte,x
    944  f282							; beq readzero
    945  f282							; lda #1
    946  f282							; readzero
      0  f282					      RETURN
      1  f282					      ifnconst	bankswitch
      2  f282		       60		      rts
      3  f283				  -	      else
      4  f283				  -	      jmp	BS_return
      5  f283					      endif
    948  f283
    949  f283				   pfpixel
    950  f283							;x=xvalue, y=yvalue, a=0,1,2
    951  f283		       20 64 f2 	      jsr	setuppointers
    952  f286
    953  f286				  -	      ifconst	bankswitch
    954  f286				  -	      lda	temp2	; load on.off.flip value (0,1, or 2)
    955  f286				  -	      beq	pixelon_r	; if "on" go to on
    956  f286				  -	      lsr
    957  f286				  -	      bcs	pixeloff_r	; value is 1 if true
    958  f286				  -	      lda	playfield,y	; if here, it's "flip"
    959  f286				  -	      eor	setbyte,x
    960  f286				  -	      ifconst	superchip
    961  f286				  -	      sta	playfield-128,y
    962  f286				  -	      else
    963  f286				  -	      sta	playfield,y
    964  f286				  -	      endif
    965  f286				  -	      RETURN
    966  f286				  -pixelon_r
    967  f286				  -	      lda	playfield,y
    968  f286				  -	      ora	setbyte,x
    969  f286				  -	      ifconst	superchip
    970  f286				  -	      sta	playfield-128,y
    971  f286				  -	      else
    972  f286				  -	      sta	playfield,y
    973  f286				  -	      endif
    974  f286				  -	      RETURN
    975  f286				  -pixeloff_r
    976  f286				  -	      lda	setbyte,x
    977  f286				  -	      eor	#$ff
    978  f286				  -	      and	playfield,y
    979  f286				  -	      ifconst	superchip
    980  f286				  -	      sta	playfield-128,y
    981  f286				  -	      else
    982  f286				  -	      sta	playfield,y
    983  f286				  -	      endif
    984  f286				  -	      RETURN
    985  f286				  -
    986  f286					      else
    987  f286		       4c b7 f2 	      jmp	plotpoint
    988  f289					      endif
    989  f289
    990  f289				   pfhline
    991  f289							;x=xvalue, y=yvalue, a=0,1,2, temp3=endx
    992  f289		       20 64 f2 	      jsr	setuppointers
    993  f28c		       4c 96 f2 	      jmp	noinc
    994  f28f				   keepgoing
    995  f28f		       e8		      inx
    996  f290		       8a		      txa
    997  f291		       29 07		      and	#7
    998  f293		       d0 01		      bne	noinc
    999  f295		       c8		      iny
   1000  f296				   noinc
   1001  f296		       20 b7 f2 	      jsr	plotpoint
   1002  f299		       e4 9e		      cpx	temp3
   1003  f29b		       30 f2		      bmi	keepgoing
      0  f29d					      RETURN
      1  f29d					      ifnconst	bankswitch
      2  f29d		       60		      rts
      3  f29e				  -	      else
      4  f29e				  -	      jmp	BS_return
      5  f29e					      endif
   1005  f29e
   1006  f29e				   pfvline
   1007  f29e							;x=xvalue, y=yvalue, a=0,1,2, temp3=endx
   1008  f29e		       20 64 f2 	      jsr	setuppointers
   1009  f2a1		       84 9c		      sty	temp1	; store memory location offset
   1010  f2a3		       e6 9e		      inc	temp3	; increase final x by 1 
   1011  f2a5		       a5 9e		      lda	temp3
   1012  f2a7		       0a		      asl
   1013  f2a8					      if	pfwidth=4
   1014  f2a8		       0a		      asl		; multiply by 4
   1015  f2a9					      endif		; else multiply by 2
   1016  f2a9		       85 9e		      sta	temp3	; store it
   1017  f2ab							; Thanks to Michael Rideout for fixing a bug in this code
   1018  f2ab							; right now, temp1=y=starting memory location, temp3=final
   1019  f2ab							; x should equal original x value
   1020  f2ab				   keepgoingy
   1021  f2ab		       20 b7 f2 	      jsr	plotpoint
   1022  f2ae		       c8		      iny
   1023  f2af		       c8		      iny
   1024  f2b0					      if	pfwidth=4
   1025  f2b0		       c8		      iny
   1026  f2b1		       c8		      iny
   1027  f2b2					      endif
   1028  f2b2		       c4 9e		      cpy	temp3
   1029  f2b4		       30 f5		      bmi	keepgoingy
      0  f2b6					      RETURN
      1  f2b6					      ifnconst	bankswitch
      2  f2b6		       60		      rts
      3  f2b7				  -	      else
      4  f2b7				  -	      jmp	BS_return
      5  f2b7					      endif
   1031  f2b7
   1032  f2b7				   plotpoint
   1033  f2b7		       a5 9d		      lda	temp2	; load on.off.flip value (0,1, or 2)
   1034  f2b9		       f0 0d		      beq	pixelon	; if "on" go to on
   1035  f2bb		       4a		      lsr
   1036  f2bc		       b0 14		      bcs	pixeloff	; value is 1 if true
   1037  f2be		       b9 a4 00 	      lda	playfield,y	; if here, it's "flip"
   1038  f2c1		       5d de f2 	      eor	setbyte,x
   1039  f2c4				  -	      ifconst	superchip
   1040  f2c4				  -	      sta	playfield-128,y
   1041  f2c4					      else
   1042  f2c4		       99 a4 00 	      sta	playfield,y
   1043  f2c7					      endif
   1044  f2c7		       60		      rts
   1045  f2c8				   pixelon
   1046  f2c8		       b9 a4 00 	      lda	playfield,y
   1047  f2cb		       1d de f2 	      ora	setbyte,x
   1048  f2ce				  -	      ifconst	superchip
   1049  f2ce				  -	      sta	playfield-128,y
   1050  f2ce					      else
   1051  f2ce		       99 a4 00 	      sta	playfield,y
   1052  f2d1					      endif
   1053  f2d1		       60		      rts
   1054  f2d2				   pixeloff
   1055  f2d2		       bd de f2 	      lda	setbyte,x
   1056  f2d5		       49 ff		      eor	#$ff
   1057  f2d7		       39 a4 00 	      and	playfield,y
   1058  f2da				  -	      ifconst	superchip
   1059  f2da				  -	      sta	playfield-128,y
   1060  f2da					      else
   1061  f2da		       99 a4 00 	      sta	playfield,y
   1062  f2dd					      endif
   1063  f2dd		       60		      rts
   1064  f2de
   1065  f2de				   setbyte
   1066  f2de					      ifnconst	pfcenter
   1067  f2de		       80		      .byte.b	$80
   1068  f2df		       40		      .byte.b	$40
   1069  f2e0		       20		      .byte.b	$20
   1070  f2e1		       10		      .byte.b	$10
   1071  f2e2		       08		      .byte.b	$08
   1072  f2e3		       04		      .byte.b	$04
   1073  f2e4		       02		      .byte.b	$02
   1074  f2e5		       01		      .byte.b	$01
   1075  f2e6					      endif
   1076  f2e6		       01		      .byte.b	$01
   1077  f2e7		       02		      .byte.b	$02
   1078  f2e8		       04		      .byte.b	$04
   1079  f2e9		       08		      .byte.b	$08
   1080  f2ea		       10		      .byte.b	$10
   1081  f2eb		       20		      .byte.b	$20
   1082  f2ec		       40		      .byte.b	$40
   1083  f2ed		       80		      .byte.b	$80
   1084  f2ee		       80		      .byte.b	$80
   1085  f2ef		       40		      .byte.b	$40
   1086  f2f0		       20		      .byte.b	$20
   1087  f2f1		       10		      .byte.b	$10
   1088  f2f2		       08		      .byte.b	$08
   1089  f2f3		       04		      .byte.b	$04
   1090  f2f4		       02		      .byte.b	$02
   1091  f2f5		       01		      .byte.b	$01
   1092  f2f6		       01		      .byte.b	$01
   1093  f2f7		       02		      .byte.b	$02
   1094  f2f8		       04		      .byte.b	$04
   1095  f2f9		       08		      .byte.b	$08
   1096  f2fa		       10		      .byte.b	$10
   1097  f2fb		       20		      .byte.b	$20
   1098  f2fc		       40		      .byte.b	$40
   1099  f2fd		       80		      .byte.b	$80
   1100  f2fe							; Provided under the CC0 license. See the included LICENSE.txt for details.
   1101  f2fe
   1102  f2fe				   pfscroll		;(a=0 left, 1 right, 2 up, 4 down, 6=upup, 12=downdown)
   1103  f2fe		       d0 13		      bne	notleft
   1104  f300							;left
   1105  f300				  -	      ifconst	pfres
   1106  f300				  -	      ldx	#pfres*4
   1107  f300					      else
   1108  f300		       a2 30		      ldx	#48
   1109  f302					      endif
   1110  f302				   leftloop
   1111  f302		       b5 a3		      lda	playfield-1,x
   1112  f304		       4a		      lsr
   1113  f305
   1114  f305				  -	      ifconst	superchip
   1115  f305				  -	      lda	playfield-2,x
   1116  f305				  -	      rol
   1117  f305				  -	      sta	playfield-130,x
   1118  f305				  -	      lda	playfield-3,x
   1119  f305				  -	      ror
   1120  f305				  -	      sta	playfield-131,x
   1121  f305				  -	      lda	playfield-4,x
   1122  f305				  -	      rol
   1123  f305				  -	      sta	playfield-132,x
   1124  f305				  -	      lda	playfield-1,x
   1125  f305				  -	      ror
   1126  f305				  -	      sta	playfield-129,x
   1127  f305					      else
   1128  f305		       36 a2		      rol	playfield-2,x
   1129  f307		       76 a1		      ror	playfield-3,x
   1130  f309		       36 a0		      rol	playfield-4,x
   1131  f30b		       76 a3		      ror	playfield-1,x
   1132  f30d					      endif
   1133  f30d
   1134  f30d		       8a		      txa
   1135  f30e		       cb 04		      sbx	#4
   1136  f310		       d0 f0		      bne	leftloop
      0  f312					      RETURN
      1  f312					      ifnconst	bankswitch
      2  f312		       60		      rts
      3  f313				  -	      else
      4  f313				  -	      jmp	BS_return
      5  f313					      endif
   1138  f313
   1139  f313				   notleft
   1140  f313		       4a		      lsr
   1141  f314		       90 13		      bcc	notright
   1142  f316							;right
   1143  f316
   1144  f316				  -	      ifconst	pfres
   1145  f316				  -	      ldx	#pfres*4
   1146  f316					      else
   1147  f316		       a2 30		      ldx	#48
   1148  f318					      endif
   1149  f318				   rightloop
   1150  f318		       b5 a0		      lda	playfield-4,x
   1151  f31a		       4a		      lsr
   1152  f31b				  -	      ifconst	superchip
   1153  f31b				  -	      lda	playfield-3,x
   1154  f31b				  -	      rol
   1155  f31b				  -	      sta	playfield-131,x
   1156  f31b				  -	      lda	playfield-2,x
   1157  f31b				  -	      ror
   1158  f31b				  -	      sta	playfield-130,x
   1159  f31b				  -	      lda	playfield-1,x
   1160  f31b				  -	      rol
   1161  f31b				  -	      sta	playfield-129,x
   1162  f31b				  -	      lda	playfield-4,x
   1163  f31b				  -	      ror
   1164  f31b				  -	      sta	playfield-132,x
   1165  f31b					      else
   1166  f31b		       36 a1		      rol	playfield-3,x
   1167  f31d		       76 a2		      ror	playfield-2,x
   1168  f31f		       36 a3		      rol	playfield-1,x
   1169  f321		       76 a0		      ror	playfield-4,x
   1170  f323					      endif
   1171  f323		       8a		      txa
   1172  f324		       cb 04		      sbx	#4
   1173  f326		       d0 f0		      bne	rightloop
      0  f328					      RETURN
      1  f328					      ifnconst	bankswitch
      2  f328		       60		      rts
      3  f329				  -	      else
      4  f329				  -	      jmp	BS_return
      5  f329					      endif
   1175  f329
   1176  f329				   notright
   1177  f329		       4a		      lsr
   1178  f32a		       90 49		      bcc	notup
   1179  f32c							;up
   1180  f32c		       4a		      lsr
   1181  f32d		       90 02		      bcc	onedecup
   1182  f32f		       c6 ef		      dec	playfieldpos
   1183  f331				   onedecup
   1184  f331		       c6 ef		      dec	playfieldpos
   1185  f333		       f0 02		      beq	shiftdown
   1186  f335		       10 3d		      bpl	noshiftdown2
   1187  f337				   shiftdown
   1188  f337				  -	      ifconst	pfrowheight
   1189  f337				  -	      lda	#pfrowheight
   1190  f337					      else
   1191  f337					      ifnconst	pfres
   1192  f337		       a9 08		      lda	#8
   1193  f339				  -	      else
   1194  f339				  -	      lda	#(96/pfres)	; try to come close to the real size
   1195  f339					      endif
   1196  f339					      endif
   1197  f339
   1198  f339		       85 ef		      sta	playfieldpos
   1199  f33b		       a5 a7		      lda	playfield+3
   1200  f33d		       85 9f		      sta	temp4
   1201  f33f		       a5 a6		      lda	playfield+2
   1202  f341		       85 9e		      sta	temp3
   1203  f343		       a5 a5		      lda	playfield+1
   1204  f345		       85 9d		      sta	temp2
   1205  f347		       a5 a4		      lda	playfield
   1206  f349		       85 9c		      sta	temp1
   1207  f34b		       a2 00		      ldx	#0
   1208  f34d				   up2
   1209  f34d		       b5 a8		      lda	playfield+4,x
   1210  f34f				  -	      ifconst	superchip
   1211  f34f				  -	      sta	playfield-128,x
   1212  f34f				  -	      lda	playfield+5,x
   1213  f34f				  -	      sta	playfield-127,x
   1214  f34f				  -	      lda	playfield+6,x
   1215  f34f				  -	      sta	playfield-126,x
   1216  f34f				  -	      lda	playfield+7,x
   1217  f34f				  -	      sta	playfield-125,x
   1218  f34f					      else
   1219  f34f		       95 a4		      sta	playfield,x
   1220  f351		       b5 a9		      lda	playfield+5,x
   1221  f353		       95 a5		      sta	playfield+1,x
   1222  f355		       b5 aa		      lda	playfield+6,x
   1223  f357		       95 a6		      sta	playfield+2,x
   1224  f359		       b5 ab		      lda	playfield+7,x
   1225  f35b		       95 a7		      sta	playfield+3,x
   1226  f35d					      endif
   1227  f35d		       8a		      txa
   1228  f35e		       cb fc		      sbx	#252
   1229  f360				  -	      ifconst	pfres
   1230  f360				  -	      cpx	#(pfres-1)*4
   1231  f360					      else
   1232  f360		       e0 2c		      cpx	#44
   1233  f362					      endif
   1234  f362		       d0 e9		      bne	up2
   1235  f364
   1236  f364		       a5 9f		      lda	temp4
   1237  f366
   1238  f366				  -	      ifconst	superchip
   1239  f366				  -	      ifconst	pfres
   1240  f366				  -	      sta	playfield+pfres*4-129
   1241  f366				  -	      lda	temp3
   1242  f366				  -	      sta	playfield+pfres*4-130
   1243  f366				  -	      lda	temp2
   1244  f366				  -	      sta	playfield+pfres*4-131
   1245  f366				  -	      lda	temp1
   1246  f366				  -	      sta	playfield+pfres*4-132
   1247  f366				  -	      else
   1248  f366				  -	      sta	playfield+47-128
   1249  f366				  -	      lda	temp3
   1250  f366				  -	      sta	playfield+46-128
   1251  f366				  -	      lda	temp2
   1252  f366				  -	      sta	playfield+45-128
   1253  f366				  -	      lda	temp1
   1254  f366				  -	      sta	playfield+44-128
   1255  f366				  -	      endif
   1256  f366					      else
   1257  f366				  -	      ifconst	pfres
   1258  f366				  -	      sta	playfield+pfres*4-1
   1259  f366				  -	      lda	temp3
   1260  f366				  -	      sta	playfield+pfres*4-2
   1261  f366				  -	      lda	temp2
   1262  f366				  -	      sta	playfield+pfres*4-3
   1263  f366				  -	      lda	temp1
   1264  f366				  -	      sta	playfield+pfres*4-4
   1265  f366					      else
   1266  f366		       85 d3		      sta	playfield+47
   1267  f368		       a5 9e		      lda	temp3
   1268  f36a		       85 d2		      sta	playfield+46
   1269  f36c		       a5 9d		      lda	temp2
   1270  f36e		       85 d1		      sta	playfield+45
   1271  f370		       a5 9c		      lda	temp1
   1272  f372		       85 d0		      sta	playfield+44
   1273  f374					      endif
   1274  f374					      endif
   1275  f374				   noshiftdown2
      0  f374					      RETURN
      1  f374					      ifnconst	bankswitch
      2  f374		       60		      rts
      3  f375				  -	      else
      4  f375				  -	      jmp	BS_return
      5  f375					      endif
   1277  f375
   1278  f375
   1279  f375				   notup
   1280  f375							;down
   1281  f375		       4a		      lsr
   1282  f376		       b0 02		      bcs	oneincup
   1283  f378		       e6 ef		      inc	playfieldpos
   1284  f37a				   oneincup
   1285  f37a		       e6 ef		      inc	playfieldpos
   1286  f37c		       a5 ef		      lda	playfieldpos
   1287  f37e
   1288  f37e				  -	      ifconst	pfrowheight
   1289  f37e				  -	      cmp	#pfrowheight+1
   1290  f37e					      else
   1291  f37e					      ifnconst	pfres
   1292  f37e		       c9 09		      cmp	#9
   1293  f380				  -	      else
   1294  f380				  -	      cmp	#(96/pfres)+1	; try to come close to the real size
   1295  f380					      endif
   1296  f380					      endif
   1297  f380
   1298  f380		       90 3b		      bcc	noshiftdown
   1299  f382		       a9 01		      lda	#1
   1300  f384		       85 ef		      sta	playfieldpos
   1301  f386
   1302  f386				  -	      ifconst	pfres
   1303  f386				  -	      lda	playfield+pfres*4-1
   1304  f386				  -	      sta	temp4
   1305  f386				  -	      lda	playfield+pfres*4-2
   1306  f386				  -	      sta	temp3
   1307  f386				  -	      lda	playfield+pfres*4-3
   1308  f386				  -	      sta	temp2
   1309  f386				  -	      lda	playfield+pfres*4-4
   1310  f386					      else
   1311  f386		       a5 d3		      lda	playfield+47
   1312  f388		       85 9f		      sta	temp4
   1313  f38a		       a5 d2		      lda	playfield+46
   1314  f38c		       85 9e		      sta	temp3
   1315  f38e		       a5 d1		      lda	playfield+45
   1316  f390		       85 9d		      sta	temp2
   1317  f392		       a5 d0		      lda	playfield+44
   1318  f394					      endif
   1319  f394
   1320  f394		       85 9c		      sta	temp1
   1321  f396
   1322  f396				  -	      ifconst	pfres
   1323  f396				  -	      ldx	#(pfres-1)*4
   1324  f396					      else
   1325  f396		       a2 2c		      ldx	#44
   1326  f398					      endif
   1327  f398				   down2
   1328  f398		       b5 a3		      lda	playfield-1,x
   1329  f39a				  -	      ifconst	superchip
   1330  f39a				  -	      sta	playfield-125,x
   1331  f39a				  -	      lda	playfield-2,x
   1332  f39a				  -	      sta	playfield-126,x
   1333  f39a				  -	      lda	playfield-3,x
   1334  f39a				  -	      sta	playfield-127,x
   1335  f39a				  -	      lda	playfield-4,x
   1336  f39a				  -	      sta	playfield-128,x
   1337  f39a					      else
   1338  f39a		       95 a7		      sta	playfield+3,x
   1339  f39c		       b5 a2		      lda	playfield-2,x
   1340  f39e		       95 a6		      sta	playfield+2,x
   1341  f3a0		       b5 a1		      lda	playfield-3,x
   1342  f3a2		       95 a5		      sta	playfield+1,x
   1343  f3a4		       b5 a0		      lda	playfield-4,x
   1344  f3a6		       95 a4		      sta	playfield,x
   1345  f3a8					      endif
   1346  f3a8		       8a		      txa
   1347  f3a9		       cb 04		      sbx	#4
   1348  f3ab		       d0 eb		      bne	down2
   1349  f3ad
   1350  f3ad		       a5 9f		      lda	temp4
   1351  f3af				  -	      ifconst	superchip
   1352  f3af				  -	      sta	playfield-125
   1353  f3af				  -	      lda	temp3
   1354  f3af				  -	      sta	playfield-126
   1355  f3af				  -	      lda	temp2
   1356  f3af				  -	      sta	playfield-127
   1357  f3af				  -	      lda	temp1
   1358  f3af				  -	      sta	playfield-128
   1359  f3af					      else
   1360  f3af		       85 a7		      sta	playfield+3
   1361  f3b1		       a5 9e		      lda	temp3
   1362  f3b3		       85 a6		      sta	playfield+2
   1363  f3b5		       a5 9d		      lda	temp2
   1364  f3b7		       85 a5		      sta	playfield+1
   1365  f3b9		       a5 9c		      lda	temp1
   1366  f3bb		       85 a4		      sta	playfield
   1367  f3bd					      endif
   1368  f3bd				   noshiftdown
      0  f3bd					      RETURN
      1  f3bd					      ifnconst	bankswitch
      2  f3bd		       60		      rts
      3  f3be				  -	      else
      4  f3be				  -	      jmp	BS_return
      5  f3be					      endif
   1370  f3be							; Provided under the CC0 license. See the included LICENSE.txt for details.
   1371  f3be
   1372  f3be							;standard routines needed for pretty much all games
   1373  f3be							; just the random number generator is left - maybe we should remove this asm file altogether?
   1374  f3be							; repositioning code and score pointer setup moved to overscan
   1375  f3be							; read switches, joysticks now compiler generated (more efficient)
   1376  f3be
   1377  f3be				   randomize
   1378  f3be		       a5 a2		      lda	rand
   1379  f3c0		       4a		      lsr
   1380  f3c1					      ifconst	rand16
   1381  f3c1		       26 ed		      rol	rand16
   1382  f3c3					      endif
   1383  f3c3		       90 02		      bcc	noeor
   1384  f3c5		       49 b4		      eor	#$B4
   1385  f3c7				   noeor
   1386  f3c7		       85 a2		      sta	rand
   1387  f3c9					      ifconst	rand16
   1388  f3c9		       45 ed		      eor	rand16
   1389  f3cb					      endif
      0  f3cb					      RETURN
      1  f3cb					      ifnconst	bankswitch
      2  f3cb		       60		      rts
      3  f3cc				  -	      else
      4  f3cc				  -	      jmp	BS_return
      5  f3cc					      endif
   1391  f3cc							; Provided under the CC0 license. See the included LICENSE.txt for details.
   1392  f3cc
   1393  f3cc				   drawscreen
   1394  f3cc				  -	      ifconst	debugscore
   1395  f3cc				  -	      ldx	#14
   1396  f3cc				  -	      lda	INTIM	; display # cycles left in the score
   1397  f3cc				  -
   1398  f3cc				  -	      ifconst	mincycles
   1399  f3cc				  -	      lda	mincycles
   1400  f3cc				  -	      cmp	INTIM
   1401  f3cc				  -	      lda	mincycles
   1402  f3cc				  -	      bcc	nochange
   1403  f3cc				  -	      lda	INTIM
   1404  f3cc				  -	      sta	mincycles
   1405  f3cc				  -nochange
   1406  f3cc				  -	      endif
   1407  f3cc				  -
   1408  f3cc				  -			; cmp #$2B
   1409  f3cc				  -			; bcs no_cycles_left
   1410  f3cc				  -	      bmi	cycles_left
   1411  f3cc				  -	      ldx	#64
   1412  f3cc				  -	      eor	#$ff	;make negative
   1413  f3cc				  -cycles_left
   1414  f3cc				  -	      stx	scorecolor
   1415  f3cc				  -	      and	#$7f	; clear sign bit
   1416  f3cc				  -	      tax
   1417  f3cc				  -	      lda	scorebcd,x
   1418  f3cc				  -	      sta	score+2
   1419  f3cc				  -	      lda	scorebcd1,x
   1420  f3cc				  -	      sta	score+1
   1421  f3cc				  -	      jmp	done_debugscore
   1422  f3cc				  -scorebcd
   1423  f3cc				  -	      .byte	$00, $64, $28, $92, $56, $20, $84, $48, $12, $76, $40
   1424  f3cc				  -	      .byte	$04, $68, $32, $96, $60, $24, $88, $52, $16, $80, $44
   1425  f3cc				  -	      .byte	$08, $72, $36, $00, $64, $28, $92, $56, $20, $84, $48
   1426  f3cc				  -	      .byte	$12, $76, $40, $04, $68, $32, $96, $60, $24, $88
   1427  f3cc				  -scorebcd1
   1428  f3cc				  -	      .byte	0, 0, 1, 1, 2, 3, 3, 4, 5, 5, 6
   1429  f3cc				  -	      .byte	7, 7, 8, 8, 9, $10, $10, $11, $12, $12, $13
   1430  f3cc				  -	      .byte	$14, $14, $15, $16, $16, $17, $17, $18, $19, $19, $20
   1431  f3cc				  -	      .byte	$21, $21, $22, $23, $23, $24, $24, $25, $26, $26
   1432  f3cc				  -done_debugscore
   1433  f3cc					      endif
   1434  f3cc
   1435  f3cc				  -	      ifconst	debugcycles
   1436  f3cc				  -	      lda	INTIM	; if we go over, it mucks up the background color
   1437  f3cc				  -			; cmp #$2B
   1438  f3cc				  -			; BCC overscan
   1439  f3cc				  -	      bmi	overscan
   1440  f3cc				  -	      sta	COLUBK
   1441  f3cc				  -	      bcs	doneoverscan
   1442  f3cc					      endif
   1443  f3cc
   1444  f3cc				   overscan
   1445  f3cc				  -	      ifconst	interlaced
   1446  f3cc				  -	      PHP
   1447  f3cc				  -	      PLA
   1448  f3cc				  -	      EOR	#4	; flip interrupt bit
   1449  f3cc				  -	      PHA
   1450  f3cc				  -	      PLP
   1451  f3cc				  -	      AND	#4	; isolate the interrupt bit
   1452  f3cc				  -	      TAX		; save it for later
   1453  f3cc					      endif
   1454  f3cc
   1455  f3cc				   overscanloop
   1456  f3cc		       ad 84 02 	      lda	INTIM	;wait for sync
   1457  f3cf		       30 fb		      bmi	overscanloop
   1458  f3d1				   doneoverscan
   1459  f3d1
   1460  f3d1							;do VSYNC
   1461  f3d1
   1462  f3d1				  -	      ifconst	interlaced
   1463  f3d1				  -	      CPX	#4
   1464  f3d1				  -	      BNE	oddframevsync
   1465  f3d1					      endif
   1466  f3d1
   1467  f3d1		       a9 02		      lda	#2
   1468  f3d3		       85 02		      sta	WSYNC
   1469  f3d5		       85 00		      sta	VSYNC
   1470  f3d7		       85 02		      STA	WSYNC
   1471  f3d9		       85 02		      STA	WSYNC
   1472  f3db		       4a		      lsr
   1473  f3dc		       85 02		      STA	WSYNC
   1474  f3de		       85 00		      STA	VSYNC
   1475  f3e0		       85 01		      sta	VBLANK
   1476  f3e2					      ifnconst	overscan_time
   1477  f3e2		       a9 a5		      lda	#37+128
   1478  f3e4				  -	      else
   1479  f3e4				  -	      lda	#overscan_time+128
   1480  f3e4					      endif
   1481  f3e4		       8d 96 02 	      sta	TIM64T
   1482  f3e7
   1483  f3e7				  -	      ifconst	interlaced
   1484  f3e7				  -	      jmp	postsync
   1485  f3e7				  -
   1486  f3e7				  -oddframevsync
   1487  f3e7				  -	      sta	WSYNC
   1488  f3e7				  -
   1489  f3e7				  -	      LDA	($80,X)	; 11 waste
   1490  f3e7				  -	      LDA	($80,X)	; 11 waste
   1491  f3e7				  -	      LDA	($80,X)	; 11 waste
   1492  f3e7				  -
   1493  f3e7				  -	      lda	#2
   1494  f3e7				  -	      sta	VSYNC
   1495  f3e7				  -	      sta	WSYNC
   1496  f3e7				  -	      sta	WSYNC
   1497  f3e7				  -	      sta	WSYNC
   1498  f3e7				  -
   1499  f3e7				  -	      LDA	($80,X)	; 11 waste
   1500  f3e7				  -	      LDA	($80,X)	; 11 waste
   1501  f3e7				  -	      LDA	($80,X)	; 11 waste
   1502  f3e7				  -
   1503  f3e7				  -	      lda	#0
   1504  f3e7				  -	      sta	VSYNC
   1505  f3e7				  -	      sta	VBLANK
   1506  f3e7				  -	      ifnconst	overscan_time
   1507  f3e7				  -	      lda	#37+128
   1508  f3e7				  -	      else
   1509  f3e7				  -	      lda	#overscan_time+128
   1510  f3e7				  -	      endif
   1511  f3e7				  -	      sta	TIM64T
   1512  f3e7				  -
   1513  f3e7				  -postsync
   1514  f3e7					      endif
   1515  f3e7
   1516  f3e7				  -	      ifconst	legacy
   1517  f3e7				  -	      if	legacy < 100
   1518  f3e7				  -	      ldx	#4
   1519  f3e7				  -adjustloop
   1520  f3e7				  -	      lda	player0x,x
   1521  f3e7				  -	      sec
   1522  f3e7				  -	      sbc	#14	;?
   1523  f3e7				  -	      sta	player0x,x
   1524  f3e7				  -	      dex
   1525  f3e7				  -	      bpl	adjustloop
   1526  f3e7				  -	      endif
   1527  f3e7					      endif
   1528  f3e7				  -	      if	((<*)>$e9)&&((<*)<$fa)
   1529  f3e7				  -	      repeat	($fa-(<*))
   1530  f3e7				  -	      nop
   1531  f3e7				  -	      repend
   1532  f3e7					      endif
   1533  f3e7		       85 02		      sta	WSYNC
   1534  f3e9		       a2 04		      ldx	#4
      0  f3eb					      SLEEP	3
      1  f3eb				   .CYCLES    SET	3
      2  f3eb
      3  f3eb				  -	      IF	.CYCLES < 2
      4  f3eb				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f3eb				  -	      ERR
      6  f3eb					      ENDIF
      7  f3eb
      8  f3eb					      IF	.CYCLES & 1
      9  f3eb					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f3eb		       04 00		      nop	0
     11  f3ed				  -	      ELSE
     12  f3ed				  -	      bit	VSYNC
     13  f3ed					      ENDIF
     14  f3ed				   .CYCLES    SET	.CYCLES - 3
     15  f3ed					      ENDIF
     16  f3ed
     17  f3ed				  -	      REPEAT	.CYCLES / 2
     18  f3ed				  -	      nop
     19  f3ed					      REPEND
   1536  f3ed				   HorPosLoop		; 5
   1537  f3ed		       b5 80		      lda	player0x,X	;+4 9
   1538  f3ef		       38		      sec		;+2 11
   1539  f3f0				   DivideLoop
   1540  f3f0		       e9 0f		      sbc	#15
   1541  f3f2		       b0 fc		      bcs	DivideLoop	;+4 15
   1542  f3f4		       95 9c		      sta	temp1,X	;+4 19
   1543  f3f6		       95 10		      sta	RESP0,X	;+4 23
   1544  f3f8		       85 02		      sta	WSYNC
   1545  f3fa		       ca		      dex
   1546  f3fb		       10 f0		      bpl	HorPosLoop	;+5 5
   1547  f3fd							; 4
   1548  f3fd
   1549  f3fd		       a2 04		      ldx	#4
   1550  f3ff		       b4 9c		      ldy	temp1,X
   1551  f401		       b9 5d f3 	      lda	repostable-256,Y
   1552  f404		       95 20		      sta	HMP0,X	;+14 18
   1553  f406
   1554  f406		       ca		      dex
   1555  f407		       b4 9c		      ldy	temp1,X
   1556  f409		       b9 5d f3 	      lda	repostable-256,Y
   1557  f40c		       95 20		      sta	HMP0,X	;+14 32
   1558  f40e
   1559  f40e		       ca		      dex
   1560  f40f		       b4 9c		      ldy	temp1,X
   1561  f411		       b9 5d f3 	      lda	repostable-256,Y
   1562  f414		       95 20		      sta	HMP0,X	;+14 46
   1563  f416
   1564  f416		       ca		      dex
   1565  f417		       b4 9c		      ldy	temp1,X
   1566  f419		       b9 5d f3 	      lda	repostable-256,Y
   1567  f41c		       95 20		      sta	HMP0,X	;+14 60
   1568  f41e
   1569  f41e		       ca		      dex
   1570  f41f		       b4 9c		      ldy	temp1,X
   1571  f421		       b9 5d f3 	      lda	repostable-256,Y
   1572  f424		       95 20		      sta	HMP0,X	;+14 74
   1573  f426
   1574  f426		       85 02		      sta	WSYNC
   1575  f428
   1576  f428		       85 2a		      sta	HMOVE	;+3 3
   1577  f42a
   1578  f42a
   1579  f42a				  -	      ifconst	legacy
   1580  f42a				  -	      if	legacy < 100
   1581  f42a				  -	      ldx	#4
   1582  f42a				  -adjustloop2
   1583  f42a				  -	      lda	player0x,x
   1584  f42a				  -	      clc
   1585  f42a				  -	      adc	#14	;?
   1586  f42a				  -	      sta	player0x,x
   1587  f42a				  -	      dex
   1588  f42a				  -	      bpl	adjustloop2
   1589  f42a				  -	      endif
   1590  f42a					      endif
   1591  f42a
   1592  f42a
   1593  f42a
   1594  f42a
   1595  f42a							;set score pointers
   1596  f42a		       a7 95		      lax	score+2
   1597  f42c		       20 5d f4 	      jsr	scorepointerset
   1598  f42f		       84 9b		      sty	scorepointers+5
   1599  f431		       86 98		      stx	scorepointers+2
   1600  f433		       a7 94		      lax	score+1
   1601  f435		       20 5d f4 	      jsr	scorepointerset
   1602  f438		       84 9a		      sty	scorepointers+4
   1603  f43a		       86 97		      stx	scorepointers+1
   1604  f43c		       a7 93		      lax	score
   1605  f43e		       20 5d f4 	      jsr	scorepointerset
   1606  f441		       84 99		      sty	scorepointers+3
   1607  f443		       86 96		      stx	scorepointers
   1608  f445
   1609  f445				   vblk
   1610  f445							; run possible vblank bB code
   1611  f445				  -	      ifconst	vblank_bB_code
   1612  f445				  -	      jsr	vblank_bB_code
   1613  f445					      endif
   1614  f445				   vblk2
   1615  f445		       ad 84 02 	      LDA	INTIM
   1616  f448		       30 fb		      bmi	vblk2
   1617  f44a		       4c 34 f0 	      jmp	kernel
   1618  f44d
   1619  f44d
   1620  f44d		       80 70 60 50*	      .byte.b	$80,$70,$60,$50,$40,$30,$20,$10,$00
   1621  f456		       f0 e0 d0 c0*	      .byte.b	$F0,$E0,$D0,$C0,$B0,$A0,$90
   1622  f45d				   repostable
   1623  f45d
   1624  f45d				   scorepointerset
   1625  f45d		       29 0f		      and	#$0F
   1626  f45f		       0a		      asl
   1627  f460		       0a		      asl
   1628  f461		       0a		      asl
   1629  f462		       69 9c		      adc	#<scoretable
   1630  f464		       a8		      tay
   1631  f465		       8a		      txa
   1632  f466							; and #$F0
   1633  f466							; lsr
   1634  f466		       4b f0		      asr	#$F0
   1635  f468		       69 9c		      adc	#<scoretable
   1636  f46a		       aa		      tax
   1637  f46b		       60		      rts
   1638  f46c				   game
   1639  f46c				   .
   1640  f46c							; 
   1641  f46c
   1642  f46c				   .L00 		;  rem teste jogo 1
   1643  f46c
   1644  f46c				   .L01 		;  rem por Heitor Maciel
   1645  f46c
   1646  f46c				   .
   1647  f46c							; 
   1648  f46c
   1649  f46c				   .L02 		;  set kernel_options no_blank_lines
   1650  f46c
   1651  f46c				   .L03 		;  const pfscore  =  1
   1652  f46c
   1653  f46c				   .
   1654  f46c							; 
   1655  f46c
   1656  f46c				   .L04 		;  dim _Ch0_Sound  =  a
   1657  f46c
   1658  f46c				   .
   1659  f46c							; 
   1660  f46c
   1661  f46c				   .
   1662  f46c							; 
   1663  f46c
   1664  f46c				   .
   1665  f46c							; 
   1666  f46c
   1667  f46c				   .L05 		;  dim _cont_escudo  =  e
   1668  f46c
   1669  f46c				   .L06 		;  dim _duracao_som0  =  f
   1670  f46c
   1671  f46c				   .L07 		;  dim _duracao_som1  =  g
   1672  f46c
   1673  f46c				   .L08 		;  dim musicPointer  =  h
   1674  f46c
   1675  f46c				   .
   1676  f46c							; 
   1677  f46c
   1678  f46c				   .L09 		;  dim _bit_supressores  =  j
   1679  f46c
   1680  f46c				   .
   1681  f46c							; 
   1682  f46c
   1683  f46c				   .
   1684  f46c							; 
   1685  f46c
   1686  f46c				   .
   1687  f46c							; 
   1688  f46c
   1689  f46c				   .
   1690  f46c							; 
   1691  f46c
   1692  f46c				   .
   1693  f46c							; 
   1694  f46c
   1695  f46c				   .
   1696  f46c							; 
   1697  f46c
   1698  f46c				   .
   1699  f46c							; 
   1700  f46c
   1701  f46c				   .
   1702  f46c							; 
   1703  f46c
   1704  f46c				   .L010		;  dim musicTimer  =  k
   1705  f46c
   1706  f46c				   .L011		;  dim _dificuldade  =  l
   1707  f46c
   1708  f46c				   .L012		;  dim _Ch1_Sound  =  m
   1709  f46c
   1710  f46c				   .L013		;  dim _animacao  =  n
   1711  f46c
   1712  f46c				   .L014		;  dim _SC_Back  =  o
   1713  f46c
   1714  f46c				   .
   1715  f46c							; 
   1716  f46c
   1717  f46c				   .L015		;  dim _fases	=  q
   1718  f46c
   1719  f46c				   .L016		;  dim _cont_anima_morte  =  r
   1720  f46c
   1721  f46c				   .L017		;  dim _cont_telas  =	s
   1722  f46c
   1723  f46c				   .
   1724  f46c							; 
   1725  f46c
   1726  f46c				   .
   1727  f46c							; 
   1728  f46c
   1729  f46c				   .
   1730  f46c							; 
   1731  f46c
   1732  f46c				   .L018		;  dim rand16	=  z
   1733  f46c
   1734  f46c				   .
   1735  f46c							; 
   1736  f46c
   1737  f46c				   .
   1738  f46c							; 
   1739  f46c
   1740  f46c				   .__reset_game
   1741  f46c							; __reset_game
   1742  f46c
   1743  f46c				   .
   1744  f46c							; 
   1745  f46c
   1746  f46c				   .
   1747  f46c							; 
   1748  f46c
   1749  f46c				   .L019		;  a  =  0  :	d  =  0  :  e  =  0  :	f  =  0  :  g  =  0  :	h  =  0
   1750  f46c
   1751  f46c		       a9 00		      LDA	#0
   1752  f46e		       85 d4		      STA	a
   1753  f470		       85 d7		      STA	d
   1754  f472		       85 d8		      STA	e
   1755  f474		       85 d9		      STA	f
   1756  f476		       85 da		      STA	g
   1757  f478		       85 db		      STA	h
   1758  f47a				   .L020		;  j  =  0  :	k  =  0  :  l  =  0  :	m  =  0  :  n  =  0  :	o  =  0  :  p  =  0  :	q  =  0  :  r  =  0
   1759  f47a
   1760  f47a		       a9 00		      LDA	#0
   1761  f47c		       85 dd		      STA	j
   1762  f47e		       85 de		      STA	k
   1763  f480		       85 df		      STA	l
   1764  f482		       85 e0		      STA	m
   1765  f484		       85 e1		      STA	n
   1766  f486		       85 e2		      STA	o
   1767  f488		       85 e3		      STA	p
   1768  f48a		       85 e4		      STA	q
   1769  f48c		       85 e5		      STA	r
   1770  f48e				   .L021		;  s  =  0  :	t  =  0  :  u  =  0  :	v  =  0  :  w  =  0  :	x  =  0  :  y  =  0
   1771  f48e
   1772  f48e		       a9 00		      LDA	#0
   1773  f490		       85 e6		      STA	s
   1774  f492		       85 e7		      STA	t
   1775  f494		       85 e8		      STA	u
   1776  f496		       85 e9		      STA	v
   1777  f498		       85 ea		      STA	w
   1778  f49a		       85 eb		      STA	x
   1779  f49c		       85 ec		      STA	y
   1780  f49e				   .
   1781  f49e							; 
   1782  f49e
   1783  f49e				   .L022		;  rem DESLIGA O SOM
   1784  f49e
   1785  f49e				   .L023		;  AUDV0  =  0  :  AUDV1  =  0
   1786  f49e
   1787  f49e		       a9 00		      LDA	#0
   1788  f4a0		       85 19		      STA	AUDV0
   1789  f4a2		       85 1a		      STA	AUDV1
   1790  f4a4				   .
   1791  f4a4							; 
   1792  f4a4
   1793  f4a4				   .L024		;  score  =  0
   1794  f4a4
   1795  f4a4		       a9 00		      LDA	#$00
   1796  f4a6		       85 95		      STA	score+2
   1797  f4a8		       a9 00		      LDA	#$00
   1798  f4aa		       85 94		      STA	score+1
   1799  f4ac		       a9 00		      LDA	#$00
   1800  f4ae		       85 93		      STA	score
   1801  f4b0				   .L025		;  scorecolor	=  $00
   1802  f4b0
   1803  f4b0		       a9 00		      LDA	#$00
   1804  f4b2		       85 a3		      STA	scorecolor
   1805  f4b4				   .L026		;  missile1y  =  0
   1806  f4b4
   1807  f4b4		       a9 00		      LDA	#0
   1808  f4b6		       85 88		      STA	missile1y
   1809  f4b8				   .L027		;  COLUP1  =  00
   1810  f4b8
   1811  f4b8		       a9 00		      LDA	#00
   1812  f4ba		       85 07		      STA	COLUP1
   1813  f4bc				   .
   1814  f4bc							; 
   1815  f4bc
   1816  f4bc				   .L028		;  player1x  =  75  :	player1y  =  85
   1817  f4bc
   1818  f4bc		       a9 4b		      LDA	#75
   1819  f4be		       85 81		      STA	player1x
   1820  f4c0		       a9 55		      LDA	#85
   1821  f4c2		       85 86		      STA	player1y
   1822  f4c4				   .L029		;  player0x  =  20  :	player0y  =  1
   1823  f4c4
   1824  f4c4		       a9 14		      LDA	#20
   1825  f4c6		       85 80		      STA	player0x
   1826  f4c8		       a9 01		      LDA	#1
   1827  f4ca		       85 85		      STA	player0y
   1828  f4cc				   .
   1829  f4cc							; 
   1830  f4cc
   1831  f4cc				   .L030		;  pfscore1 = %00010101  :  pfscorecolor  =  $40
   1832  f4cc
   1833  f4cc		       a9 15		      LDA	#%00010101
   1834  f4ce		       85 f2		      STA	pfscore1
   1835  f4d0		       a9 40		      LDA	#$40
   1836  f4d2		       85 f4		      STA	pfscorecolor
   1837  f4d4				   .L031		;  pfscore2 = %00010101
   1838  f4d4
   1839  f4d4		       a9 15		      LDA	#%00010101
   1840  f4d6		       85 f3		      STA	pfscore2
   1841  f4d8				   .L032		;  missile1height = 5
   1842  f4d8
   1843  f4d8		       a9 05		      LDA	#5
   1844  f4da		       85 87		      STA	missile1height
   1845  f4dc				   .
   1846  f4dc							; 
   1847  f4dc
   1848  f4dc				   .
   1849  f4dc							; 
   1850  f4dc
   1851  f4dc				   .L033		;  gosub __playfield_transicao
   1852  f4dc
   1853  f4dc		       20 26 fc 	      jsr	.__playfield_transicao
   1854  f4df
   1855  f4df				   .
   1856  f4df							; 
   1857  f4df
   1858  f4df				   .__title_screen
   1859  f4df							; __title_screen
   1860  f4df
   1861  f4df				   .L034		;  COLUPF  =  $00  :  COLUBK  =  $8A
   1862  f4df
   1863  f4df		       a9 00		      LDA	#$00
   1864  f4e1		       85 08		      STA	COLUPF
   1865  f4e3		       a9 8a		      LDA	#$8A
   1866  f4e5		       85 09		      STA	COLUBK
   1867  f4e7				   .L035		;  AUDC0  =  12
   1868  f4e7
   1869  f4e7		       a9 0c		      LDA	#12
   1870  f4e9		       85 15		      STA	AUDC0
   1871  f4eb				   .L036		;  AUDC1  =  1
   1872  f4eb
   1873  f4eb		       a9 01		      LDA	#1
   1874  f4ed		       85 16		      STA	AUDC1
   1875  f4ef				   .
   1876  f4ef							; 
   1877  f4ef
   1878  f4ef				   .L037		;  if joy0fire then e	=  1
   1879  f4ef
   1880  f4ef		       24 0c		      bit	INPT4
   1881  f4f1		       30 04		      BMI	.skipL037
   1882  f4f3				   .condpart0
   1883  f4f3		       a9 01		      LDA	#1
   1884  f4f5		       85 d8		      STA	e
   1885  f4f7				   .skipL037
   1886  f4f7				   .L038		;  if e  =  0 then goto __skip_sound_title
   1887  f4f7
   1888  f4f7		       a5 d8		      LDA	e
   1889  f4f9		       c9 00		      CMP	#0
   1890  f4fb		       d0 03		      BNE	.skipL038
   1891  f4fd				   .condpart1
   1892  f4fd		       4c 0b f5 	      jmp	.__skip_sound_title
   1893  f500
   1894  f500				   .skipL038
   1895  f500				   .L039		;  if musicTimer  =  0 then goto changeMusicNoteTitle
   1896  f500
   1897  f500		       a5 de		      LDA	musicTimer
   1898  f502		       c9 00		      CMP	#0
   1899  f504		       d0 03		      BNE	.skipL039
   1900  f506				   .condpart2
   1901  f506		       4c ad fc 	      jmp	.changeMusicNoteTitle
   1902  f509
   1903  f509				   .skipL039
   1904  f509				   .
   1905  f509							; 
   1906  f509
   1907  f509				   .__volta_trilha_title
   1908  f509							; __volta_trilha_title
   1909  f509
   1910  f509				   .L040		;  musicTimer	=  musicTimer  -  1
   1911  f509
   1912  f509		       c6 de		      DEC	musicTimer
   1913  f50b				   .__skip_sound_title
   1914  f50b							; __skip_sound_title
   1915  f50b
   1916  f50b				   .
   1917  f50b							; 
   1918  f50b
   1919  f50b				   .L041		;  pfscore1  =  0  :  scorecolor  =  $00
   1920  f50b
   1921  f50b		       a9 00		      LDA	#0
   1922  f50d		       85 f2		      STA	pfscore1
   1923  f50f		       a9 00		      LDA	#$00
   1924  f511		       85 a3		      STA	scorecolor
   1925  f513				   .L042		;  gosub __nave
   1926  f513
   1927  f513		       20 1d fb 	      jsr	.__nave
   1928  f516
   1929  f516				   .L043		;  _animacao  =  10
   1930  f516
   1931  f516		       a9 0a		      LDA	#10
   1932  f518		       85 e1		      STA	_animacao
   1933  f51a				   .L044		;  drawscreen
   1934  f51a
   1935  f51a		       20 cc f3 	      jsr	drawscreen
   1936  f51d				   .L045		;  COLUBK = $00
   1937  f51d
   1938  f51d		       a9 00		      LDA	#$00
   1939  f51f		       85 09		      STA	COLUBK
   1940  f521				   .L046		;  COLUPF = $06
   1941  f521
   1942  f521		       a9 06		      LDA	#$06
   1943  f523		       85 08		      STA	COLUPF
   1944  f525				   .L047		;  player0y  =  0
   1945  f525
   1946  f525		       a9 00		      LDA	#0
   1947  f527		       85 85		      STA	player0y
   1948  f529				   .L048		;  COLUP1  =  $0E
   1949  f529
   1950  f529		       a9 0e		      LDA	#$0E
   1951  f52b		       85 07		      STA	COLUP1
   1952  f52d				   .L049		;  player1y  =  85
   1953  f52d
   1954  f52d		       a9 55		      LDA	#85
   1955  f52f		       85 86		      STA	player1y
   1956  f531				   .L050		;  player1x  =  75
   1957  f531
   1958  f531		       a9 4b		      LDA	#75
   1959  f533		       85 81		      STA	player1x
   1960  f535				   .
   1961  f535							; 
   1962  f535
   1963  f535				   .L051		;  if joy0fire then e	=  1
   1964  f535
   1965  f535		       24 0c		      bit	INPT4
   1966  f537		       30 04		      BMI	.skipL051
   1967  f539				   .condpart3
   1968  f539		       a9 01		      LDA	#1
   1969  f53b		       85 d8		      STA	e
   1970  f53d				   .skipL051
   1971  f53d				   .L052		;  if e  =  1 then pfscroll down
   1972  f53d
   1973  f53d		       a5 d8		      LDA	e
   1974  f53f		       c9 01		      CMP	#1
   1975  f541		       d0 05		      BNE	.skipL052
   1976  f543				   .condpart4
   1977  f543		       a9 04		      LDA	#4
   1978  f545		       20 fe f2 	      jsr	pfscroll
   1979  f548				   .skipL052
   1980  f548				   .
   1981  f548							; 
   1982  f548
   1983  f548				   .L053		;  _SC_Back  =  $70
   1984  f548
   1985  f548		       a9 70		      LDA	#$70
   1986  f54a		       85 e2		      STA	_SC_Back
   1987  f54c				   .L054		;  if !pfread ( 0 , 11 )  then goto __prepara_main
   1988  f54c
   1989  f54c		       a9 00		      LDA	#0
   1990  f54e		       a0 0b		      LDY	#11
   1991  f550		       20 76 f2 	      jsr	pfread
   1992  f553		       f0 03		      BEQ	.skipL054
   1993  f555				   .condpart5
   1994  f555		       4c 5b f5 	      jmp	.__prepara_main
   1995  f558
   1996  f558				   .skipL054
   1997  f558				   .L055		;  goto __title_screen
   1998  f558
   1999  f558		       4c df f4 	      jmp	.__title_screen
   2000  f55b
   2001  f55b				   .
   2002  f55b							; 
   2003  f55b
   2004  f55b				   .__prepara_main
   2005  f55b							; __prepara_main
   2006  f55b
   2007  f55b				   .L056		;  AUDV0  =  0
   2008  f55b
   2009  f55b		       a9 00		      LDA	#0
   2010  f55d		       85 19		      STA	AUDV0
   2011  f55f				   .L057		;  AUDV1  =  0
   2012  f55f
   2013  f55f		       a9 00		      LDA	#0
   2014  f561		       85 1a		      STA	AUDV1
   2015  f563				   .L058		;  a  =  0  :	d  =  0  :  e  =  0  :	f  =  0  :  g  =  0  :	h  =  0
   2016  f563
   2017  f563		       a9 00		      LDA	#0
   2018  f565		       85 d4		      STA	a
   2019  f567		       85 d7		      STA	d
   2020  f569		       85 d8		      STA	e
   2021  f56b		       85 d9		      STA	f
   2022  f56d		       85 da		      STA	g
   2023  f56f		       85 db		      STA	h
   2024  f571				   .L059		;  j  =  0  :	k  =  0  :  l  =  0  :	m  =  0  :  n  =  0  :	o  =  0  :  p  =  0  :	q  =  0  :  r  =  0
   2025  f571
   2026  f571		       a9 00		      LDA	#0
   2027  f573		       85 dd		      STA	j
   2028  f575		       85 de		      STA	k
   2029  f577		       85 df		      STA	l
   2030  f579		       85 e0		      STA	m
   2031  f57b		       85 e1		      STA	n
   2032  f57d		       85 e2		      STA	o
   2033  f57f		       85 e3		      STA	p
   2034  f581		       85 e4		      STA	q
   2035  f583		       85 e5		      STA	r
   2036  f585				   .L060		;  s  =  0  :	t  =  0  :  u  =  0  :	v  =  0  :  w  =  0  :	x  =  0  :  y  =  0
   2037  f585
   2038  f585		       a9 00		      LDA	#0
   2039  f587		       85 e6		      STA	s
   2040  f589		       85 e7		      STA	t
   2041  f58b		       85 e8		      STA	u
   2042  f58d		       85 e9		      STA	v
   2043  f58f		       85 ea		      STA	w
   2044  f591		       85 eb		      STA	x
   2045  f593		       85 ec		      STA	y
   2046  f595				   .L061		;  pfscore1 = %00010101  :  pfscorecolor  =  $40
   2047  f595
   2048  f595		       a9 15		      LDA	#%00010101
   2049  f597		       85 f2		      STA	pfscore1
   2050  f599		       a9 40		      LDA	#$40
   2051  f59b		       85 f4		      STA	pfscorecolor
   2052  f59d				   .L062		;  pfscore2 = %00010101
   2053  f59d
   2054  f59d		       a9 15		      LDA	#%00010101
   2055  f59f		       85 f3		      STA	pfscore2
   2056  f5a1				   .L063		;  missile1height = 5
   2057  f5a1
   2058  f5a1		       a9 05		      LDA	#5
   2059  f5a3		       85 87		      STA	missile1height
   2060  f5a5				   .
   2061  f5a5							; 
   2062  f5a5
   2063  f5a5				   .
   2064  f5a5							; 
   2065  f5a5
   2066  f5a5				   .L064		;  _SC_Back  =  $70
   2067  f5a5
   2068  f5a5		       a9 70		      LDA	#$70
   2069  f5a7		       85 e2		      STA	_SC_Back
   2070  f5a9				   .
   2071  f5a9							; 
   2072  f5a9
   2073  f5a9				   .__Main_Loop
   2074  f5a9							; __Main_Loop
   2075  f5a9
   2076  f5a9				   .
   2077  f5a9							; 
   2078  f5a9
   2079  f5a9				   .
   2080  f5a9							; 
   2081  f5a9
   2082  f5a9				   .L065		;  scorecolor	=  14
   2083  f5a9
   2084  f5a9		       a9 0e		      LDA	#14
   2085  f5ab		       85 a3		      STA	scorecolor
   2086  f5ad				   .
   2087  f5ad							; 
   2088  f5ad
   2089  f5ad				   .
   2090  f5ad							; 
   2091  f5ad
   2092  f5ad				   .L066		;  if player1x  <  20	||  player1x  >  133 then _bit_supressores{6}  =  1 else _bit_supressores{6}  =  0
   2093  f5ad
   2094  f5ad		       a5 81		      LDA	player1x
   2095  f5af		       c9 14		      CMP	#20
   2096  f5b1		       b0 03		      BCS	.skipL066
   2097  f5b3				   .condpart6
   2098  f5b3		       4c bc f5 	      jmp	.condpart7
   2099  f5b6				   .skipL066
   2100  f5b6		       a9 85		      LDA	#133
   2101  f5b8		       c5 81		      CMP	player1x
   2102  f5ba		       b0 09		      BCS	.skip0OR
   2103  f5bc				   .condpart7
   2104  f5bc		       a5 dd		      LDA	_bit_supressores
   2105  f5be		       09 40		      ORA	#64
   2106  f5c0		       85 dd		      STA	_bit_supressores
   2107  f5c2		       4c cb f5 	      jmp	.skipelse0
   2108  f5c5				   .skip0OR
   2109  f5c5		       a5 dd		      LDA	_bit_supressores
   2110  f5c7		       29 bf		      AND	#191
   2111  f5c9		       85 dd		      STA	_bit_supressores
   2112  f5cb				   .skipelse0
   2113  f5cb				   .
   2114  f5cb							; 
   2115  f5cb
   2116  f5cb				   .
   2117  f5cb							; 
   2118  f5cb
   2119  f5cb				   .L067		;  if _bit_supressores{6} then goto __skip_aceletarion_point
   2120  f5cb
   2121  f5cb		       24 dd		      BIT	_bit_supressores
   2122  f5cd		       50 03		      BVC	.skipL067
   2123  f5cf				   .condpart8
   2124  f5cf		       4c f3 f5 	      jmp	.__skip_aceletarion_point
   2125  f5d2
   2126  f5d2				   .skipL067
   2127  f5d2				   .L068		;  if joy0up then pfscroll down  :  score  =  score  +  1
   2128  f5d2
   2129  f5d2		       a9 10		      lda	#$10
   2130  f5d4		       2c 80 02 	      bit	SWCHA
   2131  f5d7		       d0 1a		      BNE	.skipL068
   2132  f5d9				   .condpart9
   2133  f5d9		       a9 04		      LDA	#4
   2134  f5db		       20 fe f2 	      jsr	pfscroll
   2135  f5de		       f8		      SED
   2136  f5df		       18		      CLC
   2137  f5e0		       a5 95		      LDA	score+2
   2138  f5e2		       69 01		      ADC	#$01
   2139  f5e4		       85 95		      STA	score+2
   2140  f5e6		       a5 94		      LDA	score+1
   2141  f5e8		       69 00		      ADC	#$00
   2142  f5ea		       85 94		      STA	score+1
   2143  f5ec		       a5 93		      LDA	score
   2144  f5ee		       69 00		      ADC	#$00
   2145  f5f0		       85 93		      STA	score
   2146  f5f2		       d8		      CLD
   2147  f5f3				   .skipL068
   2148  f5f3				   .__skip_aceletarion_point
   2149  f5f3							; __skip_aceletarion_point
   2150  f5f3
   2151  f5f3				   .
   2152  f5f3							; 
   2153  f5f3
   2154  f5f3				   .
   2155  f5f3							; 
   2156  f5f3
   2157  f5f3				   .L069		;  if joy0left  &&  player1x  >  1 then player1x  =  player1x	-  1  :  goto __skip_joy
   2158  f5f3
   2159  f5f3		       2c 80 02 	      bit	SWCHA
   2160  f5f6		       70 0b		      BVS	.skipL069
   2161  f5f8				   .condpart10
   2162  f5f8		       a9 01		      LDA	#1
   2163  f5fa		       c5 81		      CMP	player1x
   2164  f5fc		       b0 05		      BCS	.skip10then
   2165  f5fe				   .condpart11
   2166  f5fe		       c6 81		      DEC	player1x
   2167  f600		       4c 13 f6 	      jmp	.__skip_joy
   2168  f603
   2169  f603				   .skip10then
   2170  f603				   .skipL069
   2171  f603				   .L070		;  if joy0right  &&  player1x	<  150 then player1x  =  player1x  +  1  :  goto __skip_joy
   2172  f603
   2173  f603		       2c 80 02 	      bit	SWCHA
   2174  f606		       30 0b		      BMI	.skipL070
   2175  f608				   .condpart12
   2176  f608		       a5 81		      LDA	player1x
   2177  f60a		       c9 96		      CMP	#150
   2178  f60c		       b0 05		      BCS	.skip12then
   2179  f60e				   .condpart13
   2180  f60e		       e6 81		      INC	player1x
   2181  f610		       4c 13 f6 	      jmp	.__skip_joy
   2182  f613
   2183  f613				   .skip12then
   2184  f613				   .skipL070
   2185  f613				   .
   2186  f613							; 
   2187  f613
   2188  f613				   .__skip_joy
   2189  f613							; __skip_joy
   2190  f613
   2191  f613				   .
   2192  f613							; 
   2193  f613
   2194  f613				   .
   2195  f613							; 
   2196  f613
   2197  f613				   .
   2198  f613							; 
   2199  f613
   2200  f613				   .L071		;  if !_bit_supressores{4} then gosub __nave
   2201  f613
   2202  f613		       a5 dd		      LDA	_bit_supressores
   2203  f615		       29 10		      AND	#16
   2204  f617		       d0 03		      BNE	.skipL071
   2205  f619				   .condpart14
   2206  f619		       20 1d fb 	      jsr	.__nave
   2207  f61c
   2208  f61c				   .skipL071
   2209  f61c				   .L072		;  if _bit_supressores{4} then goto __skip_escudo
   2210  f61c
   2211  f61c		       a5 dd		      LDA	_bit_supressores
   2212  f61e		       29 10		      AND	#16
   2213  f620		       f0 03		      BEQ	.skipL072
   2214  f622				   .condpart15
   2215  f622		       4c 48 f6 	      jmp	.__skip_escudo
   2216  f625
   2217  f625				   .skipL072
   2218  f625				   .L073		;  if pfscore1  =  0 then _bit_supressores{4}	=  0  :  goto __skip_escudo
   2219  f625
   2220  f625		       a5 f2		      LDA	pfscore1
   2221  f627		       c9 00		      CMP	#0
   2222  f629		       d0 09		      BNE	.skipL073
   2223  f62b				   .condpart16
   2224  f62b		       a5 dd		      LDA	_bit_supressores
   2225  f62d		       29 ef		      AND	#239
   2226  f62f		       85 dd		      STA	_bit_supressores
   2227  f631		       4c 48 f6 	      jmp	.__skip_escudo
   2228  f634
   2229  f634				   .skipL073
   2230  f634				   .L074		;  if joy0down then _bit_supressores{4}  =  1	:  e  =  40  :	goto __escudo
   2231  f634
   2232  f634		       a9 20		      lda	#$20
   2233  f636		       2c 80 02 	      bit	SWCHA
   2234  f639		       d0 0d		      BNE	.skipL074
   2235  f63b				   .condpart17
   2236  f63b		       a5 dd		      LDA	_bit_supressores
   2237  f63d		       09 10		      ORA	#16
   2238  f63f		       85 dd		      STA	_bit_supressores
   2239  f641		       a9 28		      LDA	#40
   2240  f643		       85 d8		      STA	e
   2241  f645		       4c 0e fb 	      jmp	.__escudo
   2242  f648
   2243  f648				   .skipL074
   2244  f648				   .__skip_escudo
   2245  f648							; __skip_escudo
   2246  f648
   2247  f648				   .
   2248  f648							; 
   2249  f648
   2250  f648				   .
   2251  f648							; 
   2252  f648
   2253  f648				   .L075		;  if missile1y  >  240 then _bit_supressores{1}  =  0  :  goto __skip_missile1
   2254  f648
   2255  f648		       a9 f0		      LDA	#240
   2256  f64a		       c5 88		      CMP	missile1y
   2257  f64c		       b0 09		      BCS	.skipL075
   2258  f64e				   .condpart18
   2259  f64e		       a5 dd		      LDA	_bit_supressores
   2260  f650		       29 fd		      AND	#253
   2261  f652		       85 dd		      STA	_bit_supressores
   2262  f654		       4c 5e f6 	      jmp	.__skip_missile1
   2263  f657
   2264  f657				   .skipL075
   2265  f657				   .L076		;  missile1y  =  missile1y  -	2
   2266  f657
   2267  f657		       a5 88		      LDA	missile1y
   2268  f659		       38		      SEC
   2269  f65a		       e9 02		      SBC	#2
   2270  f65c		       85 88		      STA	missile1y
   2271  f65e				   .__skip_missile1
   2272  f65e							; __skip_missile1
   2273  f65e
   2274  f65e				   .L077		;  if _bit_supressores{1} then __skip_fire
   2275  f65e
   2276  f65e		       a5 dd		      LDA	_bit_supressores
   2277  f660		       29 02		      AND	#2
   2278  f662		       d0 26		      bne	.__skip_fire
   2279  f664				   .L078		;  if joy0fire then AUDV0  =  0  :  _duracao_som0  =  10  :  _bit_supressores{1}  =  1  :  _bit_supressores{3}  =  1  :  missile1y  =	player1y  -  3 : missile1x  =  player1x  +  5
   2280  f664
   2281  f664		       24 0c		      bit	INPT4
   2282  f666		       30 22		      BMI	.skipL078
   2283  f668				   .condpart19
   2284  f668		       a9 00		      LDA	#0
   2285  f66a		       85 19		      STA	AUDV0
   2286  f66c		       a9 0a		      LDA	#10
   2287  f66e		       85 d9		      STA	_duracao_som0
   2288  f670		       a5 dd		      LDA	_bit_supressores
   2289  f672		       09 02		      ORA	#2
   2290  f674		       85 dd		      STA	_bit_supressores
   2291  f676		       a5 dd		      LDA	_bit_supressores
   2292  f678		       09 08		      ORA	#8
   2293  f67a		       85 dd		      STA	_bit_supressores
   2294  f67c		       a5 86		      LDA	player1y
   2295  f67e		       38		      SEC
   2296  f67f		       e9 03		      SBC	#3
   2297  f681		       85 88		      STA	missile1y
   2298  f683		       a5 81		      LDA	player1x
   2299  f685		       18		      CLC
   2300  f686		       69 05		      ADC	#5
   2301  f688		       85 83		      STA	missile1x
   2302  f68a				   .skipL078
   2303  f68a				   .__skip_fire
   2304  f68a							; __skip_fire
   2305  f68a
   2306  f68a				   .
   2307  f68a							; 
   2308  f68a
   2309  f68a				   .L079		;  gosub __regular
   2310  f68a
   2311  f68a		       20 60 f9 	      jsr	.__regular
   2312  f68d
   2313  f68d				   .
   2314  f68d							; 
   2315  f68d
   2316  f68d				   .__fases
   2317  f68d							; __fases
   2318  f68d
   2319  f68d				   .L080		;  if _cont_telas  >=	10  &&	!_bit_supressores{5} then _cont_telas  =  10  :  _bit_supressores{5}  =  1
   2320  f68d
   2321  f68d		       a5 e6		      LDA	_cont_telas
   2322  f68f		       c9 0a		      CMP	#10
   2323  f691		       90 10		      BCC	.skipL080
   2324  f693				   .condpart20
   2325  f693		       a5 dd		      LDA	_bit_supressores
   2326  f695		       29 20		      AND	#32
   2327  f697		       d0 0a		      BNE	.skip20then
   2328  f699				   .condpart21
   2329  f699		       a9 0a		      LDA	#10
   2330  f69b		       85 e6		      STA	_cont_telas
   2331  f69d		       a5 dd		      LDA	_bit_supressores
   2332  f69f		       09 20		      ORA	#32
   2333  f6a1		       85 dd		      STA	_bit_supressores
   2334  f6a3				   .skip20then
   2335  f6a3				   .skipL080
   2336  f6a3				   .L081		;  if _bit_supressores{5} then goto __transicao
   2337  f6a3
   2338  f6a3		       a5 dd		      LDA	_bit_supressores
   2339  f6a5		       29 20		      AND	#32
   2340  f6a7		       f0 03		      BEQ	.skipL081
   2341  f6a9				   .condpart22
   2342  f6a9		       4c 74 fb 	      jmp	.__transicao
   2343  f6ac
   2344  f6ac				   .skipL081
   2345  f6ac				   .
   2346  f6ac							; 
   2347  f6ac
   2348  f6ac				   .__skip_transicao
   2349  f6ac							; __skip_transicao
   2350  f6ac
   2351  f6ac				   .L082		;  if _fases  >  200 then _fases  =  0
   2352  f6ac
   2353  f6ac		       a9 c8		      LDA	#200
   2354  f6ae		       c5 e4		      CMP	_fases
   2355  f6b0		       b0 04		      BCS	.skipL082
   2356  f6b2				   .condpart23
   2357  f6b2		       a9 00		      LDA	#0
   2358  f6b4		       85 e4		      STA	_fases
   2359  f6b6				   .skipL082
   2360  f6b6				   .
   2361  f6b6							; 
   2362  f6b6
   2363  f6b6				   .L083		;  if _fases  =  0 then COLUPF  =  $00  :  COLUBK  =  $8A  :  gosub __inimigo_bomba  :  goto __skip_fase_inimigo
   2364  f6b6
   2365  f6b6		       a5 e4		      LDA	_fases
   2366  f6b8		       c9 00		      CMP	#0
   2367  f6ba		       d0 0e		      BNE	.skipL083
   2368  f6bc				   .condpart24
   2369  f6bc		       a9 00		      LDA	#$00
   2370  f6be		       85 08		      STA	COLUPF
   2371  f6c0		       a9 8a		      LDA	#$8A
   2372  f6c2		       85 09		      STA	COLUBK
   2373  f6c4		       20 2e fa 	      jsr	.__inimigo_bomba
   2374  f6c7		       4c ec f6 	      jmp	.__skip_fase_inimigo
   2375  f6ca
   2376  f6ca				   .skipL083
   2377  f6ca				   .
   2378  f6ca							; 
   2379  f6ca
   2380  f6ca				   .L084		;  if _fases  >=  1 then goto __fase1_inimigo
   2381  f6ca
   2382  f6ca		       a5 e4		      LDA	_fases
   2383  f6cc		       c9 01		      CMP	#1
   2384  f6ce		       90 03		      BCC	.skipL084
   2385  f6d0				   .condpart25
   2386  f6d0		       4c d3 f6 	      jmp	.__fase1_inimigo
   2387  f6d3
   2388  f6d3				   .skipL084
   2389  f6d3				   .__fase1_inimigo
   2390  f6d3							; __fase1_inimigo
   2391  f6d3
   2392  f6d3				   .L085		;  COLUPF  =  $04
   2393  f6d3
   2394  f6d3		       a9 04		      LDA	#$04
   2395  f6d5		       85 08		      STA	COLUPF
   2396  f6d7				   .L086		;  COLUBK  =  $00
   2397  f6d7
   2398  f6d7		       a9 00		      LDA	#$00
   2399  f6d9		       85 09		      STA	COLUBK
   2400  f6db				   .L087		;  COLUP1  =  14
   2401  f6db
   2402  f6db		       a9 0e		      LDA	#14
   2403  f6dd		       85 07		      STA	COLUP1
   2404  f6df				   .L088		;  if !_bit_supressores{7} then gosub __inimigo_tie else gosub __item_shield
   2405  f6df
   2406  f6df		       24 dd		      BIT	_bit_supressores
   2407  f6e1		       30 06		      BMI	.skipL088
   2408  f6e3				   .condpart26
   2409  f6e3		       20 a3 fa 	      jsr	.__inimigo_tie
   2410  f6e6		       4c ec f6 	      jmp	.skipelse1
   2411  f6e9				   .skipL088
   2412  f6e9		       20 4c fb 	      jsr	.__item_shield
   2413  f6ec
   2414  f6ec				   .skipelse1
   2415  f6ec				   .
   2416  f6ec							; 
   2417  f6ec
   2418  f6ec				   .__skip_fase_inimigo
   2419  f6ec							; __skip_fase_inimigo
   2420  f6ec
   2421  f6ec				   .
   2422  f6ec							; 
   2423  f6ec
   2424  f6ec				   .L089		;  _animacao  =  _animacao  +	1
   2425  f6ec
   2426  f6ec		       e6 e1		      INC	_animacao
   2427  f6ee				   .L090		;  if _animacao  =  21 then _animacao	=  0
   2428  f6ee
   2429  f6ee		       a5 e1		      LDA	_animacao
   2430  f6f0		       c9 15		      CMP	#21
   2431  f6f2		       d0 04		      BNE	.skipL090
   2432  f6f4				   .condpart27
   2433  f6f4		       a9 00		      LDA	#0
   2434  f6f6		       85 e1		      STA	_animacao
   2435  f6f8				   .skipL090
   2436  f6f8				   .
   2437  f6f8							; 
   2438  f6f8
   2439  f6f8				   .L091		;  _cont_escudo  =  _cont_escudo  -  1
   2440  f6f8
   2441  f6f8		       c6 d8		      DEC	_cont_escudo
   2442  f6fa				   .L092		;  if _cont_escudo  =	0  &&  _bit_supressores{4} then pfscore1  =  pfscore1 / 4  :  _bit_supressores{4}  =  0
   2443  f6fa
   2444  f6fa		       a5 d8		      LDA	_cont_escudo
   2445  f6fc		       c9 00		      CMP	#0
   2446  f6fe		       d0 12		      BNE	.skipL092
   2447  f700				   .condpart28
   2448  f700		       a5 dd		      LDA	_bit_supressores
   2449  f702		       29 10		      AND	#16
   2450  f704		       f0 0c		      BEQ	.skip28then
   2451  f706				   .condpart29
   2452  f706		       a5 f2		      LDA	pfscore1
   2453  f708		       4a		      lsr
   2454  f709		       4a		      lsr
   2455  f70a		       85 f2		      STA	pfscore1
   2456  f70c		       a5 dd		      LDA	_bit_supressores
   2457  f70e		       29 ef		      AND	#239
   2458  f710		       85 dd		      STA	_bit_supressores
   2459  f712				   .skip28then
   2460  f712				   .skipL092
   2461  f712				   .
   2462  f712							; 
   2463  f712
   2464  f712				   .L093		;  if _fases  <  4 then c  =  d  +  8	:  goto __skip_dificuldade
   2465  f712
   2466  f712		       a5 e4		      LDA	_fases
   2467  f714		       c9 04		      CMP	#4
   2468  f716		       b0 0a		      BCS	.skipL093
   2469  f718				   .condpart30
   2470  f718		       a5 d7		      LDA	d
   2471  f71a		       18		      CLC
   2472  f71b		       69 08		      ADC	#8
   2473  f71d		       85 d6		      STA	c
   2474  f71f		       4c 7b f7 	      jmp	.__skip_dificuldade
   2475  f722
   2476  f722				   .skipL093
   2477  f722				   .L094		;  if _fases  <  8 then goto __randomicos
   2478  f722
   2479  f722		       a5 e4		      LDA	_fases
   2480  f724		       c9 08		      CMP	#8
   2481  f726		       b0 03		      BCS	.skipL094
   2482  f728				   .condpart31
   2483  f728		       4c 3b f7 	      jmp	.__randomicos
   2484  f72b
   2485  f72b				   .skipL094
   2486  f72b				   .L095		;  if _fases  <  100 then c  =  d  +  2  :  goto __skip_dificuldade
   2487  f72b
   2488  f72b		       a5 e4		      LDA	_fases
   2489  f72d		       c9 64		      CMP	#100
   2490  f72f		       b0 0a		      BCS	.skipL095
   2491  f731				   .condpart32
   2492  f731		       a5 d7		      LDA	d
   2493  f733		       18		      CLC
   2494  f734		       69 02		      ADC	#2
   2495  f736		       85 d6		      STA	c
   2496  f738		       4c 7b f7 	      jmp	.__skip_dificuldade
   2497  f73b
   2498  f73b				   .skipL095
   2499  f73b				   .
   2500  f73b							; 
   2501  f73b
   2502  f73b				   .__randomicos
   2503  f73b							; __randomicos
   2504  f73b
   2505  f73b				   .
   2506  f73b							; 
   2507  f73b
   2508  f73b				   .L096		;  if _dificuldade  =	0 then c  =  d	+  8  :  goto __skip_dificuldade
   2509  f73b
   2510  f73b		       a5 df		      LDA	_dificuldade
   2511  f73d		       c9 00		      CMP	#0
   2512  f73f		       d0 0a		      BNE	.skipL096
   2513  f741				   .condpart33
   2514  f741		       a5 d7		      LDA	d
   2515  f743		       18		      CLC
   2516  f744		       69 08		      ADC	#8
   2517  f746		       85 d6		      STA	c
   2518  f748		       4c 7b f7 	      jmp	.__skip_dificuldade
   2519  f74b
   2520  f74b				   .skipL096
   2521  f74b				   .L097		;  if _dificuldade  =	1 then c  =  d	+  6  :  goto __skip_dificuldade
   2522  f74b
   2523  f74b		       a5 df		      LDA	_dificuldade
   2524  f74d		       c9 01		      CMP	#1
   2525  f74f		       d0 0a		      BNE	.skipL097
   2526  f751				   .condpart34
   2527  f751		       a5 d7		      LDA	d
   2528  f753		       18		      CLC
   2529  f754		       69 06		      ADC	#6
   2530  f756		       85 d6		      STA	c
   2531  f758		       4c 7b f7 	      jmp	.__skip_dificuldade
   2532  f75b
   2533  f75b				   .skipL097
   2534  f75b				   .L098		;  if _dificuldade  =	2 then c  =  d	+  4  :  goto __skip_dificuldade
   2535  f75b
   2536  f75b		       a5 df		      LDA	_dificuldade
   2537  f75d		       c9 02		      CMP	#2
   2538  f75f		       d0 0a		      BNE	.skipL098
   2539  f761				   .condpart35
   2540  f761		       a5 d7		      LDA	d
   2541  f763		       18		      CLC
   2542  f764		       69 04		      ADC	#4
   2543  f766		       85 d6		      STA	c
   2544  f768		       4c 7b f7 	      jmp	.__skip_dificuldade
   2545  f76b
   2546  f76b				   .skipL098
   2547  f76b				   .L099		;  if _dificuldade  =	3 then c  =  d	+  2  :  goto __skip_dificuldade
   2548  f76b
   2549  f76b		       a5 df		      LDA	_dificuldade
   2550  f76d		       c9 03		      CMP	#3
   2551  f76f		       d0 0a		      BNE	.skipL099
   2552  f771				   .condpart36
   2553  f771		       a5 d7		      LDA	d
   2554  f773		       18		      CLC
   2555  f774		       69 02		      ADC	#2
   2556  f776		       85 d6		      STA	c
   2557  f778		       4c 7b f7 	      jmp	.__skip_dificuldade
   2558  f77b
   2559  f77b				   .skipL099
   2560  f77b				   .
   2561  f77b							; 
   2562  f77b
   2563  f77b				   .__skip_dificuldade
   2564  f77b							; __skip_dificuldade
   2565  f77b
   2566  f77b				   .
   2567  f77b							; 
   2568  f77b
   2569  f77b				   .
   2570  f77b							; 
   2571  f77b
   2572  f77b				   .L0100		;  if _fases  >  16 then bally  =  100  :  goto __skip_ball
   2573  f77b
   2574  f77b		       a9 10		      LDA	#16
   2575  f77d		       c5 e4		      CMP	_fases
   2576  f77f		       b0 07		      BCS	.skipL0100
   2577  f781				   .condpart37
   2578  f781		       a9 64		      LDA	#100
   2579  f783		       85 89		      STA	bally
   2580  f785		       4c d9 f7 	      jmp	.__skip_ball
   2581  f788
   2582  f788				   .skipL0100
   2583  f788				   .L0101		;  ballx  =  c  +  c  +  c  +	c  :  goto __skip_ball_pos
   2584  f788
   2585  f788							; complex statement detected
   2586  f788		       a5 d6		      LDA	c
   2587  f78a		       18		      CLC
   2588  f78b		       65 d6		      ADC	c
   2589  f78d		       18		      CLC
   2590  f78e		       65 d6		      ADC	c
   2591  f790		       18		      CLC
   2592  f791		       65 d6		      ADC	c
   2593  f793		       85 84		      STA	ballx
   2594  f795		       4c ce f7 	      jmp	.__skip_ball_pos
   2595  f798
   2596  f798				   .L0102		;  ballx  =  c  +  c  +  c  +	c  +  4  :  goto __skip_ball_pos
   2597  f798
   2598  f798							; complex statement detected
   2599  f798		       a5 d6		      LDA	c
   2600  f79a		       18		      CLC
   2601  f79b		       65 d6		      ADC	c
   2602  f79d		       18		      CLC
   2603  f79e		       65 d6		      ADC	c
   2604  f7a0		       18		      CLC
   2605  f7a1		       65 d6		      ADC	c
   2606  f7a3		       18		      CLC
   2607  f7a4		       69 04		      ADC	#4
   2608  f7a6		       85 84		      STA	ballx
   2609  f7a8		       4c ce f7 	      jmp	.__skip_ball_pos
   2610  f7ab
   2611  f7ab				   .L0103		;  ballx  =  c  +  c  +  c  +	c  +  8  :  goto __skip_ball_pos
   2612  f7ab
   2613  f7ab							; complex statement detected
   2614  f7ab		       a5 d6		      LDA	c
   2615  f7ad		       18		      CLC
   2616  f7ae		       65 d6		      ADC	c
   2617  f7b0		       18		      CLC
   2618  f7b1		       65 d6		      ADC	c
   2619  f7b3		       18		      CLC
   2620  f7b4		       65 d6		      ADC	c
   2621  f7b6		       18		      CLC
   2622  f7b7		       69 08		      ADC	#8
   2623  f7b9		       85 84		      STA	ballx
   2624  f7bb		       4c ce f7 	      jmp	.__skip_ball_pos
   2625  f7be
   2626  f7be				   .L0104		;  ballx  =  c  +  c  +  c  +	c  +  12
   2627  f7be
   2628  f7be							; complex statement detected
   2629  f7be		       a5 d6		      LDA	c
   2630  f7c0		       18		      CLC
   2631  f7c1		       65 d6		      ADC	c
   2632  f7c3		       18		      CLC
   2633  f7c4		       65 d6		      ADC	c
   2634  f7c6		       18		      CLC
   2635  f7c7		       65 d6		      ADC	c
   2636  f7c9		       18		      CLC
   2637  f7ca		       69 0c		      ADC	#12
   2638  f7cc		       85 84		      STA	ballx
   2639  f7ce				   .__skip_ball_pos
   2640  f7ce							; __skip_ball_pos
   2641  f7ce
   2642  f7ce				   .L0105		;  bally  =  bally  +	1
   2643  f7ce
   2644  f7ce		       e6 89		      INC	bally
   2645  f7d0				   .L0106		;  if joy0up then bally  =  bally  +  1
   2646  f7d0
   2647  f7d0		       a9 10		      lda	#$10
   2648  f7d2		       2c 80 02 	      bit	SWCHA
   2649  f7d5		       d0 02		      BNE	.skipL0106
   2650  f7d7				   .condpart38
   2651  f7d7		       e6 89		      INC	bally
   2652  f7d9				   .skipL0106
   2653  f7d9				   .
   2654  f7d9							; 
   2655  f7d9
   2656  f7d9				   .__skip_ball
   2657  f7d9							; __skip_ball
   2658  f7d9
   2659  f7d9				   .
   2660  f7d9							; 
   2661  f7d9
   2662  f7d9				   .
   2663  f7d9							; 
   2664  f7d9
   2665  f7d9				   .L0107		;  pfhline d 1 c off
   2666  f7d9
   2667  f7d9		       a2 01		      LDX	#1
   2668  f7db		       a5 d6		      LDA	c
   2669  f7dd		       85 9e		      STA	temp3
   2670  f7df		       a0 01		      LDY	#1
   2671  f7e1		       a5 d7		      LDA	d
   2672  f7e3		       20 89 f2 	      jsr	pfhline
   2673  f7e6				   .L0108		;  CTRLPF  =  $31
   2674  f7e6
   2675  f7e6		       a9 31		      LDA	#$31
   2676  f7e8		       85 0a		      STA	CTRLPF
   2677  f7ea				   .L0109		;  goto __pfscroll
   2678  f7ea
   2679  f7ea		       4c 58 f9 	      jmp	.__pfscroll
   2680  f7ed
   2681  f7ed				   .
   2682  f7ed							; 
   2683  f7ed
   2684  f7ed				   .__skip_scroll
   2685  f7ed							; __skip_scroll
   2686  f7ed
   2687  f7ed				   .
   2688  f7ed							; 
   2689  f7ed
   2690  f7ed				   .__skip_perde_vida
   2691  f7ed							; __skip_perde_vida
   2692  f7ed
   2693  f7ed				   .
   2694  f7ed							; 
   2695  f7ed
   2696  f7ed				   .
   2697  f7ed							; 
   2698  f7ed
   2699  f7ed				   .L0110		;  if _bit_supressores{4} then goto __skip_collision  :  rem se escudo on pula as colisoes
   2700  f7ed
   2701  f7ed		       a5 dd		      LDA	_bit_supressores
   2702  f7ef		       29 10		      AND	#16
   2703  f7f1		       f0 03		      BEQ	.skipL0110
   2704  f7f3				   .condpart39
   2705  f7f3		       4c 2c f8 	      jmp	.__skip_collision
   2706  f7f6				   .skipL0110
   2707  f7f6				   .
   2708  f7f6							; 
   2709  f7f6
   2710  f7f6				   .L0111		;  if collision(ball,player1) then _duracao_som0  =  80  :  pfscore2  =  pfscore2 / 4	:  goto __perde_vida
   2711  f7f6
   2712  f7f6		       24 03		      bit	CXP1FB
   2713  f7f8		       50 0d		      BVC	.skipL0111
   2714  f7fa				   .condpart40
   2715  f7fa		       a9 50		      LDA	#80
   2716  f7fc		       85 d9		      STA	_duracao_som0
   2717  f7fe		       a5 f3		      LDA	pfscore2
   2718  f800		       4a		      lsr
   2719  f801		       4a		      lsr
   2720  f802		       85 f3		      STA	pfscore2
   2721  f804		       4c 9c f9 	      jmp	.__perde_vida
   2722  f807
   2723  f807				   .skipL0111
   2724  f807				   .L0112		;  if collision(ball,missile1) then bally  =  100  :  missile1y  =  0
   2725  f807
   2726  f807		       24 05		      bit	CXM1FB
   2727  f809		       50 08		      BVC	.skipL0112
   2728  f80b				   .condpart41
   2729  f80b		       a9 64		      LDA	#100
   2730  f80d		       85 89		      STA	bally
   2731  f80f		       a9 00		      LDA	#0
   2732  f811		       85 88		      STA	missile1y
   2733  f813				   .skipL0112
   2734  f813				   .L0113		;  if collision(player1,playfield) then _duracao_som0	=  80  :  pfscore2  =  pfscore2 / 4  :	goto __perde_vida
   2735  f813
   2736  f813		       24 03		      bit	CXP1FB
   2737  f815		       10 0d		      BPL	.skipL0113
   2738  f817				   .condpart42
   2739  f817		       a9 50		      LDA	#80
   2740  f819		       85 d9		      STA	_duracao_som0
   2741  f81b		       a5 f3		      LDA	pfscore2
   2742  f81d		       4a		      lsr
   2743  f81e		       4a		      lsr
   2744  f81f		       85 f3		      STA	pfscore2
   2745  f821		       4c 9c f9 	      jmp	.__perde_vida
   2746  f824
   2747  f824				   .skipL0113
   2748  f824				   .L0114		;  if collision(missile1,playfield) then missile1y  =	1
   2749  f824
   2750  f824		       24 05		      bit	CXM1FB
   2751  f826		       10 04		      BPL	.skipL0114
   2752  f828				   .condpart43
   2753  f828		       a9 01		      LDA	#1
   2754  f82a		       85 88		      STA	missile1y
   2755  f82c				   .skipL0114
   2756  f82c				   .
   2757  f82c							; 
   2758  f82c
   2759  f82c				   .
   2760  f82c							; 
   2761  f82c
   2762  f82c				   .__skip_collision
   2763  f82c							; __skip_collision
   2764  f82c
   2765  f82c				   .
   2766  f82c							; 
   2767  f82c
   2768  f82c				   .
   2769  f82c							; 
   2770  f82c
   2771  f82c				   .L0115		;  if _fases  =  0 then goto __fase0
   2772  f82c
   2773  f82c		       a5 e4		      LDA	_fases
   2774  f82e		       c9 00		      CMP	#0
   2775  f830		       d0 03		      BNE	.skipL0115
   2776  f832				   .condpart44
   2777  f832		       4c 3e f8 	      jmp	.__fase0
   2778  f835
   2779  f835				   .skipL0115
   2780  f835				   .L0116		;  if _fases  >=  1 then goto __fase1
   2781  f835
   2782  f835		       a5 e4		      LDA	_fases
   2783  f837		       c9 01		      CMP	#1
   2784  f839		       90 03		      BCC	.skipL0116
   2785  f83b				   .condpart45
   2786  f83b		       4c 77 f8 	      jmp	.__fase1
   2787  f83e
   2788  f83e				   .skipL0116
   2789  f83e				   .
   2790  f83e							; 
   2791  f83e
   2792  f83e				   .
   2793  f83e							; 
   2794  f83e
   2795  f83e				   .__fase0
   2796  f83e							; __fase0
   2797  f83e
   2798  f83e				   .L0117		;  if collision(missile1,player0) then missile1y  =  0  :  _bit_supressores{3}  =  0  :  _duracao_som0  =  10	:  score  =  score  +  100  :  player0y  =  0
   2799  f83e
   2800  f83e		       24 01		      bit	CXM1P
   2801  f840		       10 21		      BPL	.skipL0117
   2802  f842				   .condpart46
   2803  f842		       a9 00		      LDA	#0
   2804  f844		       85 88		      STA	missile1y
   2805  f846		       a5 dd		      LDA	_bit_supressores
   2806  f848		       29 f7		      AND	#247
   2807  f84a		       85 dd		      STA	_bit_supressores
   2808  f84c		       a9 0a		      LDA	#10
   2809  f84e		       85 d9		      STA	_duracao_som0
   2810  f850		       f8		      SED
   2811  f851		       18		      CLC
   2812  f852		       a5 94		      LDA	score+1
   2813  f854		       69 01		      ADC	#$01
   2814  f856		       85 94		      STA	score+1
   2815  f858		       a5 93		      LDA	score
   2816  f85a		       69 00		      ADC	#$00
   2817  f85c		       85 93		      STA	score
   2818  f85e		       d8		      CLD
   2819  f85f		       a9 00		      LDA	#0
   2820  f861		       85 85		      STA	player0y
   2821  f863				   .skipL0117
   2822  f863				   .L0118		;  if collision(player0,player1) then _duracao_som0  =  80  :	pfscore2  =  pfscore2 / 4  :  goto __perde_vida
   2823  f863
   2824  f863		       24 07		      bit	CXPPMM
   2825  f865		       10 0d		      BPL	.skipL0118
   2826  f867				   .condpart47
   2827  f867		       a9 50		      LDA	#80
   2828  f869		       85 d9		      STA	_duracao_som0
   2829  f86b		       a5 f3		      LDA	pfscore2
   2830  f86d		       4a		      lsr
   2831  f86e		       4a		      lsr
   2832  f86f		       85 f3		      STA	pfscore2
   2833  f871		       4c 9c f9 	      jmp	.__perde_vida
   2834  f874
   2835  f874				   .skipL0118
   2836  f874				   .L0119		;  goto __skip_collision_fases
   2837  f874
   2838  f874		       4c e7 f8 	      jmp	.__skip_collision_fases
   2839  f877
   2840  f877				   .__fase1
   2841  f877							; __fase1
   2842  f877
   2843  f877				   .L0120		;  if _bit_supressores{7} then goto __collision_itemshield
   2844  f877
   2845  f877		       24 dd		      BIT	_bit_supressores
   2846  f879		       10 03		      BPL	.skipL0120
   2847  f87b				   .condpart48
   2848  f87b		       4c b9 f8 	      jmp	.__collision_itemshield
   2849  f87e
   2850  f87e				   .skipL0120
   2851  f87e				   .
   2852  f87e							; 
   2853  f87e
   2854  f87e				   .L0121		;  if collision(missile1,player0) then missile1y  =  0  :  _bit_supressores{3}  =  0  :  _duracao_som0  =  10	:  score  =  score  +  100  :  _bit_supressores{7}  =  1
   2855  f87e
   2856  f87e		       24 01		      bit	CXM1P
   2857  f880		       10 23		      BPL	.skipL0121
   2858  f882				   .condpart49
   2859  f882		       a9 00		      LDA	#0
   2860  f884		       85 88		      STA	missile1y
   2861  f886		       a5 dd		      LDA	_bit_supressores
   2862  f888		       29 f7		      AND	#247
   2863  f88a		       85 dd		      STA	_bit_supressores
   2864  f88c		       a9 0a		      LDA	#10
   2865  f88e		       85 d9		      STA	_duracao_som0
   2866  f890		       f8		      SED
   2867  f891		       18		      CLC
   2868  f892		       a5 94		      LDA	score+1
   2869  f894		       69 01		      ADC	#$01
   2870  f896		       85 94		      STA	score+1
   2871  f898		       a5 93		      LDA	score
   2872  f89a		       69 00		      ADC	#$00
   2873  f89c		       85 93		      STA	score
   2874  f89e		       d8		      CLD
   2875  f89f		       a5 dd		      LDA	_bit_supressores
   2876  f8a1		       09 80		      ORA	#128
   2877  f8a3		       85 dd		      STA	_bit_supressores
   2878  f8a5				   .skipL0121
   2879  f8a5				   .L0122		;  if collision(player0,player1) then _duracao_som0  =  80  :	pfscore2  =  pfscore2 / 4  :  goto __perde_vida
   2880  f8a5
   2881  f8a5		       24 07		      bit	CXPPMM
   2882  f8a7		       10 0d		      BPL	.skipL0122
   2883  f8a9				   .condpart50
   2884  f8a9		       a9 50		      LDA	#80
   2885  f8ab		       85 d9		      STA	_duracao_som0
   2886  f8ad		       a5 f3		      LDA	pfscore2
   2887  f8af		       4a		      lsr
   2888  f8b0		       4a		      lsr
   2889  f8b1		       85 f3		      STA	pfscore2
   2890  f8b3		       4c 9c f9 	      jmp	.__perde_vida
   2891  f8b6
   2892  f8b6				   .skipL0122
   2893  f8b6				   .L0123		;  goto __skip_collision_fases
   2894  f8b6
   2895  f8b6		       4c e7 f8 	      jmp	.__skip_collision_fases
   2896  f8b9
   2897  f8b9				   .
   2898  f8b9							; 
   2899  f8b9
   2900  f8b9				   .__collision_itemshield
   2901  f8b9							; __collision_itemshield
   2902  f8b9
   2903  f8b9				   .L0124		;  if collision(missile1,player0) then missile1y  =  0  :  _bit_supressores{3}  =  0  :  _duracao_som0  =  10	:  _bit_supressores{7}	=  0  :  player0y  =  0
   2904  f8b9
   2905  f8b9		       24 01		      bit	CXM1P
   2906  f8bb		       10 18		      BPL	.skipL0124
   2907  f8bd				   .condpart51
   2908  f8bd		       a9 00		      LDA	#0
   2909  f8bf		       85 88		      STA	missile1y
   2910  f8c1		       a5 dd		      LDA	_bit_supressores
   2911  f8c3		       29 f7		      AND	#247
   2912  f8c5		       85 dd		      STA	_bit_supressores
   2913  f8c7		       a9 0a		      LDA	#10
   2914  f8c9		       85 d9		      STA	_duracao_som0
   2915  f8cb		       a5 dd		      LDA	_bit_supressores
   2916  f8cd		       29 7f		      AND	#127
   2917  f8cf		       85 dd		      STA	_bit_supressores
   2918  f8d1		       a9 00		      LDA	#0
   2919  f8d3		       85 85		      STA	player0y
   2920  f8d5				   .skipL0124
   2921  f8d5				   .L0125		;  if collision(player0,player1) then player0y  =  0  :  _bit_supressores{7}  =  0  :	pfscore1  =  %00010101
   2922  f8d5
   2923  f8d5		       24 07		      bit	CXPPMM
   2924  f8d7		       10 0e		      BPL	.skipL0125
   2925  f8d9				   .condpart52
   2926  f8d9		       a9 00		      LDA	#0
   2927  f8db		       85 85		      STA	player0y
   2928  f8dd		       a5 dd		      LDA	_bit_supressores
   2929  f8df		       29 7f		      AND	#127
   2930  f8e1		       85 dd		      STA	_bit_supressores
   2931  f8e3		       a9 15		      LDA	#%00010101
   2932  f8e5		       85 f2		      STA	pfscore1
   2933  f8e7				   .skipL0125
   2934  f8e7				   .
   2935  f8e7							; 
   2936  f8e7
   2937  f8e7				   .__skip_collision_fases
   2938  f8e7							; __skip_collision_fases
   2939  f8e7
   2940  f8e7				   .L0126		;  drawscreen
   2941  f8e7
   2942  f8e7		       20 cc f3 	      jsr	drawscreen
   2943  f8ea				   .
   2944  f8ea							; 
   2945  f8ea
   2946  f8ea				   .L0127		;  if _bit_supressores{3} then goto __skip_som_morte_inimigo
   2947  f8ea
   2948  f8ea		       a5 dd		      LDA	_bit_supressores
   2949  f8ec		       29 08		      AND	#8
   2950  f8ee		       f0 03		      BEQ	.skipL0127
   2951  f8f0				   .condpart53
   2952  f8f0		       4c 0e f9 	      jmp	.__skip_som_morte_inimigo
   2953  f8f3
   2954  f8f3				   .skipL0127
   2955  f8f3				   .L0128		;  if _duracao_som0  =  0 then AUDV0  =  0  :	goto __skip_som_morte_inimigo
   2956  f8f3
   2957  f8f3		       a5 d9		      LDA	_duracao_som0
   2958  f8f5		       c9 00		      CMP	#0
   2959  f8f7		       d0 07		      BNE	.skipL0128
   2960  f8f9				   .condpart54
   2961  f8f9		       a9 00		      LDA	#0
   2962  f8fb		       85 19		      STA	AUDV0
   2963  f8fd		       4c 0e f9 	      jmp	.__skip_som_morte_inimigo
   2964  f900
   2965  f900				   .skipL0128
   2966  f900				   .
   2967  f900							; 
   2968  f900
   2969  f900				   .L0129		;  AUDV0  =  15  :  rem volume
   2970  f900
   2971  f900		       a9 0f		      LDA	#15
   2972  f902		       85 19		      STA	AUDV0
   2973  f904				   .L0130		;  AUDC0  =  12  :  rem tom
   2974  f904
   2975  f904		       a9 0c		      LDA	#12
   2976  f906		       85 15		      STA	AUDC0
   2977  f908				   .L0131		;  AUDF0  =  10  :  rem distorcao
   2978  f908
   2979  f908		       a9 0a		      LDA	#10
   2980  f90a		       85 17		      STA	AUDF0
   2981  f90c				   .L0132		;  _duracao_som0  =  _duracao_som0  -	1
   2982  f90c
   2983  f90c		       c6 d9		      DEC	_duracao_som0
   2984  f90e				   .__skip_som_morte_inimigo
   2985  f90e							; __skip_som_morte_inimigo
   2986  f90e
   2987  f90e				   .
   2988  f90e							; 
   2989  f90e
   2990  f90e				   .
   2991  f90e							; 
   2992  f90e
   2993  f90e				   .L0133		;  if !_bit_supressores{3} then goto __skip_som_tiro
   2994  f90e
   2995  f90e		       a5 dd		      LDA	_bit_supressores
   2996  f910		       29 08		      AND	#8
   2997  f912		       d0 03		      BNE	.skipL0133
   2998  f914				   .condpart55
   2999  f914		       4c 38 f9 	      jmp	.__skip_som_tiro
   3000  f917
   3001  f917				   .skipL0133
   3002  f917				   .L0134		;  if _duracao_som0  =  0 then AUDV0  =  0  :	_bit_supressores{3}  =	0  :  goto __skip_som_tiro
   3003  f917
   3004  f917		       a5 d9		      LDA	_duracao_som0
   3005  f919		       c9 00		      CMP	#0
   3006  f91b		       d0 0d		      BNE	.skipL0134
   3007  f91d				   .condpart56
   3008  f91d		       a9 00		      LDA	#0
   3009  f91f		       85 19		      STA	AUDV0
   3010  f921		       a5 dd		      LDA	_bit_supressores
   3011  f923		       29 f7		      AND	#247
   3012  f925		       85 dd		      STA	_bit_supressores
   3013  f927		       4c 38 f9 	      jmp	.__skip_som_tiro
   3014  f92a
   3015  f92a				   .skipL0134
   3016  f92a				   .L0135		;  AUDV0 = 15	:  rem volume
   3017  f92a
   3018  f92a		       a9 0f		      LDA	#15
   3019  f92c		       85 19		      STA	AUDV0
   3020  f92e				   .L0136		;  AUDC0  =  8  :  rem tom
   3021  f92e
   3022  f92e		       a9 08		      LDA	#8
   3023  f930		       85 15		      STA	AUDC0
   3024  f932				   .L0137		;  AUDF0  =  8  :  rem distorcao
   3025  f932
   3026  f932		       a9 08		      LDA	#8
   3027  f934		       85 17		      STA	AUDF0
   3028  f936				   .L0138		;  _duracao_som0  =  _duracao_som0  -	1
   3029  f936
   3030  f936		       c6 d9		      DEC	_duracao_som0
   3031  f938				   .__skip_som_tiro
   3032  f938							; __skip_som_tiro
   3033  f938
   3034  f938				   .
   3035  f938							; 
   3036  f938
   3037  f938				   .
   3038  f938							; 
   3039  f938
   3040  f938				   .L0139		;  if switchreset then goto __reset_game
   3041  f938
   3042  f938		       a9 01		      lda	#1
   3043  f93a		       2c 82 02 	      bit	SWCHB
   3044  f93d		       d0 03		      BNE	.skipL0139
   3045  f93f				   .condpart57
   3046  f93f		       4c 6c f4 	      jmp	.__reset_game
   3047  f942
   3048  f942				   .skipL0139
   3049  f942				   .L0140		;  goto __Main_Loop
   3050  f942
   3051  f942		       4c a9 f5 	      jmp	.__Main_Loop
   3052  f945
   3053  f945				   .
   3054  f945							; 
   3055  f945
   3056  f945				   .
   3057  f945							; 
   3058  f945
   3059  f945				   .
   3060  f945							; 
   3061  f945
   3062  f945				   .__game_over
   3063  f945							; __game_over
   3064  f945
   3065  f945				   .L0141		;  gosub __playfield_regular
   3066  f945
   3067  f945		       20 e8 fb 	      jsr	.__playfield_regular
   3068  f948
   3069  f948				   .L0142		;  drawscreen
   3070  f948
   3071  f948		       20 cc f3 	      jsr	drawscreen
   3072  f94b				   .L0143		;  if !switchreset then goto __game_over
   3073  f94b
   3074  f94b		       a9 01		      lda	#1
   3075  f94d		       2c 82 02 	      bit	SWCHB
   3076  f950		       f0 03		      BEQ	.skipL0143
   3077  f952				   .condpart58
   3078  f952		       4c 45 f9 	      jmp	.__game_over
   3079  f955
   3080  f955				   .skipL0143
   3081  f955				   .L0144		;  goto __reset_game
   3082  f955
   3083  f955		       4c 6c f4 	      jmp	.__reset_game
   3084  f958
   3085  f958				   .
   3086  f958							; 
   3087  f958
   3088  f958				   .__pfscroll
   3089  f958							; __pfscroll
   3090  f958
   3091  f958				   .L0145		;  pfscroll down
   3092  f958
   3093  f958		       a9 04		      LDA	#4
   3094  f95a		       20 fe f2 	      jsr	pfscroll
   3095  f95d				   .L0146		;  goto __skip_scroll
   3096  f95d
   3097  f95d		       4c ed f7 	      jmp	.__skip_scroll
   3098  f960
   3099  f960				   .
   3100  f960							; 
   3101  f960
   3102  f960				   .
   3103  f960							; 
   3104  f960
   3105  f960				   .__regular
   3106  f960							; __regular
   3107  f960
   3108  f960				   .
   3109  f960							; 
   3110  f960
   3111  f960				   .L0147		;  if !pfread ( 0 , 11 )  then _dificuldade  =   ( rand & 3 )	 :  goto __redesenha else return thisbank
   3112  f960
   3113  f960		       a9 00		      LDA	#0
   3114  f962		       a0 0b		      LDY	#11
   3115  f964		       20 76 f2 	      jsr	pfread
   3116  f967		       f0 0d		      BEQ	.skipL0147
   3117  f969				   .condpart59
   3118  f969							; complex statement detected
   3119  f969		       20 be f3 	      jsr	randomize
   3120  f96c		       29 03		      AND	#3
   3121  f96e		       85 df		      STA	_dificuldade
   3122  f970		       4c 77 f9 	      jmp	.__redesenha
   3123  f973		       4c 77 f9 	      jmp	.skipelse2
   3124  f976				   .skipL0147
   3125  f976		       60		      RTS
   3126  f977				   .skipelse2
   3127  f977				   .
   3128  f977							; 
   3129  f977
   3130  f977				   .__redesenha
   3131  f977							; __redesenha
   3132  f977
   3133  f977				   .
   3134  f977							; 
   3135  f977
   3136  f977				   .L0148		;  if player1x  >  19	&&  player1x  <  134 then _cont_telas  =  _cont_telas  +  1
   3137  f977
   3138  f977		       a9 13		      LDA	#19
   3139  f979		       c5 81		      CMP	player1x
   3140  f97b		       b0 08		      BCS	.skipL0148
   3141  f97d				   .condpart60
   3142  f97d		       a5 81		      LDA	player1x
   3143  f97f		       c9 86		      CMP	#134
   3144  f981		       b0 02		      BCS	.skip60then
   3145  f983				   .condpart61
   3146  f983		       e6 e6		      INC	_cont_telas
   3147  f985				   .skip60then
   3148  f985				   .skipL0148
   3149  f985				   .L0149		;  d  =   ( rand / 16 )   +  1
   3150  f985
   3151  f985							; complex statement detected
   3152  f985		       20 be f3 	      jsr	randomize
   3153  f988		       4a		      lsr
   3154  f989		       4a		      lsr
   3155  f98a		       4a		      lsr
   3156  f98b		       4a		      lsr
   3157  f98c		       18		      CLC
   3158  f98d		       69 01		      ADC	#1
   3159  f98f		       85 d7		      STA	d
   3160  f991				   .L0150		;  d  =  d  +	2
   3161  f991
   3162  f991		       a5 d7		      LDA	d
   3163  f993		       18		      CLC
   3164  f994		       69 02		      ADC	#2
   3165  f996		       85 d7		      STA	d
   3166  f998				   .
   3167  f998							; 
   3168  f998
   3169  f998				   .
   3170  f998							; 
   3171  f998
   3172  f998				   .
   3173  f998							; 
   3174  f998
   3175  f998				   .L0151		;  gosub __playfield_regular
   3176  f998
   3177  f998		       20 e8 fb 	      jsr	.__playfield_regular
   3178  f99b
   3179  f99b				   .
   3180  f99b							; 
   3181  f99b
   3182  f99b				   .L0152		;  return thisbank
   3183  f99b
   3184  f99b		       60		      RTS
   3185  f99c				   .
   3186  f99c							; 
   3187  f99c
   3188  f99c				   .
   3189  f99c							; 
   3190  f99c
   3191  f99c				   .__perde_vida
   3192  f99c							; __perde_vida
   3193  f99c
   3194  f99c				   .L0153		;  gosub __playfield_regular
   3195  f99c
   3196  f99c		       20 e8 fb 	      jsr	.__playfield_regular
   3197  f99f
   3198  f99f				   .L0154		;  bally  =  0
   3199  f99f
   3200  f99f		       a9 00		      LDA	#0
   3201  f9a1		       85 89		      STA	bally
   3202  f9a3				   .L0155		;  missile1y  =  0
   3203  f9a3
   3204  f9a3		       a9 00		      LDA	#0
   3205  f9a5		       85 88		      STA	missile1y
   3206  f9a7				   .L0156		;  COLUPF  =  10
   3207  f9a7
   3208  f9a7		       a9 0a		      LDA	#10
   3209  f9a9		       85 08		      STA	COLUPF
   3210  f9ab				   .L0157		;  COLUBK  =  25
   3211  f9ab
   3212  f9ab		       a9 19		      LDA	#25
   3213  f9ad		       85 09		      STA	COLUBK
   3214  f9af				   .L0158		;  COLUP1  =  $40
   3215  f9af
   3216  f9af		       a9 40		      LDA	#$40
   3217  f9b1		       85 07		      STA	COLUP1
   3218  f9b3				   .L0159		;  player0y  =  0
   3219  f9b3
   3220  f9b3		       a9 00		      LDA	#0
   3221  f9b5		       85 85		      STA	player0y
   3222  f9b7				   .L0160		;  _cont_anima_morte  =  _cont_anima_morte  +	1
   3223  f9b7
   3224  f9b7		       e6 e5		      INC	_cont_anima_morte
   3225  f9b9				   .
   3226  f9b9							; 
   3227  f9b9
   3228  f9b9				   .L0161		;  if _cont_anima_morte  =  20 then player1:
   3229  f9b9
   3230  f9b9		       a5 e5		      LDA	_cont_anima_morte
   3231  f9bb		       c9 14		      CMP	#20
   3232  f9bd		       d0 0c		      BNE	.skipL0161
   3233  f9bf				   .condpart62
   3234  f9bf		       a2 31		      LDX	#<player62then_1
   3235  f9c1		       86 8c		      STX	player1pointerlo
   3236  f9c3		       a9 fd		      LDA	#>player62then_1
   3237  f9c5		       85 8d		      STA	player1pointerhi
   3238  f9c7		       a9 05		      LDA	#5
   3239  f9c9		       85 8f		      STA	player1height
   3240  f9cb				   .skipL0161
   3241  f9cb				   .L0162		;  if _cont_anima_morte  =  40 then player1:
   3242  f9cb
   3243  f9cb		       a5 e5		      LDA	_cont_anima_morte
   3244  f9cd		       c9 28		      CMP	#40
   3245  f9cf		       d0 0c		      BNE	.skipL0162
   3246  f9d1				   .condpart63
   3247  f9d1		       a2 37		      LDX	#<player63then_1
   3248  f9d3		       86 8c		      STX	player1pointerlo
   3249  f9d5		       a9 fd		      LDA	#>player63then_1
   3250  f9d7		       85 8d		      STA	player1pointerhi
   3251  f9d9		       a9 05		      LDA	#5
   3252  f9db		       85 8f		      STA	player1height
   3253  f9dd				   .skipL0162
   3254  f9dd				   .L0163		;  drawscreen
   3255  f9dd
   3256  f9dd		       20 cc f3 	      jsr	drawscreen
   3257  f9e0				   .
   3258  f9e0							; 
   3259  f9e0
   3260  f9e0				   .L0164		;  if _cont_anima_morte  =  40 then _cont_anima_morte	=  0
   3261  f9e0
   3262  f9e0		       a5 e5		      LDA	_cont_anima_morte
   3263  f9e2		       c9 28		      CMP	#40
   3264  f9e4		       d0 04		      BNE	.skipL0164
   3265  f9e6				   .condpart64
   3266  f9e6		       a9 00		      LDA	#0
   3267  f9e8		       85 e5		      STA	_cont_anima_morte
   3268  f9ea				   .skipL0164
   3269  f9ea				   .
   3270  f9ea							; 
   3271  f9ea
   3272  f9ea				   .
   3273  f9ea							; 
   3274  f9ea
   3275  f9ea				   .L0165		;  if _duracao_som0  =  0 then AUDV0  =  0  :	goto __skip_som_explosao
   3276  f9ea
   3277  f9ea		       a5 d9		      LDA	_duracao_som0
   3278  f9ec		       c9 00		      CMP	#0
   3279  f9ee		       d0 07		      BNE	.skipL0165
   3280  f9f0				   .condpart65
   3281  f9f0		       a9 00		      LDA	#0
   3282  f9f2		       85 19		      STA	AUDV0
   3283  f9f4		       4c 05 fa 	      jmp	.__skip_som_explosao
   3284  f9f7
   3285  f9f7				   .skipL0165
   3286  f9f7				   .L0166		;  _duracao_som0  =  _duracao_som0  -	1
   3287  f9f7
   3288  f9f7		       c6 d9		      DEC	_duracao_som0
   3289  f9f9				   .L0167		;  AUDV0  =  8  :  rem volume
   3290  f9f9
   3291  f9f9		       a9 08		      LDA	#8
   3292  f9fb		       85 19		      STA	AUDV0
   3293  f9fd				   .L0168		;  AUDC0  =  8 :  rem tom
   3294  f9fd
   3295  f9fd		       a9 08		      LDA	#8
   3296  f9ff		       85 15		      STA	AUDC0
   3297  fa01				   .L0169		;  AUDF0  =  25  :  rem distorcao
   3298  fa01
   3299  fa01		       a9 19		      LDA	#25
   3300  fa03		       85 17		      STA	AUDF0
   3301  fa05				   .__skip_som_explosao
   3302  fa05							; __skip_som_explosao
   3303  fa05
   3304  fa05				   .L0170		;  if pfscore2  =  %00000000 then goto __skip_reinicia_joy
   3305  fa05
   3306  fa05		       a5 f3		      LDA	pfscore2
   3307  fa07		       c9 00		      CMP	#%00000000
   3308  fa09		       d0 03		      BNE	.skipL0170
   3309  fa0b				   .condpart66
   3310  fa0b		       4c 21 fa 	      jmp	.__skip_reinicia_joy
   3311  fa0e
   3312  fa0e				   .skipL0170
   3313  fa0e				   .L0171		;  if joy0fire then _animacao	=  10  :  _duracao_som0  =  0  :  player1x  =  80  :  goto __skip_perde_vida
   3314  fa0e
   3315  fa0e		       24 0c		      bit	INPT4
   3316  fa10		       30 0f		      BMI	.skipL0171
   3317  fa12				   .condpart67
   3318  fa12		       a9 0a		      LDA	#10
   3319  fa14		       85 e1		      STA	_animacao
   3320  fa16		       a9 00		      LDA	#0
   3321  fa18		       85 d9		      STA	_duracao_som0
   3322  fa1a		       a9 50		      LDA	#80
   3323  fa1c		       85 81		      STA	player1x
   3324  fa1e		       4c ed f7 	      jmp	.__skip_perde_vida
   3325  fa21
   3326  fa21				   .skipL0171
   3327  fa21				   .__skip_reinicia_joy
   3328  fa21							; __skip_reinicia_joy
   3329  fa21
   3330  fa21				   .L0172		;  if !switchreset then goto __perde_vida
   3331  fa21
   3332  fa21		       a9 01		      lda	#1
   3333  fa23		       2c 82 02 	      bit	SWCHB
   3334  fa26		       f0 03		      BEQ	.skipL0172
   3335  fa28				   .condpart68
   3336  fa28		       4c 9c f9 	      jmp	.__perde_vida
   3337  fa2b
   3338  fa2b				   .skipL0172
   3339  fa2b				   .L0173		;  goto __reset_game
   3340  fa2b
   3341  fa2b		       4c 6c f4 	      jmp	.__reset_game
   3342  fa2e
   3343  fa2e				   .
   3344  fa2e							; 
   3345  fa2e
   3346  fa2e				   .
   3347  fa2e							; 
   3348  fa2e
   3349  fa2e				   .__inimigo_bomba
   3350  fa2e							; __inimigo_bomba
   3351  fa2e
   3352  fa2e				   .L0174		;  COLUP0  =  $40
   3353  fa2e
   3354  fa2e		       a9 40		      LDA	#$40
   3355  fa30		       85 06		      STA	COLUP0
   3356  fa32				   .L0175		;  player0:
   3357  fa32
   3358  fa32		       a2 3d		      LDX	#<playerL0175_0
   3359  fa34		       86 8a		      STX	player0pointerlo
   3360  fa36		       a9 fd		      LDA	#>playerL0175_0
   3361  fa38		       85 8b		      STA	player0pointerhi
   3362  fa3a		       a9 08		      LDA	#8
   3363  fa3c		       85 8e		      STA	player0height
   3364  fa3e				   .
   3365  fa3e							; 
   3366  fa3e
   3367  fa3e				   .L0176		;  player0y  =  player0y + 2
   3368  fa3e
   3369  fa3e		       a5 85		      LDA	player0y
   3370  fa40		       18		      CLC
   3371  fa41		       69 02		      ADC	#2
   3372  fa43		       85 85		      STA	player0y
   3373  fa45				   .L0177		;  if joy0up then player0y  =	player0y  +  2
   3374  fa45
   3375  fa45		       a9 10		      lda	#$10
   3376  fa47		       2c 80 02 	      bit	SWCHA
   3377  fa4a		       d0 07		      BNE	.skipL0177
   3378  fa4c				   .condpart69
   3379  fa4c		       a5 85		      LDA	player0y
   3380  fa4e		       18		      CLC
   3381  fa4f		       69 02		      ADC	#2
   3382  fa51		       85 85		      STA	player0y
   3383  fa53				   .skipL0177
   3384  fa53				   .
   3385  fa53							; 
   3386  fa53
   3387  fa53				   .L0178		;  if player0y  <=  2 then player0x  =   ( rand & 63 )   +   ( rand & 31 )   +   ( rand & 15 )   +   ( rand & 1 )   +	21
   3388  fa53
   3389  fa53		       a9 02		      LDA	#2
   3390  fa55		       c5 85		      CMP	player0y
   3391  fa57		       90 2e		      BCC	.skipL0178
   3392  fa59				   .condpart70
   3393  fa59							; complex statement detected
   3394  fa59		       20 be f3 	      jsr	randomize
   3395  fa5c		       29 3f		      AND	#63
   3396  fa5e		       48		      PHA
   3397  fa5f		       20 be f3 	      jsr	randomize
   3398  fa62		       29 1f		      AND	#31
   3399  fa64		       ba		      TSX
   3400  fa65		       e8		      INX
   3401  fa66		       9a		      TXS
   3402  fa67		       18		      CLC
   3403  fa68		       75 00		      ADC	$00,x
   3404  fa6a		       48		      PHA
   3405  fa6b		       20 be f3 	      jsr	randomize
   3406  fa6e		       29 0f		      AND	#15
   3407  fa70		       ba		      TSX
   3408  fa71		       e8		      INX
   3409  fa72		       9a		      TXS
   3410  fa73		       18		      CLC
   3411  fa74		       75 00		      ADC	$00,x
   3412  fa76		       48		      PHA
   3413  fa77		       20 be f3 	      jsr	randomize
   3414  fa7a		       29 01		      AND	#1
   3415  fa7c		       ba		      TSX
   3416  fa7d		       e8		      INX
   3417  fa7e		       9a		      TXS
   3418  fa7f		       18		      CLC
   3419  fa80		       75 00		      ADC	$00,x
   3420  fa82		       18		      CLC
   3421  fa83		       69 15		      ADC	#21
   3422  fa85		       85 80		      STA	player0x
   3423  fa87				   .skipL0178
   3424  fa87				   .L0179		;  return thisbank
   3425  fa87
   3426  fa87		       60		      RTS
   3427  fa88				   .
   3428  fa88							; 
   3429  fa88
   3430  fa88				   .__inimigo_carga
   3431  fa88							; __inimigo_carga
   3432  fa88
   3433  fa88				   .L0180		;  COLUP0  =  $04
   3434  fa88
   3435  fa88		       a9 04		      LDA	#$04
   3436  fa8a		       85 06		      STA	COLUP0
   3437  fa8c				   .L0181		;  NUSIZ0  =  $05
   3438  fa8c
   3439  fa8c		       a9 05		      LDA	#$05
   3440  fa8e		       85 04		      STA	NUSIZ0
   3441  fa90				   .L0182		;  player0x  =  player0x  -  1
   3442  fa90
   3443  fa90		       c6 80		      DEC	player0x
   3444  fa92				   .L0183		;  player0y  =  30
   3445  fa92
   3446  fa92		       a9 1e		      LDA	#30
   3447  fa94		       85 85		      STA	player0y
   3448  fa96				   .L0184		;  player0:
   3449  fa96
   3450  fa96		       a2 46		      LDX	#<playerL0184_0
   3451  fa98		       86 8a		      STX	player0pointerlo
   3452  fa9a		       a9 fd		      LDA	#>playerL0184_0
   3453  fa9c		       85 8b		      STA	player0pointerhi
   3454  fa9e		       a9 06		      LDA	#6
   3455  faa0		       85 8e		      STA	player0height
   3456  faa2				   .L0185		;  return thisbank
   3457  faa2
   3458  faa2		       60		      RTS
   3459  faa3				   .
   3460  faa3							; 
   3461  faa3
   3462  faa3				   .
   3463  faa3							; 
   3464  faa3
   3465  faa3				   .__inimigo_tie
   3466  faa3							; __inimigo_tie
   3467  faa3
   3468  faa3				   .L0186		;  COLUP0  =  $04
   3469  faa3
   3470  faa3		       a9 04		      LDA	#$04
   3471  faa5		       85 06		      STA	COLUP0
   3472  faa7				   .L0187		;  player0:
   3473  faa7
   3474  faa7		       a2 4d		      LDX	#<playerL0187_0
   3475  faa9		       86 8a		      STX	player0pointerlo
   3476  faab		       a9 fd		      LDA	#>playerL0187_0
   3477  faad		       85 8b		      STA	player0pointerhi
   3478  faaf		       a9 06		      LDA	#6
   3479  fab1		       85 8e		      STA	player0height
   3480  fab3				   .
   3481  fab3							; 
   3482  fab3
   3483  fab3				   .L0188		;  if player0y  >  10 then goto __skip_tie
   3484  fab3
   3485  fab3		       a9 0a		      LDA	#10
   3486  fab5		       c5 85		      CMP	player0y
   3487  fab7		       b0 03		      BCS	.skipL0188
   3488  fab9				   .condpart71
   3489  fab9		       4c fb fa 	      jmp	.__skip_tie
   3490  fabc
   3491  fabc				   .skipL0188
   3492  fabc				   .
   3493  fabc							; 
   3494  fabc
   3495  fabc				   .L0189		;  if _bit_supressores{2} then goto __volta else goto __vai
   3496  fabc
   3497  fabc		       a5 dd		      LDA	_bit_supressores
   3498  fabe		       29 04		      AND	#4
   3499  fac0		       f0 06		      BEQ	.skipL0189
   3500  fac2				   .condpart72
   3501  fac2		       4c cb fa 	      jmp	.__volta
   3502  fac5		       4c cb fa 	      jmp	.skipelse3
   3503  fac8				   .skipL0189
   3504  fac8		       4c e3 fa 	      jmp	.__vai
   3505  facb
   3506  facb				   .skipelse3
   3507  facb				   .
   3508  facb							; 
   3509  facb
   3510  facb				   .__volta
   3511  facb							; __volta
   3512  facb
   3513  facb				   .L0190		;  player0x  =  player0x  -  1
   3514  facb
   3515  facb		       c6 80		      DEC	player0x
   3516  facd				   .L0191		;  if player0x  <=  30 then player0y  =  player0y  +  5  :  _bit_supressores{2}  =  0
   3517  facd
   3518  facd		       a9 1e		      LDA	#30
   3519  facf		       c5 80		      CMP	player0x
   3520  fad1		       90 0d		      BCC	.skipL0191
   3521  fad3				   .condpart73
   3522  fad3		       a5 85		      LDA	player0y
   3523  fad5		       18		      CLC
   3524  fad6		       69 05		      ADC	#5
   3525  fad8		       85 85		      STA	player0y
   3526  fada		       a5 dd		      LDA	_bit_supressores
   3527  fadc		       29 fb		      AND	#251
   3528  fade		       85 dd		      STA	_bit_supressores
   3529  fae0				   .skipL0191
   3530  fae0				   .L0192		;  goto __skip_vai_volta_tie
   3531  fae0
   3532  fae0		       4c 0d fb 	      jmp	.__skip_vai_volta_tie
   3533  fae3
   3534  fae3				   .__vai
   3535  fae3							; __vai
   3536  fae3
   3537  fae3				   .L0193		;  player0x  =  player0x  +  1
   3538  fae3
   3539  fae3		       e6 80		      INC	player0x
   3540  fae5				   .L0194		;  if player0x  >=  120 then player0y	=  player0y  +	5  :  _bit_supressores{2}  =  1
   3541  fae5
   3542  fae5		       a5 80		      LDA	player0x
   3543  fae7		       c9 78		      CMP	#120
   3544  fae9		       90 0d		      BCC	.skipL0194
   3545  faeb				   .condpart74
   3546  faeb		       a5 85		      LDA	player0y
   3547  faed		       18		      CLC
   3548  faee		       69 05		      ADC	#5
   3549  faf0		       85 85		      STA	player0y
   3550  faf2		       a5 dd		      LDA	_bit_supressores
   3551  faf4		       09 04		      ORA	#4
   3552  faf6		       85 dd		      STA	_bit_supressores
   3553  faf8				   .skipL0194
   3554  faf8				   .L0195		;  goto __skip_vai_volta_tie
   3555  faf8
   3556  faf8		       4c 0d fb 	      jmp	.__skip_vai_volta_tie
   3557  fafb
   3558  fafb				   .__skip_tie
   3559  fafb							; __skip_tie
   3560  fafb
   3561  fafb				   .
   3562  fafb							; 
   3563  fafb
   3564  fafb				   .L0196		;  if player1x  >  player0x then player0x  =  player0x  +  1
   3565  fafb
   3566  fafb		       a5 80		      LDA	player0x
   3567  fafd		       c5 81		      CMP	player1x
   3568  faff		       b0 02		      BCS	.skipL0196
   3569  fb01				   .condpart75
   3570  fb01		       e6 80		      INC	player0x
   3571  fb03				   .skipL0196
   3572  fb03				   .L0197		;  if player1x  <  player0x then player0x  =  player0x  -  1
   3573  fb03
   3574  fb03		       a5 81		      LDA	player1x
   3575  fb05		       c5 80		      CMP	player0x
   3576  fb07		       b0 02		      BCS	.skipL0197
   3577  fb09				   .condpart76
   3578  fb09		       c6 80		      DEC	player0x
   3579  fb0b				   .skipL0197
   3580  fb0b				   .L0198		;  player0y  =  player0y  +  1
   3581  fb0b
   3582  fb0b		       e6 85		      INC	player0y
   3583  fb0d				   .
   3584  fb0d							; 
   3585  fb0d
   3586  fb0d				   .
   3587  fb0d							; 
   3588  fb0d
   3589  fb0d				   .__skip_vai_volta_tie
   3590  fb0d							; __skip_vai_volta_tie
   3591  fb0d
   3592  fb0d				   .
   3593  fb0d							; 
   3594  fb0d
   3595  fb0d				   .
   3596  fb0d							; 
   3597  fb0d
   3598  fb0d				   .L0199		;  return thisbank
   3599  fb0d
   3600  fb0d		       60		      RTS
   3601  fb0e				   .
   3602  fb0e							; 
   3603  fb0e
   3604  fb0e				   .
   3605  fb0e							; 
   3606  fb0e
   3607  fb0e				   .__escudo
   3608  fb0e							; __escudo
   3609  fb0e
   3610  fb0e				   .L0200		;  player1:
   3611  fb0e
   3612  fb0e		       a2 54		      LDX	#<playerL0200_1
   3613  fb10		       86 8c		      STX	player1pointerlo
   3614  fb12		       a9 fd		      LDA	#>playerL0200_1
   3615  fb14		       85 8d		      STA	player1pointerhi
   3616  fb16		       a9 08		      LDA	#8
   3617  fb18		       85 8f		      STA	player1height
   3618  fb1a				   .L0201		;  goto __skip_escudo
   3619  fb1a
   3620  fb1a		       4c 48 f6 	      jmp	.__skip_escudo
   3621  fb1d
   3622  fb1d				   .
   3623  fb1d							; 
   3624  fb1d
   3625  fb1d				   .__nave
   3626  fb1d							; __nave
   3627  fb1d
   3628  fb1d				   .L0202		;  if _animacao  =  10  ||  joy0up then player1:
   3629  fb1d
   3630  fb1d		       a5 e1		      LDA	_animacao
   3631  fb1f		       c9 0a		      CMP	#10
   3632  fb21		       d0 03		      BNE	.skipL0202
   3633  fb23				   .condpart77
   3634  fb23		       4c 2d fb 	      jmp	.condpart78
   3635  fb26				   .skipL0202
   3636  fb26		       a9 10		      lda	#$10
   3637  fb28		       2c 80 02 	      bit	SWCHA
   3638  fb2b		       d0 0c		      BNE	.skip6OR
   3639  fb2d				   .condpart78
   3640  fb2d		       a2 5d		      LDX	#<player78then_1
   3641  fb2f		       86 8c		      STX	player1pointerlo
   3642  fb31		       a9 fd		      LDA	#>player78then_1
   3643  fb33		       85 8d		      STA	player1pointerhi
   3644  fb35		       a9 05		      LDA	#5
   3645  fb37		       85 8f		      STA	player1height
   3646  fb39				   .skip6OR
   3647  fb39				   .
   3648  fb39							; 
   3649  fb39
   3650  fb39				   .L0203		;  if _animacao  =  20 then player1:
   3651  fb39
   3652  fb39		       a5 e1		      LDA	_animacao
   3653  fb3b		       c9 14		      CMP	#20
   3654  fb3d		       d0 0c		      BNE	.skipL0203
   3655  fb3f				   .condpart79
   3656  fb3f		       a2 63		      LDX	#<player79then_1
   3657  fb41		       86 8c		      STX	player1pointerlo
   3658  fb43		       a9 fd		      LDA	#>player79then_1
   3659  fb45		       85 8d		      STA	player1pointerhi
   3660  fb47		       a9 05		      LDA	#5
   3661  fb49		       85 8f		      STA	player1height
   3662  fb4b				   .skipL0203
   3663  fb4b				   .
   3664  fb4b							; 
   3665  fb4b
   3666  fb4b				   .L0204		;  return thisbank
   3667  fb4b
   3668  fb4b		       60		      RTS
   3669  fb4c				   .
   3670  fb4c							; 
   3671  fb4c
   3672  fb4c				   .
   3673  fb4c							; 
   3674  fb4c
   3675  fb4c				   .__item_shield
   3676  fb4c							; __item_shield
   3677  fb4c
   3678  fb4c				   .L0205		;  COLUP0  =  12
   3679  fb4c
   3680  fb4c		       a9 0c		      LDA	#12
   3681  fb4e		       85 06		      STA	COLUP0
   3682  fb50				   .L0206		;  if joy0up then player0y  =	player0y  +  1
   3683  fb50
   3684  fb50		       a9 10		      lda	#$10
   3685  fb52		       2c 80 02 	      bit	SWCHA
   3686  fb55		       d0 02		      BNE	.skipL0206
   3687  fb57				   .condpart80
   3688  fb57		       e6 85		      INC	player0y
   3689  fb59				   .skipL0206
   3690  fb59				   .L0207		;  player0y  =  player0y  +  1
   3691  fb59
   3692  fb59		       e6 85		      INC	player0y
   3693  fb5b				   .L0208		;  player0:
   3694  fb5b
   3695  fb5b		       a2 69		      LDX	#<playerL0208_0
   3696  fb5d		       86 8a		      STX	player0pointerlo
   3697  fb5f		       a9 fd		      LDA	#>playerL0208_0
   3698  fb61		       85 8b		      STA	player0pointerhi
   3699  fb63		       a9 09		      LDA	#9
   3700  fb65		       85 8e		      STA	player0height
   3701  fb67				   .L0209		;  if player0y  <  2 then _bit_supressores{7}	=  0
   3702  fb67
   3703  fb67		       a5 85		      LDA	player0y
   3704  fb69		       c9 02		      CMP	#2
   3705  fb6b		       b0 06		      BCS	.skipL0209
   3706  fb6d				   .condpart81
   3707  fb6d		       a5 dd		      LDA	_bit_supressores
   3708  fb6f		       29 7f		      AND	#127
   3709  fb71		       85 dd		      STA	_bit_supressores
   3710  fb73				   .skipL0209
   3711  fb73				   .L0210		;  return thisbank
   3712  fb73
   3713  fb73		       60		      RTS
   3714  fb74				   .
   3715  fb74							; 
   3716  fb74
   3717  fb74				   .
   3718  fb74							; 
   3719  fb74
   3720  fb74				   .__transicao
   3721  fb74							; __transicao
   3722  fb74
   3723  fb74				   .L0211		;  v  =  0
   3724  fb74
   3725  fb74		       a9 00		      LDA	#0
   3726  fb76		       85 e9		      STA	v
   3727  fb78				   .__main_transicao
   3728  fb78							; __main_transicao
   3729  fb78
   3730  fb78				   .L0212		;  missile1y  =  0
   3731  fb78
   3732  fb78		       a9 00		      LDA	#0
   3733  fb7a		       85 88		      STA	missile1y
   3734  fb7c				   .
   3735  fb7c							; 
   3736  fb7c
   3737  fb7c				   .
   3738  fb7c							; 
   3739  fb7c
   3740  fb7c				   .L0213		;  AUDC0  =  12
   3741  fb7c
   3742  fb7c		       a9 0c		      LDA	#12
   3743  fb7e		       85 15		      STA	AUDC0
   3744  fb80				   .L0214		;  AUDC1  =  1
   3745  fb80
   3746  fb80		       a9 01		      LDA	#1
   3747  fb82		       85 16		      STA	AUDC1
   3748  fb84				   .
   3749  fb84							; 
   3750  fb84
   3751  fb84				   .L0215		;  if musicTimer  =  0 then goto changeMusicNoteTransicao
   3752  fb84
   3753  fb84		       a5 de		      LDA	musicTimer
   3754  fb86		       c9 00		      CMP	#0
   3755  fb88		       d0 03		      BNE	.skipL0215
   3756  fb8a				   .condpart82
   3757  fb8a		       4c 64 fc 	      jmp	.changeMusicNoteTransicao
   3758  fb8d
   3759  fb8d				   .skipL0215
   3760  fb8d				   .__volta_trilha_transicao
   3761  fb8d							; __volta_trilha_transicao
   3762  fb8d
   3763  fb8d				   .L0216		;  musicTimer	=  musicTimer  -  1
   3764  fb8d
   3765  fb8d		       c6 de		      DEC	musicTimer
   3766  fb8f				   .
   3767  fb8f							; 
   3768  fb8f
   3769  fb8f				   .
   3770  fb8f							; 
   3771  fb8f
   3772  fb8f				   .L0217		;  player0y  =  0
   3773  fb8f
   3774  fb8f		       a9 00		      LDA	#0
   3775  fb91		       85 85		      STA	player0y
   3776  fb93				   .L0218		;  gosub __playfield_transicao
   3777  fb93
   3778  fb93		       20 26 fc 	      jsr	.__playfield_transicao
   3779  fb96
   3780  fb96				   .L0219		;  drawscreen
   3781  fb96
   3782  fb96		       20 cc f3 	      jsr	drawscreen
   3783  fb99				   .
   3784  fb99							; 
   3785  fb99
   3786  fb99				   .L0220		;  if player1x  =  75 then goto __move_up
   3787  fb99
   3788  fb99		       a5 81		      LDA	player1x
   3789  fb9b		       c9 4b		      CMP	#75
   3790  fb9d		       d0 03		      BNE	.skipL0220
   3791  fb9f				   .condpart83
   3792  fb9f		       4c b5 fb 	      jmp	.__move_up
   3793  fba2
   3794  fba2				   .skipL0220
   3795  fba2				   .L0221		;  if player1x  >  75 then goto __move_esquerda
   3796  fba2
   3797  fba2		       a9 4b		      LDA	#75
   3798  fba4		       c5 81		      CMP	player1x
   3799  fba6		       b0 03		      BCS	.skipL0221
   3800  fba8				   .condpart84
   3801  fba8		       4c b0 fb 	      jmp	.__move_esquerda
   3802  fbab
   3803  fbab				   .skipL0221
   3804  fbab				   .
   3805  fbab							; 
   3806  fbab
   3807  fbab				   .L0222		;  player1x  =  player1x  +  1  :  goto __skip_move
   3808  fbab
   3809  fbab		       e6 81		      INC	player1x
   3810  fbad		       4c c0 fb 	      jmp	.__skip_move
   3811  fbb0
   3812  fbb0				   .__move_esquerda
   3813  fbb0							; __move_esquerda
   3814  fbb0
   3815  fbb0				   .L0223		;  player1x  =  player1x  -  1  :  goto __skip_move
   3816  fbb0
   3817  fbb0		       c6 81		      DEC	player1x
   3818  fbb2		       4c c0 fb 	      jmp	.__skip_move
   3819  fbb5
   3820  fbb5				   .__move_up
   3821  fbb5							; __move_up
   3822  fbb5
   3823  fbb5				   .L0224		;  if player1y  =  0 then goto __skip_move
   3824  fbb5
   3825  fbb5		       a5 86		      LDA	player1y
   3826  fbb7		       c9 00		      CMP	#0
   3827  fbb9		       d0 03		      BNE	.skipL0224
   3828  fbbb				   .condpart85
   3829  fbbb		       4c c0 fb 	      jmp	.__skip_move
   3830  fbbe
   3831  fbbe				   .skipL0224
   3832  fbbe				   .L0225		;  player1y  =  player1y  -  1
   3833  fbbe
   3834  fbbe		       c6 86		      DEC	player1y
   3835  fbc0				   .__skip_move
   3836  fbc0							; __skip_move
   3837  fbc0
   3838  fbc0				   .
   3839  fbc0							; 
   3840  fbc0
   3841  fbc0				   .L0226		;  v  =  v  +	1
   3842  fbc0
   3843  fbc0		       e6 e9		      INC	v
   3844  fbc2				   .L0227		;  if v  =  250 then v  =  0  :  _fases  =  _fases  +	1  :  _bit_supressores{5}  =  0  :  _cont_telas  =  0  :  AUDV0  =  0  :  AUDV1  =  0  :  musicPointer	=  0  :  player1y  =  85  :  goto __skip_transicao
   3845  fbc2
   3846  fbc2		       a5 e9		      LDA	v
   3847  fbc4		       c9 fa		      CMP	#250
   3848  fbc6		       d0 1d		      BNE	.skipL0227
   3849  fbc8				   .condpart86
   3850  fbc8		       a9 00		      LDA	#0
   3851  fbca		       85 e9		      STA	v
   3852  fbcc		       e6 e4		      INC	_fases
   3853  fbce		       a5 dd		      LDA	_bit_supressores
   3854  fbd0		       29 df		      AND	#223
   3855  fbd2		       85 dd		      STA	_bit_supressores
   3856  fbd4		       a9 00		      LDA	#0
   3857  fbd6		       85 e6		      STA	_cont_telas
   3858  fbd8		       85 19		      STA	AUDV0
   3859  fbda		       85 1a		      STA	AUDV1
   3860  fbdc		       85 db		      STA	musicPointer
   3861  fbde		       a9 55		      LDA	#85
   3862  fbe0		       85 86		      STA	player1y
   3863  fbe2		       4c ac f6 	      jmp	.__skip_transicao
   3864  fbe5
   3865  fbe5				   .skipL0227
   3866  fbe5				   .L0228		;  goto __main_transicao
   3867  fbe5
   3868  fbe5		       4c 78 fb 	      jmp	.__main_transicao
   3869  fbe8
   3870  fbe8				   .
   3871  fbe8							; 
   3872  fbe8
   3873  fbe8				   .
   3874  fbe8							; 
   3875  fbe8
   3876  fbe8				   .__playfield_regular
   3877  fbe8							; __playfield_regular
   3878  fbe8
   3879  fbe8				   .L0229		;  playfield:
   3880  fbe8
   3881  fbe8				  -	      ifconst	pfres
   3882  fbe8				  -	      ldx	#(12>pfres)*(pfres*pfwidth-1)+(12<=pfres)*47
   3883  fbe8					      else
   3884  fbe8		       a2 2f		      ldx	#((12*pfwidth-1)*((12*pfwidth-1)<47))+(47*((12*pfwidth-1)>=47))
   3885  fbea					      endif
   3886  fbea		       4c 1d fc 	      jmp	pflabel0
   3887  fbed				   PF_data0
   3888  fbed		       7f ff		      .byte.b	%01111111, %11111111
   3889  fbef					      if	(pfwidth>2)
   3890  fbef		       ff 7f		      .byte.b	%11111111, %01111111
   3891  fbf1					      endif
   3892  fbf1		       aa 55		      .byte.b	%10101010, %01010101
   3893  fbf3					      if	(pfwidth>2)
   3894  fbf3		       aa 95		      .byte.b	%10101010, %10010101
   3895  fbf5					      endif
   3896  fbf5		       80 00		      .byte.b	%10000000, %00000000
   3897  fbf7					      if	(pfwidth>2)
   3898  fbf7		       00 80		      .byte.b	%00000000, %10000000
   3899  fbf9					      endif
   3900  fbf9		       80 00		      .byte.b	%10000000, %00000000
   3901  fbfb					      if	(pfwidth>2)
   3902  fbfb		       00 80		      .byte.b	%00000000, %10000000
   3903  fbfd					      endif
   3904  fbfd		       80 00		      .byte.b	%10000000, %00000000
   3905  fbff					      if	(pfwidth>2)
   3906  fbff		       00 80		      .byte.b	%00000000, %10000000
   3907  fc01					      endif
   3908  fc01		       80 00		      .byte.b	%10000000, %00000000
   3909  fc03					      if	(pfwidth>2)
   3910  fc03		       00 80		      .byte.b	%00000000, %10000000
   3911  fc05					      endif
   3912  fc05		       80 00		      .byte.b	%10000000, %00000000
   3913  fc07					      if	(pfwidth>2)
   3914  fc07		       00 80		      .byte.b	%00000000, %10000000
   3915  fc09					      endif
   3916  fc09		       80 00		      .byte.b	%10000000, %00000000
   3917  fc0b					      if	(pfwidth>2)
   3918  fc0b		       00 80		      .byte.b	%00000000, %10000000
   3919  fc0d					      endif
   3920  fc0d		       80 00		      .byte.b	%10000000, %00000000
   3921  fc0f					      if	(pfwidth>2)
   3922  fc0f		       00 80		      .byte.b	%00000000, %10000000
   3923  fc11					      endif
   3924  fc11		       80 00		      .byte.b	%10000000, %00000000
   3925  fc13					      if	(pfwidth>2)
   3926  fc13		       00 80		      .byte.b	%00000000, %10000000
   3927  fc15					      endif
   3928  fc15		       80 00		      .byte.b	%10000000, %00000000
   3929  fc17					      if	(pfwidth>2)
   3930  fc17		       00 80		      .byte.b	%00000000, %10000000
   3931  fc19					      endif
   3932  fc19		       80 00		      .byte.b	%10000000, %00000000
   3933  fc1b					      if	(pfwidth>2)
   3934  fc1b		       00 80		      .byte.b	%00000000, %10000000
   3935  fc1d					      endif
   3936  fc1d				   pflabel0
   3937  fc1d		       bd ed fb 	      lda	PF_data0,x
   3938  fc20		       95 a4		      sta	playfield,x
   3939  fc22		       ca		      dex
   3940  fc23		       10 f8		      bpl	pflabel0
   3941  fc25				   .L0230		;  return thisbank
   3942  fc25
   3943  fc25		       60		      RTS
   3944  fc26				   .
   3945  fc26							; 
   3946  fc26
   3947  fc26				   .
   3948  fc26							; 
   3949  fc26
   3950  fc26				   .__playfield_transicao
   3951  fc26							; __playfield_transicao
   3952  fc26
   3953  fc26				   .L0231		;  playfield:
   3954  fc26
   3955  fc26				  -	      ifconst	pfres
   3956  fc26				  -	      ldx	#(12>pfres)*(pfres*pfwidth-1)+(12<=pfres)*47
   3957  fc26					      else
   3958  fc26		       a2 2f		      ldx	#((12*pfwidth-1)*((12*pfwidth-1)<47))+(47*((12*pfwidth-1)>=47))
   3959  fc28					      endif
   3960  fc28		       4c 5b fc 	      jmp	pflabel1
   3961  fc2b				   PF_data1
   3962  fc2b		       7f 1f		      .byte.b	%01111111, %00011111
   3963  fc2d					      if	(pfwidth>2)
   3964  fc2d		       3f 7f		      .byte.b	%00111111, %01111111
   3965  fc2f					      endif
   3966  fc2f		       aa 15		      .byte.b	%10101010, %00010101
   3967  fc31					      if	(pfwidth>2)
   3968  fc31		       2a 95		      .byte.b	%00101010, %10010101
   3969  fc33					      endif
   3970  fc33		       80 00		      .byte.b	%10000000, %00000000
   3971  fc35					      if	(pfwidth>2)
   3972  fc35		       00 80		      .byte.b	%00000000, %10000000
   3973  fc37					      endif
   3974  fc37		       80 00		      .byte.b	%10000000, %00000000
   3975  fc39					      if	(pfwidth>2)
   3976  fc39		       00 80		      .byte.b	%00000000, %10000000
   3977  fc3b					      endif
   3978  fc3b		       80 00		      .byte.b	%10000000, %00000000
   3979  fc3d					      if	(pfwidth>2)
   3980  fc3d		       00 80		      .byte.b	%00000000, %10000000
   3981  fc3f					      endif
   3982  fc3f		       80 00		      .byte.b	%10000000, %00000000
   3983  fc41					      if	(pfwidth>2)
   3984  fc41		       00 80		      .byte.b	%00000000, %10000000
   3985  fc43					      endif
   3986  fc43		       80 00		      .byte.b	%10000000, %00000000
   3987  fc45					      if	(pfwidth>2)
   3988  fc45		       00 80		      .byte.b	%00000000, %10000000
   3989  fc47					      endif
   3990  fc47		       80 00		      .byte.b	%10000000, %00000000
   3991  fc49					      if	(pfwidth>2)
   3992  fc49		       00 80		      .byte.b	%00000000, %10000000
   3993  fc4b					      endif
   3994  fc4b		       80 00		      .byte.b	%10000000, %00000000
   3995  fc4d					      if	(pfwidth>2)
   3996  fc4d		       00 80		      .byte.b	%00000000, %10000000
   3997  fc4f					      endif
   3998  fc4f		       80 00		      .byte.b	%10000000, %00000000
   3999  fc51					      if	(pfwidth>2)
   4000  fc51		       00 80		      .byte.b	%00000000, %10000000
   4001  fc53					      endif
   4002  fc53		       80 00		      .byte.b	%10000000, %00000000
   4003  fc55					      if	(pfwidth>2)
   4004  fc55		       00 80		      .byte.b	%00000000, %10000000
   4005  fc57					      endif
   4006  fc57		       80 00		      .byte.b	%10000000, %00000000
   4007  fc59					      if	(pfwidth>2)
   4008  fc59		       00 80		      .byte.b	%00000000, %10000000
   4009  fc5b					      endif
   4010  fc5b				   pflabel1
   4011  fc5b		       bd 2b fc 	      lda	PF_data1,x
   4012  fc5e		       95 a4		      sta	playfield,x
   4013  fc60		       ca		      dex
   4014  fc61		       10 f8		      bpl	pflabel1
   4015  fc63				   .L0232		;  return thisbank
   4016  fc63
   4017  fc63		       60		      RTS
   4018  fc64				   .
   4019  fc64							; 
   4020  fc64
   4021  fc64				   .changeMusicNoteTransicao
   4022  fc64							; changeMusicNoteTransicao
   4023  fc64
   4024  fc64				   .L0233		;  AUDF0  =  musicData1[musicPointer]
   4025  fc64
   4026  fc64		       a6 db		      LDX	musicPointer
   4027  fc66		       bd f9 fc 	      LDA	musicData1,x
   4028  fc69		       85 17		      STA	AUDF0
   4029  fc6b				   .L0234		;  AUDF1  =  musicData2[musicPointer]
   4030  fc6b
   4031  fc6b		       a6 db		      LDX	musicPointer
   4032  fc6d		       bd 13 fd 	      LDA	musicData2,x
   4033  fc70		       85 18		      STA	AUDF1
   4034  fc72				   .L0235		;  if musicData1[musicPointer]  =  255 then AUDV1  =  0 else AUDV1  =	6
   4035  fc72
   4036  fc72		       a6 db		      LDX	musicPointer
   4037  fc74		       bd f9 fc 	      LDA	musicData1,x
   4038  fc77		       c9 ff		      CMP	#255
   4039  fc79		       d0 07		      BNE	.skipL0235
   4040  fc7b				   .condpart87
   4041  fc7b		       a9 00		      LDA	#0
   4042  fc7d		       85 1a		      STA	AUDV1
   4043  fc7f		       4c 86 fc 	      jmp	.skipelse4
   4044  fc82				   .skipL0235
   4045  fc82		       a9 06		      LDA	#6
   4046  fc84		       85 1a		      STA	AUDV1
   4047  fc86				   .skipelse4
   4048  fc86				   .L0236		;  if musicData2[musicPointer]  =  255 then AUDV0  =  0 else AUDV0  =	4
   4049  fc86
   4050  fc86		       a6 db		      LDX	musicPointer
   4051  fc88		       bd 13 fd 	      LDA	musicData2,x
   4052  fc8b		       c9 ff		      CMP	#255
   4053  fc8d		       d0 07		      BNE	.skipL0236
   4054  fc8f				   .condpart88
   4055  fc8f		       a9 00		      LDA	#0
   4056  fc91		       85 19		      STA	AUDV0
   4057  fc93		       4c 9a fc 	      jmp	.skipelse5
   4058  fc96				   .skipL0236
   4059  fc96		       a9 04		      LDA	#4
   4060  fc98		       85 19		      STA	AUDV0
   4061  fc9a				   .skipelse5
   4062  fc9a				   .L0237		;  musicTimer	=  10
   4063  fc9a
   4064  fc9a		       a9 0a		      LDA	#10
   4065  fc9c		       85 de		      STA	musicTimer
   4066  fc9e				   .L0238		;  musicPointer  =  musicPointer  +  1
   4067  fc9e
   4068  fc9e		       e6 db		      INC	musicPointer
   4069  fca0				   .L0239		;  if musicPointer  >	22 then musicPointer  =  0
   4070  fca0
   4071  fca0		       a9 16		      LDA	#22
   4072  fca2		       c5 db		      CMP	musicPointer
   4073  fca4		       b0 04		      BCS	.skipL0239
   4074  fca6				   .condpart89
   4075  fca6		       a9 00		      LDA	#0
   4076  fca8		       85 db		      STA	musicPointer
   4077  fcaa				   .skipL0239
   4078  fcaa				   .L0240		;  goto __volta_trilha_transicao
   4079  fcaa
   4080  fcaa		       4c 8d fb 	      jmp	.__volta_trilha_transicao
   4081  fcad
   4082  fcad				   .
   4083  fcad							; 
   4084  fcad
   4085  fcad				   .changeMusicNoteTitle
   4086  fcad							; changeMusicNoteTitle
   4087  fcad
   4088  fcad				   .L0241		;  AUDF0  =  musicData1[musicPointer]
   4089  fcad
   4090  fcad		       a6 db		      LDX	musicPointer
   4091  fcaf		       bd f9 fc 	      LDA	musicData1,x
   4092  fcb2		       85 17		      STA	AUDF0
   4093  fcb4				   .L0242		;  AUDF1  =  musicData2[musicPointer]
   4094  fcb4
   4095  fcb4		       a6 db		      LDX	musicPointer
   4096  fcb6		       bd 13 fd 	      LDA	musicData2,x
   4097  fcb9		       85 18		      STA	AUDF1
   4098  fcbb				   .L0243		;  if musicData1[musicPointer]  =  255 then AUDV1  =  0 else AUDV1  =	6
   4099  fcbb
   4100  fcbb		       a6 db		      LDX	musicPointer
   4101  fcbd		       bd f9 fc 	      LDA	musicData1,x
   4102  fcc0		       c9 ff		      CMP	#255
   4103  fcc2		       d0 07		      BNE	.skipL0243
   4104  fcc4				   .condpart90
   4105  fcc4		       a9 00		      LDA	#0
   4106  fcc6		       85 1a		      STA	AUDV1
   4107  fcc8		       4c cf fc 	      jmp	.skipelse6
   4108  fccb				   .skipL0243
   4109  fccb		       a9 06		      LDA	#6
   4110  fccd		       85 1a		      STA	AUDV1
   4111  fccf				   .skipelse6
   4112  fccf				   .L0244		;  if musicData2[musicPointer]  =  255 then AUDV0  =  0 else AUDV0  =	4
   4113  fccf
   4114  fccf		       a6 db		      LDX	musicPointer
   4115  fcd1		       bd 13 fd 	      LDA	musicData2,x
   4116  fcd4		       c9 ff		      CMP	#255
   4117  fcd6		       d0 07		      BNE	.skipL0244
   4118  fcd8				   .condpart91
   4119  fcd8		       a9 00		      LDA	#0
   4120  fcda		       85 19		      STA	AUDV0
   4121  fcdc		       4c e3 fc 	      jmp	.skipelse7
   4122  fcdf				   .skipL0244
   4123  fcdf		       a9 04		      LDA	#4
   4124  fce1		       85 19		      STA	AUDV0
   4125  fce3				   .skipelse7
   4126  fce3				   .L0245		;  musicTimer	=  10
   4127  fce3
   4128  fce3		       a9 0a		      LDA	#10
   4129  fce5		       85 de		      STA	musicTimer
   4130  fce7				   .L0246		;  musicPointer  =  musicPointer  +  1
   4131  fce7
   4132  fce7		       e6 db		      INC	musicPointer
   4133  fce9				   .L0247		;  if musicPointer  >	22 then musicPointer  =  0
   4134  fce9
   4135  fce9		       a9 16		      LDA	#22
   4136  fceb		       c5 db		      CMP	musicPointer
   4137  fced		       b0 04		      BCS	.skipL0247
   4138  fcef				   .condpart92
   4139  fcef		       a9 00		      LDA	#0
   4140  fcf1		       85 db		      STA	musicPointer
   4141  fcf3				   .skipL0247
   4142  fcf3				   .L0248		;  goto __volta_trilha_title
   4143  fcf3
   4144  fcf3		       4c 09 f5 	      jmp	.__volta_trilha_title
   4145  fcf6
   4146  fcf6				   .
   4147  fcf6							; 
   4148  fcf6
   4149  fcf6				   .
   4150  fcf6							; 
   4151  fcf6
   4152  fcf6				   .L0249		;  data musicData1
   4153  fcf6
   4154  fcf6		       4c 10 fd 	      JMP	.skipL0249
   4155  fcf9				   musicData1
   4156  fcf9		       1d ff 1d ff*	      .byte.b	29, -1, 29, -1, 29, -1
   4157  fcff
   4158  fcff		       1a ff 1a ff*	      .byte.b	26, -1, 26, -1, 26, -1
   4159  fd05
   4160  fd05		       18 ff 18 ff*	      .byte.b	24, -1, 24, -1, 24, -1
   4161  fd0b
   4162  fd0b		       13 13 13 13	      .byte.b	19, 19, 19, 19
   4163  fd0f
   4164  fd0f		       ff		      .byte.b	255
   4165  fd10
   4166  fd10				   .skipL0249
   4167  fd10				   .
   4168  fd10							; 
   4169  fd10
   4170  fd10				   .L0250		;  data musicData2
   4171  fd10
   4172  fd10		       4c 2a fd 	      JMP	.skipL0250
   4173  fd13				   musicData2
   4174  fd13		       17 ff 17 ff*	      .byte.b	23, -1, 23, -1, 23, -1
   4175  fd19
   4176  fd19		       1a ff 1a ff*	      .byte.b	26, -1, 26, -1, 26, -1
   4177  fd1f
   4178  fd1f		       1d ff 1d ff*	      .byte.b	29, -1, 29, -1, 29, -1
   4179  fd25
   4180  fd25		       17 17 17 17	      .byte.b	23, 23, 23, 23
   4181  fd29
   4182  fd29		       ff		      .byte.b	255
   4183  fd2a
   4184  fd2a				   .skipL0250
   4185  fd2a				   .
   4186  fd2a							; 
   4187  fd2a
   4188  fd2a				   .L0251		;  asm
   4189  fd2a
   4190  fd2a				   minikernel
   4191  fd2a
   4192  fd2a		       85 02		      sta	WSYNC
   4193  fd2c
   4194  fd2c		       a5 e2		      lda	_SC_Back
   4195  fd2e
   4196  fd2e		       85 09		      sta	COLUBK
   4197  fd30
   4198  fd30		       60		      rts
   4199  fd31
   4200  fd31				  -	      if	(<*) > (<(*+5))
   4201  fd31				  -	      repeat	($100-<*)
   4202  fd31				  -	      .byte	0
   4203  fd31				  -	      repend
   4204  fd31					      endif
   4205  fd31				   player62then_1
   4206  fd31		       28		      .byte.b	%0101000
   4207  fd32		       12		      .byte.b	%0010010
   4208  fd33		       48		      .byte.b	%1001000
   4209  fd34		       15		      .byte.b	%0010101
   4210  fd35		       40		      .byte.b	%1000000
   4211  fd36		       14		      .byte.b	%0010100
   4212  fd37				  -	      if	(<*) > (<(*+5))
   4213  fd37				  -	      repeat	($100-<*)
   4214  fd37				  -	      .byte	0
   4215  fd37				  -	      repend
   4216  fd37					      endif
   4217  fd37				   player63then_1
   4218  fd37		       08		      .byte.b	%0001000
   4219  fd38		       14		      .byte.b	%0010100
   4220  fd39		       2a		      .byte.b	%0101010
   4221  fd3a		       14		      .byte.b	%0010100
   4222  fd3b		       08		      .byte.b	%0001000
   4223  fd3c		       00		      .byte.b	%0000000
   4224  fd3d				  -	      if	(<*) > (<(*+8))
   4225  fd3d				  -	      repeat	($100-<*)
   4226  fd3d				  -	      .byte	0
   4227  fd3d				  -	      repend
   4228  fd3d					      endif
   4229  fd3d				   playerL0175_0
   4230  fd3d		       18		      .byte.b	%00011000
   4231  fd3e		       3c		      .byte.b	%00111100
   4232  fd3f		       7e		      .byte.b	%01111110
   4233  fd40		       66		      .byte.b	%01100110
   4234  fd41		       5a		      .byte.b	%01011010
   4235  fd42		       7e		      .byte.b	%01111110
   4236  fd43		       5a		      .byte.b	%01011010
   4237  fd44		       18		      .byte.b	%00011000
   4238  fd45		       3c		      .byte.b	%00111100
   4239  fd46				  -	      if	(<*) > (<(*+6))
   4240  fd46				  -	      repeat	($100-<*)
   4241  fd46				  -	      .byte	0
   4242  fd46				  -	      repend
   4243  fd46					      endif
   4244  fd46				   playerL0184_0
   4245  fd46		       04		      .byte.b	%00000100
   4246  fd47		       0a		      .byte.b	%00001010
   4247  fd48		       14		      .byte.b	%00010100
   4248  fd49		       ef		      .byte.b	%11101111
   4249  fd4a		       7f		      .byte.b	%01111111
   4250  fd4b		       3f		      .byte.b	%00111111
   4251  fd4c		       01		      .byte.b	%00000001
   4252  fd4d				  -	      if	(<*) > (<(*+6))
   4253  fd4d				  -	      repeat	($100-<*)
   4254  fd4d				  -	      .byte	0
   4255  fd4d				  -	      repend
   4256  fd4d					      endif
   4257  fd4d				   playerL0187_0
   4258  fd4d		       81		      .byte.b	%10000001
   4259  fd4e		       81		      .byte.b	%10000001
   4260  fd4f		       99		      .byte.b	%10011001
   4261  fd50		       ff		      .byte.b	%11111111
   4262  fd51		       99		      .byte.b	%10011001
   4263  fd52		       81		      .byte.b	%10000001
   4264  fd53		       81		      .byte.b	%10000001
   4265  fd54				  -	      if	(<*) > (<(*+8))
   4266  fd54				  -	      repeat	($100-<*)
   4267  fd54				  -	      .byte	0
   4268  fd54				  -	      repend
   4269  fd54					      endif
   4270  fd54				   playerL0200_1
   4271  fd54		       49		      .byte.b	%1001001
   4272  fd55		       7f		      .byte.b	%1111111
   4273  fd56		       5d		      .byte.b	%1011101
   4274  fd57		       08		      .byte.b	%0001000
   4275  fd58		       08		      .byte.b	%0001000
   4276  fd59		       49		      .byte.b	%1001001
   4277  fd5a		       22		      .byte.b	%0100010
   4278  fd5b		       14		      .byte.b	%0010100
   4279  fd5c		       08		      .byte.b	%0001000
   4280  fd5d				  -	      if	(<*) > (<(*+5))
   4281  fd5d				  -	      repeat	($100-<*)
   4282  fd5d				  -	      .byte	0
   4283  fd5d				  -	      repend
   4284  fd5d					      endif
   4285  fd5d				   player78then_1
   4286  fd5d		       49		      .byte.b	%1001001
   4287  fd5e		       7f		      .byte.b	%1111111
   4288  fd5f		       5d		      .byte.b	%1011101
   4289  fd60		       08		      .byte.b	%0001000
   4290  fd61		       08		      .byte.b	%0001000
   4291  fd62		       08		      .byte.b	%0001000
   4292  fd63				  -	      if	(<*) > (<(*+5))
   4293  fd63				  -	      repeat	($100-<*)
   4294  fd63				  -	      .byte	0
   4295  fd63				  -	      repend
   4296  fd63					      endif
   4297  fd63				   player79then_1
   4298  fd63		       41		      .byte.b	%1000001
   4299  fd64		       7f		      .byte.b	%1111111
   4300  fd65		       5d		      .byte.b	%1011101
   4301  fd66		       08		      .byte.b	%0001000
   4302  fd67		       08		      .byte.b	%0001000
   4303  fd68		       08		      .byte.b	%0001000
   4304  fd69				  -	      if	(<*) > (<(*+9))
   4305  fd69				  -	      repeat	($100-<*)
   4306  fd69				  -	      .byte	0
   4307  fd69				  -	      repend
   4308  fd69					      endif
   4309  fd69				   playerL0208_0
   4310  fd69		       3c		      .byte.b	%00111100
   4311  fd6a		       42		      .byte.b	%01000010
   4312  fd6b		       bd		      .byte.b	%10111101
   4313  fd6c		       85		      .byte.b	%10000101
   4314  fd6d		       85		      .byte.b	%10000101
   4315  fd6e		       bd		      .byte.b	%10111101
   4316  fd6f		       a1		      .byte.b	%10100001
   4317  fd70		       bd		      .byte.b	%10111101
   4318  fd71		       42		      .byte.b	%01000010
   4319  fd72		       3c		      .byte.b	%00111100
   4320  fd73					      if	ECHOFIRST
      553 bytes of ROM space left
   4321  fd73					      echo	"    ",[(scoretable - *)]d , "bytes of ROM space left")
   4322  fd73					      endif
   4323  fd73		       00 01	   ECHOFIRST  =	1
   4324  fd73
   4325  fd73
   4326  fd73
   4327  fd73							; Provided under the CC0 license. See the included LICENSE.txt for details.
   4328  fd73
   4329  fd73							; feel free to modify the score graphics - just keep each digit 8 high
   4330  fd73							; and keep the conditional compilation stuff intact
   4331  fd73				  -	      ifconst	ROM2k
   4332  fd73				  -	      ORG	$F7AC-8
   4333  fd73					      else
   4334  fd73				  -	      ifconst	bankswitch
   4335  fd73				  -	      if	bankswitch == 8
   4336  fd73				  -	      ORG	$2F94-bscode_length
   4337  fd73				  -	      RORG	$FF94-bscode_length
   4338  fd73				  -	      endif
   4339  fd73				  -	      if	bankswitch == 16
   4340  fd73				  -	      ORG	$4F94-bscode_length
   4341  fd73				  -	      RORG	$FF94-bscode_length
   4342  fd73				  -	      endif
   4343  fd73				  -	      if	bankswitch == 32
   4344  fd73				  -	      ORG	$8F94-bscode_length
   4345  fd73				  -	      RORG	$FF94-bscode_length
   4346  fd73				  -	      endif
   4347  fd73				  -	      if	bankswitch == 64
   4348  fd73				  -	      ORG	$10F80-bscode_length
   4349  fd73				  -	      RORG	$1FF80-bscode_length
   4350  fd73				  -	      endif
   4351  fd73					      else
   4352  ff9c					      ORG	$FF9C
   4353  ff9c					      endif
   4354  ff9c					      endif
   4355  ff9c
   4356  ff9c							; font equates
   4357  ff9c		       00 01	   .21stcentury =	1
   4358  ff9c		       00 02	   alarmclock =	2
   4359  ff9c		       00 03	   handwritten =	3
   4360  ff9c		       00 04	   interrupted =	4
   4361  ff9c		       00 05	   retroputer =	5
   4362  ff9c		       00 06	   whimsey    =	6
   4363  ff9c		       00 07	   tiny       =	7
   4364  ff9c		       00 08	   hex	      =	8
   4365  ff9c
   4366  ff9c				  -	      ifconst	font
   4367  ff9c				  -	      if	font == hex
   4368  ff9c				  -	      ORG	. - 48
   4369  ff9c				  -	      endif
   4370  ff9c					      endif
   4371  ff9c
   4372  ff9c				   scoretable
   4373  ff9c
   4374  ff9c				  -	      ifconst	font
   4375  ff9c				  -	      if	font == .21stcentury
   4376  ff9c				  -	      include	"score_graphics.asm.21stcentury"
   4377  ff9c				  -	      endif
   4378  ff9c				  -	      if	font == alarmclock
   4379  ff9c				  -	      include	"score_graphics.asm.alarmclock"
   4380  ff9c				  -	      endif
   4381  ff9c				  -	      if	font == handwritten
   4382  ff9c				  -	      include	"score_graphics.asm.handwritten"
   4383  ff9c				  -	      endif
   4384  ff9c				  -	      if	font == interrupted
   4385  ff9c				  -	      include	"score_graphics.asm.interrupted"
   4386  ff9c				  -	      endif
   4387  ff9c				  -	      if	font == retroputer
   4388  ff9c				  -	      include	"score_graphics.asm.retroputer"
   4389  ff9c				  -	      endif
   4390  ff9c				  -	      if	font == whimsey
   4391  ff9c				  -	      include	"score_graphics.asm.whimsey"
   4392  ff9c				  -	      endif
   4393  ff9c				  -	      if	font == tiny
   4394  ff9c				  -	      include	"score_graphics.asm.tiny"
   4395  ff9c				  -	      endif
   4396  ff9c				  -	      if	font == hex
   4397  ff9c				  -	      include	"score_graphics.asm.hex"
   4398  ff9c				  -	      endif
   4399  ff9c					      else		; default font
   4400  ff9c
   4401  ff9c		       3c		      .byte.b	%00111100
   4402  ff9d		       66		      .byte.b	%01100110
   4403  ff9e		       66		      .byte.b	%01100110
   4404  ff9f		       66		      .byte.b	%01100110
   4405  ffa0		       66		      .byte.b	%01100110
   4406  ffa1		       66		      .byte.b	%01100110
   4407  ffa2		       66		      .byte.b	%01100110
   4408  ffa3		       3c		      .byte.b	%00111100
   4409  ffa4
   4410  ffa4		       7e		      .byte.b	%01111110
   4411  ffa5		       18		      .byte.b	%00011000
   4412  ffa6		       18		      .byte.b	%00011000
   4413  ffa7		       18		      .byte.b	%00011000
   4414  ffa8		       18		      .byte.b	%00011000
   4415  ffa9		       38		      .byte.b	%00111000
   4416  ffaa		       18		      .byte.b	%00011000
   4417  ffab		       08		      .byte.b	%00001000
   4418  ffac
   4419  ffac		       7e		      .byte.b	%01111110
   4420  ffad		       60		      .byte.b	%01100000
   4421  ffae		       60		      .byte.b	%01100000
   4422  ffaf		       3c		      .byte.b	%00111100
   4423  ffb0		       06		      .byte.b	%00000110
   4424  ffb1		       06		      .byte.b	%00000110
   4425  ffb2		       46		      .byte.b	%01000110
   4426  ffb3		       3c		      .byte.b	%00111100
   4427  ffb4
   4428  ffb4		       3c		      .byte.b	%00111100
   4429  ffb5		       46		      .byte.b	%01000110
   4430  ffb6		       06		      .byte.b	%00000110
   4431  ffb7		       06		      .byte.b	%00000110
   4432  ffb8		       1c		      .byte.b	%00011100
   4433  ffb9		       06		      .byte.b	%00000110
   4434  ffba		       46		      .byte.b	%01000110
   4435  ffbb		       3c		      .byte.b	%00111100
   4436  ffbc
   4437  ffbc		       0c		      .byte.b	%00001100
   4438  ffbd		       0c		      .byte.b	%00001100
   4439  ffbe		       7e		      .byte.b	%01111110
   4440  ffbf		       4c		      .byte.b	%01001100
   4441  ffc0		       4c		      .byte.b	%01001100
   4442  ffc1		       2c		      .byte.b	%00101100
   4443  ffc2		       1c		      .byte.b	%00011100
   4444  ffc3		       0c		      .byte.b	%00001100
   4445  ffc4
   4446  ffc4		       3c		      .byte.b	%00111100
   4447  ffc5		       46		      .byte.b	%01000110
   4448  ffc6		       06		      .byte.b	%00000110
   4449  ffc7		       06		      .byte.b	%00000110
   4450  ffc8		       3c		      .byte.b	%00111100
   4451  ffc9		       60		      .byte.b	%01100000
   4452  ffca		       60		      .byte.b	%01100000
   4453  ffcb		       7e		      .byte.b	%01111110
   4454  ffcc
   4455  ffcc		       3c		      .byte.b	%00111100
   4456  ffcd		       66		      .byte.b	%01100110
   4457  ffce		       66		      .byte.b	%01100110
   4458  ffcf		       66		      .byte.b	%01100110
   4459  ffd0		       7c		      .byte.b	%01111100
   4460  ffd1		       60		      .byte.b	%01100000
   4461  ffd2		       62		      .byte.b	%01100010
   4462  ffd3		       3c		      .byte.b	%00111100
   4463  ffd4
   4464  ffd4		       30		      .byte.b	%00110000
   4465  ffd5		       30		      .byte.b	%00110000
   4466  ffd6		       30		      .byte.b	%00110000
   4467  ffd7		       18		      .byte.b	%00011000
   4468  ffd8		       0c		      .byte.b	%00001100
   4469  ffd9		       06		      .byte.b	%00000110
   4470  ffda		       42		      .byte.b	%01000010
   4471  ffdb		       3e		      .byte.b	%00111110
   4472  ffdc
   4473  ffdc		       3c		      .byte.b	%00111100
   4474  ffdd		       66		      .byte.b	%01100110
   4475  ffde		       66		      .byte.b	%01100110
   4476  ffdf		       66		      .byte.b	%01100110
   4477  ffe0		       3c		      .byte.b	%00111100
   4478  ffe1		       66		      .byte.b	%01100110
   4479  ffe2		       66		      .byte.b	%01100110
   4480  ffe3		       3c		      .byte.b	%00111100
   4481  ffe4
   4482  ffe4		       3c		      .byte.b	%00111100
   4483  ffe5		       46		      .byte.b	%01000110
   4484  ffe6		       06		      .byte.b	%00000110
   4485  ffe7		       3e		      .byte.b	%00111110
   4486  ffe8		       66		      .byte.b	%01100110
   4487  ffe9		       66		      .byte.b	%01100110
   4488  ffea		       66		      .byte.b	%01100110
   4489  ffeb		       3c		      .byte.b	%00111100
   4490  ffec
   4491  ffec					      ifnconst	DPC_kernel_options
   4492  ffec
   4493  ffec		       00		      .byte.b	%00000000
   4494  ffed		       00		      .byte.b	%00000000
   4495  ffee		       00		      .byte.b	%00000000
   4496  ffef		       00		      .byte.b	%00000000
   4497  fff0		       00		      .byte.b	%00000000
   4498  fff1		       00		      .byte.b	%00000000
   4499  fff2		       00		      .byte.b	%00000000
   4500  fff3		       00		      .byte.b	%00000000
   4501  fff4
   4502  fff4					      endif
   4503  fff4
   4504  fff4					      endif
   4505  fff4
   4506  fff4				  -	      ifconst	ROM2k
   4507  fff4				  -	      ORG	$F7FC
   4508  fff4					      else
   4509  fff4				  -	      ifconst	bankswitch
   4510  fff4				  -	      if	bankswitch == 8
   4511  fff4				  -	      ORG	$2FF4-bscode_length
   4512  fff4				  -	      RORG	$FFF4-bscode_length
   4513  fff4				  -	      endif
   4514  fff4				  -	      if	bankswitch == 16
   4515  fff4				  -	      ORG	$4FF4-bscode_length
   4516  fff4				  -	      RORG	$FFF4-bscode_length
   4517  fff4				  -	      endif
   4518  fff4				  -	      if	bankswitch == 32
   4519  fff4				  -	      ORG	$8FF4-bscode_length
   4520  fff4				  -	      RORG	$FFF4-bscode_length
   4521  fff4				  -	      endif
   4522  fff4				  -	      if	bankswitch == 64
   4523  fff4				  -	      ORG	$10FE0-bscode_length
   4524  fff4				  -	      RORG	$1FFE0-bscode_length
   4525  fff4				  -	      endif
   4526  fff4					      else
   4527  fffc					      ORG	$FFFC
   4528  fffc					      endif
   4529  fffc					      endif
   4530  fffc							; Provided under the CC0 license. See the included LICENSE.txt for details.
   4531  fffc
   4532  fffc				  -	      ifconst	bankswitch
   4533  fffc				  -	      if	bankswitch == 8
   4534  fffc				  -	      ORG	$2FFC
   4535  fffc				  -	      RORG	$FFFC
   4536  fffc				  -	      endif
   4537  fffc				  -	      if	bankswitch == 16
   4538  fffc				  -	      ORG	$4FFC
   4539  fffc				  -	      RORG	$FFFC
   4540  fffc				  -	      endif
   4541  fffc				  -	      if	bankswitch == 32
   4542  fffc				  -	      ORG	$8FFC
   4543  fffc				  -	      RORG	$FFFC
   4544  fffc				  -	      endif
   4545  fffc				  -	      if	bankswitch == 64
   4546  fffc				  -	      ORG	$10FF0
   4547  fffc				  -	      RORG	$1FFF0
   4548  fffc				  -	      lda	$ffe0	; we use wasted space to assist stella with EF format auto-detection
   4549  fffc				  -	      ORG	$10FF8
   4550  fffc				  -	      RORG	$1FFF8
   4551  fffc				  -	      ifconst	superchip
   4552  fffc				  -	      .byte	"E","F","S","C"
   4553  fffc				  -	      else
   4554  fffc				  -	      .byte	"E","F","E","F"
   4555  fffc				  -	      endif
   4556  fffc				  -	      ORG	$10FFC
   4557  fffc				  -	      RORG	$1FFFC
   4558  fffc				  -	      endif
   4559  fffc					      else
   4560  fffc				  -	      ifconst	ROM2k
   4561  fffc				  -	      ORG	$F7FC
   4562  fffc					      else
   4563  fffc					      ORG	$FFFC
   4564  fffc					      endif
   4565  fffc					      endif
   4566  fffc		       00 f0		      .word.w	(start & $ffff)
   4567  fffe		       00 f0		      .word.w	(start & $ffff)
