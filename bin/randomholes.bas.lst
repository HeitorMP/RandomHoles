------- FILE d:\Batari Projects\RandomHoles\RandomHoles\randomholes.bas.asm LEVEL 1 PASS 3
      1  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  10000 ????
      3  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 2 PASS 3
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  10000 ????
      3  10000 ????						; VCS.H
      4  10000 ????						; Version 1.05, 13/November/2003
      5  10000 ????
      6  10000 ????		00 69	    VERSION_VCS =	105
      7  10000 ????
      8  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      9  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
     11  10000 ????						;
     12  10000 ????						; This file defines hardware registers and memory mapping for the
     13  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     14  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  10000 ????						; available at at http://www.atari2600.org/dasm
     16  10000 ????						;
     17  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     18  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     19  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     20  10000 ????						; with your views.  Please contribute, if you think you can improve this
     21  10000 ????						; file!
     22  10000 ????						;
     23  10000 ????						; Latest Revisions...
     24  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     25  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     26  10000 ????						;			    This will allow conditional code to verify VCS.H being
     27  10000 ????						;			    used for code assembly.
     28  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     29  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     30  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     31  10000 ????						;			 readability issue, and binary compatibility with disassembled
     32  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     33  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     34  10000 ????						;			 which was broken by the use of segments in this file, as
     35  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     36  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     37  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     38  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     39  10000 ????						;						   it is safe to leave it undefined, and the base address will
     40  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     41  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     42  10000 ????						;			  - register definitions are now generated through assignment
     43  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     44  10000 ????						;			    address architecture.
     45  10000 ????						; 1.0	22/MAR/2003		Initial release
     46  10000 ????
     47  10000 ????
     48  10000 ????						;-------------------------------------------------------------------------------
     49  10000 ????
     50  10000 ????						; TIA_BASE_ADDRESS
     51  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     52  10000 ????						; Normally 0, the base address should (externally, before including this file)
     53  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     54  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     55  10000 ????						; < $40 as a bankswitch.
     56  10000 ????
     57  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     58  10000 ????			   -TIA_BASE_ADDRESS =	0
     59  10000 ????				       ENDIF
     60  10000 ????
     61  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     62  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     63  10000 ????						; *OR* by declaring the label before including this file, eg:
     64  10000 ????						; TIA_BASE_ADDRESS = $40
     65  10000 ????						;   include "vcs.h"
     66  10000 ????
     67  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     68  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     69  10000 ????						; for the mirrored ROM hardware registers.
     70  10000 ????
     71  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     72  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     73  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     74  10000 ????
     75  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     76  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     77  10000 ????				       ENDIF
     78  10000 ????
     79  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     80  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     81  10000 ????				       ENDIF
     82  10000 ????
     83  10000 ????						;-------------------------------------------------------------------------------
     84  10000 ????
     85 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     86 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     87 U0000
     88 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     89 U0000
     90 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     91 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     92 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     93 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     94 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     95 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     96 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     97 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     98 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     99 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
    100 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
    101 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    102 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    103 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    104 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    105 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    106 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    107 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    108 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    109 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    110 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    111 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    112 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    113 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    114 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    115 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    116 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    117 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    118 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    119 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    120 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    121 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    122 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    123 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    124 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    125 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    126 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    127 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    128 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    129 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    130 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    131 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    132 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    133 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    134 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    135 U002d
    136 U002d							;-------------------------------------------------------------------------------
    137 U002d
    138 U000e ????				      SEG.U	TIA_REGISTERS_READ
    139 U0000					      ORG	TIA_BASE_READ_ADDRESS
    140 U0000
    141 U0000							;											bit 7	 bit 6
    142 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    143 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    144 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    145 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    146 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    147 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    148 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    149 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    150 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    151 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    152 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    153 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    154 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    155 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    156 U000e
    157 U000e							;-------------------------------------------------------------------------------
    158 U000e
    159 U0298 ????				      SEG.U	RIOT
    160 U0280					      ORG	$280
    161 U0280
    162 U0280							; RIOT MEMORY MAP
    163 U0280
    164 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    165 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    166 U0281
    167 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    168 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    169 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    170 U0284		       00	   INTIM      ds	1	; $284		Timer output
    171 U0285
    172 U0285		       00	   TIMINT     ds	1	; $285
    173 U0286
    174 U0286							; Unused/undefined registers ($285-$294)
    175 U0286
    176 U0286		       00		      ds	1	; $286
    177 U0287		       00		      ds	1	; $287
    178 U0288		       00		      ds	1	; $288
    179 U0289		       00		      ds	1	; $289
    180 U028a		       00		      ds	1	; $28A
    181 U028b		       00		      ds	1	; $28B
    182 U028c		       00		      ds	1	; $28C
    183 U028d		       00		      ds	1	; $28D
    184 U028e		       00		      ds	1	; $28E
    185 U028f		       00		      ds	1	; $28F
    186 U0290		       00		      ds	1	; $290
    187 U0291		       00		      ds	1	; $291
    188 U0292		       00		      ds	1	; $292
    189 U0293		       00		      ds	1	; $293
    190 U0294
    191 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    192 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    193 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    194 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    195 U0298
    196 U0298							;-------------------------------------------------------------------------------
    197 U0298							; The following required for back-compatibility with code which does not use
    198 U0298							; segments.
    199 U0298
    200  10000 ????				       SEG
    201  10000 ????
    202  10000 ????						; EOF
------- FILE d:\Batari Projects\RandomHoles\RandomHoles\randomholes.bas.asm
------- FILE macro.h LEVEL 2 PASS 3
      0  10000 ????				       include	"macro.h"
      1  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  10000 ????
      3  10000 ????						; MACRO.H
      4  10000 ????						; Version 1.05, 13/NOVEMBER/2003
      5  10000 ????
      6  10000 ????		00 69	    VERSION_MACRO =	105
      7  10000 ????
      8  10000 ????						;
      9  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
     11  10000 ????						;
     12  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     13  10000 ????						; It is distributed as a companion machine-specific support package
     14  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  10000 ????						; available at at http://www.atari2600.org/dasm
     16  10000 ????						;
     17  10000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     18  10000 ????						; contents, or would like to add something, please write to me
     19  10000 ????						; (atari2600@taswegian.com) with your contribution.
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						;
     23  10000 ????						; 1.05  14/NOV/2003	  - Added VERSION_MACRO equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify MACRO.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     27  10000 ????						;
     28  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     29  10000 ????						;
     30  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     31  10000 ????						;			   (standardised macro for vertical synch code)
     32  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     33  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     34  10000 ????						; 1.0	22/MAR/2003		Initial release
     35  10000 ????
     36  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     37  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     38  10000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     39  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     40  10000 ????						;   registers and require them to be defined first).
     41  10000 ????
     42  10000 ????						; Available macros...
     43  10000 ????						;   SLEEP n		 - sleep for n cycles
     44  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     45  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     46  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     47  10000 ????
     48  10000 ????						;-------------------------------------------------------------------------------
     49  10000 ????						; SLEEP duration
     50  10000 ????						; Original author: Thomas Jentzsch
     51  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     52  10000 ????						; useful for code where precise timing is required.
     53  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     54  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     55  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     56  10000 ????
     57  10000 ????				       MAC	sleep
     58  10000 ????			    .CYCLES    SET	{1}
     59  10000 ????
     60  10000 ????				       IF	.CYCLES < 2
     61  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     62  10000 ????				       ERR
     63  10000 ????				       ENDIF
     64  10000 ????
     65  10000 ????				       IF	.CYCLES & 1
     66  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     67  10000 ????				       nop	0
     68  10000 ????				       ELSE
     69  10000 ????				       bit	VSYNC
     70  10000 ????				       ENDIF
     71  10000 ????			    .CYCLES    SET	.CYCLES - 3
     72  10000 ????				       ENDIF
     73  10000 ????
     74  10000 ????				       REPEAT	.CYCLES / 2
     75  10000 ????				       nop
     76  10000 ????				       REPEND
     77  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     78  10000 ????
     79  10000 ????						;-------------------------------------------------------------------------------
     80  10000 ????						; VERTICAL_SYNC
     81  10000 ????						; Original author: Manuel Polik
     82  10000 ????						; Inserts the code required for a proper 3 scannline 
     83  10000 ????						; vertical sync sequence
     84  10000 ????						;
     85  10000 ????						; Note: Alters the accumulator
     86  10000 ????						;
     87  10000 ????						; IN:
     88  10000 ????						; OUT: A = 1
     89  10000 ????
     90  10000 ????				       MAC	vertical_sync
     91  10000 ????				       LDA	#$02	; A = VSYNC enable
     92  10000 ????				       STA	WSYNC	; Finish current line
     93  10000 ????				       STA	VSYNC	; Start vertical sync
     94  10000 ????				       STA	WSYNC	; 1st line vertical sync
     95  10000 ????				       STA	WSYNC	; 2nd line vertical sync
     96  10000 ????				       LSR		; A = VSYNC disable
     97  10000 ????				       STA	WSYNC	; 3rd line vertical sync
     98  10000 ????				       STA	VSYNC	; Stop vertical sync
     99  10000 ????				       ENDM
    100  10000 ????
    101  10000 ????						;-------------------------------------------------------------------------------
    102  10000 ????						; CLEAN_START
    103  10000 ????						; Original author: Andrew Davie
    104  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    105  10000 ????						; Sets stack pointer to $FF, and all registers to 0
    106  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    107  10000 ????						; Use as very first section of code on boot (ie: at reset)
    108  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    109  10000 ????
    110  10000 ????				       MAC	clean_start
    111  10000 ????				       sei
    112  10000 ????				       cld
    113  10000 ????
    114  10000 ????				       ldx	#0
    115  10000 ????				       txa
    116  10000 ????				       tay
    117  10000 ????			    .CLEAR_STACK dex
    118  10000 ????				       txs
    119  10000 ????				       pha
    120  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  10000 ????
    122  10000 ????				       ENDM
    123  10000 ????
    124  10000 ????						;-------------------------------------------------------
    125  10000 ????						; SET_POINTER
    126  10000 ????						; Original author: Manuel Rotschkar
    127  10000 ????						;
    128  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  10000 ????						;
    130  10000 ????						; Usage: SET_POINTER pointer, address
    131  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  10000 ????						;
    133  10000 ????						; Note: Alters the accumulator, NZ flags
    134  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  10000 ????						; IN 2: absolute address
    136  10000 ????
    137  10000 ????				       MAC	set_pointer
    138  10000 ????			    .POINTER   SET	{1}
    139  10000 ????			    .ADDRESS   SET	{2}
    140  10000 ????
    141  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  10000 ????				       STA	.POINTER	; Store in pointer
    143  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    144  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    145  10000 ????
    146  10000 ????				       ENDM
    147  10000 ????
    148  10000 ????						; EOF
------- FILE d:\Batari Projects\RandomHoles\RandomHoles\randomholes.bas.asm
------- FILE 2600basic.h LEVEL 2 PASS 3
      0  10000 ????				       include	"2600basic.h"
      1  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  10000 ????
      3  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 3 PASS 3
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  10000 ????
      3  10000 ????						; VCS.H
      4  10000 ????						; Version 1.05, 13/November/2003
      5  10000 ????
      6  10000 ????		00 69	    VERSION_VCS =	105
      7  10000 ????
      8  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      9  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
     11  10000 ????						;
     12  10000 ????						; This file defines hardware registers and memory mapping for the
     13  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     14  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  10000 ????						; available at at http://www.atari2600.org/dasm
     16  10000 ????						;
     17  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     18  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     19  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     20  10000 ????						; with your views.  Please contribute, if you think you can improve this
     21  10000 ????						; file!
     22  10000 ????						;
     23  10000 ????						; Latest Revisions...
     24  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     25  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     26  10000 ????						;			    This will allow conditional code to verify VCS.H being
     27  10000 ????						;			    used for code assembly.
     28  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     29  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     30  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     31  10000 ????						;			 readability issue, and binary compatibility with disassembled
     32  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     33  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     34  10000 ????						;			 which was broken by the use of segments in this file, as
     35  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     36  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     37  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     38  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     39  10000 ????						;						   it is safe to leave it undefined, and the base address will
     40  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     41  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     42  10000 ????						;			  - register definitions are now generated through assignment
     43  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     44  10000 ????						;			    address architecture.
     45  10000 ????						; 1.0	22/MAR/2003		Initial release
     46  10000 ????
     47  10000 ????
     48  10000 ????						;-------------------------------------------------------------------------------
     49  10000 ????
     50  10000 ????						; TIA_BASE_ADDRESS
     51  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     52  10000 ????						; Normally 0, the base address should (externally, before including this file)
     53  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     54  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     55  10000 ????						; < $40 as a bankswitch.
     56  10000 ????
     57  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     58  10000 ????			   -TIA_BASE_ADDRESS =	0
     59  10000 ????				       ENDIF
     60  10000 ????
     61  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     62  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     63  10000 ????						; *OR* by declaring the label before including this file, eg:
     64  10000 ????						; TIA_BASE_ADDRESS = $40
     65  10000 ????						;   include "vcs.h"
     66  10000 ????
     67  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     68  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     69  10000 ????						; for the mirrored ROM hardware registers.
     70  10000 ????
     71  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     72  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     73  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     74  10000 ????
     75  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     76  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     77  10000 ????				       ENDIF
     78  10000 ????
     79  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     80  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     81  10000 ????				       ENDIF
     82  10000 ????
     83  10000 ????						;-------------------------------------------------------------------------------
     84  10000 ????
     85 U002d					      SEG.U	TIA_REGISTERS_WRITE
     86 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     87 U0000
     88 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     89 U0000
     90 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     91 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     92 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     93 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     94 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     95 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     96 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     97 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     98 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     99 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
    100 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
    101 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    102 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    103 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    104 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    105 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    106 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    107 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    108 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    109 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    110 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    111 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    112 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    113 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    114 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    115 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    116 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    117 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    118 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    119 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    120 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    121 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    122 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    123 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    124 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    125 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    126 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    127 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    128 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    129 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    130 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    131 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    132 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    133 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    134 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    135 U002d
    136 U002d							;-------------------------------------------------------------------------------
    137 U002d
    138 U000e					      SEG.U	TIA_REGISTERS_READ
    139 U0000					      ORG	TIA_BASE_READ_ADDRESS
    140 U0000
    141 U0000							;											bit 7	 bit 6
    142 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    143 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    144 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    145 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    146 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    147 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    148 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    149 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    150 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    151 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    152 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    153 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    154 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    155 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    156 U000e
    157 U000e							;-------------------------------------------------------------------------------
    158 U000e
    159 U0298					      SEG.U	RIOT
    160 U0280					      ORG	$280
    161 U0280
    162 U0280							; RIOT MEMORY MAP
    163 U0280
    164 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    165 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    166 U0281
    167 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    168 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    169 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    170 U0284		       00	   INTIM      ds	1	; $284		Timer output
    171 U0285
    172 U0285		       00	   TIMINT     ds	1	; $285
    173 U0286
    174 U0286							; Unused/undefined registers ($285-$294)
    175 U0286
    176 U0286		       00		      ds	1	; $286
    177 U0287		       00		      ds	1	; $287
    178 U0288		       00		      ds	1	; $288
    179 U0289		       00		      ds	1	; $289
    180 U028a		       00		      ds	1	; $28A
    181 U028b		       00		      ds	1	; $28B
    182 U028c		       00		      ds	1	; $28C
    183 U028d		       00		      ds	1	; $28D
    184 U028e		       00		      ds	1	; $28E
    185 U028f		       00		      ds	1	; $28F
    186 U0290		       00		      ds	1	; $290
    187 U0291		       00		      ds	1	; $291
    188 U0292		       00		      ds	1	; $292
    189 U0293		       00		      ds	1	; $293
    190 U0294
    191 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    192 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    193 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    194 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    195 U0298
    196 U0298							;-------------------------------------------------------------------------------
    197 U0298							; The following required for back-compatibility with code which does not use
    198 U0298							; segments.
    199 U0298
    200  10000 ????				       SEG
    201  10000 ????
    202  10000 ????						; EOF
------- FILE 2600basic.h
------- FILE macro.h LEVEL 3 PASS 3
      0  10000 ????				       include	"macro.h"
      1  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  10000 ????
      3  10000 ????						; MACRO.H
      4  10000 ????						; Version 1.05, 13/NOVEMBER/2003
      5  10000 ????
      6  10000 ????		00 69	    VERSION_MACRO =	105
      7  10000 ????
      8  10000 ????						;
      9  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
     11  10000 ????						;
     12  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     13  10000 ????						; It is distributed as a companion machine-specific support package
     14  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  10000 ????						; available at at http://www.atari2600.org/dasm
     16  10000 ????						;
     17  10000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     18  10000 ????						; contents, or would like to add something, please write to me
     19  10000 ????						; (atari2600@taswegian.com) with your contribution.
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						;
     23  10000 ????						; 1.05  14/NOV/2003	  - Added VERSION_MACRO equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify MACRO.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     27  10000 ????						;
     28  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     29  10000 ????						;
     30  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     31  10000 ????						;			   (standardised macro for vertical synch code)
     32  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     33  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     34  10000 ????						; 1.0	22/MAR/2003		Initial release
     35  10000 ????
     36  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     37  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     38  10000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     39  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     40  10000 ????						;   registers and require them to be defined first).
     41  10000 ????
     42  10000 ????						; Available macros...
     43  10000 ????						;   SLEEP n		 - sleep for n cycles
     44  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     45  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     46  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     47  10000 ????
     48  10000 ????						;-------------------------------------------------------------------------------
     49  10000 ????						; SLEEP duration
     50  10000 ????						; Original author: Thomas Jentzsch
     51  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     52  10000 ????						; useful for code where precise timing is required.
     53  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     54  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     55  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     56  10000 ????
     57  10000 ????				       MAC	sleep
     58  10000 ????			    .CYCLES    SET	{1}
     59  10000 ????
     60  10000 ????				       IF	.CYCLES < 2
     61  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     62  10000 ????				       ERR
     63  10000 ????				       ENDIF
     64  10000 ????
     65  10000 ????				       IF	.CYCLES & 1
     66  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     67  10000 ????				       nop	0
     68  10000 ????				       ELSE
     69  10000 ????				       bit	VSYNC
     70  10000 ????				       ENDIF
     71  10000 ????			    .CYCLES    SET	.CYCLES - 3
     72  10000 ????				       ENDIF
     73  10000 ????
     74  10000 ????				       REPEAT	.CYCLES / 2
     75  10000 ????				       nop
     76  10000 ????				       REPEND
     77  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     78  10000 ????
     79  10000 ????						;-------------------------------------------------------------------------------
     80  10000 ????						; VERTICAL_SYNC
     81  10000 ????						; Original author: Manuel Polik
     82  10000 ????						; Inserts the code required for a proper 3 scannline 
     83  10000 ????						; vertical sync sequence
     84  10000 ????						;
     85  10000 ????						; Note: Alters the accumulator
     86  10000 ????						;
     87  10000 ????						; IN:
     88  10000 ????						; OUT: A = 1
     89  10000 ????
     90  10000 ????				       MAC	vertical_sync
     91  10000 ????				       LDA	#$02	; A = VSYNC enable
     92  10000 ????				       STA	WSYNC	; Finish current line
     93  10000 ????				       STA	VSYNC	; Start vertical sync
     94  10000 ????				       STA	WSYNC	; 1st line vertical sync
     95  10000 ????				       STA	WSYNC	; 2nd line vertical sync
     96  10000 ????				       LSR		; A = VSYNC disable
     97  10000 ????				       STA	WSYNC	; 3rd line vertical sync
     98  10000 ????				       STA	VSYNC	; Stop vertical sync
     99  10000 ????				       ENDM
    100  10000 ????
    101  10000 ????						;-------------------------------------------------------------------------------
    102  10000 ????						; CLEAN_START
    103  10000 ????						; Original author: Andrew Davie
    104  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    105  10000 ????						; Sets stack pointer to $FF, and all registers to 0
    106  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    107  10000 ????						; Use as very first section of code on boot (ie: at reset)
    108  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    109  10000 ????
    110  10000 ????				       MAC	clean_start
    111  10000 ????				       sei
    112  10000 ????				       cld
    113  10000 ????
    114  10000 ????				       ldx	#0
    115  10000 ????				       txa
    116  10000 ????				       tay
    117  10000 ????			    .CLEAR_STACK dex
    118  10000 ????				       txs
    119  10000 ????				       pha
    120  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  10000 ????
    122  10000 ????				       ENDM
    123  10000 ????
    124  10000 ????						;-------------------------------------------------------
    125  10000 ????						; SET_POINTER
    126  10000 ????						; Original author: Manuel Rotschkar
    127  10000 ????						;
    128  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  10000 ????						;
    130  10000 ????						; Usage: SET_POINTER pointer, address
    131  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  10000 ????						;
    133  10000 ????						; Note: Alters the accumulator, NZ flags
    134  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  10000 ????						; IN 2: absolute address
    136  10000 ????
    137  10000 ????				       MAC	set_pointer
    138  10000 ????			    .POINTER   SET	{1}
    139  10000 ????			    .ADDRESS   SET	{2}
    140  10000 ????
    141  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  10000 ????				       STA	.POINTER	; Store in pointer
    143  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    144  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    145  10000 ????
    146  10000 ????				       ENDM
    147  10000 ????
    148  10000 ????						; EOF
------- FILE 2600basic.h
------- FILE 2600basic_variable_redefs.h LEVEL 3 PASS 3
      0  10000 ????				       include	"2600basic_variable_redefs.h"
      1  10000 ????						; This file contains variable mapping and other information for the current project.
      2  10000 ????
      3  10000 ????		00 17	    musicData2_length =	.skipL0243-musicData2
      4  10000 ????
      5  10000 ????		00 17	    musicData1_length =	.skipL0242-musicData1
      6  10000 ????
      7  10000 ????		00 ed	    rand16     =	z
      8  10000 ????
      9  10000 ????		00 e6	    _cont_telas =	s
     10  10000 ????
     11  10000 ????		00 e5	    _cont_anima_morte =	r
     12  10000 ????
     13  10000 ????		00 e4	    _fases     =	q
     14  10000 ????
     15  10000 ????		00 e2	    _SC_Back   =	o
     16  10000 ????
     17  10000 ????		00 e1	    _animacao  =	n
     18  10000 ????
     19  10000 ????		00 e0	    _Ch1_Sound =	m
     20  10000 ????
     21  10000 ????		00 df	    _dificuldade =	l
     22  10000 ????
     23  10000 ????		00 de	    musicTimer =	k
     24  10000 ????
     25  10000 ????		00 dd	    _bit_supressores =	j
     26  10000 ????
     27  10000 ????		00 db	    musicPointer =	h
     28  10000 ????
     29  10000 ????		00 da	    _duracao_som1 =	g
     30  10000 ????
     31  10000 ????		00 d9	    _duracao_som0 =	f
     32  10000 ????
     33  10000 ????		00 d8	    _cont_escudo =	e
     34  10000 ????
     35  10000 ????		00 d4	    _Ch0_Sound =	a
     36  10000 ????
     37  10000 ????		00 01	    pfscore    =	1
     38  10000 ????
     39  10000 ????		00 01	    no_blank_lines =	1
------- FILE 2600basic.h
      7  10000 ????
      8  10000 ????		00 80	    player0x   =	$80
      9  10000 ????		00 81	    player1x   =	$81
     10  10000 ????		00 82	    missile0x  =	$82
     11  10000 ????		00 83	    missile1x  =	$83
     12  10000 ????		00 84	    ballx      =	$84
     13  10000 ????
     14  10000 ????		00 85	    objecty    =	$85
     15  10000 ????		00 85	    player0y   =	$85
     16  10000 ????		00 86	    player1y   =	$86
     17  10000 ????		00 87	    missile1height =	$87
     18  10000 ????		00 88	    missile1y  =	$88
     19  10000 ????		00 89	    bally      =	$89
     20  10000 ????
     21  10000 ????		00 87	    player1color =	$87	; replaces missile 1
     22  10000 ????
     23  10000 ????		00 8a	    player0pointer =	$8A	;uses $8A-$8B
     24  10000 ????		00 8a	    player0pointerlo =	$8A
     25  10000 ????		00 8b	    player0pointerhi =	$8B
     26  10000 ????		00 8c	    player1pointer =	$8C	; $8C-$8D
     27  10000 ????		00 8c	    player1pointerlo =	$8C
     28  10000 ????		00 8d	    player1pointerhi =	$8D
     29  10000 ????
     30  10000 ????		00 8e	    player0height =	$8E
     31  10000 ????		00 8f	    player1height =	$8F
     32  10000 ????		00 90	    missile0height =	$90
     33  10000 ????		00 91	    missile0y  =	$91
     34  10000 ????		00 92	    ballheight =	$92
     35  10000 ????
     36  10000 ????		00 90	    currentpaddle =	$90	; replaces missile 0 (and can't be used with playercolor)
     37  10000 ????		00 91	    paddle     =	$91	; replaces missile 0
     38  10000 ????		00 82	    player0colorstore =	$82	; replaces missile 0
     39  10000 ????		00 90	    player0color =	$90	; replaces missile 0
     40  10000 ????
     41  10000 ????		00 93	    score      =	$93	; $93-$95
     42  10000 ????		00 96	    scorepointers =	$96	; $96-$9B = 6 bytes
     43  10000 ????		00 9c	    temp1      =	$9C	;used by kernel.  can be used in program too, but
     44  10000 ????		00 9d	    temp2      =	$9D	;are obliterated when drawscreen is called.
     45  10000 ????		00 9e	    temp3      =	$9E
     46  10000 ????		00 9f	    temp4      =	$9F
     47  10000 ????		00 a0	    temp5      =	$A0
     48  10000 ????		00 a1	    temp6      =	$A1
     49  10000 ????
     50  10000 ????		00 a2	    rand       =	$A2
     51  10000 ????		00 a3	    scorecolor =	$A3
     52  10000 ????
     53  10000 ????		00 a4	    var0       =	$A4
     54  10000 ????		00 a5	    var1       =	$A5
     55  10000 ????		00 a6	    var2       =	$A6
     56  10000 ????		00 a7	    var3       =	$A7
     57  10000 ????		00 a8	    var4       =	$A8
     58  10000 ????		00 a9	    var5       =	$A9
     59  10000 ????		00 aa	    var6       =	$AA
     60  10000 ????		00 ab	    var7       =	$AB
     61  10000 ????		00 ac	    var8       =	$AC
     62  10000 ????		00 ad	    var9       =	$AD
     63  10000 ????		00 ae	    var10      =	$AE
     64  10000 ????		00 af	    var11      =	$AF
     65  10000 ????		00 b0	    var12      =	$B0
     66  10000 ????		00 b1	    var13      =	$B1
     67  10000 ????		00 b2	    var14      =	$B2
     68  10000 ????		00 b3	    var15      =	$B3
     69  10000 ????		00 b4	    var16      =	$B4
     70  10000 ????		00 b5	    var17      =	$B5
     71  10000 ????		00 b6	    var18      =	$B6
     72  10000 ????		00 b7	    var19      =	$B7
     73  10000 ????		00 b8	    var20      =	$B8
     74  10000 ????		00 b9	    var21      =	$B9
     75  10000 ????		00 ba	    var22      =	$BA
     76  10000 ????		00 bb	    var23      =	$BB
     77  10000 ????		00 bc	    var24      =	$BC
     78  10000 ????		00 bd	    var25      =	$BD
     79  10000 ????		00 be	    var26      =	$BE
     80  10000 ????		00 bf	    var27      =	$BF
     81  10000 ????		00 c0	    var28      =	$C0
     82  10000 ????		00 c1	    var29      =	$C1
     83  10000 ????		00 c2	    var30      =	$C2
     84  10000 ????		00 c3	    var31      =	$C3
     85  10000 ????		00 c4	    var32      =	$C4
     86  10000 ????		00 c5	    var33      =	$C5
     87  10000 ????		00 c6	    var34      =	$C6
     88  10000 ????		00 c7	    var35      =	$C7
     89  10000 ????		00 c8	    var36      =	$C8
     90  10000 ????		00 c9	    var37      =	$C9
     91  10000 ????		00 ca	    var38      =	$CA
     92  10000 ????		00 cb	    var39      =	$CB
     93  10000 ????		00 cc	    var40      =	$CC
     94  10000 ????		00 cd	    var41      =	$CD
     95  10000 ????		00 ce	    var42      =	$CE
     96  10000 ????		00 cf	    var43      =	$CF
     97  10000 ????		00 d0	    var44      =	$D0
     98  10000 ????		00 d1	    var45      =	$D1
     99  10000 ????		00 d2	    var46      =	$D2
    100  10000 ????		00 d3	    var47      =	$D3
    101  10000 ????
    102  10000 ????		00 d4	    A	       =	$d4
    103  10000 ????		00 d4	    a	       =	$d4
    104  10000 ????		00 d5	    B	       =	$d5
    105  10000 ????		00 d5	    b	       =	$d5
    106  10000 ????		00 d6	    C	       =	$d6
    107  10000 ????		00 d6	    c	       =	$d6
    108  10000 ????		00 d7	    D	       =	$d7
    109  10000 ????		00 d7	    d	       =	$d7
    110  10000 ????		00 d8	    E	       =	$d8
    111  10000 ????		00 d8	    e	       =	$d8
    112  10000 ????		00 d9	    F	       =	$d9
    113  10000 ????		00 d9	    f	       =	$d9
    114  10000 ????		00 da	    G	       =	$da
    115  10000 ????		00 da	    g	       =	$da
    116  10000 ????		00 db	    H	       =	$db
    117  10000 ????		00 db	    h	       =	$db
    118  10000 ????		00 dc	    I	       =	$dc
    119  10000 ????		00 dc	    i	       =	$dc
    120  10000 ????		00 dd	    J	       =	$dd
    121  10000 ????		00 dd	    j	       =	$dd
    122  10000 ????		00 de	    K	       =	$de
    123  10000 ????		00 de	    k	       =	$de
    124  10000 ????		00 df	    L	       =	$df
    125  10000 ????		00 df	    l	       =	$df
    126  10000 ????		00 e0	    M	       =	$e0
    127  10000 ????		00 e0	    m	       =	$e0
    128  10000 ????		00 e1	    N	       =	$e1
    129  10000 ????		00 e1	    n	       =	$e1
    130  10000 ????		00 e2	    O	       =	$e2
    131  10000 ????		00 e2	    o	       =	$e2
    132  10000 ????		00 e3	    P	       =	$e3
    133  10000 ????		00 e3	    p	       =	$e3
    134  10000 ????		00 e4	    Q	       =	$e4
    135  10000 ????		00 e4	    q	       =	$e4
    136  10000 ????		00 e5	    R	       =	$e5
    137  10000 ????		00 e5	    r	       =	$e5
    138  10000 ????		00 e6	    S	       =	$e6
    139  10000 ????		00 e6	    s	       =	$e6
    140  10000 ????		00 e7	    T	       =	$e7
    141  10000 ????		00 e7	    t	       =	$e7
    142  10000 ????		00 e8	    U	       =	$e8
    143  10000 ????		00 e8	    u	       =	$e8
    144  10000 ????		00 e9	    V	       =	$e9
    145  10000 ????		00 e9	    v	       =	$e9
    146  10000 ????		00 ea	    W	       =	$ea
    147  10000 ????		00 ea	    w	       =	$ea
    148  10000 ????		00 eb	    X	       =	$eb
    149  10000 ????		00 eb	    x	       =	$eb
    150  10000 ????		00 ec	    Y	       =	$ec
    151  10000 ????		00 ec	    y	       =	$ec
    152  10000 ????		00 ed	    Z	       =	$ed
    153  10000 ????		00 ed	    z	       =	$ed
    154  10000 ????
    155  10000 ????		00 ee	    temp7      =	$ee	; This is used to aid in bankswitching
    156  10000 ????		00 ef	    playfieldpos =	$ef
    157  10000 ????
    158  10000 ????						; available for other uses, or if unused, provide more stack space
    159  10000 ????
    160  10000 ????		00 f0	    aux1       =	$f0
    161  10000 ????		00 f1	    aux2       =	$f1
    162  10000 ????		00 f2	    aux3       =	$f2
    163  10000 ????		00 f3	    aux4       =	$f3
    164  10000 ????		00 f4	    aux5       =	$f4
    165  10000 ????		00 f5	    aux6       =	$f5
    166  10000 ????
    167  10000 ????						; playfield color/height pointers
    168  10000 ????		00 f0	    pfcolortable =	$f0	; and $d5
    169  10000 ????		00 f0	    pfheighttable =	$f0	; and $d5
    170  10000 ????						; the above pointers are the same because if color and height are both used together,
    171  10000 ????						; they must used absolute indexed and cannot use pointers
    172  10000 ????
    173  10000 ????		00 f2	    lifepointer =	$f2	; pointer to "lives" shape
    174  10000 ????						; upper 3 bits of $f2 contain the number of lives
    175  10000 ????		00 f4	    lifecolor  =	$f4
    176  10000 ????		00 f3	    lives      =	$f3	; # lives >> 5
    177  10000 ????		00 f5	    statusbarlength =	$f5	; only uses upper 5 bits; other bits free
    178  10000 ????
    179  10000 ????		00 f2	    pfscore1   =	$f2	; optional playfield bytes in score
    180  10000 ????		00 f3	    pfscore2   =	$f3
    181  10000 ????		00 f4	    pfscorecolor =	$f4
    182  10000 ????
    183  10000 ????		00 f6	    stack1     =	$f6
    184  10000 ????		00 f7	    stack2     =	$f7
    185  10000 ????		00 f8	    stack3     =	$f8
    186  10000 ????		00 f9	    stack4     =	$f9
    187  10000 ????						; the stack bytes above may be used in the kernel
    188  10000 ????						; stack = F6-F7, F8-F9, FA-FB, FC-FD, FE-FF
    189  10000 ????
    190  10000 ????				       MAC	return
    191  10000 ????				       ifnconst	bankswitch
    192  10000 ????				       rts
    193  10000 ????				       else
    194  10000 ????				       jmp	BS_return
    195  10000 ????				       endif
    196  10000 ????				       ENDM		; auto-return from either a regular or bankswitched module
    197  10000 ????
    198  10000 ????			   -	       ifconst	superchip
    199  10000 ????			   -playfieldbase =	$10D0
    200  10000 ????			   -	       include	superchip.h
    201  10000 ????				       else
    202  10000 ????		00 a4	    playfieldbase =	$A4
    203  10000 ????				       endif
    204  10000 ????
    205  10000 ????				       ifnconst	pfhalfwidth
    206  10000 ????		00 04	    pfwidth    =	4
    207  10000 ????		00 0e	    PF1L       =	PF1
    208  10000 ????		00 0f	    PF2L       =	PF2
    209  10000 ????		00 0e	    PF1R       =	PF1
    210  10000 ????		00 0f	    PF2R       =	PF2
    211  10000 ????		00 00	    pfadjust   =	0
    212  10000 ????			   -	       else
    213  10000 ????			   -pfwidth    =	2
    214  10000 ????			   -	       ifconst	pfcenter
    215  10000 ????			   -PF1L       =	$3F	; no effect
    216  10000 ????			   -PF2L       =	PF2
    217  10000 ????			   -PF1R       =	$3F
    218  10000 ????			   -PF2R       =	PF2	; no effect
    219  10000 ????			   -pfadjust   =	1
    220  10000 ????			   -	       else
    221  10000 ????			   -PF1L       =	PF1
    222  10000 ????			   -PF2L       =	PF2
    223  10000 ????			   -PF1R       =	$3F	; no effect
    224  10000 ????			   -PF2R       =	$3F	; no effect
    225  10000 ????			   -pfadjust   =	0
    226  10000 ????			   -	       endif
    227  10000 ????				       endif
    228  10000 ????
    229  10000 ????						; define playfield start based on height
    230  10000 ????				       ifnconst	pfres
    231  10000 ????		00 a4	    playfield  =	playfieldbase
    232  10000 ????			   -	       else
    233  10000 ????			   -playfield  =	playfieldbase-(pfres-12*(4/pfwidth))*pfwidth
    234  10000 ????				       endif
------- FILE d:\Batari Projects\RandomHoles\RandomHoles\randomholes.bas.asm
------- FILE 2600basic_variable_redefs.h LEVEL 2 PASS 3
      0  10000 ????				       include	"2600basic_variable_redefs.h"
      1  10000 ????						; This file contains variable mapping and other information for the current project.
      2  10000 ????
      3  10000 ????		00 17	    musicData2_length =	.skipL0243-musicData2
      4  10000 ????
      5  10000 ????		00 17	    musicData1_length =	.skipL0242-musicData1
      6  10000 ????
      7  10000 ????		00 ed	    rand16     =	z
      8  10000 ????
      9  10000 ????		00 e6	    _cont_telas =	s
     10  10000 ????
     11  10000 ????		00 e5	    _cont_anima_morte =	r
     12  10000 ????
     13  10000 ????		00 e4	    _fases     =	q
     14  10000 ????
     15  10000 ????		00 e2	    _SC_Back   =	o
     16  10000 ????
     17  10000 ????		00 e1	    _animacao  =	n
     18  10000 ????
     19  10000 ????		00 e0	    _Ch1_Sound =	m
     20  10000 ????
     21  10000 ????		00 df	    _dificuldade =	l
     22  10000 ????
     23  10000 ????		00 de	    musicTimer =	k
     24  10000 ????
     25  10000 ????		00 dd	    _bit_supressores =	j
     26  10000 ????
     27  10000 ????		00 db	    musicPointer =	h
     28  10000 ????
     29  10000 ????		00 da	    _duracao_som1 =	g
     30  10000 ????
     31  10000 ????		00 d9	    _duracao_som0 =	f
     32  10000 ????
     33  10000 ????		00 d8	    _cont_escudo =	e
     34  10000 ????
     35  10000 ????		00 d4	    _Ch0_Sound =	a
     36  10000 ????
     37  10000 ????		00 01	    pfscore    =	1
     38  10000 ????
     39  10000 ????		00 01	    no_blank_lines =	1
------- FILE d:\Batari Projects\RandomHoles\RandomHoles\randomholes.bas.asm
      8  10000 ????			   -	       ifconst	bankswitch
      9  10000 ????			   -	       if	bankswitch == 8
     10  10000 ????			   -	       ORG	$1000
     11  10000 ????			   -	       RORG	$D000
     12  10000 ????			   -	       endif
     13  10000 ????			   -	       if	bankswitch == 16
     14  10000 ????			   -	       ORG	$1000
     15  10000 ????			   -	       RORG	$9000
     16  10000 ????			   -	       endif
     17  10000 ????			   -	       if	bankswitch == 32
     18  10000 ????			   -	       ORG	$1000
     19  10000 ????			   -	       RORG	$1000
     20  10000 ????			   -	       endif
     21  10000 ????			   -	       if	bankswitch == 64
     22  10000 ????			   -	       ORG	$1000
     23  10000 ????			   -	       RORG	$1000
     24  10000 ????			   -	       endif
     25  10000 ????				       else
     26  f000					      ORG	$F000
     27  f000					      endif
     28  f000
     29  f000				  -	      ifconst	bankswitch_hotspot
     30  f000				  -	      if	bankswitch_hotspot = $083F	; 0840 bankswitching hotspot
     31  f000				  -	      .byte	0	; stop unexpected bankswitches
     32  f000				  -	      endif
     33  f000					      endif
     34  f000							; Provided under the CC0 license. See the included LICENSE.txt for details.
     35  f000
     36  f000				   start
     37  f000		       78		      sei
     38  f001		       d8		      cld
     39  f002		       a0 00		      ldy	#0
     40  f004		       a5 d0		      lda	$D0
     41  f006		       c9 2c		      cmp	#$2C	;check RAM location #1
     42  f008		       d0 07		      bne	MachineIs2600
     43  f00a		       a5 d1		      lda	$D1
     44  f00c		       c9 a9		      cmp	#$A9	;check RAM location #2
     45  f00e		       d0 01		      bne	MachineIs2600
     46  f010		       88		      dey
     47  f011				   MachineIs2600
     48  f011		       a2 00		      ldx	#0
     49  f013		       8a		      txa
     50  f014				   clearmem
     51  f014		       e8		      inx
     52  f015		       9a		      txs
     53  f016		       48		      pha
     54  f017		       d0 fb		      bne	clearmem
     55  f019		       84 9c		      sty	temp1
     56  f01b					      ifnconst	multisprite
     57  f01b				  -	      ifconst	pfrowheight
     58  f01b				  -	      lda	#pfrowheight
     59  f01b					      else
     60  f01b				  -	      ifconst	pfres
     61  f01b				  -	      lda	#(96/pfres)
     62  f01b					      else
     63  f01b		       a9 08		      lda	#8
     64  f01d					      endif
     65  f01d					      endif
     66  f01d		       85 ef		      sta	playfieldpos
     67  f01f					      endif
     68  f01f		       a2 05		      ldx	#5
     69  f021				   initscore
     70  f021		       a9 9c		      lda	#<scoretable
     71  f023		       95 96		      sta	scorepointers,x
     72  f025		       ca		      dex
     73  f026		       10 f9		      bpl	initscore
     74  f028		       a9 01		      lda	#1
     75  f02a		       85 0a		      sta	CTRLPF
     76  f02c		       0d 84 02 	      ora	INTIM
     77  f02f		       85 a2		      sta	rand
     78  f031
     79  f031				  -	      ifconst	multisprite
     80  f031				  -	      jsr	multisprite_setup
     81  f031					      endif
     82  f031
     83  f031					      ifnconst	bankswitch
     84  f031		       4c 6c f4 	      jmp	game
     85  f034				  -	      else
     86  f034				  -	      lda	#>(game-1)
     87  f034				  -	      pha
     88  f034				  -	      lda	#<(game-1)
     89  f034				  -	      pha
     90  f034				  -	      pha
     91  f034				  -	      pha
     92  f034				  -	      ldx	#1
     93  f034				  -	      jmp	BS_jsr
     94  f034					      endif
     95  f034							; Provided under the CC0 license. See the included LICENSE.txt for details.
     96  f034
     97  f034							; This is a 2-line kernel!
     98  f034					      ifnconst	vertical_reflect
     99  f034				   kernel
    100  f034					      endif
    101  f034		       85 02		      sta	WSYNC
    102  f036		       a9 ff		      lda	#255
    103  f038		       8d 96 02 	      sta	TIM64T
    104  f03b
    105  f03b		       a9 01		      lda	#1
    106  f03d		       85 27		      sta	VDELBL
    107  f03f		       85 25		      sta	VDELP0
    108  f041		       a6 92		      ldx	ballheight
    109  f043		       e8		      inx
    110  f044		       e8		      inx
    111  f045		       86 9f		      stx	temp4
    112  f047		       a5 86		      lda	player1y
    113  f049		       85 9e		      sta	temp3
    114  f04b
    115  f04b				  -	      ifconst	shakescreen
    116  f04b				  -	      jsr	doshakescreen
    117  f04b					      else
    118  f04b		       a6 90		      ldx	missile0height
    119  f04d		       e8		      inx
    120  f04e					      endif
    121  f04e
    122  f04e		       e8		      inx
    123  f04f		       86 f6		      stx	stack1
    124  f051
    125  f051		       a5 89		      lda	bally
    126  f053		       85 f7		      sta	stack2
    127  f055
    128  f055		       a5 85		      lda	player0y
    129  f057		       a2 00		      ldx	#0
    130  f059		       85 02		      sta	WSYNC
    131  f05b		       86 1b		      stx	GRP0
    132  f05d		       86 1c		      stx	GRP1
    133  f05f		       86 0e		      stx	PF1L
    134  f061		       86 0f		      stx	PF2
    135  f063		       86 2c		      stx	CXCLR
    136  f065				  -	      ifconst	readpaddle
    137  f065				  -	      stx	paddle
    138  f065					      else
      0  f065					      sleep	3
      1  f065				   .CYCLES    SET	3
      2  f065
      3  f065				  -	      IF	.CYCLES < 2
      4  f065				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f065				  -	      ERR
      6  f065					      ENDIF
      7  f065
      8  f065					      IF	.CYCLES & 1
      9  f065					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f065		       04 00		      nop	0
     11  f067				  -	      ELSE
     12  f067				  -	      bit	VSYNC
     13  f067					      ENDIF
     14  f067				   .CYCLES    SET	.CYCLES - 3
     15  f067					      ENDIF
     16  f067
     17  f067				  -	      REPEAT	.CYCLES / 2
     18  f067				  -	      nop
     19  f067					      REPEND
    140  f067					      endif
    141  f067
    142  f067		       95 9d		      sta	temp2,x
    143  f069
    144  f069							;store these so they can be retrieved later
    145  f069					      ifnconst	pfres
    146  f069		       a2 54		      ldx	#128-44+(4-pfwidth)*12
    147  f06b				  -	      else
    148  f06b				  -	      ldx	#132-pfres*pfwidth
    149  f06b					      endif
    150  f06b
    151  f06b		       c6 85		      dec	player0y
    152  f06d
    153  f06d		       a5 91		      lda	missile0y
    154  f06f		       85 a0		      sta	temp5
    155  f071		       a5 88		      lda	missile1y
    156  f073		       85 a1		      sta	temp6
    157  f075
    158  f075		       a5 ef		      lda	playfieldpos
    159  f077		       85 9c		      sta	temp1
    160  f079
    161  f079				  -	      ifconst	pfrowheight
    162  f079				  -	      lda	#pfrowheight+2
    163  f079					      else
    164  f079					      ifnconst	pfres
    165  f079		       a9 0a		      lda	#10
    166  f07b				  -	      else
    167  f07b				  -	      lda	#(96/pfres)+2	; try to come close to the real size
    168  f07b					      endif
    169  f07b					      endif
    170  f07b		       18		      clc
    171  f07c		       e5 ef		      sbc	playfieldpos
    172  f07e		       85 ef		      sta	playfieldpos
    173  f080		       4c a8 f0 	      jmp	.startkernel
    174  f083
    175  f083				   .skipDrawP0
    176  f083		       a9 00		      lda	#0
    177  f085		       a8		      tay
    178  f086		       4c d6 f0 	      jmp	.continueP0
    179  f089
    180  f089				   .skipDrawP1
    181  f089		       a9 00		      lda	#0
    182  f08b		       a8		      tay
    183  f08c		       4c b2 f0 	      jmp	.continueP1
    184  f08f
    185  f08f				   .kerloop		; enter at cycle 59??
    186  f08f
    187  f08f				   continuekernel
      0  f08f					      sleep	2
      1  f08f				   .CYCLES    SET	2
      2  f08f
      3  f08f				  -	      IF	.CYCLES < 2
      4  f08f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f08f				  -	      ERR
      6  f08f					      ENDIF
      7  f08f
      8  f08f				  -	      IF	.CYCLES & 1
      9  f08f				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f08f				  -	      nop	0
     11  f08f				  -	      ELSE
     12  f08f				  -	      bit	VSYNC
     13  f08f				  -	      ENDIF
     14  f08f				  -.CYCLES    SET	.CYCLES - 3
     15  f08f					      ENDIF
     16  f08f
     17  f08f					      REPEAT	.CYCLES / 2
     18  f08f		       ea		      nop
     19  f090					      REPEND
    189  f090				   continuekernel2
    190  f090		       a5 92		      lda	ballheight
    191  f092
    192  f092				  -	      ifconst	pfres
    193  f092				  -	      ldy	playfield+pfres*pfwidth-132,x
    194  f092				  -	      sty	PF1L	;3
    195  f092				  -	      ldy	playfield+pfres*pfwidth-131-pfadjust,x
    196  f092				  -	      sty	PF2L	;3
    197  f092				  -	      ldy	playfield+pfres*pfwidth-129,x
    198  f092				  -	      sty	PF1R	; 3 too early?
    199  f092				  -	      ldy	playfield+pfres*pfwidth-130-pfadjust,x
    200  f092				  -	      sty	PF2R	;3
    201  f092					      else
    202  f092		       b4 50		      ldy	playfield-48+pfwidth*12+44-128,x
    203  f094		       84 0e		      sty	PF1L	;3
    204  f096		       b4 51		      ldy	playfield-48+pfwidth*12+45-128-pfadjust,x	;4
    205  f098		       84 0f		      sty	PF2L	;3
    206  f09a		       b4 53		      ldy	playfield-48+pfwidth*12+47-128,x	;4
    207  f09c		       84 0e		      sty	PF1R	; 3 too early?
    208  f09e		       b4 52		      ldy	playfield-48+pfwidth*12+46-128-pfadjust,x	;4
    209  f0a0		       84 0f		      sty	PF2R	;3
    210  f0a2					      endif
    211  f0a2
    212  f0a2							; should be playfield+$38 for width=2
    213  f0a2
    214  f0a2		       c7 89		      dcp	bally
    215  f0a4		       2a		      rol
    216  f0a5		       2a		      rol
    217  f0a6							; rol
    218  f0a6							; rol
    219  f0a6				   goback
    220  f0a6		       85 1f		      sta	ENABL
    221  f0a8				   .startkernel
    222  f0a8		       a5 8f		      lda	player1height	;3
    223  f0aa		       c7 86		      dcp	player1y	;5
    224  f0ac		       90 db		      bcc	.skipDrawP1	;2
    225  f0ae		       a4 86		      ldy	player1y	;3
    226  f0b0		       b1 8c		      lda	(player1pointer),y	;5; player0pointer must be selected carefully by the compiler
    227  f0b2							; so it doesn't cross a page boundary!
    228  f0b2
    229  f0b2				   .continueP1
    230  f0b2		       85 1c		      sta	GRP1	;3
    231  f0b4
    232  f0b4					      ifnconst	player1colors
    233  f0b4		       a5 87		      lda	missile1height	;3
    234  f0b6		       c7 88		      dcp	missile1y	;5
    235  f0b8		       2a		      rol		;2
    236  f0b9		       2a		      rol		;2
    237  f0ba		       85 1e		      sta	ENAM1	;3
    238  f0bc				  -	      else
    239  f0bc				  -	      lda	(player1color),y
    240  f0bc				  -	      sta	COLUP1
    241  f0bc				  -	      ifnconst	playercolors
    242  f0bc				  -	      sleep	7
    243  f0bc				  -	      else
    244  f0bc				  -	      lda.w	player0colorstore
    245  f0bc				  -	      sta	COLUP0
    246  f0bc				  -	      endif
    247  f0bc					      endif
    248  f0bc
    249  f0bc				  -	      ifconst	pfres
    250  f0bc				  -	      lda	playfield+pfres*pfwidth-132,x
    251  f0bc				  -	      sta	PF1L	;3
    252  f0bc				  -	      lda	playfield+pfres*pfwidth-131-pfadjust,x
    253  f0bc				  -	      sta	PF2L	;3
    254  f0bc				  -	      lda	playfield+pfres*pfwidth-129,x
    255  f0bc				  -	      sta	PF1R	; 3 too early?
    256  f0bc				  -	      lda	playfield+pfres*pfwidth-130-pfadjust,x
    257  f0bc				  -	      sta	PF2R	;3
    258  f0bc					      else
    259  f0bc		       b5 50		      lda	playfield-48+pfwidth*12+44-128,x	;4
    260  f0be		       85 0e		      sta	PF1L	;3
    261  f0c0		       b5 51		      lda	playfield-48+pfwidth*12+45-128-pfadjust,x	;4
    262  f0c2		       85 0f		      sta	PF2L	;3
    263  f0c4		       b5 53		      lda	playfield-48+pfwidth*12+47-128,x	;4
    264  f0c6		       85 0e		      sta	PF1R	; 3 too early?
    265  f0c8		       b5 52		      lda	playfield-48+pfwidth*12+46-128-pfadjust,x	;4
    266  f0ca		       85 0f		      sta	PF2R	;3
    267  f0cc					      endif
    268  f0cc							; sleep 3
    269  f0cc
    270  f0cc		       a5 8e		      lda	player0height
    271  f0ce		       c7 85		      dcp	player0y
    272  f0d0		       90 b1		      bcc	.skipDrawP0
    273  f0d2		       a4 85		      ldy	player0y
    274  f0d4		       b1 8a		      lda	(player0pointer),y
    275  f0d6				   .continueP0
    276  f0d6		       85 1b		      sta	GRP0
    277  f0d8
    278  f0d8				  -	      ifnconst	no_blank_lines
    279  f0d8				  -	      ifnconst	playercolors
    280  f0d8				  -	      lda	missile0height	;3
    281  f0d8				  -	      dcp	missile0y	;5
    282  f0d8				  -	      sbc	stack1
    283  f0d8				  -	      sta	ENAM0	;3
    284  f0d8				  -	      else
    285  f0d8				  -	      lda	(player0color),y
    286  f0d8				  -	      sta	player0colorstore
    287  f0d8				  -	      sleep	6
    288  f0d8				  -	      endif
    289  f0d8				  -	      dec	temp1
    290  f0d8				  -	      bne	continuekernel
    291  f0d8					      else
    292  f0d8		       c6 9c		      dec	temp1
    293  f0da		       f0 09		      beq	altkernel2
    294  f0dc				  -	      ifconst	readpaddle
    295  f0dc				  -	      ldy	currentpaddle
    296  f0dc				  -	      lda	INPT0,y
    297  f0dc				  -	      bpl	noreadpaddle
    298  f0dc				  -	      inc	paddle
    299  f0dc				  -	      jmp	continuekernel2
    300  f0dc				  -noreadpaddle
    301  f0dc				  -	      sleep	2
    302  f0dc				  -	      jmp	continuekernel
    303  f0dc					      else
    304  f0dc					      ifnconst	playercolors
    305  f0dc				  -	      ifconst	PFcolors
    306  f0dc				  -	      txa
    307  f0dc				  -	      tay
    308  f0dc				  -	      lda	(pfcolortable),y
    309  f0dc				  -	      ifnconst	backgroundchange
    310  f0dc				  -	      sta	COLUPF
    311  f0dc				  -	      else
    312  f0dc				  -	      sta	COLUBK
    313  f0dc				  -	      endif
    314  f0dc				  -	      jmp	continuekernel
    315  f0dc					      else
    316  f0dc				  -	      ifconst	kernelmacrodef
    317  f0dc				  -	      kernelmacro
    318  f0dc					      else
      0  f0dc					      sleep	12
      1  f0dc				   .CYCLES    SET	12
      2  f0dc
      3  f0dc				  -	      IF	.CYCLES < 2
      4  f0dc				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0dc				  -	      ERR
      6  f0dc					      ENDIF
      7  f0dc
      8  f0dc				  -	      IF	.CYCLES & 1
      9  f0dc				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0dc				  -	      nop	0
     11  f0dc				  -	      ELSE
     12  f0dc				  -	      bit	VSYNC
     13  f0dc				  -	      ENDIF
     14  f0dc				  -.CYCLES    SET	.CYCLES - 3
     15  f0dc					      ENDIF
     16  f0dc
     17  f0dc					      REPEAT	.CYCLES / 2
     18  f0dc		       ea		      nop
     17  f0dc					      REPEND
     18  f0dd		       ea		      nop
     17  f0dd					      REPEND
     18  f0de		       ea		      nop
     17  f0de					      REPEND
     18  f0df		       ea		      nop
     17  f0df					      REPEND
     18  f0e0		       ea		      nop
     17  f0e0					      REPEND
     18  f0e1		       ea		      nop
     19  f0e2					      REPEND
    320  f0e2					      endif
    321  f0e2					      endif
    322  f0e2				  -	      else
    323  f0e2				  -	      lda	(player0color),y
    324  f0e2				  -	      sta	player0colorstore
    325  f0e2				  -	      sleep	4
    326  f0e2					      endif
    327  f0e2		       4c 8f f0 	      jmp	continuekernel
    328  f0e5					      endif
    329  f0e5				   altkernel2
    330  f0e5		       8a		      txa
    331  f0e6					      ifnconst	vertical_reflect
    332  f0e6		       cb fc		      sbx	#256-pfwidth
    333  f0e8				  -	      else
    334  f0e8				  -	      sbx	#256-pfwidth/2
    335  f0e8					      endif
    336  f0e8		       30 1b		      bmi	lastkernelline
    337  f0ea				  -	      ifconst	pfrowheight
    338  f0ea				  -	      lda	#pfrowheight
    339  f0ea					      else
    340  f0ea					      ifnconst	pfres
    341  f0ea		       a9 08		      lda	#8
    342  f0ec				  -	      else
    343  f0ec				  -	      lda	#(96/pfres)	; try to come close to the real size
    344  f0ec					      endif
    345  f0ec					      endif
    346  f0ec		       85 9c		      sta	temp1
    347  f0ee		       4c 8f f0 	      jmp	continuekernel
    348  f0f1					      endif
    349  f0f1
    350  f0f1				   altkernel
    351  f0f1
    352  f0f1				  -	      ifconst	PFmaskvalue
    353  f0f1				  -	      lda	#PFmaskvalue
    354  f0f1					      else
    355  f0f1		       a9 00		      lda	#0
    356  f0f3					      endif
    357  f0f3		       85 0e		      sta	PF1L
    358  f0f5		       85 0f		      sta	PF2
    359  f0f7
    360  f0f7
    361  f0f7							;sleep 3
    362  f0f7
    363  f0f7							;28 cycles to fix things
    364  f0f7							;minus 11=17
    365  f0f7
    366  f0f7							; lax temp4
    367  f0f7							; clc
    368  f0f7		       8a		      txa
    369  f0f8					      ifnconst	vertical_reflect
    370  f0f8		       cb fc		      sbx	#256-pfwidth
    371  f0fa				  -	      else
    372  f0fa				  -	      sbx	#256-pfwidth/2
    373  f0fa					      endif
    374  f0fa
    375  f0fa		       30 09		      bmi	lastkernelline
    376  f0fc
    377  f0fc				  -	      ifconst	PFcolorandheight
    378  f0fc				  -	      ifconst	pfres
    379  f0fc				  -	      ldy	playfieldcolorandheight-131+pfres*pfwidth,x
    380  f0fc				  -	      else
    381  f0fc				  -	      ldy	playfieldcolorandheight-87,x
    382  f0fc				  -	      endif
    383  f0fc				  -	      ifnconst	backgroundchange
    384  f0fc				  -	      sty	COLUPF
    385  f0fc				  -	      else
    386  f0fc				  -	      sty	COLUBK
    387  f0fc				  -	      endif
    388  f0fc				  -	      ifconst	pfres
    389  f0fc				  -	      lda	playfieldcolorandheight-132+pfres*pfwidth,x
    390  f0fc				  -	      else
    391  f0fc				  -	      lda	playfieldcolorandheight-88,x
    392  f0fc				  -	      endif
    393  f0fc				  -	      sta.w	temp1
    394  f0fc					      endif
    395  f0fc				  -	      ifconst	PFheights
    396  f0fc				  -	      lsr
    397  f0fc				  -	      lsr
    398  f0fc				  -	      tay
    399  f0fc				  -	      lda	(pfheighttable),y
    400  f0fc				  -	      sta.w	temp1
    401  f0fc					      endif
    402  f0fc				  -	      ifconst	PFcolors
    403  f0fc				  -	      tay
    404  f0fc				  -	      lda	(pfcolortable),y
    405  f0fc				  -	      ifnconst	backgroundchange
    406  f0fc				  -	      sta	COLUPF
    407  f0fc				  -	      else
    408  f0fc				  -	      sta	COLUBK
    409  f0fc				  -	      endif
    410  f0fc				  -	      ifconst	pfrowheight
    411  f0fc				  -	      lda	#pfrowheight
    412  f0fc				  -	      else
    413  f0fc				  -	      ifnconst	pfres
    414  f0fc				  -	      lda	#8
    415  f0fc				  -	      else
    416  f0fc				  -	      lda	#(96/pfres)	; try to come close to the real size
    417  f0fc				  -	      endif
    418  f0fc				  -	      endif
    419  f0fc				  -	      sta	temp1
    420  f0fc					      endif
    421  f0fc					      ifnconst	PFcolorandheight
    422  f0fc					      ifnconst	PFcolors
    423  f0fc					      ifnconst	PFheights
    424  f0fc				  -	      ifnconst	no_blank_lines
    425  f0fc				  -			; read paddle 0
    426  f0fc				  -			; lo-res paddle read
    427  f0fc				  -			; bit INPT0
    428  f0fc				  -			; bmi paddleskipread
    429  f0fc				  -			; inc paddle0
    430  f0fc				  -			;donepaddleskip
    431  f0fc				  -	      sleep	10
    432  f0fc				  -	      ifconst	pfrowheight
    433  f0fc				  -	      lda	#pfrowheight
    434  f0fc				  -	      else
    435  f0fc				  -	      ifnconst	pfres
    436  f0fc				  -	      lda	#8
    437  f0fc				  -	      else
    438  f0fc				  -	      lda	#(96/pfres)	; try to come close to the real size
    439  f0fc				  -	      endif
    440  f0fc				  -	      endif
    441  f0fc				  -	      sta	temp1
    442  f0fc					      endif
    443  f0fc					      endif
    444  f0fc					      endif
    445  f0fc					      endif
    446  f0fc
    447  f0fc
    448  f0fc		       a5 92		      lda	ballheight
    449  f0fe		       c7 89		      dcp	bally
    450  f100		       e5 9f		      sbc	temp4
    451  f102
    452  f102
    453  f102		       4c a6 f0 	      jmp	goback
    454  f105
    455  f105
    456  f105				  -	      ifnconst	no_blank_lines
    457  f105				  -lastkernelline
    458  f105				  -	      ifnconst	PFcolors
    459  f105				  -	      sleep	10
    460  f105				  -	      else
    461  f105				  -	      ldy	#124
    462  f105				  -	      lda	(pfcolortable),y
    463  f105				  -	      sta	COLUPF
    464  f105				  -	      endif
    465  f105				  -
    466  f105				  -	      ifconst	PFheights
    467  f105				  -	      ldx	#1
    468  f105				  -			;sleep 4
    469  f105				  -	      sleep	3	; this was over 1 cycle
    470  f105				  -	      else
    471  f105				  -	      ldx	playfieldpos
    472  f105				  -			;sleep 3
    473  f105				  -	      sleep	2	; this was over 1 cycle
    474  f105				  -	      endif
    475  f105				  -
    476  f105				  -	      jmp	enterlastkernel
    477  f105				  -
    478  f105					      else
    479  f105				   lastkernelline
    480  f105
    481  f105				  -	      ifconst	PFheights
    482  f105				  -	      ldx	#1
    483  f105				  -			;sleep 5
    484  f105				  -	      sleep	4	; this was over 1 cycle
    485  f105					      else
    486  f105		       a6 ef		      ldx	playfieldpos
    487  f107							;sleep 4
      0  f107					      sleep	3	; this was over 1 cycle
      1  f107				   .CYCLES    SET	3
      2  f107
      3  f107				  -	      IF	.CYCLES < 2
      4  f107				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f107				  -	      ERR
      6  f107					      ENDIF
      7  f107
      8  f107					      IF	.CYCLES & 1
      9  f107					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f107		       04 00		      nop	0
     11  f109				  -	      ELSE
     12  f109				  -	      bit	VSYNC
     13  f109					      ENDIF
     14  f109				   .CYCLES    SET	.CYCLES - 3
     15  f109					      ENDIF
     16  f109
     17  f109				  -	      REPEAT	.CYCLES / 2
     18  f109				  -	      nop
     19  f109					      REPEND
    489  f109					      endif
    490  f109
    491  f109		       e0 00		      cpx	#0
    492  f10b		       d0 0a		      bne	.enterfromNBL
    493  f10d		       4c 78 f1 	      jmp	no_blank_lines_bailout
    494  f110					      endif
    495  f110
    496  f110				  -	      if	((<*)>$d5)
    497  f110				  -	      align	256
    498  f110					      endif
    499  f110							; this is a kludge to prevent page wrapping - fix!!!
    500  f110
    501  f110				   .skipDrawlastP1
    502  f110		       a9 00		      lda	#0
    503  f112		       a8		      tay		; added so we don't cross a page
    504  f113		       4c 3d f1 	      jmp	.continuelastP1
    505  f116
    506  f116				   .endkerloop		; enter at cycle 59??
    507  f116
    508  f116		       ea		      nop
    509  f117
    510  f117				   .enterfromNBL
    511  f117				  -	      ifconst	pfres
    512  f117				  -	      ldy.w	playfield+pfres*pfwidth-4
    513  f117				  -	      sty	PF1L	;3
    514  f117				  -	      ldy.w	playfield+pfres*pfwidth-3-pfadjust
    515  f117				  -	      sty	PF2L	;3
    516  f117				  -	      ldy.w	playfield+pfres*pfwidth-1
    517  f117				  -	      sty	PF1R	; possibly too early?
    518  f117				  -	      ldy.w	playfield+pfres*pfwidth-2-pfadjust
    519  f117				  -	      sty	PF2R	;3
    520  f117					      else
    521  f117		       ac d0 00 	      ldy.w	playfield-48+pfwidth*12+44
    522  f11a		       84 0e		      sty	PF1L	;3
    523  f11c		       ac d1 00 	      ldy.w	playfield-48+pfwidth*12+45-pfadjust
    524  f11f		       84 0f		      sty	PF2L	;3
    525  f121		       ac d3 00 	      ldy.w	playfield-48+pfwidth*12+47
    526  f124		       84 0e		      sty	PF1R	; possibly too early?
    527  f126		       ac d2 00 	      ldy.w	playfield-48+pfwidth*12+46-pfadjust
    528  f129		       84 0f		      sty	PF2R	;3
    529  f12b					      endif
    530  f12b
    531  f12b				   enterlastkernel
    532  f12b		       a5 92		      lda	ballheight
    533  f12d
    534  f12d							; tya
    535  f12d		       c7 89		      dcp	bally
    536  f12f							; sleep 4
    537  f12f
    538  f12f							; sbc stack3
    539  f12f		       2a		      rol
    540  f130		       2a		      rol
    541  f131		       85 1f		      sta	ENABL
    542  f133
    543  f133		       a5 8f		      lda	player1height	;3
    544  f135		       c7 86		      dcp	player1y	;5
    545  f137		       90 d7		      bcc	.skipDrawlastP1
    546  f139		       a4 86		      ldy	player1y	;3
    547  f13b		       b1 8c		      lda	(player1pointer),y	;5; player0pointer must be selected carefully by the compiler
    548  f13d							; so it doesn't cross a page boundary!
    549  f13d
    550  f13d				   .continuelastP1
    551  f13d		       85 1c		      sta	GRP1	;3
    552  f13f
    553  f13f					      ifnconst	player1colors
    554  f13f		       a5 87		      lda	missile1height	;3
    555  f141		       c7 88		      dcp	missile1y	;5
    556  f143				  -	      else
    557  f143				  -	      lda	(player1color),y
    558  f143				  -	      sta	COLUP1
    559  f143					      endif
    560  f143
    561  f143		       ca		      dex
    562  f144							;dec temp4 ; might try putting this above PF writes
    563  f144		       f0 34		      beq	endkernel
    564  f146
    565  f146
    566  f146				  -	      ifconst	pfres
    567  f146				  -	      ldy.w	playfield+pfres*pfwidth-4
    568  f146				  -	      sty	PF1L	;3
    569  f146				  -	      ldy.w	playfield+pfres*pfwidth-3-pfadjust
    570  f146				  -	      sty	PF2L	;3
    571  f146				  -	      ldy.w	playfield+pfres*pfwidth-1
    572  f146				  -	      sty	PF1R	; possibly too early?
    573  f146				  -	      ldy.w	playfield+pfres*pfwidth-2-pfadjust
    574  f146				  -	      sty	PF2R	;3
    575  f146					      else
    576  f146		       ac d0 00 	      ldy.w	playfield-48+pfwidth*12+44
    577  f149		       84 0e		      sty	PF1L	;3
    578  f14b		       ac d1 00 	      ldy.w	playfield-48+pfwidth*12+45-pfadjust
    579  f14e		       84 0f		      sty	PF2L	;3
    580  f150		       ac d3 00 	      ldy.w	playfield-48+pfwidth*12+47
    581  f153		       84 0e		      sty	PF1R	; possibly too early?
    582  f155		       ac d2 00 	      ldy.w	playfield-48+pfwidth*12+46-pfadjust
    583  f158		       84 0f		      sty	PF2R	;3
    584  f15a					      endif
    585  f15a
    586  f15a					      ifnconst	player1colors
    587  f15a		       2a		      rol		;2
    588  f15b		       2a		      rol		;2
    589  f15c		       85 1e		      sta	ENAM1	;3
    590  f15e				  -	      else
    591  f15e				  -	      ifnconst	playercolors
    592  f15e				  -	      sleep	7
    593  f15e				  -	      else
    594  f15e				  -	      lda.w	player0colorstore
    595  f15e				  -	      sta	COLUP0
    596  f15e				  -	      endif
    597  f15e					      endif
    598  f15e
    599  f15e		       ad 8e 00 	      lda.w	player0height
    600  f161		       c7 85		      dcp	player0y
    601  f163		       90 0d		      bcc	.skipDrawlastP0
    602  f165		       a4 85		      ldy	player0y
    603  f167		       b1 8a		      lda	(player0pointer),y
    604  f169				   .continuelastP0
    605  f169		       85 1b		      sta	GRP0
    606  f16b
    607  f16b
    608  f16b
    609  f16b				  -	      ifnconst	no_blank_lines
    610  f16b				  -	      lda	missile0height	;3
    611  f16b				  -	      dcp	missile0y	;5
    612  f16b				  -	      sbc	stack1
    613  f16b				  -	      sta	ENAM0	;3
    614  f16b				  -	      jmp	.endkerloop
    615  f16b					      else
    616  f16b				  -	      ifconst	readpaddle
    617  f16b				  -	      ldy	currentpaddle
    618  f16b				  -	      lda	INPT0,y
    619  f16b				  -	      bpl	noreadpaddle2
    620  f16b				  -	      inc	paddle
    621  f16b				  -	      jmp	.endkerloop
    622  f16b				  -noreadpaddle2
    623  f16b				  -	      sleep	4
    624  f16b				  -	      jmp	.endkerloop
    625  f16b					      else		; no_blank_lines and no paddle reading
    626  f16b		       68		      pla
    627  f16c		       48		      pha		; 14 cycles in 4 bytes
    628  f16d		       68		      pla
    629  f16e		       48		      pha
    630  f16f							; sleep 14
    631  f16f		       4c 16 f1 	      jmp	.endkerloop
    632  f172					      endif
    633  f172					      endif
    634  f172
    635  f172
    636  f172							; ifconst donepaddleskip
    637  f172							;paddleskipread
    638  f172							; this is kind of lame, since it requires 4 cycles from a page boundary crossing
    639  f172							; plus we get a lo-res paddle read
    640  f172							; bmi donepaddleskip
    641  f172							; endif
    642  f172
    643  f172				   .skipDrawlastP0
    644  f172		       a9 00		      lda	#0
    645  f174		       a8		      tay
    646  f175		       4c 69 f1 	      jmp	.continuelastP0
    647  f178
    648  f178					      ifconst	no_blank_lines
    649  f178				   no_blank_lines_bailout
    650  f178		       a2 00		      ldx	#0
    651  f17a					      endif
    652  f17a
    653  f17a				   endkernel
    654  f17a							; 6 digit score routine
    655  f17a		       86 0e		      stx	PF1
    656  f17c		       86 0f		      stx	PF2
    657  f17e		       86 0d		      stx	PF0
    658  f180		       18		      clc
    659  f181
    660  f181				  -	      ifconst	pfrowheight
    661  f181				  -	      lda	#pfrowheight+2
    662  f181					      else
    663  f181					      ifnconst	pfres
    664  f181		       a9 0a		      lda	#10
    665  f183				  -	      else
    666  f183				  -	      lda	#(96/pfres)+2	; try to come close to the real size
    667  f183					      endif
    668  f183					      endif
    669  f183
    670  f183		       e5 ef		      sbc	playfieldpos
    671  f185		       85 ef		      sta	playfieldpos
    672  f187		       8a		      txa
    673  f188
    674  f188				  -	      ifconst	shakescreen
    675  f188				  -	      bit	shakescreen
    676  f188				  -	      bmi	noshakescreen2
    677  f188				  -	      ldx	#$3D
    678  f188				  -noshakescreen2
    679  f188					      endif
    680  f188
    681  f188		       95 02		      sta	WSYNC,x
    682  f18a
    683  f18a							; STA WSYNC ;first one, need one more
    684  f18a		       85 0b		      sta	REFP0
    685  f18c		       85 0c		      sta	REFP1
    686  f18e		       85 1b		      STA	GRP0
    687  f190		       85 1c		      STA	GRP1
    688  f192							; STA PF1
    689  f192							; STA PF2
    690  f192		       85 2b		      sta	HMCLR
    691  f194		       85 1d		      sta	ENAM0
    692  f196		       85 1e		      sta	ENAM1
    693  f198		       85 1f		      sta	ENABL
    694  f19a
    695  f19a		       a5 9d		      lda	temp2	;restore variables that were obliterated by kernel
    696  f19c		       85 85		      sta	player0y
    697  f19e		       a5 9e		      lda	temp3
    698  f1a0		       85 86		      sta	player1y
    699  f1a2					      ifnconst	player1colors
    700  f1a2		       a5 a1		      lda	temp6
    701  f1a4		       85 88		      sta	missile1y
    702  f1a6					      endif
    703  f1a6					      ifnconst	playercolors
    704  f1a6					      ifnconst	readpaddle
    705  f1a6		       a5 a0		      lda	temp5
    706  f1a8		       85 91		      sta	missile0y
    707  f1aa					      endif
    708  f1aa					      endif
    709  f1aa		       a5 f7		      lda	stack2
    710  f1ac		       85 89		      sta	bally
    711  f1ae
    712  f1ae							; strangely, this isn't required any more. might have
    713  f1ae							; resulted from the no_blank_lines score bounce fix
    714  f1ae							;ifconst no_blank_lines
    715  f1ae							;sta WSYNC
    716  f1ae							;endif
    717  f1ae
    718  f1ae		       ad 84 02 	      lda	INTIM
    719  f1b1		       18		      clc
    720  f1b2					      ifnconst	vblank_time
    721  f1b2		       69 8e		      adc	#43+12+87
    722  f1b4				  -	      else
    723  f1b4				  -	      adc	#vblank_time+12+87
    724  f1b4				  -
    725  f1b4					      endif
    726  f1b4							; sta WSYNC
    727  f1b4		       8d 96 02 	      sta	TIM64T
    728  f1b7
    729  f1b7					      ifconst	minikernel
    730  f1b7		       20 d3 fc 	      jsr	minikernel
    731  f1ba					      endif
    732  f1ba
    733  f1ba							; now reassign temp vars for score pointers
    734  f1ba
    735  f1ba							; score pointers contain:
    736  f1ba							; score1-5: lo1,lo2,lo3,lo4,lo5,lo6
    737  f1ba							; swap lo2->temp1
    738  f1ba							; swap lo4->temp3
    739  f1ba							; swap lo6->temp5
    740  f1ba					      ifnconst	noscore
    741  f1ba		       a5 97		      lda	scorepointers+1
    742  f1bc							; ldy temp1
    743  f1bc		       85 9c		      sta	temp1
    744  f1be							; sty scorepointers+1
    745  f1be
    746  f1be		       a5 99		      lda	scorepointers+3
    747  f1c0							; ldy temp3
    748  f1c0		       85 9e		      sta	temp3
    749  f1c2							; sty scorepointers+3
    750  f1c2
    751  f1c2
    752  f1c2		       85 2b		      sta	HMCLR
    753  f1c4		       ba		      tsx
    754  f1c5		       86 f6		      stx	stack1
    755  f1c7		       a2 e0		      ldx	#$E0
    756  f1c9		       86 20		      stx	HMP0
    757  f1cb
    758  f1cb		       a5 a3		      LDA	scorecolor
    759  f1cd		       85 06		      STA	COLUP0
    760  f1cf		       85 07		      STA	COLUP1
    761  f1d1				  -	      ifconst	scorefade
    762  f1d1				  -	      STA	stack2
    763  f1d1					      endif
    764  f1d1					      ifconst	pfscore
    765  f1d1		       a5 f4		      lda	pfscorecolor
    766  f1d3		       85 08		      sta	COLUPF
    767  f1d5					      endif
    768  f1d5		       85 02		      sta	WSYNC
    769  f1d7		       a2 00		      ldx	#0
    770  f1d9		       86 1b		      STx	GRP0
    771  f1db		       86 1c		      STx	GRP1	; seems to be needed because of vdel
    772  f1dd
    773  f1dd		       a5 9b		      lda	scorepointers+5
    774  f1df							; ldy temp5
    775  f1df		       95 a0		      sta	temp5,x
    776  f1e1							; sty scorepointers+5
    777  f1e1		       a9 ff		      lda	#>scoretable
    778  f1e3		       85 97		      sta	scorepointers+1
    779  f1e5		       85 99		      sta	scorepointers+3
    780  f1e7		       85 9b		      sta	scorepointers+5
    781  f1e9		       85 9d		      sta	temp2
    782  f1eb		       85 9f		      sta	temp4
    783  f1ed		       85 a1		      sta	temp6
    784  f1ef		       a0 07		      LDY	#7
    785  f1f1		       84 25		      STY	VDELP0
    786  f1f3		       85 10		      STA	RESP0
    787  f1f5		       85 11		      STA	RESP1
    788  f1f7
    789  f1f7
    790  f1f7		       a9 03		      LDA	#$03
    791  f1f9		       85 04		      STA	NUSIZ0
    792  f1fb		       85 05		      STA	NUSIZ1
    793  f1fd		       85 26		      STA	VDELP1
    794  f1ff		       a9 f0		      LDA	#$F0
    795  f201		       85 21		      STA	HMP1
    796  f203		       b1 96		      lda	(scorepointers),y
    797  f205		       85 1b		      sta	GRP0
    798  f207		       85 2a		      STA	HMOVE	; cycle 73 ?
    799  f209		       4c 15 f2 	      jmp	beginscore
    800  f20c
    801  f20c
    802  f20c				  -	      if	((<*)>$d4)
    803  f20c				  -	      align	256	; kludge that potentially wastes space! should be fixed!
    804  f20c					      endif
    805  f20c
    806  f20c				   loop2
    807  f20c		       b1 96		      lda	(scorepointers),y	;+5 68 204
    808  f20e		       85 1b		      sta	GRP0	;+3 71 213 D1 -- -- --
    809  f210					      ifconst	pfscore
    810  f210		       ad f2 00 	      lda.w	pfscore1
    811  f213		       85 0e		      sta	PF1
    812  f215				  -	      else
    813  f215				  -	      ifconst	scorefade
    814  f215				  -	      sleep	2
    815  f215				  -	      dec	stack2	; decrement the temporary scorecolor
    816  f215				  -	      else
    817  f215				  -	      sleep	7
    818  f215				  -	      endif
    819  f215					      endif
    820  f215							; cycle 0
    821  f215				   beginscore
    822  f215		       b1 9e		      lda	(scorepointers+$8),y	;+5 5 15
    823  f217		       85 1c		      sta	GRP1	;+3 8 24 D1 D1 D2 --
    824  f219		       b1 9c		      lda	(scorepointers+$6),y	;+5 13 39
    825  f21b		       85 1b		      sta	GRP0	;+3 16 48 D3 D1 D2 D2
    826  f21d		       b3 98		      lax	(scorepointers+$2),y	;+5 29 87
    827  f21f		       9a		      txs
    828  f220		       b3 9a		      lax	(scorepointers+$4),y	;+5 36 108
    829  f222				  -	      ifconst	scorefade
    830  f222				  -	      lda	stack2
    831  f222					      else
      0  f222					      sleep	3
      1  f222				   .CYCLES    SET	3
      2  f222
      3  f222				  -	      IF	.CYCLES < 2
      4  f222				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f222				  -	      ERR
      6  f222					      ENDIF
      7  f222
      8  f222					      IF	.CYCLES & 1
      9  f222					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f222		       04 00		      nop	0
     11  f224				  -	      ELSE
     12  f224				  -	      bit	VSYNC
     13  f224					      ENDIF
     14  f224				   .CYCLES    SET	.CYCLES - 3
     15  f224					      ENDIF
     16  f224
     17  f224				  -	      REPEAT	.CYCLES / 2
     18  f224				  -	      nop
     19  f224					      REPEND
    833  f224					      endif
    834  f224
    835  f224					      ifconst	pfscore
    836  f224		       a5 f3		      lda	pfscore2
    837  f226		       85 0e		      sta	PF1
    838  f228				  -	      else
    839  f228				  -	      ifconst	scorefade
    840  f228				  -	      sta	COLUP0
    841  f228				  -	      sta	COLUP1
    842  f228				  -	      else
    843  f228				  -	      sleep	6
    844  f228				  -	      endif
    845  f228					      endif
    846  f228
    847  f228		       b1 a0		      lda	(scorepointers+$A),y	;+5 21 63
    848  f22a		       86 1c		      stx	GRP1	;+3 44 132 D3 D3 D4 D2!
    849  f22c		       ba		      tsx
    850  f22d		       86 1b		      stx	GRP0	;+3 47 141 D5 D3! D4 D4
    851  f22f		       85 1c		      sta	GRP1	;+3 50 150 D5 D5 D6 D4!
    852  f231		       84 1b		      sty	GRP0	;+3 53 159 D4* D5! D6 D6
    853  f233		       88		      dey
    854  f234		       10 d6		      bpl	loop2	;+2 60 180
    855  f236
    856  f236		       a6 f6		      ldx	stack1
    857  f238		       9a		      txs
    858  f239							; lda scorepointers+1
    859  f239		       a4 9c		      ldy	temp1
    860  f23b							; sta temp1
    861  f23b		       84 97		      sty	scorepointers+1
    862  f23d
    863  f23d		       a9 00		      LDA	#0
    864  f23f		       85 0e		      sta	PF1
    865  f241		       85 1b		      STA	GRP0
    866  f243		       85 1c		      STA	GRP1
    867  f245		       85 25		      STA	VDELP0
    868  f247		       85 26		      STA	VDELP1	;do we need these
    869  f249		       85 04		      STA	NUSIZ0
    870  f24b		       85 05		      STA	NUSIZ1
    871  f24d
    872  f24d							; lda scorepointers+3
    873  f24d		       a4 9e		      ldy	temp3
    874  f24f							; sta temp3
    875  f24f		       84 99		      sty	scorepointers+3
    876  f251
    877  f251							; lda scorepointers+5
    878  f251		       a4 a0		      ldy	temp5
    879  f253							; sta temp5
    880  f253		       84 9b		      sty	scorepointers+5
    881  f255					      endif		;noscore
    882  f255		       a9 c2		      LDA	#%11000010
    883  f257		       85 02		      sta	WSYNC
    884  f259		       85 01		      STA	VBLANK
      0  f25b					      RETURN
      1  f25b					      ifnconst	bankswitch
      2  f25b		       60		      rts
      3  f25c				  -	      else
      4  f25c				  -	      jmp	BS_return
      5  f25c					      endif
    886  f25c
    887  f25c				  -	      ifconst	shakescreen
    888  f25c				  -doshakescreen
    889  f25c				  -	      bit	shakescreen
    890  f25c				  -	      bmi	noshakescreen
    891  f25c				  -	      sta	WSYNC
    892  f25c				  -noshakescreen
    893  f25c				  -	      ldx	missile0height
    894  f25c				  -	      inx
    895  f25c				  -	      rts
    896  f25c					      endif
    897  f25c
    898  f25c							; Provided under the CC0 license. See the included LICENSE.txt for details.
    899  f25c
    900  f25c							; playfield drawing routines
    901  f25c							; you get a 32x12 bitmapped display in a single color :)
    902  f25c							; 0-31 and 0-11
    903  f25c
    904  f25c				   pfclear		; clears playfield - or fill with pattern
    905  f25c				  -	      ifconst	pfres
    906  f25c				  -	      ldx	#pfres*pfwidth-1
    907  f25c					      else
    908  f25c		       a2 2f		      ldx	#47-(4-pfwidth)*12	; will this work?
    909  f25e					      endif
    910  f25e				   pfclear_loop
    911  f25e					      ifnconst	superchip
    912  f25e		       95 a4		      sta	playfield,x
    913  f260				  -	      else
    914  f260				  -	      sta	playfield-128,x
    915  f260					      endif
    916  f260		       ca		      dex
    917  f261		       10 fb		      bpl	pfclear_loop
      0  f263					      RETURN
      1  f263					      ifnconst	bankswitch
      2  f263		       60		      rts
      3  f264				  -	      else
      4  f264				  -	      jmp	BS_return
      5  f264					      endif
    919  f264
    920  f264				   setuppointers
    921  f264		       86 9d		      stx	temp2	; store on.off.flip value
    922  f266		       aa		      tax		; put x-value in x 
    923  f267		       4a		      lsr
    924  f268		       4a		      lsr
    925  f269		       4a		      lsr		; divide x pos by 8 
    926  f26a		       85 9c		      sta	temp1
    927  f26c		       98		      tya
    928  f26d		       0a		      asl
    929  f26e					      if	pfwidth=4
    930  f26e		       0a		      asl		; multiply y pos by 4
    931  f26f					      endif		; else multiply by 2
    932  f26f		       18		      clc
    933  f270		       65 9c		      adc	temp1	; add them together to get actual memory location offset
    934  f272		       a8		      tay		; put the value in y
    935  f273		       a5 9d		      lda	temp2	; restore on.off.flip value
    936  f275		       60		      rts
    937  f276
    938  f276				   pfread
    939  f276							;x=xvalue, y=yvalue
    940  f276		       20 64 f2 	      jsr	setuppointers
    941  f279		       bd de f2 	      lda	setbyte,x
    942  f27c		       39 a4 00 	      and	playfield,y
    943  f27f		       5d de f2 	      eor	setbyte,x
    944  f282							; beq readzero
    945  f282							; lda #1
    946  f282							; readzero
      0  f282					      RETURN
      1  f282					      ifnconst	bankswitch
      2  f282		       60		      rts
      3  f283				  -	      else
      4  f283				  -	      jmp	BS_return
      5  f283					      endif
    948  f283
    949  f283				   pfpixel
    950  f283							;x=xvalue, y=yvalue, a=0,1,2
    951  f283		       20 64 f2 	      jsr	setuppointers
    952  f286
    953  f286				  -	      ifconst	bankswitch
    954  f286				  -	      lda	temp2	; load on.off.flip value (0,1, or 2)
    955  f286				  -	      beq	pixelon_r	; if "on" go to on
    956  f286				  -	      lsr
    957  f286				  -	      bcs	pixeloff_r	; value is 1 if true
    958  f286				  -	      lda	playfield,y	; if here, it's "flip"
    959  f286				  -	      eor	setbyte,x
    960  f286				  -	      ifconst	superchip
    961  f286				  -	      sta	playfield-128,y
    962  f286				  -	      else
    963  f286				  -	      sta	playfield,y
    964  f286				  -	      endif
    965  f286				  -	      RETURN
    966  f286				  -pixelon_r
    967  f286				  -	      lda	playfield,y
    968  f286				  -	      ora	setbyte,x
    969  f286				  -	      ifconst	superchip
    970  f286				  -	      sta	playfield-128,y
    971  f286				  -	      else
    972  f286				  -	      sta	playfield,y
    973  f286				  -	      endif
    974  f286				  -	      RETURN
    975  f286				  -pixeloff_r
    976  f286				  -	      lda	setbyte,x
    977  f286				  -	      eor	#$ff
    978  f286				  -	      and	playfield,y
    979  f286				  -	      ifconst	superchip
    980  f286				  -	      sta	playfield-128,y
    981  f286				  -	      else
    982  f286				  -	      sta	playfield,y
    983  f286				  -	      endif
    984  f286				  -	      RETURN
    985  f286				  -
    986  f286					      else
    987  f286		       4c b7 f2 	      jmp	plotpoint
    988  f289					      endif
    989  f289
    990  f289				   pfhline
    991  f289							;x=xvalue, y=yvalue, a=0,1,2, temp3=endx
    992  f289		       20 64 f2 	      jsr	setuppointers
    993  f28c		       4c 96 f2 	      jmp	noinc
    994  f28f				   keepgoing
    995  f28f		       e8		      inx
    996  f290		       8a		      txa
    997  f291		       29 07		      and	#7
    998  f293		       d0 01		      bne	noinc
    999  f295		       c8		      iny
   1000  f296				   noinc
   1001  f296		       20 b7 f2 	      jsr	plotpoint
   1002  f299		       e4 9e		      cpx	temp3
   1003  f29b		       30 f2		      bmi	keepgoing
      0  f29d					      RETURN
      1  f29d					      ifnconst	bankswitch
      2  f29d		       60		      rts
      3  f29e				  -	      else
      4  f29e				  -	      jmp	BS_return
      5  f29e					      endif
   1005  f29e
   1006  f29e				   pfvline
   1007  f29e							;x=xvalue, y=yvalue, a=0,1,2, temp3=endx
   1008  f29e		       20 64 f2 	      jsr	setuppointers
   1009  f2a1		       84 9c		      sty	temp1	; store memory location offset
   1010  f2a3		       e6 9e		      inc	temp3	; increase final x by 1 
   1011  f2a5		       a5 9e		      lda	temp3
   1012  f2a7		       0a		      asl
   1013  f2a8					      if	pfwidth=4
   1014  f2a8		       0a		      asl		; multiply by 4
   1015  f2a9					      endif		; else multiply by 2
   1016  f2a9		       85 9e		      sta	temp3	; store it
   1017  f2ab							; Thanks to Michael Rideout for fixing a bug in this code
   1018  f2ab							; right now, temp1=y=starting memory location, temp3=final
   1019  f2ab							; x should equal original x value
   1020  f2ab				   keepgoingy
   1021  f2ab		       20 b7 f2 	      jsr	plotpoint
   1022  f2ae		       c8		      iny
   1023  f2af		       c8		      iny
   1024  f2b0					      if	pfwidth=4
   1025  f2b0		       c8		      iny
   1026  f2b1		       c8		      iny
   1027  f2b2					      endif
   1028  f2b2		       c4 9e		      cpy	temp3
   1029  f2b4		       30 f5		      bmi	keepgoingy
      0  f2b6					      RETURN
      1  f2b6					      ifnconst	bankswitch
      2  f2b6		       60		      rts
      3  f2b7				  -	      else
      4  f2b7				  -	      jmp	BS_return
      5  f2b7					      endif
   1031  f2b7
   1032  f2b7				   plotpoint
   1033  f2b7		       a5 9d		      lda	temp2	; load on.off.flip value (0,1, or 2)
   1034  f2b9		       f0 0d		      beq	pixelon	; if "on" go to on
   1035  f2bb		       4a		      lsr
   1036  f2bc		       b0 14		      bcs	pixeloff	; value is 1 if true
   1037  f2be		       b9 a4 00 	      lda	playfield,y	; if here, it's "flip"
   1038  f2c1		       5d de f2 	      eor	setbyte,x
   1039  f2c4				  -	      ifconst	superchip
   1040  f2c4				  -	      sta	playfield-128,y
   1041  f2c4					      else
   1042  f2c4		       99 a4 00 	      sta	playfield,y
   1043  f2c7					      endif
   1044  f2c7		       60		      rts
   1045  f2c8				   pixelon
   1046  f2c8		       b9 a4 00 	      lda	playfield,y
   1047  f2cb		       1d de f2 	      ora	setbyte,x
   1048  f2ce				  -	      ifconst	superchip
   1049  f2ce				  -	      sta	playfield-128,y
   1050  f2ce					      else
   1051  f2ce		       99 a4 00 	      sta	playfield,y
   1052  f2d1					      endif
   1053  f2d1		       60		      rts
   1054  f2d2				   pixeloff
   1055  f2d2		       bd de f2 	      lda	setbyte,x
   1056  f2d5		       49 ff		      eor	#$ff
   1057  f2d7		       39 a4 00 	      and	playfield,y
   1058  f2da				  -	      ifconst	superchip
   1059  f2da				  -	      sta	playfield-128,y
   1060  f2da					      else
   1061  f2da		       99 a4 00 	      sta	playfield,y
   1062  f2dd					      endif
   1063  f2dd		       60		      rts
   1064  f2de
   1065  f2de				   setbyte
   1066  f2de					      ifnconst	pfcenter
   1067  f2de		       80		      .byte.b	$80
   1068  f2df		       40		      .byte.b	$40
   1069  f2e0		       20		      .byte.b	$20
   1070  f2e1		       10		      .byte.b	$10
   1071  f2e2		       08		      .byte.b	$08
   1072  f2e3		       04		      .byte.b	$04
   1073  f2e4		       02		      .byte.b	$02
   1074  f2e5		       01		      .byte.b	$01
   1075  f2e6					      endif
   1076  f2e6		       01		      .byte.b	$01
   1077  f2e7		       02		      .byte.b	$02
   1078  f2e8		       04		      .byte.b	$04
   1079  f2e9		       08		      .byte.b	$08
   1080  f2ea		       10		      .byte.b	$10
   1081  f2eb		       20		      .byte.b	$20
   1082  f2ec		       40		      .byte.b	$40
   1083  f2ed		       80		      .byte.b	$80
   1084  f2ee		       80		      .byte.b	$80
   1085  f2ef		       40		      .byte.b	$40
   1086  f2f0		       20		      .byte.b	$20
   1087  f2f1		       10		      .byte.b	$10
   1088  f2f2		       08		      .byte.b	$08
   1089  f2f3		       04		      .byte.b	$04
   1090  f2f4		       02		      .byte.b	$02
   1091  f2f5		       01		      .byte.b	$01
   1092  f2f6		       01		      .byte.b	$01
   1093  f2f7		       02		      .byte.b	$02
   1094  f2f8		       04		      .byte.b	$04
   1095  f2f9		       08		      .byte.b	$08
   1096  f2fa		       10		      .byte.b	$10
   1097  f2fb		       20		      .byte.b	$20
   1098  f2fc		       40		      .byte.b	$40
   1099  f2fd		       80		      .byte.b	$80
   1100  f2fe							; Provided under the CC0 license. See the included LICENSE.txt for details.
   1101  f2fe
   1102  f2fe				   pfscroll		;(a=0 left, 1 right, 2 up, 4 down, 6=upup, 12=downdown)
   1103  f2fe		       d0 13		      bne	notleft
   1104  f300							;left
   1105  f300				  -	      ifconst	pfres
   1106  f300				  -	      ldx	#pfres*4
   1107  f300					      else
   1108  f300		       a2 30		      ldx	#48
   1109  f302					      endif
   1110  f302				   leftloop
   1111  f302		       b5 a3		      lda	playfield-1,x
   1112  f304		       4a		      lsr
   1113  f305
   1114  f305				  -	      ifconst	superchip
   1115  f305				  -	      lda	playfield-2,x
   1116  f305				  -	      rol
   1117  f305				  -	      sta	playfield-130,x
   1118  f305				  -	      lda	playfield-3,x
   1119  f305				  -	      ror
   1120  f305				  -	      sta	playfield-131,x
   1121  f305				  -	      lda	playfield-4,x
   1122  f305				  -	      rol
   1123  f305				  -	      sta	playfield-132,x
   1124  f305				  -	      lda	playfield-1,x
   1125  f305				  -	      ror
   1126  f305				  -	      sta	playfield-129,x
   1127  f305					      else
   1128  f305		       36 a2		      rol	playfield-2,x
   1129  f307		       76 a1		      ror	playfield-3,x
   1130  f309		       36 a0		      rol	playfield-4,x
   1131  f30b		       76 a3		      ror	playfield-1,x
   1132  f30d					      endif
   1133  f30d
   1134  f30d		       8a		      txa
   1135  f30e		       cb 04		      sbx	#4
   1136  f310		       d0 f0		      bne	leftloop
      0  f312					      RETURN
      1  f312					      ifnconst	bankswitch
      2  f312		       60		      rts
      3  f313				  -	      else
      4  f313				  -	      jmp	BS_return
      5  f313					      endif
   1138  f313
   1139  f313				   notleft
   1140  f313		       4a		      lsr
   1141  f314		       90 13		      bcc	notright
   1142  f316							;right
   1143  f316
   1144  f316				  -	      ifconst	pfres
   1145  f316				  -	      ldx	#pfres*4
   1146  f316					      else
   1147  f316		       a2 30		      ldx	#48
   1148  f318					      endif
   1149  f318				   rightloop
   1150  f318		       b5 a0		      lda	playfield-4,x
   1151  f31a		       4a		      lsr
   1152  f31b				  -	      ifconst	superchip
   1153  f31b				  -	      lda	playfield-3,x
   1154  f31b				  -	      rol
   1155  f31b				  -	      sta	playfield-131,x
   1156  f31b				  -	      lda	playfield-2,x
   1157  f31b				  -	      ror
   1158  f31b				  -	      sta	playfield-130,x
   1159  f31b				  -	      lda	playfield-1,x
   1160  f31b				  -	      rol
   1161  f31b				  -	      sta	playfield-129,x
   1162  f31b				  -	      lda	playfield-4,x
   1163  f31b				  -	      ror
   1164  f31b				  -	      sta	playfield-132,x
   1165  f31b					      else
   1166  f31b		       36 a1		      rol	playfield-3,x
   1167  f31d		       76 a2		      ror	playfield-2,x
   1168  f31f		       36 a3		      rol	playfield-1,x
   1169  f321		       76 a0		      ror	playfield-4,x
   1170  f323					      endif
   1171  f323		       8a		      txa
   1172  f324		       cb 04		      sbx	#4
   1173  f326		       d0 f0		      bne	rightloop
      0  f328					      RETURN
      1  f328					      ifnconst	bankswitch
      2  f328		       60		      rts
      3  f329				  -	      else
      4  f329				  -	      jmp	BS_return
      5  f329					      endif
   1175  f329
   1176  f329				   notright
   1177  f329		       4a		      lsr
   1178  f32a		       90 49		      bcc	notup
   1179  f32c							;up
   1180  f32c		       4a		      lsr
   1181  f32d		       90 02		      bcc	onedecup
   1182  f32f		       c6 ef		      dec	playfieldpos
   1183  f331				   onedecup
   1184  f331		       c6 ef		      dec	playfieldpos
   1185  f333		       f0 02		      beq	shiftdown
   1186  f335		       10 3d		      bpl	noshiftdown2
   1187  f337				   shiftdown
   1188  f337				  -	      ifconst	pfrowheight
   1189  f337				  -	      lda	#pfrowheight
   1190  f337					      else
   1191  f337					      ifnconst	pfres
   1192  f337		       a9 08		      lda	#8
   1193  f339				  -	      else
   1194  f339				  -	      lda	#(96/pfres)	; try to come close to the real size
   1195  f339					      endif
   1196  f339					      endif
   1197  f339
   1198  f339		       85 ef		      sta	playfieldpos
   1199  f33b		       a5 a7		      lda	playfield+3
   1200  f33d		       85 9f		      sta	temp4
   1201  f33f		       a5 a6		      lda	playfield+2
   1202  f341		       85 9e		      sta	temp3
   1203  f343		       a5 a5		      lda	playfield+1
   1204  f345		       85 9d		      sta	temp2
   1205  f347		       a5 a4		      lda	playfield
   1206  f349		       85 9c		      sta	temp1
   1207  f34b		       a2 00		      ldx	#0
   1208  f34d				   up2
   1209  f34d		       b5 a8		      lda	playfield+4,x
   1210  f34f				  -	      ifconst	superchip
   1211  f34f				  -	      sta	playfield-128,x
   1212  f34f				  -	      lda	playfield+5,x
   1213  f34f				  -	      sta	playfield-127,x
   1214  f34f				  -	      lda	playfield+6,x
   1215  f34f				  -	      sta	playfield-126,x
   1216  f34f				  -	      lda	playfield+7,x
   1217  f34f				  -	      sta	playfield-125,x
   1218  f34f					      else
   1219  f34f		       95 a4		      sta	playfield,x
   1220  f351		       b5 a9		      lda	playfield+5,x
   1221  f353		       95 a5		      sta	playfield+1,x
   1222  f355		       b5 aa		      lda	playfield+6,x
   1223  f357		       95 a6		      sta	playfield+2,x
   1224  f359		       b5 ab		      lda	playfield+7,x
   1225  f35b		       95 a7		      sta	playfield+3,x
   1226  f35d					      endif
   1227  f35d		       8a		      txa
   1228  f35e		       cb fc		      sbx	#252
   1229  f360				  -	      ifconst	pfres
   1230  f360				  -	      cpx	#(pfres-1)*4
   1231  f360					      else
   1232  f360		       e0 2c		      cpx	#44
   1233  f362					      endif
   1234  f362		       d0 e9		      bne	up2
   1235  f364
   1236  f364		       a5 9f		      lda	temp4
   1237  f366
   1238  f366				  -	      ifconst	superchip
   1239  f366				  -	      ifconst	pfres
   1240  f366				  -	      sta	playfield+pfres*4-129
   1241  f366				  -	      lda	temp3
   1242  f366				  -	      sta	playfield+pfres*4-130
   1243  f366				  -	      lda	temp2
   1244  f366				  -	      sta	playfield+pfres*4-131
   1245  f366				  -	      lda	temp1
   1246  f366				  -	      sta	playfield+pfres*4-132
   1247  f366				  -	      else
   1248  f366				  -	      sta	playfield+47-128
   1249  f366				  -	      lda	temp3
   1250  f366				  -	      sta	playfield+46-128
   1251  f366				  -	      lda	temp2
   1252  f366				  -	      sta	playfield+45-128
   1253  f366				  -	      lda	temp1
   1254  f366				  -	      sta	playfield+44-128
   1255  f366				  -	      endif
   1256  f366					      else
   1257  f366				  -	      ifconst	pfres
   1258  f366				  -	      sta	playfield+pfres*4-1
   1259  f366				  -	      lda	temp3
   1260  f366				  -	      sta	playfield+pfres*4-2
   1261  f366				  -	      lda	temp2
   1262  f366				  -	      sta	playfield+pfres*4-3
   1263  f366				  -	      lda	temp1
   1264  f366				  -	      sta	playfield+pfres*4-4
   1265  f366					      else
   1266  f366		       85 d3		      sta	playfield+47
   1267  f368		       a5 9e		      lda	temp3
   1268  f36a		       85 d2		      sta	playfield+46
   1269  f36c		       a5 9d		      lda	temp2
   1270  f36e		       85 d1		      sta	playfield+45
   1271  f370		       a5 9c		      lda	temp1
   1272  f372		       85 d0		      sta	playfield+44
   1273  f374					      endif
   1274  f374					      endif
   1275  f374				   noshiftdown2
      0  f374					      RETURN
      1  f374					      ifnconst	bankswitch
      2  f374		       60		      rts
      3  f375				  -	      else
      4  f375				  -	      jmp	BS_return
      5  f375					      endif
   1277  f375
   1278  f375
   1279  f375				   notup
   1280  f375							;down
   1281  f375		       4a		      lsr
   1282  f376		       b0 02		      bcs	oneincup
   1283  f378		       e6 ef		      inc	playfieldpos
   1284  f37a				   oneincup
   1285  f37a		       e6 ef		      inc	playfieldpos
   1286  f37c		       a5 ef		      lda	playfieldpos
   1287  f37e
   1288  f37e				  -	      ifconst	pfrowheight
   1289  f37e				  -	      cmp	#pfrowheight+1
   1290  f37e					      else
   1291  f37e					      ifnconst	pfres
   1292  f37e		       c9 09		      cmp	#9
   1293  f380				  -	      else
   1294  f380				  -	      cmp	#(96/pfres)+1	; try to come close to the real size
   1295  f380					      endif
   1296  f380					      endif
   1297  f380
   1298  f380		       90 3b		      bcc	noshiftdown
   1299  f382		       a9 01		      lda	#1
   1300  f384		       85 ef		      sta	playfieldpos
   1301  f386
   1302  f386				  -	      ifconst	pfres
   1303  f386				  -	      lda	playfield+pfres*4-1
   1304  f386				  -	      sta	temp4
   1305  f386				  -	      lda	playfield+pfres*4-2
   1306  f386				  -	      sta	temp3
   1307  f386				  -	      lda	playfield+pfres*4-3
   1308  f386				  -	      sta	temp2
   1309  f386				  -	      lda	playfield+pfres*4-4
   1310  f386					      else
   1311  f386		       a5 d3		      lda	playfield+47
   1312  f388		       85 9f		      sta	temp4
   1313  f38a		       a5 d2		      lda	playfield+46
   1314  f38c		       85 9e		      sta	temp3
   1315  f38e		       a5 d1		      lda	playfield+45
   1316  f390		       85 9d		      sta	temp2
   1317  f392		       a5 d0		      lda	playfield+44
   1318  f394					      endif
   1319  f394
   1320  f394		       85 9c		      sta	temp1
   1321  f396
   1322  f396				  -	      ifconst	pfres
   1323  f396				  -	      ldx	#(pfres-1)*4
   1324  f396					      else
   1325  f396		       a2 2c		      ldx	#44
   1326  f398					      endif
   1327  f398				   down2
   1328  f398		       b5 a3		      lda	playfield-1,x
   1329  f39a				  -	      ifconst	superchip
   1330  f39a				  -	      sta	playfield-125,x
   1331  f39a				  -	      lda	playfield-2,x
   1332  f39a				  -	      sta	playfield-126,x
   1333  f39a				  -	      lda	playfield-3,x
   1334  f39a				  -	      sta	playfield-127,x
   1335  f39a				  -	      lda	playfield-4,x
   1336  f39a				  -	      sta	playfield-128,x
   1337  f39a					      else
   1338  f39a		       95 a7		      sta	playfield+3,x
   1339  f39c		       b5 a2		      lda	playfield-2,x
   1340  f39e		       95 a6		      sta	playfield+2,x
   1341  f3a0		       b5 a1		      lda	playfield-3,x
   1342  f3a2		       95 a5		      sta	playfield+1,x
   1343  f3a4		       b5 a0		      lda	playfield-4,x
   1344  f3a6		       95 a4		      sta	playfield,x
   1345  f3a8					      endif
   1346  f3a8		       8a		      txa
   1347  f3a9		       cb 04		      sbx	#4
   1348  f3ab		       d0 eb		      bne	down2
   1349  f3ad
   1350  f3ad		       a5 9f		      lda	temp4
   1351  f3af				  -	      ifconst	superchip
   1352  f3af				  -	      sta	playfield-125
   1353  f3af				  -	      lda	temp3
   1354  f3af				  -	      sta	playfield-126
   1355  f3af				  -	      lda	temp2
   1356  f3af				  -	      sta	playfield-127
   1357  f3af				  -	      lda	temp1
   1358  f3af				  -	      sta	playfield-128
   1359  f3af					      else
   1360  f3af		       85 a7		      sta	playfield+3
   1361  f3b1		       a5 9e		      lda	temp3
   1362  f3b3		       85 a6		      sta	playfield+2
   1363  f3b5		       a5 9d		      lda	temp2
   1364  f3b7		       85 a5		      sta	playfield+1
   1365  f3b9		       a5 9c		      lda	temp1
   1366  f3bb		       85 a4		      sta	playfield
   1367  f3bd					      endif
   1368  f3bd				   noshiftdown
      0  f3bd					      RETURN
      1  f3bd					      ifnconst	bankswitch
      2  f3bd		       60		      rts
      3  f3be				  -	      else
      4  f3be				  -	      jmp	BS_return
      5  f3be					      endif
   1370  f3be							; Provided under the CC0 license. See the included LICENSE.txt for details.
   1371  f3be
   1372  f3be							;standard routines needed for pretty much all games
   1373  f3be							; just the random number generator is left - maybe we should remove this asm file altogether?
   1374  f3be							; repositioning code and score pointer setup moved to overscan
   1375  f3be							; read switches, joysticks now compiler generated (more efficient)
   1376  f3be
   1377  f3be				   randomize
   1378  f3be		       a5 a2		      lda	rand
   1379  f3c0		       4a		      lsr
   1380  f3c1					      ifconst	rand16
   1381  f3c1		       26 ed		      rol	rand16
   1382  f3c3					      endif
   1383  f3c3		       90 02		      bcc	noeor
   1384  f3c5		       49 b4		      eor	#$B4
   1385  f3c7				   noeor
   1386  f3c7		       85 a2		      sta	rand
   1387  f3c9					      ifconst	rand16
   1388  f3c9		       45 ed		      eor	rand16
   1389  f3cb					      endif
      0  f3cb					      RETURN
      1  f3cb					      ifnconst	bankswitch
      2  f3cb		       60		      rts
      3  f3cc				  -	      else
      4  f3cc				  -	      jmp	BS_return
      5  f3cc					      endif
   1391  f3cc							; Provided under the CC0 license. See the included LICENSE.txt for details.
   1392  f3cc
   1393  f3cc				   drawscreen
   1394  f3cc				  -	      ifconst	debugscore
   1395  f3cc				  -	      ldx	#14
   1396  f3cc				  -	      lda	INTIM	; display # cycles left in the score
   1397  f3cc				  -
   1398  f3cc				  -	      ifconst	mincycles
   1399  f3cc				  -	      lda	mincycles
   1400  f3cc				  -	      cmp	INTIM
   1401  f3cc				  -	      lda	mincycles
   1402  f3cc				  -	      bcc	nochange
   1403  f3cc				  -	      lda	INTIM
   1404  f3cc				  -	      sta	mincycles
   1405  f3cc				  -nochange
   1406  f3cc				  -	      endif
   1407  f3cc				  -
   1408  f3cc				  -			; cmp #$2B
   1409  f3cc				  -			; bcs no_cycles_left
   1410  f3cc				  -	      bmi	cycles_left
   1411  f3cc				  -	      ldx	#64
   1412  f3cc				  -	      eor	#$ff	;make negative
   1413  f3cc				  -cycles_left
   1414  f3cc				  -	      stx	scorecolor
   1415  f3cc				  -	      and	#$7f	; clear sign bit
   1416  f3cc				  -	      tax
   1417  f3cc				  -	      lda	scorebcd,x
   1418  f3cc				  -	      sta	score+2
   1419  f3cc				  -	      lda	scorebcd1,x
   1420  f3cc				  -	      sta	score+1
   1421  f3cc				  -	      jmp	done_debugscore
   1422  f3cc				  -scorebcd
   1423  f3cc				  -	      .byte	$00, $64, $28, $92, $56, $20, $84, $48, $12, $76, $40
   1424  f3cc				  -	      .byte	$04, $68, $32, $96, $60, $24, $88, $52, $16, $80, $44
   1425  f3cc				  -	      .byte	$08, $72, $36, $00, $64, $28, $92, $56, $20, $84, $48
   1426  f3cc				  -	      .byte	$12, $76, $40, $04, $68, $32, $96, $60, $24, $88
   1427  f3cc				  -scorebcd1
   1428  f3cc				  -	      .byte	0, 0, 1, 1, 2, 3, 3, 4, 5, 5, 6
   1429  f3cc				  -	      .byte	7, 7, 8, 8, 9, $10, $10, $11, $12, $12, $13
   1430  f3cc				  -	      .byte	$14, $14, $15, $16, $16, $17, $17, $18, $19, $19, $20
   1431  f3cc				  -	      .byte	$21, $21, $22, $23, $23, $24, $24, $25, $26, $26
   1432  f3cc				  -done_debugscore
   1433  f3cc					      endif
   1434  f3cc
   1435  f3cc				  -	      ifconst	debugcycles
   1436  f3cc				  -	      lda	INTIM	; if we go over, it mucks up the background color
   1437  f3cc				  -			; cmp #$2B
   1438  f3cc				  -			; BCC overscan
   1439  f3cc				  -	      bmi	overscan
   1440  f3cc				  -	      sta	COLUBK
   1441  f3cc				  -	      bcs	doneoverscan
   1442  f3cc					      endif
   1443  f3cc
   1444  f3cc				   overscan
   1445  f3cc				  -	      ifconst	interlaced
   1446  f3cc				  -	      PHP
   1447  f3cc				  -	      PLA
   1448  f3cc				  -	      EOR	#4	; flip interrupt bit
   1449  f3cc				  -	      PHA
   1450  f3cc				  -	      PLP
   1451  f3cc				  -	      AND	#4	; isolate the interrupt bit
   1452  f3cc				  -	      TAX		; save it for later
   1453  f3cc					      endif
   1454  f3cc
   1455  f3cc				   overscanloop
   1456  f3cc		       ad 84 02 	      lda	INTIM	;wait for sync
   1457  f3cf		       30 fb		      bmi	overscanloop
   1458  f3d1				   doneoverscan
   1459  f3d1
   1460  f3d1							;do VSYNC
   1461  f3d1
   1462  f3d1				  -	      ifconst	interlaced
   1463  f3d1				  -	      CPX	#4
   1464  f3d1				  -	      BNE	oddframevsync
   1465  f3d1					      endif
   1466  f3d1
   1467  f3d1		       a9 02		      lda	#2
   1468  f3d3		       85 02		      sta	WSYNC
   1469  f3d5		       85 00		      sta	VSYNC
   1470  f3d7		       85 02		      STA	WSYNC
   1471  f3d9		       85 02		      STA	WSYNC
   1472  f3db		       4a		      lsr
   1473  f3dc		       85 02		      STA	WSYNC
   1474  f3de		       85 00		      STA	VSYNC
   1475  f3e0		       85 01		      sta	VBLANK
   1476  f3e2					      ifnconst	overscan_time
   1477  f3e2		       a9 a5		      lda	#37+128
   1478  f3e4				  -	      else
   1479  f3e4				  -	      lda	#overscan_time+128
   1480  f3e4					      endif
   1481  f3e4		       8d 96 02 	      sta	TIM64T
   1482  f3e7
   1483  f3e7				  -	      ifconst	interlaced
   1484  f3e7				  -	      jmp	postsync
   1485  f3e7				  -
   1486  f3e7				  -oddframevsync
   1487  f3e7				  -	      sta	WSYNC
   1488  f3e7				  -
   1489  f3e7				  -	      LDA	($80,X)	; 11 waste
   1490  f3e7				  -	      LDA	($80,X)	; 11 waste
   1491  f3e7				  -	      LDA	($80,X)	; 11 waste
   1492  f3e7				  -
   1493  f3e7				  -	      lda	#2
   1494  f3e7				  -	      sta	VSYNC
   1495  f3e7				  -	      sta	WSYNC
   1496  f3e7				  -	      sta	WSYNC
   1497  f3e7				  -	      sta	WSYNC
   1498  f3e7				  -
   1499  f3e7				  -	      LDA	($80,X)	; 11 waste
   1500  f3e7				  -	      LDA	($80,X)	; 11 waste
   1501  f3e7				  -	      LDA	($80,X)	; 11 waste
   1502  f3e7				  -
   1503  f3e7				  -	      lda	#0
   1504  f3e7				  -	      sta	VSYNC
   1505  f3e7				  -	      sta	VBLANK
   1506  f3e7				  -	      ifnconst	overscan_time
   1507  f3e7				  -	      lda	#37+128
   1508  f3e7				  -	      else
   1509  f3e7				  -	      lda	#overscan_time+128
   1510  f3e7				  -	      endif
   1511  f3e7				  -	      sta	TIM64T
   1512  f3e7				  -
   1513  f3e7				  -postsync
   1514  f3e7					      endif
   1515  f3e7
   1516  f3e7				  -	      ifconst	legacy
   1517  f3e7				  -	      if	legacy < 100
   1518  f3e7				  -	      ldx	#4
   1519  f3e7				  -adjustloop
   1520  f3e7				  -	      lda	player0x,x
   1521  f3e7				  -	      sec
   1522  f3e7				  -	      sbc	#14	;?
   1523  f3e7				  -	      sta	player0x,x
   1524  f3e7				  -	      dex
   1525  f3e7				  -	      bpl	adjustloop
   1526  f3e7				  -	      endif
   1527  f3e7					      endif
   1528  f3e7				  -	      if	((<*)>$e9)&&((<*)<$fa)
   1529  f3e7				  -	      repeat	($fa-(<*))
   1530  f3e7				  -	      nop
   1531  f3e7				  -	      repend
   1532  f3e7					      endif
   1533  f3e7		       85 02		      sta	WSYNC
   1534  f3e9		       a2 04		      ldx	#4
      0  f3eb					      SLEEP	3
      1  f3eb				   .CYCLES    SET	3
      2  f3eb
      3  f3eb				  -	      IF	.CYCLES < 2
      4  f3eb				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f3eb				  -	      ERR
      6  f3eb					      ENDIF
      7  f3eb
      8  f3eb					      IF	.CYCLES & 1
      9  f3eb					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f3eb		       04 00		      nop	0
     11  f3ed				  -	      ELSE
     12  f3ed				  -	      bit	VSYNC
     13  f3ed					      ENDIF
     14  f3ed				   .CYCLES    SET	.CYCLES - 3
     15  f3ed					      ENDIF
     16  f3ed
     17  f3ed				  -	      REPEAT	.CYCLES / 2
     18  f3ed				  -	      nop
     19  f3ed					      REPEND
   1536  f3ed				   HorPosLoop		; 5
   1537  f3ed		       b5 80		      lda	player0x,X	;+4 9
   1538  f3ef		       38		      sec		;+2 11
   1539  f3f0				   DivideLoop
   1540  f3f0		       e9 0f		      sbc	#15
   1541  f3f2		       b0 fc		      bcs	DivideLoop	;+4 15
   1542  f3f4		       95 9c		      sta	temp1,X	;+4 19
   1543  f3f6		       95 10		      sta	RESP0,X	;+4 23
   1544  f3f8		       85 02		      sta	WSYNC
   1545  f3fa		       ca		      dex
   1546  f3fb		       10 f0		      bpl	HorPosLoop	;+5 5
   1547  f3fd							; 4
   1548  f3fd
   1549  f3fd		       a2 04		      ldx	#4
   1550  f3ff		       b4 9c		      ldy	temp1,X
   1551  f401		       b9 5d f3 	      lda	repostable-256,Y
   1552  f404		       95 20		      sta	HMP0,X	;+14 18
   1553  f406
   1554  f406		       ca		      dex
   1555  f407		       b4 9c		      ldy	temp1,X
   1556  f409		       b9 5d f3 	      lda	repostable-256,Y
   1557  f40c		       95 20		      sta	HMP0,X	;+14 32
   1558  f40e
   1559  f40e		       ca		      dex
   1560  f40f		       b4 9c		      ldy	temp1,X
   1561  f411		       b9 5d f3 	      lda	repostable-256,Y
   1562  f414		       95 20		      sta	HMP0,X	;+14 46
   1563  f416
   1564  f416		       ca		      dex
   1565  f417		       b4 9c		      ldy	temp1,X
   1566  f419		       b9 5d f3 	      lda	repostable-256,Y
   1567  f41c		       95 20		      sta	HMP0,X	;+14 60
   1568  f41e
   1569  f41e		       ca		      dex
   1570  f41f		       b4 9c		      ldy	temp1,X
   1571  f421		       b9 5d f3 	      lda	repostable-256,Y
   1572  f424		       95 20		      sta	HMP0,X	;+14 74
   1573  f426
   1574  f426		       85 02		      sta	WSYNC
   1575  f428
   1576  f428		       85 2a		      sta	HMOVE	;+3 3
   1577  f42a
   1578  f42a
   1579  f42a				  -	      ifconst	legacy
   1580  f42a				  -	      if	legacy < 100
   1581  f42a				  -	      ldx	#4
   1582  f42a				  -adjustloop2
   1583  f42a				  -	      lda	player0x,x
   1584  f42a				  -	      clc
   1585  f42a				  -	      adc	#14	;?
   1586  f42a				  -	      sta	player0x,x
   1587  f42a				  -	      dex
   1588  f42a				  -	      bpl	adjustloop2
   1589  f42a				  -	      endif
   1590  f42a					      endif
   1591  f42a
   1592  f42a
   1593  f42a
   1594  f42a
   1595  f42a							;set score pointers
   1596  f42a		       a7 95		      lax	score+2
   1597  f42c		       20 5d f4 	      jsr	scorepointerset
   1598  f42f		       84 9b		      sty	scorepointers+5
   1599  f431		       86 98		      stx	scorepointers+2
   1600  f433		       a7 94		      lax	score+1
   1601  f435		       20 5d f4 	      jsr	scorepointerset
   1602  f438		       84 9a		      sty	scorepointers+4
   1603  f43a		       86 97		      stx	scorepointers+1
   1604  f43c		       a7 93		      lax	score
   1605  f43e		       20 5d f4 	      jsr	scorepointerset
   1606  f441		       84 99		      sty	scorepointers+3
   1607  f443		       86 96		      stx	scorepointers
   1608  f445
   1609  f445				   vblk
   1610  f445							; run possible vblank bB code
   1611  f445				  -	      ifconst	vblank_bB_code
   1612  f445				  -	      jsr	vblank_bB_code
   1613  f445					      endif
   1614  f445				   vblk2
   1615  f445		       ad 84 02 	      LDA	INTIM
   1616  f448		       30 fb		      bmi	vblk2
   1617  f44a		       4c 34 f0 	      jmp	kernel
   1618  f44d
   1619  f44d
   1620  f44d		       80 70 60 50*	      .byte.b	$80,$70,$60,$50,$40,$30,$20,$10,$00
   1621  f456		       f0 e0 d0 c0*	      .byte.b	$F0,$E0,$D0,$C0,$B0,$A0,$90
   1622  f45d				   repostable
   1623  f45d
   1624  f45d				   scorepointerset
   1625  f45d		       29 0f		      and	#$0F
   1626  f45f		       0a		      asl
   1627  f460		       0a		      asl
   1628  f461		       0a		      asl
   1629  f462		       69 9c		      adc	#<scoretable
   1630  f464		       a8		      tay
   1631  f465		       8a		      txa
   1632  f466							; and #$F0
   1633  f466							; lsr
   1634  f466		       4b f0		      asr	#$F0
   1635  f468		       69 9c		      adc	#<scoretable
   1636  f46a		       aa		      tax
   1637  f46b		       60		      rts
   1638  f46c				   game
   1639  f46c				   .
   1640  f46c							; 
   1641  f46c
   1642  f46c				   .L00 		;  rem teste jogo 1
   1643  f46c
   1644  f46c				   .L01 		;  rem por Heitor Maciel
   1645  f46c
   1646  f46c				   .
   1647  f46c							; 
   1648  f46c
   1649  f46c				   .L02 		;  set kernel_options no_blank_lines
   1650  f46c
   1651  f46c				   .L03 		;  const pfscore  =  1
   1652  f46c
   1653  f46c				   .
   1654  f46c							; 
   1655  f46c
   1656  f46c				   .L04 		;  dim _Ch0_Sound  =  a
   1657  f46c
   1658  f46c				   .
   1659  f46c							; 
   1660  f46c
   1661  f46c				   .
   1662  f46c							; 
   1663  f46c
   1664  f46c				   .
   1665  f46c							; 
   1666  f46c
   1667  f46c				   .L05 		;  dim _cont_escudo  =  e
   1668  f46c
   1669  f46c				   .L06 		;  dim _duracao_som0  =  f
   1670  f46c
   1671  f46c				   .L07 		;  dim _duracao_som1  =  g
   1672  f46c
   1673  f46c				   .L08 		;  dim musicPointer  =  h
   1674  f46c
   1675  f46c				   .
   1676  f46c							; 
   1677  f46c
   1678  f46c				   .L09 		;  dim _bit_supressores  =  j
   1679  f46c
   1680  f46c				   .
   1681  f46c							; 
   1682  f46c
   1683  f46c				   .
   1684  f46c							; 
   1685  f46c
   1686  f46c				   .
   1687  f46c							; 
   1688  f46c
   1689  f46c				   .
   1690  f46c							; 
   1691  f46c
   1692  f46c				   .
   1693  f46c							; 
   1694  f46c
   1695  f46c				   .
   1696  f46c							; 
   1697  f46c
   1698  f46c				   .
   1699  f46c							; 
   1700  f46c
   1701  f46c				   .
   1702  f46c							; 
   1703  f46c
   1704  f46c				   .L010		;  dim musicTimer  =  k
   1705  f46c
   1706  f46c				   .L011		;  dim _dificuldade  =  l
   1707  f46c
   1708  f46c				   .L012		;  dim _Ch1_Sound  =  m
   1709  f46c
   1710  f46c				   .L013		;  dim _animacao  =  n
   1711  f46c
   1712  f46c				   .L014		;  dim _SC_Back  =  o
   1713  f46c
   1714  f46c				   .
   1715  f46c							; 
   1716  f46c
   1717  f46c				   .L015		;  dim _fases	=  q
   1718  f46c
   1719  f46c				   .L016		;  dim _cont_anima_morte  =  r
   1720  f46c
   1721  f46c				   .L017		;  dim _cont_telas  =	s
   1722  f46c
   1723  f46c				   .
   1724  f46c							; 
   1725  f46c
   1726  f46c				   .
   1727  f46c							; 
   1728  f46c
   1729  f46c				   .
   1730  f46c							; 
   1731  f46c
   1732  f46c				   .L018		;  dim rand16	=  z
   1733  f46c
   1734  f46c				   .
   1735  f46c							; 
   1736  f46c
   1737  f46c				   .
   1738  f46c							; 
   1739  f46c
   1740  f46c				   .__reset_game
   1741  f46c							; __reset_game
   1742  f46c
   1743  f46c				   .
   1744  f46c							; 
   1745  f46c
   1746  f46c				   .
   1747  f46c							; 
   1748  f46c
   1749  f46c				   .L019		;  a  =  0  :	d  =  0  :  e  =  0  :	f  =  0  :  g  =  0  :	h  =  0
   1750  f46c
   1751  f46c		       a9 00		      LDA	#0
   1752  f46e		       85 d4		      STA	a
   1753  f470		       85 d7		      STA	d
   1754  f472		       85 d8		      STA	e
   1755  f474		       85 d9		      STA	f
   1756  f476		       85 da		      STA	g
   1757  f478		       85 db		      STA	h
   1758  f47a				   .L020		;  j  =  0  :	k  =  0  :  l  =  0  :	m  =  0  :  n  =  0  :	o  =  0  :  p  =  0  :	q  =  0  :  r  =  0
   1759  f47a
   1760  f47a		       a9 00		      LDA	#0
   1761  f47c		       85 dd		      STA	j
   1762  f47e		       85 de		      STA	k
   1763  f480		       85 df		      STA	l
   1764  f482		       85 e0		      STA	m
   1765  f484		       85 e1		      STA	n
   1766  f486		       85 e2		      STA	o
   1767  f488		       85 e3		      STA	p
   1768  f48a		       85 e4		      STA	q
   1769  f48c		       85 e5		      STA	r
   1770  f48e				   .L021		;  s  =  0  :	t  =  0  :  u  =  0  :	v  =  0  :  w  =  0  :	x  =  0  :  y  =  0
   1771  f48e
   1772  f48e		       a9 00		      LDA	#0
   1773  f490		       85 e6		      STA	s
   1774  f492		       85 e7		      STA	t
   1775  f494		       85 e8		      STA	u
   1776  f496		       85 e9		      STA	v
   1777  f498		       85 ea		      STA	w
   1778  f49a		       85 eb		      STA	x
   1779  f49c		       85 ec		      STA	y
   1780  f49e				   .
   1781  f49e							; 
   1782  f49e
   1783  f49e				   .L022		;  rem DESLIGA O SOM
   1784  f49e
   1785  f49e				   .L023		;  AUDV0  =  0  :  AUDV1  =  0
   1786  f49e
   1787  f49e		       a9 00		      LDA	#0
   1788  f4a0		       85 19		      STA	AUDV0
   1789  f4a2		       85 1a		      STA	AUDV1
   1790  f4a4				   .
   1791  f4a4							; 
   1792  f4a4
   1793  f4a4				   .L024		;  score  =  0
   1794  f4a4
   1795  f4a4		       a9 00		      LDA	#$00
   1796  f4a6		       85 95		      STA	score+2
   1797  f4a8		       a9 00		      LDA	#$00
   1798  f4aa		       85 94		      STA	score+1
   1799  f4ac		       a9 00		      LDA	#$00
   1800  f4ae		       85 93		      STA	score
   1801  f4b0				   .L025		;  scorecolor	=  $00
   1802  f4b0
   1803  f4b0		       a9 00		      LDA	#$00
   1804  f4b2		       85 a3		      STA	scorecolor
   1805  f4b4				   .L026		;  missile1y  =  0
   1806  f4b4
   1807  f4b4		       a9 00		      LDA	#0
   1808  f4b6		       85 88		      STA	missile1y
   1809  f4b8				   .L027		;  bally  =  0
   1810  f4b8
   1811  f4b8		       a9 00		      LDA	#0
   1812  f4ba		       85 89		      STA	bally
   1813  f4bc				   .L028		;  COLUP1  =  00
   1814  f4bc
   1815  f4bc		       a9 00		      LDA	#00
   1816  f4be		       85 07		      STA	COLUP1
   1817  f4c0				   .
   1818  f4c0							; 
   1819  f4c0
   1820  f4c0				   .L029		;  player1x  =  75  :	player1y  =  85
   1821  f4c0
   1822  f4c0		       a9 4b		      LDA	#75
   1823  f4c2		       85 81		      STA	player1x
   1824  f4c4		       a9 55		      LDA	#85
   1825  f4c6		       85 86		      STA	player1y
   1826  f4c8				   .L030		;  player0x  =  20  :	player0y  =  1
   1827  f4c8
   1828  f4c8		       a9 14		      LDA	#20
   1829  f4ca		       85 80		      STA	player0x
   1830  f4cc		       a9 01		      LDA	#1
   1831  f4ce		       85 85		      STA	player0y
   1832  f4d0				   .
   1833  f4d0							; 
   1834  f4d0
   1835  f4d0				   .L031		;  pfscore1 = %00010101  :  pfscorecolor  =  $40
   1836  f4d0
   1837  f4d0		       a9 15		      LDA	#%00010101
   1838  f4d2		       85 f2		      STA	pfscore1
   1839  f4d4		       a9 40		      LDA	#$40
   1840  f4d6		       85 f4		      STA	pfscorecolor
   1841  f4d8				   .L032		;  pfscore2 = %00010101
   1842  f4d8
   1843  f4d8		       a9 15		      LDA	#%00010101
   1844  f4da		       85 f3		      STA	pfscore2
   1845  f4dc				   .L033		;  missile1height = 5
   1846  f4dc
   1847  f4dc		       a9 05		      LDA	#5
   1848  f4de		       85 87		      STA	missile1height
   1849  f4e0				   .
   1850  f4e0							; 
   1851  f4e0
   1852  f4e0				   .
   1853  f4e0							; 
   1854  f4e0
   1855  f4e0				   .L034		;  gosub __playfield_transicao
   1856  f4e0
   1857  f4e0		       20 cf fb 	      jsr	.__playfield_transicao
   1858  f4e3
   1859  f4e3				   .
   1860  f4e3							; 
   1861  f4e3
   1862  f4e3				   .__title_screen
   1863  f4e3							; __title_screen
   1864  f4e3
   1865  f4e3				   .L035		;  COLUPF  =  $00  :  COLUBK  =  $8A
   1866  f4e3
   1867  f4e3		       a9 00		      LDA	#$00
   1868  f4e5		       85 08		      STA	COLUPF
   1869  f4e7		       a9 8a		      LDA	#$8A
   1870  f4e9		       85 09		      STA	COLUBK
   1871  f4eb				   .L036		;  AUDC0  =  12
   1872  f4eb
   1873  f4eb		       a9 0c		      LDA	#12
   1874  f4ed		       85 15		      STA	AUDC0
   1875  f4ef				   .L037		;  AUDC1  =  1
   1876  f4ef
   1877  f4ef		       a9 01		      LDA	#1
   1878  f4f1		       85 16		      STA	AUDC1
   1879  f4f3				   .
   1880  f4f3							; 
   1881  f4f3
   1882  f4f3				   .L038		;  if joy0fire then e	=  1
   1883  f4f3
   1884  f4f3		       24 0c		      bit	INPT4
   1885  f4f5		       30 04		      BMI	.skipL038
   1886  f4f7				   .condpart0
   1887  f4f7		       a9 01		      LDA	#1
   1888  f4f9		       85 d8		      STA	e
   1889  f4fb				   .skipL038
   1890  f4fb				   .L039		;  if e  =  0 then goto __skip_sound_title
   1891  f4fb
   1892  f4fb		       a5 d8		      LDA	e
   1893  f4fd		       c9 00		      CMP	#0
   1894  f4ff		       d0 03		      BNE	.skipL039
   1895  f501				   .condpart1
   1896  f501		       4c 0f f5 	      jmp	.__skip_sound_title
   1897  f504
   1898  f504				   .skipL039
   1899  f504				   .L040		;  if musicTimer  =  0 then goto changeMusicNoteTitle
   1900  f504
   1901  f504		       a5 de		      LDA	musicTimer
   1902  f506		       c9 00		      CMP	#0
   1903  f508		       d0 03		      BNE	.skipL040
   1904  f50a				   .condpart2
   1905  f50a		       4c 56 fc 	      jmp	.changeMusicNoteTitle
   1906  f50d
   1907  f50d				   .skipL040
   1908  f50d				   .
   1909  f50d							; 
   1910  f50d
   1911  f50d				   .__volta_trilha_title
   1912  f50d							; __volta_trilha_title
   1913  f50d
   1914  f50d				   .L041		;  musicTimer	=  musicTimer  -  1
   1915  f50d
   1916  f50d		       c6 de		      DEC	musicTimer
   1917  f50f				   .__skip_sound_title
   1918  f50f							; __skip_sound_title
   1919  f50f
   1920  f50f				   .
   1921  f50f							; 
   1922  f50f
   1923  f50f				   .L042		;  pfscore1  =  0  :  scorecolor  =  $00
   1924  f50f
   1925  f50f		       a9 00		      LDA	#0
   1926  f511		       85 f2		      STA	pfscore1
   1927  f513		       a9 00		      LDA	#$00
   1928  f515		       85 a3		      STA	scorecolor
   1929  f517				   .L043		;  gosub __nave
   1930  f517
   1931  f517		       20 c5 fa 	      jsr	.__nave
   1932  f51a
   1933  f51a				   .L044		;  _animacao  =  10
   1934  f51a
   1935  f51a		       a9 0a		      LDA	#10
   1936  f51c		       85 e1		      STA	_animacao
   1937  f51e				   .L045		;  drawscreen
   1938  f51e
   1939  f51e		       20 cc f3 	      jsr	drawscreen
   1940  f521				   .L046		;  COLUBK = $00
   1941  f521
   1942  f521		       a9 00		      LDA	#$00
   1943  f523		       85 09		      STA	COLUBK
   1944  f525				   .L047		;  COLUPF = $06
   1945  f525
   1946  f525		       a9 06		      LDA	#$06
   1947  f527		       85 08		      STA	COLUPF
   1948  f529				   .L048		;  player0y  =  0
   1949  f529
   1950  f529		       a9 00		      LDA	#0
   1951  f52b		       85 85		      STA	player0y
   1952  f52d				   .L049		;  COLUP1  =  $0E
   1953  f52d
   1954  f52d		       a9 0e		      LDA	#$0E
   1955  f52f		       85 07		      STA	COLUP1
   1956  f531				   .L050		;  player1y  =  85
   1957  f531
   1958  f531		       a9 55		      LDA	#85
   1959  f533		       85 86		      STA	player1y
   1960  f535				   .L051		;  player1x  =  75
   1961  f535
   1962  f535		       a9 4b		      LDA	#75
   1963  f537		       85 81		      STA	player1x
   1964  f539				   .
   1965  f539							; 
   1966  f539
   1967  f539				   .L052		;  if joy0fire then e	=  1
   1968  f539
   1969  f539		       24 0c		      bit	INPT4
   1970  f53b		       30 04		      BMI	.skipL052
   1971  f53d				   .condpart3
   1972  f53d		       a9 01		      LDA	#1
   1973  f53f		       85 d8		      STA	e
   1974  f541				   .skipL052
   1975  f541				   .L053		;  if e  =  1 then pfscroll down
   1976  f541
   1977  f541		       a5 d8		      LDA	e
   1978  f543		       c9 01		      CMP	#1
   1979  f545		       d0 05		      BNE	.skipL053
   1980  f547				   .condpart4
   1981  f547		       a9 04		      LDA	#4
   1982  f549		       20 fe f2 	      jsr	pfscroll
   1983  f54c				   .skipL053
   1984  f54c				   .
   1985  f54c							; 
   1986  f54c
   1987  f54c				   .L054		;  _SC_Back  =  $70
   1988  f54c
   1989  f54c		       a9 70		      LDA	#$70
   1990  f54e		       85 e2		      STA	_SC_Back
   1991  f550				   .L055		;  if !pfread ( 0 , 11 )  then goto __prepara_main
   1992  f550
   1993  f550		       a9 00		      LDA	#0
   1994  f552		       a0 0b		      LDY	#11
   1995  f554		       20 76 f2 	      jsr	pfread
   1996  f557		       f0 03		      BEQ	.skipL055
   1997  f559				   .condpart5
   1998  f559		       4c 5f f5 	      jmp	.__prepara_main
   1999  f55c
   2000  f55c				   .skipL055
   2001  f55c				   .L056		;  goto __title_screen
   2002  f55c
   2003  f55c		       4c e3 f4 	      jmp	.__title_screen
   2004  f55f
   2005  f55f				   .
   2006  f55f							; 
   2007  f55f
   2008  f55f				   .__prepara_main
   2009  f55f							; __prepara_main
   2010  f55f
   2011  f55f				   .L057		;  AUDV0  =  0
   2012  f55f
   2013  f55f		       a9 00		      LDA	#0
   2014  f561		       85 19		      STA	AUDV0
   2015  f563				   .L058		;  AUDV1  =  0
   2016  f563
   2017  f563		       a9 00		      LDA	#0
   2018  f565		       85 1a		      STA	AUDV1
   2019  f567				   .L059		;  a  =  0  :	d  =  0  :  e  =  0  :	f  =  0  :  g  =  0  :	h  =  0
   2020  f567
   2021  f567		       a9 00		      LDA	#0
   2022  f569		       85 d4		      STA	a
   2023  f56b		       85 d7		      STA	d
   2024  f56d		       85 d8		      STA	e
   2025  f56f		       85 d9		      STA	f
   2026  f571		       85 da		      STA	g
   2027  f573		       85 db		      STA	h
   2028  f575				   .L060		;  j  =  0  :	k  =  0  :  l  =  0  :	m  =  0  :  n  =  0  :	o  =  0  :  p  =  0  :	q  =  0  :  r  =  0
   2029  f575
   2030  f575		       a9 00		      LDA	#0
   2031  f577		       85 dd		      STA	j
   2032  f579		       85 de		      STA	k
   2033  f57b		       85 df		      STA	l
   2034  f57d		       85 e0		      STA	m
   2035  f57f		       85 e1		      STA	n
   2036  f581		       85 e2		      STA	o
   2037  f583		       85 e3		      STA	p
   2038  f585		       85 e4		      STA	q
   2039  f587		       85 e5		      STA	r
   2040  f589				   .L061		;  s  =  0  :	t  =  0  :  u  =  0  :	v  =  0  :  w  =  0  :	x  =  0  :  y  =  0
   2041  f589
   2042  f589		       a9 00		      LDA	#0
   2043  f58b		       85 e6		      STA	s
   2044  f58d		       85 e7		      STA	t
   2045  f58f		       85 e8		      STA	u
   2046  f591		       85 e9		      STA	v
   2047  f593		       85 ea		      STA	w
   2048  f595		       85 eb		      STA	x
   2049  f597		       85 ec		      STA	y
   2050  f599				   .L062		;  pfscore1 = %00010101  :  pfscorecolor  =  $40
   2051  f599
   2052  f599		       a9 15		      LDA	#%00010101
   2053  f59b		       85 f2		      STA	pfscore1
   2054  f59d		       a9 40		      LDA	#$40
   2055  f59f		       85 f4		      STA	pfscorecolor
   2056  f5a1				   .L063		;  pfscore2 = %00010101
   2057  f5a1
   2058  f5a1		       a9 15		      LDA	#%00010101
   2059  f5a3		       85 f3		      STA	pfscore2
   2060  f5a5				   .L064		;  missile1height = 5
   2061  f5a5
   2062  f5a5		       a9 05		      LDA	#5
   2063  f5a7		       85 87		      STA	missile1height
   2064  f5a9				   .
   2065  f5a9							; 
   2066  f5a9
   2067  f5a9				   .
   2068  f5a9							; 
   2069  f5a9
   2070  f5a9				   .L065		;  _SC_Back  =  $70
   2071  f5a9
   2072  f5a9		       a9 70		      LDA	#$70
   2073  f5ab		       85 e2		      STA	_SC_Back
   2074  f5ad				   .
   2075  f5ad							; 
   2076  f5ad
   2077  f5ad				   .__Main_Loop
   2078  f5ad							; __Main_Loop
   2079  f5ad
   2080  f5ad				   .
   2081  f5ad							; 
   2082  f5ad
   2083  f5ad				   .
   2084  f5ad							; 
   2085  f5ad
   2086  f5ad				   .L066		;  scorecolor	=  14
   2087  f5ad
   2088  f5ad		       a9 0e		      LDA	#14
   2089  f5af		       85 a3		      STA	scorecolor
   2090  f5b1				   .
   2091  f5b1							; 
   2092  f5b1
   2093  f5b1				   .
   2094  f5b1							; 
   2095  f5b1
   2096  f5b1				   .L067		;  if player1x  <  20	||  player1x  >  133 then _bit_supressores{6}  =  1 else _bit_supressores{6}  =  0
   2097  f5b1
   2098  f5b1		       a5 81		      LDA	player1x
   2099  f5b3		       c9 14		      CMP	#20
   2100  f5b5		       b0 03		      BCS	.skipL067
   2101  f5b7				   .condpart6
   2102  f5b7		       4c c0 f5 	      jmp	.condpart7
   2103  f5ba				   .skipL067
   2104  f5ba		       a9 85		      LDA	#133
   2105  f5bc		       c5 81		      CMP	player1x
   2106  f5be		       b0 09		      BCS	.skip0OR
   2107  f5c0				   .condpart7
   2108  f5c0		       a5 dd		      LDA	_bit_supressores
   2109  f5c2		       09 40		      ORA	#64
   2110  f5c4		       85 dd		      STA	_bit_supressores
   2111  f5c6		       4c cf f5 	      jmp	.skipelse0
   2112  f5c9				   .skip0OR
   2113  f5c9		       a5 dd		      LDA	_bit_supressores
   2114  f5cb		       29 bf		      AND	#191
   2115  f5cd		       85 dd		      STA	_bit_supressores
   2116  f5cf				   .skipelse0
   2117  f5cf				   .
   2118  f5cf							; 
   2119  f5cf
   2120  f5cf				   .
   2121  f5cf							; 
   2122  f5cf
   2123  f5cf				   .L068		;  if _bit_supressores{6} then goto __skip_aceletarion_point
   2124  f5cf
   2125  f5cf		       24 dd		      BIT	_bit_supressores
   2126  f5d1		       50 03		      BVC	.skipL068
   2127  f5d3				   .condpart8
   2128  f5d3		       4c f7 f5 	      jmp	.__skip_aceletarion_point
   2129  f5d6
   2130  f5d6				   .skipL068
   2131  f5d6				   .L069		;  if joy0up then pfscroll down  :  score  =  score  +  1
   2132  f5d6
   2133  f5d6		       a9 10		      lda	#$10
   2134  f5d8		       2c 80 02 	      bit	SWCHA
   2135  f5db		       d0 1a		      BNE	.skipL069
   2136  f5dd				   .condpart9
   2137  f5dd		       a9 04		      LDA	#4
   2138  f5df		       20 fe f2 	      jsr	pfscroll
   2139  f5e2		       f8		      SED
   2140  f5e3		       18		      CLC
   2141  f5e4		       a5 95		      LDA	score+2
   2142  f5e6		       69 01		      ADC	#$01
   2143  f5e8		       85 95		      STA	score+2
   2144  f5ea		       a5 94		      LDA	score+1
   2145  f5ec		       69 00		      ADC	#$00
   2146  f5ee		       85 94		      STA	score+1
   2147  f5f0		       a5 93		      LDA	score
   2148  f5f2		       69 00		      ADC	#$00
   2149  f5f4		       85 93		      STA	score
   2150  f5f6		       d8		      CLD
   2151  f5f7				   .skipL069
   2152  f5f7				   .__skip_aceletarion_point
   2153  f5f7							; __skip_aceletarion_point
   2154  f5f7
   2155  f5f7				   .
   2156  f5f7							; 
   2157  f5f7
   2158  f5f7				   .
   2159  f5f7							; 
   2160  f5f7
   2161  f5f7				   .L070		;  if joy0left  &&  player1x  >  1 then player1x  =  player1x	-  1  :  goto __skip_joy
   2162  f5f7
   2163  f5f7		       2c 80 02 	      bit	SWCHA
   2164  f5fa		       70 0b		      BVS	.skipL070
   2165  f5fc				   .condpart10
   2166  f5fc		       a9 01		      LDA	#1
   2167  f5fe		       c5 81		      CMP	player1x
   2168  f600		       b0 05		      BCS	.skip10then
   2169  f602				   .condpart11
   2170  f602		       c6 81		      DEC	player1x
   2171  f604		       4c 17 f6 	      jmp	.__skip_joy
   2172  f607
   2173  f607				   .skip10then
   2174  f607				   .skipL070
   2175  f607				   .L071		;  if joy0right  &&  player1x	<  150 then player1x  =  player1x  +  1  :  goto __skip_joy
   2176  f607
   2177  f607		       2c 80 02 	      bit	SWCHA
   2178  f60a		       30 0b		      BMI	.skipL071
   2179  f60c				   .condpart12
   2180  f60c		       a5 81		      LDA	player1x
   2181  f60e		       c9 96		      CMP	#150
   2182  f610		       b0 05		      BCS	.skip12then
   2183  f612				   .condpart13
   2184  f612		       e6 81		      INC	player1x
   2185  f614		       4c 17 f6 	      jmp	.__skip_joy
   2186  f617
   2187  f617				   .skip12then
   2188  f617				   .skipL071
   2189  f617				   .
   2190  f617							; 
   2191  f617
   2192  f617				   .__skip_joy
   2193  f617							; __skip_joy
   2194  f617
   2195  f617				   .
   2196  f617							; 
   2197  f617
   2198  f617				   .
   2199  f617							; 
   2200  f617
   2201  f617				   .
   2202  f617							; 
   2203  f617
   2204  f617				   .L072		;  if !_bit_supressores{4} then gosub __nave
   2205  f617
   2206  f617		       a5 dd		      LDA	_bit_supressores
   2207  f619		       29 10		      AND	#16
   2208  f61b		       d0 03		      BNE	.skipL072
   2209  f61d				   .condpart14
   2210  f61d		       20 c5 fa 	      jsr	.__nave
   2211  f620
   2212  f620				   .skipL072
   2213  f620				   .L073		;  if _bit_supressores{4} then goto __skip_escudo
   2214  f620
   2215  f620		       a5 dd		      LDA	_bit_supressores
   2216  f622		       29 10		      AND	#16
   2217  f624		       f0 03		      BEQ	.skipL073
   2218  f626				   .condpart15
   2219  f626		       4c 4c f6 	      jmp	.__skip_escudo
   2220  f629
   2221  f629				   .skipL073
   2222  f629				   .L074		;  if pfscore1  =  0 then _bit_supressores{4}	=  0  :  goto __skip_escudo
   2223  f629
   2224  f629		       a5 f2		      LDA	pfscore1
   2225  f62b		       c9 00		      CMP	#0
   2226  f62d		       d0 09		      BNE	.skipL074
   2227  f62f				   .condpart16
   2228  f62f		       a5 dd		      LDA	_bit_supressores
   2229  f631		       29 ef		      AND	#239
   2230  f633		       85 dd		      STA	_bit_supressores
   2231  f635		       4c 4c f6 	      jmp	.__skip_escudo
   2232  f638
   2233  f638				   .skipL074
   2234  f638				   .L075		;  if joy0down then _bit_supressores{4}  =  1	:  e  =  40  :	goto __escudo
   2235  f638
   2236  f638		       a9 20		      lda	#$20
   2237  f63a		       2c 80 02 	      bit	SWCHA
   2238  f63d		       d0 0d		      BNE	.skipL075
   2239  f63f				   .condpart17
   2240  f63f		       a5 dd		      LDA	_bit_supressores
   2241  f641		       09 10		      ORA	#16
   2242  f643		       85 dd		      STA	_bit_supressores
   2243  f645		       a9 28		      LDA	#40
   2244  f647		       85 d8		      STA	e
   2245  f649		       4c b6 fa 	      jmp	.__escudo
   2246  f64c
   2247  f64c				   .skipL075
   2248  f64c				   .__skip_escudo
   2249  f64c							; __skip_escudo
   2250  f64c
   2251  f64c				   .
   2252  f64c							; 
   2253  f64c
   2254  f64c				   .
   2255  f64c							; 
   2256  f64c
   2257  f64c				   .L076		;  if missile1y  >  240 then _bit_supressores{1}  =  0  :  goto __skip_missile1
   2258  f64c
   2259  f64c		       a9 f0		      LDA	#240
   2260  f64e		       c5 88		      CMP	missile1y
   2261  f650		       b0 09		      BCS	.skipL076
   2262  f652				   .condpart18
   2263  f652		       a5 dd		      LDA	_bit_supressores
   2264  f654		       29 fd		      AND	#253
   2265  f656		       85 dd		      STA	_bit_supressores
   2266  f658		       4c 62 f6 	      jmp	.__skip_missile1
   2267  f65b
   2268  f65b				   .skipL076
   2269  f65b				   .L077		;  missile1y  =  missile1y  -	2
   2270  f65b
   2271  f65b		       a5 88		      LDA	missile1y
   2272  f65d		       38		      SEC
   2273  f65e		       e9 02		      SBC	#2
   2274  f660		       85 88		      STA	missile1y
   2275  f662				   .__skip_missile1
   2276  f662							; __skip_missile1
   2277  f662
   2278  f662				   .L078		;  if _bit_supressores{1} then __skip_fire
   2279  f662
   2280  f662		       a5 dd		      LDA	_bit_supressores
   2281  f664		       29 02		      AND	#2
   2282  f666		       d0 26		      bne	.__skip_fire
   2283  f668				   .L079		;  if joy0fire then AUDV0  =  0  :  _duracao_som0  =  10  :  _bit_supressores{1}  =  1  :  _bit_supressores{3}  =  1  :  missile1y  =	player1y  -  3 : missile1x  =  player1x  +  5
   2284  f668
   2285  f668		       24 0c		      bit	INPT4
   2286  f66a		       30 22		      BMI	.skipL079
   2287  f66c				   .condpart19
   2288  f66c		       a9 00		      LDA	#0
   2289  f66e		       85 19		      STA	AUDV0
   2290  f670		       a9 0a		      LDA	#10
   2291  f672		       85 d9		      STA	_duracao_som0
   2292  f674		       a5 dd		      LDA	_bit_supressores
   2293  f676		       09 02		      ORA	#2
   2294  f678		       85 dd		      STA	_bit_supressores
   2295  f67a		       a5 dd		      LDA	_bit_supressores
   2296  f67c		       09 08		      ORA	#8
   2297  f67e		       85 dd		      STA	_bit_supressores
   2298  f680		       a5 86		      LDA	player1y
   2299  f682		       38		      SEC
   2300  f683		       e9 03		      SBC	#3
   2301  f685		       85 88		      STA	missile1y
   2302  f687		       a5 81		      LDA	player1x
   2303  f689		       18		      CLC
   2304  f68a		       69 05		      ADC	#5
   2305  f68c		       85 83		      STA	missile1x
   2306  f68e				   .skipL079
   2307  f68e				   .__skip_fire
   2308  f68e							; __skip_fire
   2309  f68e
   2310  f68e				   .
   2311  f68e							; 
   2312  f68e
   2313  f68e				   .L080		;  gosub __regular
   2314  f68e
   2315  f68e		       20 08 f9 	      jsr	.__regular
   2316  f691
   2317  f691				   .
   2318  f691							; 
   2319  f691
   2320  f691				   .__fases
   2321  f691							; __fases
   2322  f691
   2323  f691				   .L081		;  if _cont_telas  >=	10  &&	!_bit_supressores{5} then _cont_telas  =  10  :  _bit_supressores{5}  =  1
   2324  f691
   2325  f691		       a5 e6		      LDA	_cont_telas
   2326  f693		       c9 0a		      CMP	#10
   2327  f695		       90 10		      BCC	.skipL081
   2328  f697				   .condpart20
   2329  f697		       a5 dd		      LDA	_bit_supressores
   2330  f699		       29 20		      AND	#32
   2331  f69b		       d0 0a		      BNE	.skip20then
   2332  f69d				   .condpart21
   2333  f69d		       a9 0a		      LDA	#10
   2334  f69f		       85 e6		      STA	_cont_telas
   2335  f6a1		       a5 dd		      LDA	_bit_supressores
   2336  f6a3		       09 20		      ORA	#32
   2337  f6a5		       85 dd		      STA	_bit_supressores
   2338  f6a7				   .skip20then
   2339  f6a7				   .skipL081
   2340  f6a7				   .L082		;  if _bit_supressores{5} then goto __transicao
   2341  f6a7
   2342  f6a7		       a5 dd		      LDA	_bit_supressores
   2343  f6a9		       29 20		      AND	#32
   2344  f6ab		       f0 03		      BEQ	.skipL082
   2345  f6ad				   .condpart22
   2346  f6ad		       4c 1c fb 	      jmp	.__transicao
   2347  f6b0
   2348  f6b0				   .skipL082
   2349  f6b0				   .
   2350  f6b0							; 
   2351  f6b0
   2352  f6b0				   .__skip_transicao
   2353  f6b0							; __skip_transicao
   2354  f6b0
   2355  f6b0				   .L083		;  if _fases  >  200 then _fases  =  0
   2356  f6b0
   2357  f6b0		       a9 c8		      LDA	#200
   2358  f6b2		       c5 e4		      CMP	_fases
   2359  f6b4		       b0 04		      BCS	.skipL083
   2360  f6b6				   .condpart23
   2361  f6b6		       a9 00		      LDA	#0
   2362  f6b8		       85 e4		      STA	_fases
   2363  f6ba				   .skipL083
   2364  f6ba				   .
   2365  f6ba							; 
   2366  f6ba
   2367  f6ba				   .L084		;  if _fases  =  0 then COLUPF  =  $00  :  COLUBK  =  $8A  :  gosub __inimigo_bomba  :  goto __skip_fase_inimigo
   2368  f6ba
   2369  f6ba		       a5 e4		      LDA	_fases
   2370  f6bc		       c9 00		      CMP	#0
   2371  f6be		       d0 0e		      BNE	.skipL084
   2372  f6c0				   .condpart24
   2373  f6c0		       a9 00		      LDA	#$00
   2374  f6c2		       85 08		      STA	COLUPF
   2375  f6c4		       a9 8a		      LDA	#$8A
   2376  f6c6		       85 09		      STA	COLUBK
   2377  f6c8		       20 d6 f9 	      jsr	.__inimigo_bomba
   2378  f6cb		       4c f0 f6 	      jmp	.__skip_fase_inimigo
   2379  f6ce
   2380  f6ce				   .skipL084
   2381  f6ce				   .
   2382  f6ce							; 
   2383  f6ce
   2384  f6ce				   .L085		;  if _fases  >=  1 then goto __fase1_inimigo
   2385  f6ce
   2386  f6ce		       a5 e4		      LDA	_fases
   2387  f6d0		       c9 01		      CMP	#1
   2388  f6d2		       90 03		      BCC	.skipL085
   2389  f6d4				   .condpart25
   2390  f6d4		       4c d7 f6 	      jmp	.__fase1_inimigo
   2391  f6d7
   2392  f6d7				   .skipL085
   2393  f6d7				   .__fase1_inimigo
   2394  f6d7							; __fase1_inimigo
   2395  f6d7
   2396  f6d7				   .L086		;  COLUPF  =  $04
   2397  f6d7
   2398  f6d7		       a9 04		      LDA	#$04
   2399  f6d9		       85 08		      STA	COLUPF
   2400  f6db				   .L087		;  COLUBK  =  $00
   2401  f6db
   2402  f6db		       a9 00		      LDA	#$00
   2403  f6dd		       85 09		      STA	COLUBK
   2404  f6df				   .L088		;  COLUP1  =  14
   2405  f6df
   2406  f6df		       a9 0e		      LDA	#14
   2407  f6e1		       85 07		      STA	COLUP1
   2408  f6e3				   .L089		;  if !_bit_supressores{7} then gosub __inimigo_tie else gosub __item_shield
   2409  f6e3
   2410  f6e3		       24 dd		      BIT	_bit_supressores
   2411  f6e5		       30 06		      BMI	.skipL089
   2412  f6e7				   .condpart26
   2413  f6e7		       20 4b fa 	      jsr	.__inimigo_tie
   2414  f6ea		       4c f0 f6 	      jmp	.skipelse1
   2415  f6ed				   .skipL089
   2416  f6ed		       20 f4 fa 	      jsr	.__item_shield
   2417  f6f0
   2418  f6f0				   .skipelse1
   2419  f6f0				   .
   2420  f6f0							; 
   2421  f6f0
   2422  f6f0				   .__skip_fase_inimigo
   2423  f6f0							; __skip_fase_inimigo
   2424  f6f0
   2425  f6f0				   .
   2426  f6f0							; 
   2427  f6f0
   2428  f6f0				   .L090		;  _animacao  =  _animacao  +	1
   2429  f6f0
   2430  f6f0		       e6 e1		      INC	_animacao
   2431  f6f2				   .L091		;  if _animacao  =  21 then _animacao	=  0
   2432  f6f2
   2433  f6f2		       a5 e1		      LDA	_animacao
   2434  f6f4		       c9 15		      CMP	#21
   2435  f6f6		       d0 04		      BNE	.skipL091
   2436  f6f8				   .condpart27
   2437  f6f8		       a9 00		      LDA	#0
   2438  f6fa		       85 e1		      STA	_animacao
   2439  f6fc				   .skipL091
   2440  f6fc				   .
   2441  f6fc							; 
   2442  f6fc
   2443  f6fc				   .L092		;  _cont_escudo  =  _cont_escudo  -  1
   2444  f6fc
   2445  f6fc		       c6 d8		      DEC	_cont_escudo
   2446  f6fe				   .L093		;  if _cont_escudo  =	0  &&  _bit_supressores{4} then pfscore1  =  pfscore1 / 4  :  _bit_supressores{4}  =  0
   2447  f6fe
   2448  f6fe		       a5 d8		      LDA	_cont_escudo
   2449  f700		       c9 00		      CMP	#0
   2450  f702		       d0 12		      BNE	.skipL093
   2451  f704				   .condpart28
   2452  f704		       a5 dd		      LDA	_bit_supressores
   2453  f706		       29 10		      AND	#16
   2454  f708		       f0 0c		      BEQ	.skip28then
   2455  f70a				   .condpart29
   2456  f70a		       a5 f2		      LDA	pfscore1
   2457  f70c		       4a		      lsr
   2458  f70d		       4a		      lsr
   2459  f70e		       85 f2		      STA	pfscore1
   2460  f710		       a5 dd		      LDA	_bit_supressores
   2461  f712		       29 ef		      AND	#239
   2462  f714		       85 dd		      STA	_bit_supressores
   2463  f716				   .skip28then
   2464  f716				   .skipL093
   2465  f716				   .
   2466  f716							; 
   2467  f716
   2468  f716				   .L094		;  if _fases  <  4 then c  =  d  +  8	:  goto __skip_dificuldade
   2469  f716
   2470  f716		       a5 e4		      LDA	_fases
   2471  f718		       c9 04		      CMP	#4
   2472  f71a		       b0 0a		      BCS	.skipL094
   2473  f71c				   .condpart30
   2474  f71c		       a5 d7		      LDA	d
   2475  f71e		       18		      CLC
   2476  f71f		       69 08		      ADC	#8
   2477  f721		       85 d6		      STA	c
   2478  f723		       4c 7f f7 	      jmp	.__skip_dificuldade
   2479  f726
   2480  f726				   .skipL094
   2481  f726				   .L095		;  if _fases  <  8 then goto __randomicos
   2482  f726
   2483  f726		       a5 e4		      LDA	_fases
   2484  f728		       c9 08		      CMP	#8
   2485  f72a		       b0 03		      BCS	.skipL095
   2486  f72c				   .condpart31
   2487  f72c		       4c 3f f7 	      jmp	.__randomicos
   2488  f72f
   2489  f72f				   .skipL095
   2490  f72f				   .L096		;  if _fases  <  100 then c  =  d  +  2  :  goto __skip_dificuldade
   2491  f72f
   2492  f72f		       a5 e4		      LDA	_fases
   2493  f731		       c9 64		      CMP	#100
   2494  f733		       b0 0a		      BCS	.skipL096
   2495  f735				   .condpart32
   2496  f735		       a5 d7		      LDA	d
   2497  f737		       18		      CLC
   2498  f738		       69 02		      ADC	#2
   2499  f73a		       85 d6		      STA	c
   2500  f73c		       4c 7f f7 	      jmp	.__skip_dificuldade
   2501  f73f
   2502  f73f				   .skipL096
   2503  f73f				   .
   2504  f73f							; 
   2505  f73f
   2506  f73f				   .__randomicos
   2507  f73f							; __randomicos
   2508  f73f
   2509  f73f				   .
   2510  f73f							; 
   2511  f73f
   2512  f73f				   .L097		;  if _dificuldade  =	0 then c  =  d	+  8  :  goto __skip_dificuldade
   2513  f73f
   2514  f73f		       a5 df		      LDA	_dificuldade
   2515  f741		       c9 00		      CMP	#0
   2516  f743		       d0 0a		      BNE	.skipL097
   2517  f745				   .condpart33
   2518  f745		       a5 d7		      LDA	d
   2519  f747		       18		      CLC
   2520  f748		       69 08		      ADC	#8
   2521  f74a		       85 d6		      STA	c
   2522  f74c		       4c 7f f7 	      jmp	.__skip_dificuldade
   2523  f74f
   2524  f74f				   .skipL097
   2525  f74f				   .L098		;  if _dificuldade  =	1 then c  =  d	+  6  :  goto __skip_dificuldade
   2526  f74f
   2527  f74f		       a5 df		      LDA	_dificuldade
   2528  f751		       c9 01		      CMP	#1
   2529  f753		       d0 0a		      BNE	.skipL098
   2530  f755				   .condpart34
   2531  f755		       a5 d7		      LDA	d
   2532  f757		       18		      CLC
   2533  f758		       69 06		      ADC	#6
   2534  f75a		       85 d6		      STA	c
   2535  f75c		       4c 7f f7 	      jmp	.__skip_dificuldade
   2536  f75f
   2537  f75f				   .skipL098
   2538  f75f				   .L099		;  if _dificuldade  =	2 then c  =  d	+  4  :  goto __skip_dificuldade
   2539  f75f
   2540  f75f		       a5 df		      LDA	_dificuldade
   2541  f761		       c9 02		      CMP	#2
   2542  f763		       d0 0a		      BNE	.skipL099
   2543  f765				   .condpart35
   2544  f765		       a5 d7		      LDA	d
   2545  f767		       18		      CLC
   2546  f768		       69 04		      ADC	#4
   2547  f76a		       85 d6		      STA	c
   2548  f76c		       4c 7f f7 	      jmp	.__skip_dificuldade
   2549  f76f
   2550  f76f				   .skipL099
   2551  f76f				   .L0100		;  if _dificuldade  =	3 then c  =  d	+  2  :  goto __skip_dificuldade
   2552  f76f
   2553  f76f		       a5 df		      LDA	_dificuldade
   2554  f771		       c9 03		      CMP	#3
   2555  f773		       d0 0a		      BNE	.skipL0100
   2556  f775				   .condpart36
   2557  f775		       a5 d7		      LDA	d
   2558  f777		       18		      CLC
   2559  f778		       69 02		      ADC	#2
   2560  f77a		       85 d6		      STA	c
   2561  f77c		       4c 7f f7 	      jmp	.__skip_dificuldade
   2562  f77f
   2563  f77f				   .skipL0100
   2564  f77f				   .
   2565  f77f							; 
   2566  f77f
   2567  f77f				   .__skip_dificuldade
   2568  f77f							; __skip_dificuldade
   2569  f77f
   2570  f77f				   .
   2571  f77f							; 
   2572  f77f
   2573  f77f				   .
   2574  f77f							; 
   2575  f77f
   2576  f77f				   .
   2577  f77f							; 
   2578  f77f
   2579  f77f				   .L0101		;  pfhline d 1 c off
   2580  f77f
   2581  f77f		       a2 01		      LDX	#1
   2582  f781		       a5 d6		      LDA	c
   2583  f783		       85 9e		      STA	temp3
   2584  f785		       a0 01		      LDY	#1
   2585  f787		       a5 d7		      LDA	d
   2586  f789		       20 89 f2 	      jsr	pfhline
   2587  f78c				   .
   2588  f78c							; 
   2589  f78c
   2590  f78c				   .
   2591  f78c							; 
   2592  f78c
   2593  f78c				   .L0102		;  goto __pfscroll
   2594  f78c
   2595  f78c		       4c 00 f9 	      jmp	.__pfscroll
   2596  f78f
   2597  f78f				   .
   2598  f78f							; 
   2599  f78f
   2600  f78f				   .__skip_scroll
   2601  f78f							; __skip_scroll
   2602  f78f
   2603  f78f				   .
   2604  f78f							; 
   2605  f78f
   2606  f78f				   .__skip_perde_vida
   2607  f78f							; __skip_perde_vida
   2608  f78f
   2609  f78f				   .
   2610  f78f							; 
   2611  f78f
   2612  f78f				   .
   2613  f78f							; 
   2614  f78f
   2615  f78f				   .L0103		;  if _bit_supressores{4} then goto __skip_collision  :  rem se escudo on pula as colisoes
   2616  f78f
   2617  f78f		       a5 dd		      LDA	_bit_supressores
   2618  f791		       29 10		      AND	#16
   2619  f793		       f0 03		      BEQ	.skipL0103
   2620  f795				   .condpart37
   2621  f795		       4c ce f7 	      jmp	.__skip_collision
   2622  f798				   .skipL0103
   2623  f798				   .
   2624  f798							; 
   2625  f798
   2626  f798				   .L0104		;  if collision(ball,player1) then _duracao_som0  =  80  :  pfscore2  =  pfscore2 / 4	:  goto __perde_vida
   2627  f798
   2628  f798		       24 03		      bit	CXP1FB
   2629  f79a		       50 0d		      BVC	.skipL0104
   2630  f79c				   .condpart38
   2631  f79c		       a9 50		      LDA	#80
   2632  f79e		       85 d9		      STA	_duracao_som0
   2633  f7a0		       a5 f3		      LDA	pfscore2
   2634  f7a2		       4a		      lsr
   2635  f7a3		       4a		      lsr
   2636  f7a4		       85 f3		      STA	pfscore2
   2637  f7a6		       4c 44 f9 	      jmp	.__perde_vida
   2638  f7a9
   2639  f7a9				   .skipL0104
   2640  f7a9				   .L0105		;  if collision(ball,missile1) then bally  =  100  :  missile1y  =  0
   2641  f7a9
   2642  f7a9		       24 05		      bit	CXM1FB
   2643  f7ab		       50 08		      BVC	.skipL0105
   2644  f7ad				   .condpart39
   2645  f7ad		       a9 64		      LDA	#100
   2646  f7af		       85 89		      STA	bally
   2647  f7b1		       a9 00		      LDA	#0
   2648  f7b3		       85 88		      STA	missile1y
   2649  f7b5				   .skipL0105
   2650  f7b5				   .L0106		;  if collision(player1,playfield) then _duracao_som0	=  80  :  pfscore2  =  pfscore2 / 4  :	goto __perde_vida
   2651  f7b5
   2652  f7b5		       24 03		      bit	CXP1FB
   2653  f7b7		       10 0d		      BPL	.skipL0106
   2654  f7b9				   .condpart40
   2655  f7b9		       a9 50		      LDA	#80
   2656  f7bb		       85 d9		      STA	_duracao_som0
   2657  f7bd		       a5 f3		      LDA	pfscore2
   2658  f7bf		       4a		      lsr
   2659  f7c0		       4a		      lsr
   2660  f7c1		       85 f3		      STA	pfscore2
   2661  f7c3		       4c 44 f9 	      jmp	.__perde_vida
   2662  f7c6
   2663  f7c6				   .skipL0106
   2664  f7c6				   .L0107		;  if collision(missile1,playfield) then missile1y  =	1
   2665  f7c6
   2666  f7c6		       24 05		      bit	CXM1FB
   2667  f7c8		       10 04		      BPL	.skipL0107
   2668  f7ca				   .condpart41
   2669  f7ca		       a9 01		      LDA	#1
   2670  f7cc		       85 88		      STA	missile1y
   2671  f7ce				   .skipL0107
   2672  f7ce				   .
   2673  f7ce							; 
   2674  f7ce
   2675  f7ce				   .
   2676  f7ce							; 
   2677  f7ce
   2678  f7ce				   .__skip_collision
   2679  f7ce							; __skip_collision
   2680  f7ce
   2681  f7ce				   .
   2682  f7ce							; 
   2683  f7ce
   2684  f7ce				   .
   2685  f7ce							; 
   2686  f7ce
   2687  f7ce				   .L0108		;  if _fases  =  0 then goto __fase0
   2688  f7ce
   2689  f7ce		       a5 e4		      LDA	_fases
   2690  f7d0		       c9 00		      CMP	#0
   2691  f7d2		       d0 03		      BNE	.skipL0108
   2692  f7d4				   .condpart42
   2693  f7d4		       4c e0 f7 	      jmp	.__fase0
   2694  f7d7
   2695  f7d7				   .skipL0108
   2696  f7d7				   .L0109		;  if _fases  >=  1 then goto __fase1
   2697  f7d7
   2698  f7d7		       a5 e4		      LDA	_fases
   2699  f7d9		       c9 01		      CMP	#1
   2700  f7db		       90 03		      BCC	.skipL0109
   2701  f7dd				   .condpart43
   2702  f7dd		       4c 1b f8 	      jmp	.__fase1
   2703  f7e0
   2704  f7e0				   .skipL0109
   2705  f7e0				   .
   2706  f7e0							; 
   2707  f7e0
   2708  f7e0				   .
   2709  f7e0							; 
   2710  f7e0
   2711  f7e0				   .__fase0
   2712  f7e0							; __fase0
   2713  f7e0
   2714  f7e0				   .L0110		;  if collision(missile1,player0) then missile1y  =  0  :  bally = 0  :  _bit_supressores{3}  =  0  :	_duracao_som0  =  10  :  score	=  score  +  100  :  player0y  =  0
   2715  f7e0
   2716  f7e0		       24 01		      bit	CXM1P
   2717  f7e2		       10 23		      BPL	.skipL0110
   2718  f7e4				   .condpart44
   2719  f7e4		       a9 00		      LDA	#0
   2720  f7e6		       85 88		      STA	missile1y
   2721  f7e8		       85 89		      STA	bally
   2722  f7ea		       a5 dd		      LDA	_bit_supressores
   2723  f7ec		       29 f7		      AND	#247
   2724  f7ee		       85 dd		      STA	_bit_supressores
   2725  f7f0		       a9 0a		      LDA	#10
   2726  f7f2		       85 d9		      STA	_duracao_som0
   2727  f7f4		       f8		      SED
   2728  f7f5		       18		      CLC
   2729  f7f6		       a5 94		      LDA	score+1
   2730  f7f8		       69 01		      ADC	#$01
   2731  f7fa		       85 94		      STA	score+1
   2732  f7fc		       a5 93		      LDA	score
   2733  f7fe		       69 00		      ADC	#$00
   2734  f800		       85 93		      STA	score
   2735  f802		       d8		      CLD
   2736  f803		       a9 00		      LDA	#0
   2737  f805		       85 85		      STA	player0y
   2738  f807				   .skipL0110
   2739  f807				   .L0111		;  if collision(player0,player1) then _duracao_som0  =  80  :	pfscore2  =  pfscore2 / 4  :  goto __perde_vida
   2740  f807
   2741  f807		       24 07		      bit	CXPPMM
   2742  f809		       10 0d		      BPL	.skipL0111
   2743  f80b				   .condpart45
   2744  f80b		       a9 50		      LDA	#80
   2745  f80d		       85 d9		      STA	_duracao_som0
   2746  f80f		       a5 f3		      LDA	pfscore2
   2747  f811		       4a		      lsr
   2748  f812		       4a		      lsr
   2749  f813		       85 f3		      STA	pfscore2
   2750  f815		       4c 44 f9 	      jmp	.__perde_vida
   2751  f818
   2752  f818				   .skipL0111
   2753  f818				   .L0112		;  goto __skip_collision_fases
   2754  f818
   2755  f818		       4c 8f f8 	      jmp	.__skip_collision_fases
   2756  f81b
   2757  f81b				   .__fase1
   2758  f81b							; __fase1
   2759  f81b
   2760  f81b				   .L0113		;  if _bit_supressores{7} then goto __collision_itemshield
   2761  f81b
   2762  f81b		       24 dd		      BIT	_bit_supressores
   2763  f81d		       10 03		      BPL	.skipL0113
   2764  f81f				   .condpart46
   2765  f81f		       4c 5f f8 	      jmp	.__collision_itemshield
   2766  f822
   2767  f822				   .skipL0113
   2768  f822				   .
   2769  f822							; 
   2770  f822
   2771  f822				   .L0114		;  if collision(missile1,player0) then missile1y  =  0  :  bally = 0  : _bit_supressores{3}  =  0  :  _duracao_som0  =  10  :	score  =  score  +  100  :  _bit_supressores{7}  =  1
   2772  f822
   2773  f822		       24 01		      bit	CXM1P
   2774  f824		       10 25		      BPL	.skipL0114
   2775  f826				   .condpart47
   2776  f826		       a9 00		      LDA	#0
   2777  f828		       85 88		      STA	missile1y
   2778  f82a		       85 89		      STA	bally
   2779  f82c		       a5 dd		      LDA	_bit_supressores
   2780  f82e		       29 f7		      AND	#247
   2781  f830		       85 dd		      STA	_bit_supressores
   2782  f832		       a9 0a		      LDA	#10
   2783  f834		       85 d9		      STA	_duracao_som0
   2784  f836		       f8		      SED
   2785  f837		       18		      CLC
   2786  f838		       a5 94		      LDA	score+1
   2787  f83a		       69 01		      ADC	#$01
   2788  f83c		       85 94		      STA	score+1
   2789  f83e		       a5 93		      LDA	score
   2790  f840		       69 00		      ADC	#$00
   2791  f842		       85 93		      STA	score
   2792  f844		       d8		      CLD
   2793  f845		       a5 dd		      LDA	_bit_supressores
   2794  f847		       09 80		      ORA	#128
   2795  f849		       85 dd		      STA	_bit_supressores
   2796  f84b				   .skipL0114
   2797  f84b				   .L0115		;  if collision(player0,player1) then _duracao_som0  =  80  :	pfscore2  =  pfscore2 / 4  :  goto __perde_vida
   2798  f84b
   2799  f84b		       24 07		      bit	CXPPMM
   2800  f84d		       10 0d		      BPL	.skipL0115
   2801  f84f				   .condpart48
   2802  f84f		       a9 50		      LDA	#80
   2803  f851		       85 d9		      STA	_duracao_som0
   2804  f853		       a5 f3		      LDA	pfscore2
   2805  f855		       4a		      lsr
   2806  f856		       4a		      lsr
   2807  f857		       85 f3		      STA	pfscore2
   2808  f859		       4c 44 f9 	      jmp	.__perde_vida
   2809  f85c
   2810  f85c				   .skipL0115
   2811  f85c				   .L0116		;  goto __skip_collision_fases
   2812  f85c
   2813  f85c		       4c 8f f8 	      jmp	.__skip_collision_fases
   2814  f85f
   2815  f85f				   .
   2816  f85f							; 
   2817  f85f
   2818  f85f				   .__collision_itemshield
   2819  f85f							; __collision_itemshield
   2820  f85f
   2821  f85f				   .L0117		;  if collision(missile1,player0) then missile1y  =  0  :  bally = 0  :  _bit_supressores{3}  =  0  :	_duracao_som0  =  10  :  _bit_supressores{7}  =  0  :  player0y  =  0
   2822  f85f
   2823  f85f		       24 01		      bit	CXM1P
   2824  f861		       10 1a		      BPL	.skipL0117
   2825  f863				   .condpart49
   2826  f863		       a9 00		      LDA	#0
   2827  f865		       85 88		      STA	missile1y
   2828  f867		       85 89		      STA	bally
   2829  f869		       a5 dd		      LDA	_bit_supressores
   2830  f86b		       29 f7		      AND	#247
   2831  f86d		       85 dd		      STA	_bit_supressores
   2832  f86f		       a9 0a		      LDA	#10
   2833  f871		       85 d9		      STA	_duracao_som0
   2834  f873		       a5 dd		      LDA	_bit_supressores
   2835  f875		       29 7f		      AND	#127
   2836  f877		       85 dd		      STA	_bit_supressores
   2837  f879		       a9 00		      LDA	#0
   2838  f87b		       85 85		      STA	player0y
   2839  f87d				   .skipL0117
   2840  f87d				   .L0118		;  if collision(player0,player1) then player0y  =  0  :  _bit_supressores{7}  =  0  :	pfscore1  =  %00010101
   2841  f87d
   2842  f87d		       24 07		      bit	CXPPMM
   2843  f87f		       10 0e		      BPL	.skipL0118
   2844  f881				   .condpart50
   2845  f881		       a9 00		      LDA	#0
   2846  f883		       85 85		      STA	player0y
   2847  f885		       a5 dd		      LDA	_bit_supressores
   2848  f887		       29 7f		      AND	#127
   2849  f889		       85 dd		      STA	_bit_supressores
   2850  f88b		       a9 15		      LDA	#%00010101
   2851  f88d		       85 f2		      STA	pfscore1
   2852  f88f				   .skipL0118
   2853  f88f				   .
   2854  f88f							; 
   2855  f88f
   2856  f88f				   .__skip_collision_fases
   2857  f88f							; __skip_collision_fases
   2858  f88f
   2859  f88f				   .L0119		;  drawscreen
   2860  f88f
   2861  f88f		       20 cc f3 	      jsr	drawscreen
   2862  f892				   .
   2863  f892							; 
   2864  f892
   2865  f892				   .L0120		;  if _bit_supressores{3} then goto __skip_som_morte_inimigo
   2866  f892
   2867  f892		       a5 dd		      LDA	_bit_supressores
   2868  f894		       29 08		      AND	#8
   2869  f896		       f0 03		      BEQ	.skipL0120
   2870  f898				   .condpart51
   2871  f898		       4c b6 f8 	      jmp	.__skip_som_morte_inimigo
   2872  f89b
   2873  f89b				   .skipL0120
   2874  f89b				   .L0121		;  if _duracao_som0  =  0 then AUDV0  =  0  :	goto __skip_som_morte_inimigo
   2875  f89b
   2876  f89b		       a5 d9		      LDA	_duracao_som0
   2877  f89d		       c9 00		      CMP	#0
   2878  f89f		       d0 07		      BNE	.skipL0121
   2879  f8a1				   .condpart52
   2880  f8a1		       a9 00		      LDA	#0
   2881  f8a3		       85 19		      STA	AUDV0
   2882  f8a5		       4c b6 f8 	      jmp	.__skip_som_morte_inimigo
   2883  f8a8
   2884  f8a8				   .skipL0121
   2885  f8a8				   .
   2886  f8a8							; 
   2887  f8a8
   2888  f8a8				   .L0122		;  AUDV0  =  15  :  rem volume
   2889  f8a8
   2890  f8a8		       a9 0f		      LDA	#15
   2891  f8aa		       85 19		      STA	AUDV0
   2892  f8ac				   .L0123		;  AUDC0  =  12  :  rem tom
   2893  f8ac
   2894  f8ac		       a9 0c		      LDA	#12
   2895  f8ae		       85 15		      STA	AUDC0
   2896  f8b0				   .L0124		;  AUDF0  =  10  :  rem distorcao
   2897  f8b0
   2898  f8b0		       a9 0a		      LDA	#10
   2899  f8b2		       85 17		      STA	AUDF0
   2900  f8b4				   .L0125		;  _duracao_som0  =  _duracao_som0  -	1
   2901  f8b4
   2902  f8b4		       c6 d9		      DEC	_duracao_som0
   2903  f8b6				   .__skip_som_morte_inimigo
   2904  f8b6							; __skip_som_morte_inimigo
   2905  f8b6
   2906  f8b6				   .
   2907  f8b6							; 
   2908  f8b6
   2909  f8b6				   .
   2910  f8b6							; 
   2911  f8b6
   2912  f8b6				   .L0126		;  if !_bit_supressores{3} then goto __skip_som_tiro
   2913  f8b6
   2914  f8b6		       a5 dd		      LDA	_bit_supressores
   2915  f8b8		       29 08		      AND	#8
   2916  f8ba		       d0 03		      BNE	.skipL0126
   2917  f8bc				   .condpart53
   2918  f8bc		       4c e0 f8 	      jmp	.__skip_som_tiro
   2919  f8bf
   2920  f8bf				   .skipL0126
   2921  f8bf				   .L0127		;  if _duracao_som0  =  0 then AUDV0  =  0  :	_bit_supressores{3}  =	0  :  goto __skip_som_tiro
   2922  f8bf
   2923  f8bf		       a5 d9		      LDA	_duracao_som0
   2924  f8c1		       c9 00		      CMP	#0
   2925  f8c3		       d0 0d		      BNE	.skipL0127
   2926  f8c5				   .condpart54
   2927  f8c5		       a9 00		      LDA	#0
   2928  f8c7		       85 19		      STA	AUDV0
   2929  f8c9		       a5 dd		      LDA	_bit_supressores
   2930  f8cb		       29 f7		      AND	#247
   2931  f8cd		       85 dd		      STA	_bit_supressores
   2932  f8cf		       4c e0 f8 	      jmp	.__skip_som_tiro
   2933  f8d2
   2934  f8d2				   .skipL0127
   2935  f8d2				   .L0128		;  AUDV0 = 15	:  rem volume
   2936  f8d2
   2937  f8d2		       a9 0f		      LDA	#15
   2938  f8d4		       85 19		      STA	AUDV0
   2939  f8d6				   .L0129		;  AUDC0  =  8  :  rem tom
   2940  f8d6
   2941  f8d6		       a9 08		      LDA	#8
   2942  f8d8		       85 15		      STA	AUDC0
   2943  f8da				   .L0130		;  AUDF0  =  8  :  rem distorcao
   2944  f8da
   2945  f8da		       a9 08		      LDA	#8
   2946  f8dc		       85 17		      STA	AUDF0
   2947  f8de				   .L0131		;  _duracao_som0  =  _duracao_som0  -	1
   2948  f8de
   2949  f8de		       c6 d9		      DEC	_duracao_som0
   2950  f8e0				   .__skip_som_tiro
   2951  f8e0							; __skip_som_tiro
   2952  f8e0
   2953  f8e0				   .
   2954  f8e0							; 
   2955  f8e0
   2956  f8e0				   .
   2957  f8e0							; 
   2958  f8e0
   2959  f8e0				   .L0132		;  if switchreset then goto __reset_game
   2960  f8e0
   2961  f8e0		       a9 01		      lda	#1
   2962  f8e2		       2c 82 02 	      bit	SWCHB
   2963  f8e5		       d0 03		      BNE	.skipL0132
   2964  f8e7				   .condpart55
   2965  f8e7		       4c 6c f4 	      jmp	.__reset_game
   2966  f8ea
   2967  f8ea				   .skipL0132
   2968  f8ea				   .L0133		;  goto __Main_Loop
   2969  f8ea
   2970  f8ea		       4c ad f5 	      jmp	.__Main_Loop
   2971  f8ed
   2972  f8ed				   .
   2973  f8ed							; 
   2974  f8ed
   2975  f8ed				   .
   2976  f8ed							; 
   2977  f8ed
   2978  f8ed				   .
   2979  f8ed							; 
   2980  f8ed
   2981  f8ed				   .__game_over
   2982  f8ed							; __game_over
   2983  f8ed
   2984  f8ed				   .L0134		;  gosub __playfield_regular
   2985  f8ed
   2986  f8ed		       20 91 fb 	      jsr	.__playfield_regular
   2987  f8f0
   2988  f8f0				   .L0135		;  drawscreen
   2989  f8f0
   2990  f8f0		       20 cc f3 	      jsr	drawscreen
   2991  f8f3				   .L0136		;  if !switchreset then goto __game_over
   2992  f8f3
   2993  f8f3		       a9 01		      lda	#1
   2994  f8f5		       2c 82 02 	      bit	SWCHB
   2995  f8f8		       f0 03		      BEQ	.skipL0136
   2996  f8fa				   .condpart56
   2997  f8fa		       4c ed f8 	      jmp	.__game_over
   2998  f8fd
   2999  f8fd				   .skipL0136
   3000  f8fd				   .L0137		;  goto __reset_game
   3001  f8fd
   3002  f8fd		       4c 6c f4 	      jmp	.__reset_game
   3003  f900
   3004  f900				   .
   3005  f900							; 
   3006  f900
   3007  f900				   .__pfscroll
   3008  f900							; __pfscroll
   3009  f900
   3010  f900				   .L0138		;  pfscroll down
   3011  f900
   3012  f900		       a9 04		      LDA	#4
   3013  f902		       20 fe f2 	      jsr	pfscroll
   3014  f905				   .L0139		;  goto __skip_scroll
   3015  f905
   3016  f905		       4c 8f f7 	      jmp	.__skip_scroll
   3017  f908
   3018  f908				   .
   3019  f908							; 
   3020  f908
   3021  f908				   .
   3022  f908							; 
   3023  f908
   3024  f908				   .__regular
   3025  f908							; __regular
   3026  f908
   3027  f908				   .
   3028  f908							; 
   3029  f908
   3030  f908				   .L0140		;  if !pfread ( 0 , 11 )  then _dificuldade  =   ( rand & 3 )	 :  goto __redesenha else return thisbank
   3031  f908
   3032  f908		       a9 00		      LDA	#0
   3033  f90a		       a0 0b		      LDY	#11
   3034  f90c		       20 76 f2 	      jsr	pfread
   3035  f90f		       f0 0d		      BEQ	.skipL0140
   3036  f911				   .condpart57
   3037  f911							; complex statement detected
   3038  f911		       20 be f3 	      jsr	randomize
   3039  f914		       29 03		      AND	#3
   3040  f916		       85 df		      STA	_dificuldade
   3041  f918		       4c 1f f9 	      jmp	.__redesenha
   3042  f91b		       4c 1f f9 	      jmp	.skipelse2
   3043  f91e				   .skipL0140
   3044  f91e		       60		      RTS
   3045  f91f				   .skipelse2
   3046  f91f				   .
   3047  f91f							; 
   3048  f91f
   3049  f91f				   .__redesenha
   3050  f91f							; __redesenha
   3051  f91f
   3052  f91f				   .L0141		;  if player1x  >  19	&&  player1x  <  134 then _cont_telas  =  _cont_telas  +  1
   3053  f91f
   3054  f91f		       a9 13		      LDA	#19
   3055  f921		       c5 81		      CMP	player1x
   3056  f923		       b0 08		      BCS	.skipL0141
   3057  f925				   .condpart58
   3058  f925		       a5 81		      LDA	player1x
   3059  f927		       c9 86		      CMP	#134
   3060  f929		       b0 02		      BCS	.skip58then
   3061  f92b				   .condpart59
   3062  f92b		       e6 e6		      INC	_cont_telas
   3063  f92d				   .skip58then
   3064  f92d				   .skipL0141
   3065  f92d				   .L0142		;  d  =   ( rand / 16 )   +  1
   3066  f92d
   3067  f92d							; complex statement detected
   3068  f92d		       20 be f3 	      jsr	randomize
   3069  f930		       4a		      lsr
   3070  f931		       4a		      lsr
   3071  f932		       4a		      lsr
   3072  f933		       4a		      lsr
   3073  f934		       18		      CLC
   3074  f935		       69 01		      ADC	#1
   3075  f937		       85 d7		      STA	d
   3076  f939				   .L0143		;  d  =  d  +	2
   3077  f939
   3078  f939		       a5 d7		      LDA	d
   3079  f93b		       18		      CLC
   3080  f93c		       69 02		      ADC	#2
   3081  f93e		       85 d7		      STA	d
   3082  f940				   .L0144		;  gosub __playfield_regular
   3083  f940
   3084  f940		       20 91 fb 	      jsr	.__playfield_regular
   3085  f943
   3086  f943				   .
   3087  f943							; 
   3088  f943
   3089  f943				   .L0145		;  return thisbank
   3090  f943
   3091  f943		       60		      RTS
   3092  f944				   .
   3093  f944							; 
   3094  f944
   3095  f944				   .
   3096  f944							; 
   3097  f944
   3098  f944				   .__perde_vida
   3099  f944							; __perde_vida
   3100  f944
   3101  f944				   .L0146		;  gosub __playfield_regular
   3102  f944
   3103  f944		       20 91 fb 	      jsr	.__playfield_regular
   3104  f947
   3105  f947				   .L0147		;  bally  =  0
   3106  f947
   3107  f947		       a9 00		      LDA	#0
   3108  f949		       85 89		      STA	bally
   3109  f94b				   .L0148		;  missile1y  =  0
   3110  f94b
   3111  f94b		       a9 00		      LDA	#0
   3112  f94d		       85 88		      STA	missile1y
   3113  f94f				   .L0149		;  COLUPF  =  10
   3114  f94f
   3115  f94f		       a9 0a		      LDA	#10
   3116  f951		       85 08		      STA	COLUPF
   3117  f953				   .L0150		;  COLUBK  =  25
   3118  f953
   3119  f953		       a9 19		      LDA	#25
   3120  f955		       85 09		      STA	COLUBK
   3121  f957				   .L0151		;  COLUP1  =  $40
   3122  f957
   3123  f957		       a9 40		      LDA	#$40
   3124  f959		       85 07		      STA	COLUP1
   3125  f95b				   .L0152		;  player0y  =  0
   3126  f95b
   3127  f95b		       a9 00		      LDA	#0
   3128  f95d		       85 85		      STA	player0y
   3129  f95f				   .L0153		;  _cont_anima_morte  =  _cont_anima_morte  +	1
   3130  f95f
   3131  f95f		       e6 e5		      INC	_cont_anima_morte
   3132  f961				   .
   3133  f961							; 
   3134  f961
   3135  f961				   .L0154		;  if _cont_anima_morte  =  20 then player1:
   3136  f961
   3137  f961		       a5 e5		      LDA	_cont_anima_morte
   3138  f963		       c9 14		      CMP	#20
   3139  f965		       d0 0c		      BNE	.skipL0154
   3140  f967				   .condpart60
   3141  f967		       a2 da		      LDX	#<player60then_1
   3142  f969		       86 8c		      STX	player1pointerlo
   3143  f96b		       a9 fc		      LDA	#>player60then_1
   3144  f96d		       85 8d		      STA	player1pointerhi
   3145  f96f		       a9 05		      LDA	#5
   3146  f971		       85 8f		      STA	player1height
   3147  f973				   .skipL0154
   3148  f973				   .L0155		;  if _cont_anima_morte  =  40 then player1:
   3149  f973
   3150  f973		       a5 e5		      LDA	_cont_anima_morte
   3151  f975		       c9 28		      CMP	#40
   3152  f977		       d0 0c		      BNE	.skipL0155
   3153  f979				   .condpart61
   3154  f979		       a2 e0		      LDX	#<player61then_1
   3155  f97b		       86 8c		      STX	player1pointerlo
   3156  f97d		       a9 fc		      LDA	#>player61then_1
   3157  f97f		       85 8d		      STA	player1pointerhi
   3158  f981		       a9 05		      LDA	#5
   3159  f983		       85 8f		      STA	player1height
   3160  f985				   .skipL0155
   3161  f985				   .L0156		;  drawscreen
   3162  f985
   3163  f985		       20 cc f3 	      jsr	drawscreen
   3164  f988				   .
   3165  f988							; 
   3166  f988
   3167  f988				   .L0157		;  if _cont_anima_morte  =  40 then _cont_anima_morte	=  0
   3168  f988
   3169  f988		       a5 e5		      LDA	_cont_anima_morte
   3170  f98a		       c9 28		      CMP	#40
   3171  f98c		       d0 04		      BNE	.skipL0157
   3172  f98e				   .condpart62
   3173  f98e		       a9 00		      LDA	#0
   3174  f990		       85 e5		      STA	_cont_anima_morte
   3175  f992				   .skipL0157
   3176  f992				   .
   3177  f992							; 
   3178  f992
   3179  f992				   .
   3180  f992							; 
   3181  f992
   3182  f992				   .L0158		;  if _duracao_som0  =  0 then AUDV0  =  0  :	goto __skip_som_explosao
   3183  f992
   3184  f992		       a5 d9		      LDA	_duracao_som0
   3185  f994		       c9 00		      CMP	#0
   3186  f996		       d0 07		      BNE	.skipL0158
   3187  f998				   .condpart63
   3188  f998		       a9 00		      LDA	#0
   3189  f99a		       85 19		      STA	AUDV0
   3190  f99c		       4c ad f9 	      jmp	.__skip_som_explosao
   3191  f99f
   3192  f99f				   .skipL0158
   3193  f99f				   .L0159		;  _duracao_som0  =  _duracao_som0  -	1
   3194  f99f
   3195  f99f		       c6 d9		      DEC	_duracao_som0
   3196  f9a1				   .L0160		;  AUDV0  =  8  :  rem volume
   3197  f9a1
   3198  f9a1		       a9 08		      LDA	#8
   3199  f9a3		       85 19		      STA	AUDV0
   3200  f9a5				   .L0161		;  AUDC0  =  8 :  rem tom
   3201  f9a5
   3202  f9a5		       a9 08		      LDA	#8
   3203  f9a7		       85 15		      STA	AUDC0
   3204  f9a9				   .L0162		;  AUDF0  =  25  :  rem distorcao
   3205  f9a9
   3206  f9a9		       a9 19		      LDA	#25
   3207  f9ab		       85 17		      STA	AUDF0
   3208  f9ad				   .__skip_som_explosao
   3209  f9ad							; __skip_som_explosao
   3210  f9ad
   3211  f9ad				   .L0163		;  if pfscore2  =  %00000000 then goto __skip_reinicia_joy
   3212  f9ad
   3213  f9ad		       a5 f3		      LDA	pfscore2
   3214  f9af		       c9 00		      CMP	#%00000000
   3215  f9b1		       d0 03		      BNE	.skipL0163
   3216  f9b3				   .condpart64
   3217  f9b3		       4c c9 f9 	      jmp	.__skip_reinicia_joy
   3218  f9b6
   3219  f9b6				   .skipL0163
   3220  f9b6				   .L0164		;  if joy0fire then _animacao	=  10  :  _duracao_som0  =  0  :  player1x  =  80  :  goto __skip_perde_vida
   3221  f9b6
   3222  f9b6		       24 0c		      bit	INPT4
   3223  f9b8		       30 0f		      BMI	.skipL0164
   3224  f9ba				   .condpart65
   3225  f9ba		       a9 0a		      LDA	#10
   3226  f9bc		       85 e1		      STA	_animacao
   3227  f9be		       a9 00		      LDA	#0
   3228  f9c0		       85 d9		      STA	_duracao_som0
   3229  f9c2		       a9 50		      LDA	#80
   3230  f9c4		       85 81		      STA	player1x
   3231  f9c6		       4c 8f f7 	      jmp	.__skip_perde_vida
   3232  f9c9
   3233  f9c9				   .skipL0164
   3234  f9c9				   .__skip_reinicia_joy
   3235  f9c9							; __skip_reinicia_joy
   3236  f9c9
   3237  f9c9				   .L0165		;  if !switchreset then goto __perde_vida
   3238  f9c9
   3239  f9c9		       a9 01		      lda	#1
   3240  f9cb		       2c 82 02 	      bit	SWCHB
   3241  f9ce		       f0 03		      BEQ	.skipL0165
   3242  f9d0				   .condpart66
   3243  f9d0		       4c 44 f9 	      jmp	.__perde_vida
   3244  f9d3
   3245  f9d3				   .skipL0165
   3246  f9d3				   .L0166		;  goto __reset_game
   3247  f9d3
   3248  f9d3		       4c 6c f4 	      jmp	.__reset_game
   3249  f9d6
   3250  f9d6				   .
   3251  f9d6							; 
   3252  f9d6
   3253  f9d6				   .
   3254  f9d6							; 
   3255  f9d6
   3256  f9d6				   .__inimigo_bomba
   3257  f9d6							; __inimigo_bomba
   3258  f9d6
   3259  f9d6				   .L0167		;  COLUP0  =  $40
   3260  f9d6
   3261  f9d6		       a9 40		      LDA	#$40
   3262  f9d8		       85 06		      STA	COLUP0
   3263  f9da				   .L0168		;  player0:
   3264  f9da
   3265  f9da		       a2 e6		      LDX	#<playerL0168_0
   3266  f9dc		       86 8a		      STX	player0pointerlo
   3267  f9de		       a9 fc		      LDA	#>playerL0168_0
   3268  f9e0		       85 8b		      STA	player0pointerhi
   3269  f9e2		       a9 08		      LDA	#8
   3270  f9e4		       85 8e		      STA	player0height
   3271  f9e6				   .
   3272  f9e6							; 
   3273  f9e6
   3274  f9e6				   .L0169		;  player0y  =  player0y + 2
   3275  f9e6
   3276  f9e6		       a5 85		      LDA	player0y
   3277  f9e8		       18		      CLC
   3278  f9e9		       69 02		      ADC	#2
   3279  f9eb		       85 85		      STA	player0y
   3280  f9ed				   .L0170		;  if joy0up then player0y  =	player0y  +  2
   3281  f9ed
   3282  f9ed		       a9 10		      lda	#$10
   3283  f9ef		       2c 80 02 	      bit	SWCHA
   3284  f9f2		       d0 07		      BNE	.skipL0170
   3285  f9f4				   .condpart67
   3286  f9f4		       a5 85		      LDA	player0y
   3287  f9f6		       18		      CLC
   3288  f9f7		       69 02		      ADC	#2
   3289  f9f9		       85 85		      STA	player0y
   3290  f9fb				   .skipL0170
   3291  f9fb				   .
   3292  f9fb							; 
   3293  f9fb
   3294  f9fb				   .L0171		;  if player0y  <=  2 then player0x  =   ( rand & 63 )   +   ( rand & 31 )   +   ( rand & 15 )   +   ( rand & 1 )   +	21
   3295  f9fb
   3296  f9fb		       a9 02		      LDA	#2
   3297  f9fd		       c5 85		      CMP	player0y
   3298  f9ff		       90 2e		      BCC	.skipL0171
   3299  fa01				   .condpart68
   3300  fa01							; complex statement detected
   3301  fa01		       20 be f3 	      jsr	randomize
   3302  fa04		       29 3f		      AND	#63
   3303  fa06		       48		      PHA
   3304  fa07		       20 be f3 	      jsr	randomize
   3305  fa0a		       29 1f		      AND	#31
   3306  fa0c		       ba		      TSX
   3307  fa0d		       e8		      INX
   3308  fa0e		       9a		      TXS
   3309  fa0f		       18		      CLC
   3310  fa10		       75 00		      ADC	$00,x
   3311  fa12		       48		      PHA
   3312  fa13		       20 be f3 	      jsr	randomize
   3313  fa16		       29 0f		      AND	#15
   3314  fa18		       ba		      TSX
   3315  fa19		       e8		      INX
   3316  fa1a		       9a		      TXS
   3317  fa1b		       18		      CLC
   3318  fa1c		       75 00		      ADC	$00,x
   3319  fa1e		       48		      PHA
   3320  fa1f		       20 be f3 	      jsr	randomize
   3321  fa22		       29 01		      AND	#1
   3322  fa24		       ba		      TSX
   3323  fa25		       e8		      INX
   3324  fa26		       9a		      TXS
   3325  fa27		       18		      CLC
   3326  fa28		       75 00		      ADC	$00,x
   3327  fa2a		       18		      CLC
   3328  fa2b		       69 15		      ADC	#21
   3329  fa2d		       85 80		      STA	player0x
   3330  fa2f				   .skipL0171
   3331  fa2f				   .L0172		;  return thisbank
   3332  fa2f
   3333  fa2f		       60		      RTS
   3334  fa30				   .
   3335  fa30							; 
   3336  fa30
   3337  fa30				   .__inimigo_carga
   3338  fa30							; __inimigo_carga
   3339  fa30
   3340  fa30				   .L0173		;  COLUP0  =  $04
   3341  fa30
   3342  fa30		       a9 04		      LDA	#$04
   3343  fa32		       85 06		      STA	COLUP0
   3344  fa34				   .L0174		;  NUSIZ0  =  $05
   3345  fa34
   3346  fa34		       a9 05		      LDA	#$05
   3347  fa36		       85 04		      STA	NUSIZ0
   3348  fa38				   .L0175		;  player0x  =  player0x  -  1
   3349  fa38
   3350  fa38		       c6 80		      DEC	player0x
   3351  fa3a				   .L0176		;  player0y  =  30
   3352  fa3a
   3353  fa3a		       a9 1e		      LDA	#30
   3354  fa3c		       85 85		      STA	player0y
   3355  fa3e				   .L0177		;  player0:
   3356  fa3e
   3357  fa3e		       a2 ef		      LDX	#<playerL0177_0
   3358  fa40		       86 8a		      STX	player0pointerlo
   3359  fa42		       a9 fc		      LDA	#>playerL0177_0
   3360  fa44		       85 8b		      STA	player0pointerhi
   3361  fa46		       a9 06		      LDA	#6
   3362  fa48		       85 8e		      STA	player0height
   3363  fa4a				   .L0178		;  return thisbank
   3364  fa4a
   3365  fa4a		       60		      RTS
   3366  fa4b				   .
   3367  fa4b							; 
   3368  fa4b
   3369  fa4b				   .
   3370  fa4b							; 
   3371  fa4b
   3372  fa4b				   .__inimigo_tie
   3373  fa4b							; __inimigo_tie
   3374  fa4b
   3375  fa4b				   .L0179		;  COLUP0  =  $04
   3376  fa4b
   3377  fa4b		       a9 04		      LDA	#$04
   3378  fa4d		       85 06		      STA	COLUP0
   3379  fa4f				   .L0180		;  player0:
   3380  fa4f
   3381  fa4f		       a2 f6		      LDX	#<playerL0180_0
   3382  fa51		       86 8a		      STX	player0pointerlo
   3383  fa53		       a9 fc		      LDA	#>playerL0180_0
   3384  fa55		       85 8b		      STA	player0pointerhi
   3385  fa57		       a9 06		      LDA	#6
   3386  fa59		       85 8e		      STA	player0height
   3387  fa5b				   .
   3388  fa5b							; 
   3389  fa5b
   3390  fa5b				   .L0181		;  if player0y  >  10 then goto __skip_tie
   3391  fa5b
   3392  fa5b		       a9 0a		      LDA	#10
   3393  fa5d		       c5 85		      CMP	player0y
   3394  fa5f		       b0 03		      BCS	.skipL0181
   3395  fa61				   .condpart69
   3396  fa61		       4c a3 fa 	      jmp	.__skip_tie
   3397  fa64
   3398  fa64				   .skipL0181
   3399  fa64				   .
   3400  fa64							; 
   3401  fa64
   3402  fa64				   .L0182		;  if _bit_supressores{2} then goto __volta else goto __vai
   3403  fa64
   3404  fa64		       a5 dd		      LDA	_bit_supressores
   3405  fa66		       29 04		      AND	#4
   3406  fa68		       f0 06		      BEQ	.skipL0182
   3407  fa6a				   .condpart70
   3408  fa6a		       4c 73 fa 	      jmp	.__volta
   3409  fa6d		       4c 73 fa 	      jmp	.skipelse3
   3410  fa70				   .skipL0182
   3411  fa70		       4c 8b fa 	      jmp	.__vai
   3412  fa73
   3413  fa73				   .skipelse3
   3414  fa73				   .
   3415  fa73							; 
   3416  fa73
   3417  fa73				   .__volta
   3418  fa73							; __volta
   3419  fa73
   3420  fa73				   .L0183		;  player0x  =  player0x  -  1
   3421  fa73
   3422  fa73		       c6 80		      DEC	player0x
   3423  fa75				   .L0184		;  if player0x  <=  30 then player0y  =  player0y  +  5  :  _bit_supressores{2}  =  0
   3424  fa75
   3425  fa75		       a9 1e		      LDA	#30
   3426  fa77		       c5 80		      CMP	player0x
   3427  fa79		       90 0d		      BCC	.skipL0184
   3428  fa7b				   .condpart71
   3429  fa7b		       a5 85		      LDA	player0y
   3430  fa7d		       18		      CLC
   3431  fa7e		       69 05		      ADC	#5
   3432  fa80		       85 85		      STA	player0y
   3433  fa82		       a5 dd		      LDA	_bit_supressores
   3434  fa84		       29 fb		      AND	#251
   3435  fa86		       85 dd		      STA	_bit_supressores
   3436  fa88				   .skipL0184
   3437  fa88				   .L0185		;  goto __skip_vai_volta_tie
   3438  fa88
   3439  fa88		       4c b5 fa 	      jmp	.__skip_vai_volta_tie
   3440  fa8b
   3441  fa8b				   .__vai
   3442  fa8b							; __vai
   3443  fa8b
   3444  fa8b				   .L0186		;  player0x  =  player0x  +  1
   3445  fa8b
   3446  fa8b		       e6 80		      INC	player0x
   3447  fa8d				   .L0187		;  if player0x  >=  120 then player0y	=  player0y  +	5  :  _bit_supressores{2}  =  1
   3448  fa8d
   3449  fa8d		       a5 80		      LDA	player0x
   3450  fa8f		       c9 78		      CMP	#120
   3451  fa91		       90 0d		      BCC	.skipL0187
   3452  fa93				   .condpart72
   3453  fa93		       a5 85		      LDA	player0y
   3454  fa95		       18		      CLC
   3455  fa96		       69 05		      ADC	#5
   3456  fa98		       85 85		      STA	player0y
   3457  fa9a		       a5 dd		      LDA	_bit_supressores
   3458  fa9c		       09 04		      ORA	#4
   3459  fa9e		       85 dd		      STA	_bit_supressores
   3460  faa0				   .skipL0187
   3461  faa0				   .L0188		;  goto __skip_vai_volta_tie
   3462  faa0
   3463  faa0		       4c b5 fa 	      jmp	.__skip_vai_volta_tie
   3464  faa3
   3465  faa3				   .__skip_tie
   3466  faa3							; __skip_tie
   3467  faa3
   3468  faa3				   .
   3469  faa3							; 
   3470  faa3
   3471  faa3				   .L0189		;  if player1x  >  player0x then player0x  =  player0x  +  1
   3472  faa3
   3473  faa3		       a5 80		      LDA	player0x
   3474  faa5		       c5 81		      CMP	player1x
   3475  faa7		       b0 02		      BCS	.skipL0189
   3476  faa9				   .condpart73
   3477  faa9		       e6 80		      INC	player0x
   3478  faab				   .skipL0189
   3479  faab				   .L0190		;  if player1x  <  player0x then player0x  =  player0x  -  1
   3480  faab
   3481  faab		       a5 81		      LDA	player1x
   3482  faad		       c5 80		      CMP	player0x
   3483  faaf		       b0 02		      BCS	.skipL0190
   3484  fab1				   .condpart74
   3485  fab1		       c6 80		      DEC	player0x
   3486  fab3				   .skipL0190
   3487  fab3				   .L0191		;  player0y  =  player0y  +  1
   3488  fab3
   3489  fab3		       e6 85		      INC	player0y
   3490  fab5				   .
   3491  fab5							; 
   3492  fab5
   3493  fab5				   .
   3494  fab5							; 
   3495  fab5
   3496  fab5				   .__skip_vai_volta_tie
   3497  fab5							; __skip_vai_volta_tie
   3498  fab5
   3499  fab5				   .
   3500  fab5							; 
   3501  fab5
   3502  fab5				   .
   3503  fab5							; 
   3504  fab5
   3505  fab5				   .L0192		;  return thisbank
   3506  fab5
   3507  fab5		       60		      RTS
   3508  fab6				   .
   3509  fab6							; 
   3510  fab6
   3511  fab6				   .
   3512  fab6							; 
   3513  fab6
   3514  fab6				   .__escudo
   3515  fab6							; __escudo
   3516  fab6
   3517  fab6				   .L0193		;  player1:
   3518  fab6
   3519  fab6		       a2 00		      LDX	#<playerL0193_1
   3520  fab8		       86 8c		      STX	player1pointerlo
   3521  faba		       a9 fd		      LDA	#>playerL0193_1
   3522  fabc		       85 8d		      STA	player1pointerhi
   3523  fabe		       a9 08		      LDA	#8
   3524  fac0		       85 8f		      STA	player1height
   3525  fac2				   .L0194		;  goto __skip_escudo
   3526  fac2
   3527  fac2		       4c 4c f6 	      jmp	.__skip_escudo
   3528  fac5
   3529  fac5				   .
   3530  fac5							; 
   3531  fac5
   3532  fac5				   .__nave
   3533  fac5							; __nave
   3534  fac5
   3535  fac5				   .L0195		;  if _animacao  =  10  ||  joy0up then player1:
   3536  fac5
   3537  fac5		       a5 e1		      LDA	_animacao
   3538  fac7		       c9 0a		      CMP	#10
   3539  fac9		       d0 03		      BNE	.skipL0195
   3540  facb				   .condpart75
   3541  facb		       4c d5 fa 	      jmp	.condpart76
   3542  face				   .skipL0195
   3543  face		       a9 10		      lda	#$10
   3544  fad0		       2c 80 02 	      bit	SWCHA
   3545  fad3		       d0 0c		      BNE	.skip6OR
   3546  fad5				   .condpart76
   3547  fad5		       a2 09		      LDX	#<player76then_1
   3548  fad7		       86 8c		      STX	player1pointerlo
   3549  fad9		       a9 fd		      LDA	#>player76then_1
   3550  fadb		       85 8d		      STA	player1pointerhi
   3551  fadd		       a9 05		      LDA	#5
   3552  fadf		       85 8f		      STA	player1height
   3553  fae1				   .skip6OR
   3554  fae1				   .
   3555  fae1							; 
   3556  fae1
   3557  fae1				   .L0196		;  if _animacao  =  20 then player1:
   3558  fae1
   3559  fae1		       a5 e1		      LDA	_animacao
   3560  fae3		       c9 14		      CMP	#20
   3561  fae5		       d0 0c		      BNE	.skipL0196
   3562  fae7				   .condpart77
   3563  fae7		       a2 0f		      LDX	#<player77then_1
   3564  fae9		       86 8c		      STX	player1pointerlo
   3565  faeb		       a9 fd		      LDA	#>player77then_1
   3566  faed		       85 8d		      STA	player1pointerhi
   3567  faef		       a9 05		      LDA	#5
   3568  faf1		       85 8f		      STA	player1height
   3569  faf3				   .skipL0196
   3570  faf3				   .
   3571  faf3							; 
   3572  faf3
   3573  faf3				   .L0197		;  return thisbank
   3574  faf3
   3575  faf3		       60		      RTS
   3576  faf4				   .
   3577  faf4							; 
   3578  faf4
   3579  faf4				   .
   3580  faf4							; 
   3581  faf4
   3582  faf4				   .__item_shield
   3583  faf4							; __item_shield
   3584  faf4
   3585  faf4				   .L0198		;  COLUP0  =  12
   3586  faf4
   3587  faf4		       a9 0c		      LDA	#12
   3588  faf6		       85 06		      STA	COLUP0
   3589  faf8				   .L0199		;  if joy0up then player0y  =	player0y  +  1
   3590  faf8
   3591  faf8		       a9 10		      lda	#$10
   3592  fafa		       2c 80 02 	      bit	SWCHA
   3593  fafd		       d0 02		      BNE	.skipL0199
   3594  faff				   .condpart78
   3595  faff		       e6 85		      INC	player0y
   3596  fb01				   .skipL0199
   3597  fb01				   .L0200		;  player0y  =  player0y  +  1
   3598  fb01
   3599  fb01		       e6 85		      INC	player0y
   3600  fb03				   .L0201		;  player0:
   3601  fb03
   3602  fb03		       a2 15		      LDX	#<playerL0201_0
   3603  fb05		       86 8a		      STX	player0pointerlo
   3604  fb07		       a9 fd		      LDA	#>playerL0201_0
   3605  fb09		       85 8b		      STA	player0pointerhi
   3606  fb0b		       a9 09		      LDA	#9
   3607  fb0d		       85 8e		      STA	player0height
   3608  fb0f				   .L0202		;  if player0y  <  2 then _bit_supressores{7}	=  0
   3609  fb0f
   3610  fb0f		       a5 85		      LDA	player0y
   3611  fb11		       c9 02		      CMP	#2
   3612  fb13		       b0 06		      BCS	.skipL0202
   3613  fb15				   .condpart79
   3614  fb15		       a5 dd		      LDA	_bit_supressores
   3615  fb17		       29 7f		      AND	#127
   3616  fb19		       85 dd		      STA	_bit_supressores
   3617  fb1b				   .skipL0202
   3618  fb1b				   .L0203		;  return thisbank
   3619  fb1b
   3620  fb1b		       60		      RTS
   3621  fb1c				   .
   3622  fb1c							; 
   3623  fb1c
   3624  fb1c				   .
   3625  fb1c							; 
   3626  fb1c
   3627  fb1c				   .__transicao
   3628  fb1c							; __transicao
   3629  fb1c
   3630  fb1c				   .L0204		;  v  =  0
   3631  fb1c
   3632  fb1c		       a9 00		      LDA	#0
   3633  fb1e		       85 e9		      STA	v
   3634  fb20				   .__main_transicao
   3635  fb20							; __main_transicao
   3636  fb20
   3637  fb20				   .L0205		;  missile1y  =  0
   3638  fb20
   3639  fb20		       a9 00		      LDA	#0
   3640  fb22		       85 88		      STA	missile1y
   3641  fb24				   .L0206		;  bally  =  100
   3642  fb24
   3643  fb24		       a9 64		      LDA	#100
   3644  fb26		       85 89		      STA	bally
   3645  fb28				   .
   3646  fb28							; 
   3647  fb28
   3648  fb28				   .L0207		;  AUDC0  =  12
   3649  fb28
   3650  fb28		       a9 0c		      LDA	#12
   3651  fb2a		       85 15		      STA	AUDC0
   3652  fb2c				   .L0208		;  AUDC1  =  1
   3653  fb2c
   3654  fb2c		       a9 01		      LDA	#1
   3655  fb2e		       85 16		      STA	AUDC1
   3656  fb30				   .
   3657  fb30							; 
   3658  fb30
   3659  fb30				   .L0209		;  if musicTimer  =  0 then goto changeMusicNoteTransicao
   3660  fb30
   3661  fb30		       a5 de		      LDA	musicTimer
   3662  fb32		       c9 00		      CMP	#0
   3663  fb34		       d0 03		      BNE	.skipL0209
   3664  fb36				   .condpart80
   3665  fb36		       4c 0d fc 	      jmp	.changeMusicNoteTransicao
   3666  fb39
   3667  fb39				   .skipL0209
   3668  fb39				   .__volta_trilha_transicao
   3669  fb39							; __volta_trilha_transicao
   3670  fb39
   3671  fb39				   .L0210		;  musicTimer	=  musicTimer  -  1
   3672  fb39
   3673  fb39		       c6 de		      DEC	musicTimer
   3674  fb3b				   .
   3675  fb3b							; 
   3676  fb3b
   3677  fb3b				   .
   3678  fb3b							; 
   3679  fb3b
   3680  fb3b				   .L0211		;  player0y  =  0
   3681  fb3b
   3682  fb3b		       a9 00		      LDA	#0
   3683  fb3d		       85 85		      STA	player0y
   3684  fb3f				   .L0212		;  gosub __playfield_transicao
   3685  fb3f
   3686  fb3f		       20 cf fb 	      jsr	.__playfield_transicao
   3687  fb42
   3688  fb42				   .
   3689  fb42							; 
   3690  fb42
   3691  fb42				   .
   3692  fb42							; 
   3693  fb42
   3694  fb42				   .L0213		;  if player1x  =  75 then goto __move_up
   3695  fb42
   3696  fb42		       a5 81		      LDA	player1x
   3697  fb44		       c9 4b		      CMP	#75
   3698  fb46		       d0 03		      BNE	.skipL0213
   3699  fb48				   .condpart81
   3700  fb48		       4c 5e fb 	      jmp	.__move_up
   3701  fb4b
   3702  fb4b				   .skipL0213
   3703  fb4b				   .L0214		;  if player1x  >  75 then goto __move_esquerda
   3704  fb4b
   3705  fb4b		       a9 4b		      LDA	#75
   3706  fb4d		       c5 81		      CMP	player1x
   3707  fb4f		       b0 03		      BCS	.skipL0214
   3708  fb51				   .condpart82
   3709  fb51		       4c 59 fb 	      jmp	.__move_esquerda
   3710  fb54
   3711  fb54				   .skipL0214
   3712  fb54				   .
   3713  fb54							; 
   3714  fb54
   3715  fb54				   .L0215		;  player1x  =  player1x  +  1  :  goto __skip_move
   3716  fb54
   3717  fb54		       e6 81		      INC	player1x
   3718  fb56		       4c 69 fb 	      jmp	.__skip_move
   3719  fb59
   3720  fb59				   .__move_esquerda
   3721  fb59							; __move_esquerda
   3722  fb59
   3723  fb59				   .L0216		;  player1x  =  player1x  -  1  :  goto __skip_move
   3724  fb59
   3725  fb59		       c6 81		      DEC	player1x
   3726  fb5b		       4c 69 fb 	      jmp	.__skip_move
   3727  fb5e
   3728  fb5e				   .__move_up
   3729  fb5e							; __move_up
   3730  fb5e
   3731  fb5e				   .L0217		;  if player1y  =  0 then goto __skip_move
   3732  fb5e
   3733  fb5e		       a5 86		      LDA	player1y
   3734  fb60		       c9 00		      CMP	#0
   3735  fb62		       d0 03		      BNE	.skipL0217
   3736  fb64				   .condpart83
   3737  fb64		       4c 69 fb 	      jmp	.__skip_move
   3738  fb67
   3739  fb67				   .skipL0217
   3740  fb67				   .L0218		;  player1y  =  player1y  -  1
   3741  fb67
   3742  fb67		       c6 86		      DEC	player1y
   3743  fb69				   .__skip_move
   3744  fb69							; __skip_move
   3745  fb69
   3746  fb69				   .
   3747  fb69							; 
   3748  fb69
   3749  fb69				   .L0219		;  v  =  v  +	1
   3750  fb69
   3751  fb69		       e6 e9		      INC	v
   3752  fb6b				   .L0220		;  if v  =  250 then v  =  0  :  _fases  =  _fases  +	1  :  _bit_supressores{5}  =  0  :  _cont_telas  =  0  :  AUDV0  =  0  :  AUDV1  =  0  :  musicPointer	=  0  :  player1y  =  85  :  goto __skip_transicao
   3753  fb6b
   3754  fb6b		       a5 e9		      LDA	v
   3755  fb6d		       c9 fa		      CMP	#250
   3756  fb6f		       d0 1d		      BNE	.skipL0220
   3757  fb71				   .condpart84
   3758  fb71		       a9 00		      LDA	#0
   3759  fb73		       85 e9		      STA	v
   3760  fb75		       e6 e4		      INC	_fases
   3761  fb77		       a5 dd		      LDA	_bit_supressores
   3762  fb79		       29 df		      AND	#223
   3763  fb7b		       85 dd		      STA	_bit_supressores
   3764  fb7d		       a9 00		      LDA	#0
   3765  fb7f		       85 e6		      STA	_cont_telas
   3766  fb81		       85 19		      STA	AUDV0
   3767  fb83		       85 1a		      STA	AUDV1
   3768  fb85		       85 db		      STA	musicPointer
   3769  fb87		       a9 55		      LDA	#85
   3770  fb89		       85 86		      STA	player1y
   3771  fb8b		       4c b0 f6 	      jmp	.__skip_transicao
   3772  fb8e
   3773  fb8e				   .skipL0220
   3774  fb8e				   .L0221		;  goto __main_transicao
   3775  fb8e
   3776  fb8e		       4c 20 fb 	      jmp	.__main_transicao
   3777  fb91
   3778  fb91				   .
   3779  fb91							; 
   3780  fb91
   3781  fb91				   .
   3782  fb91							; 
   3783  fb91
   3784  fb91				   .__playfield_regular
   3785  fb91							; __playfield_regular
   3786  fb91
   3787  fb91				   .L0222		;  playfield:
   3788  fb91
   3789  fb91				  -	      ifconst	pfres
   3790  fb91				  -	      ldx	#(12>pfres)*(pfres*pfwidth-1)+(12<=pfres)*47
   3791  fb91					      else
   3792  fb91		       a2 2f		      ldx	#((12*pfwidth-1)*((12*pfwidth-1)<47))+(47*((12*pfwidth-1)>=47))
   3793  fb93					      endif
   3794  fb93		       4c c6 fb 	      jmp	pflabel0
   3795  fb96				   PF_data0
   3796  fb96		       7f ff		      .byte.b	%01111111, %11111111
   3797  fb98					      if	(pfwidth>2)
   3798  fb98		       ff 7f		      .byte.b	%11111111, %01111111
   3799  fb9a					      endif
   3800  fb9a		       aa 55		      .byte.b	%10101010, %01010101
   3801  fb9c					      if	(pfwidth>2)
   3802  fb9c		       aa 95		      .byte.b	%10101010, %10010101
   3803  fb9e					      endif
   3804  fb9e		       80 00		      .byte.b	%10000000, %00000000
   3805  fba0					      if	(pfwidth>2)
   3806  fba0		       00 80		      .byte.b	%00000000, %10000000
   3807  fba2					      endif
   3808  fba2		       80 00		      .byte.b	%10000000, %00000000
   3809  fba4					      if	(pfwidth>2)
   3810  fba4		       00 80		      .byte.b	%00000000, %10000000
   3811  fba6					      endif
   3812  fba6		       80 00		      .byte.b	%10000000, %00000000
   3813  fba8					      if	(pfwidth>2)
   3814  fba8		       00 80		      .byte.b	%00000000, %10000000
   3815  fbaa					      endif
   3816  fbaa		       80 00		      .byte.b	%10000000, %00000000
   3817  fbac					      if	(pfwidth>2)
   3818  fbac		       00 80		      .byte.b	%00000000, %10000000
   3819  fbae					      endif
   3820  fbae		       80 00		      .byte.b	%10000000, %00000000
   3821  fbb0					      if	(pfwidth>2)
   3822  fbb0		       00 80		      .byte.b	%00000000, %10000000
   3823  fbb2					      endif
   3824  fbb2		       80 00		      .byte.b	%10000000, %00000000
   3825  fbb4					      if	(pfwidth>2)
   3826  fbb4		       00 80		      .byte.b	%00000000, %10000000
   3827  fbb6					      endif
   3828  fbb6		       80 00		      .byte.b	%10000000, %00000000
   3829  fbb8					      if	(pfwidth>2)
   3830  fbb8		       00 80		      .byte.b	%00000000, %10000000
   3831  fbba					      endif
   3832  fbba		       80 00		      .byte.b	%10000000, %00000000
   3833  fbbc					      if	(pfwidth>2)
   3834  fbbc		       00 80		      .byte.b	%00000000, %10000000
   3835  fbbe					      endif
   3836  fbbe		       80 00		      .byte.b	%10000000, %00000000
   3837  fbc0					      if	(pfwidth>2)
   3838  fbc0		       00 80		      .byte.b	%00000000, %10000000
   3839  fbc2					      endif
   3840  fbc2		       80 00		      .byte.b	%10000000, %00000000
   3841  fbc4					      if	(pfwidth>2)
   3842  fbc4		       00 80		      .byte.b	%00000000, %10000000
   3843  fbc6					      endif
   3844  fbc6				   pflabel0
   3845  fbc6		       bd 96 fb 	      lda	PF_data0,x
   3846  fbc9		       95 a4		      sta	playfield,x
   3847  fbcb		       ca		      dex
   3848  fbcc		       10 f8		      bpl	pflabel0
   3849  fbce				   .L0223		;  return thisbank
   3850  fbce
   3851  fbce		       60		      RTS
   3852  fbcf				   .
   3853  fbcf							; 
   3854  fbcf
   3855  fbcf				   .
   3856  fbcf							; 
   3857  fbcf
   3858  fbcf				   .__playfield_transicao
   3859  fbcf							; __playfield_transicao
   3860  fbcf
   3861  fbcf				   .L0224		;  playfield:
   3862  fbcf
   3863  fbcf				  -	      ifconst	pfres
   3864  fbcf				  -	      ldx	#(12>pfres)*(pfres*pfwidth-1)+(12<=pfres)*47
   3865  fbcf					      else
   3866  fbcf		       a2 2f		      ldx	#((12*pfwidth-1)*((12*pfwidth-1)<47))+(47*((12*pfwidth-1)>=47))
   3867  fbd1					      endif
   3868  fbd1		       4c 04 fc 	      jmp	pflabel1
   3869  fbd4				   PF_data1
   3870  fbd4		       7f 1f		      .byte.b	%01111111, %00011111
   3871  fbd6					      if	(pfwidth>2)
   3872  fbd6		       3f 7f		      .byte.b	%00111111, %01111111
   3873  fbd8					      endif
   3874  fbd8		       aa 15		      .byte.b	%10101010, %00010101
   3875  fbda					      if	(pfwidth>2)
   3876  fbda		       2a 95		      .byte.b	%00101010, %10010101
   3877  fbdc					      endif
   3878  fbdc		       80 00		      .byte.b	%10000000, %00000000
   3879  fbde					      if	(pfwidth>2)
   3880  fbde		       00 80		      .byte.b	%00000000, %10000000
   3881  fbe0					      endif
   3882  fbe0		       80 00		      .byte.b	%10000000, %00000000
   3883  fbe2					      if	(pfwidth>2)
   3884  fbe2		       00 80		      .byte.b	%00000000, %10000000
   3885  fbe4					      endif
   3886  fbe4		       80 00		      .byte.b	%10000000, %00000000
   3887  fbe6					      if	(pfwidth>2)
   3888  fbe6		       00 80		      .byte.b	%00000000, %10000000
   3889  fbe8					      endif
   3890  fbe8		       80 00		      .byte.b	%10000000, %00000000
   3891  fbea					      if	(pfwidth>2)
   3892  fbea		       00 80		      .byte.b	%00000000, %10000000
   3893  fbec					      endif
   3894  fbec		       80 00		      .byte.b	%10000000, %00000000
   3895  fbee					      if	(pfwidth>2)
   3896  fbee		       00 80		      .byte.b	%00000000, %10000000
   3897  fbf0					      endif
   3898  fbf0		       80 00		      .byte.b	%10000000, %00000000
   3899  fbf2					      if	(pfwidth>2)
   3900  fbf2		       00 80		      .byte.b	%00000000, %10000000
   3901  fbf4					      endif
   3902  fbf4		       80 00		      .byte.b	%10000000, %00000000
   3903  fbf6					      if	(pfwidth>2)
   3904  fbf6		       00 80		      .byte.b	%00000000, %10000000
   3905  fbf8					      endif
   3906  fbf8		       80 00		      .byte.b	%10000000, %00000000
   3907  fbfa					      if	(pfwidth>2)
   3908  fbfa		       00 80		      .byte.b	%00000000, %10000000
   3909  fbfc					      endif
   3910  fbfc		       80 00		      .byte.b	%10000000, %00000000
   3911  fbfe					      if	(pfwidth>2)
   3912  fbfe		       00 80		      .byte.b	%00000000, %10000000
   3913  fc00					      endif
   3914  fc00		       80 00		      .byte.b	%10000000, %00000000
   3915  fc02					      if	(pfwidth>2)
   3916  fc02		       00 80		      .byte.b	%00000000, %10000000
   3917  fc04					      endif
   3918  fc04				   pflabel1
   3919  fc04		       bd d4 fb 	      lda	PF_data1,x
   3920  fc07		       95 a4		      sta	playfield,x
   3921  fc09		       ca		      dex
   3922  fc0a		       10 f8		      bpl	pflabel1
   3923  fc0c				   .L0225		;  return thisbank
   3924  fc0c
   3925  fc0c		       60		      RTS
   3926  fc0d				   .
   3927  fc0d							; 
   3928  fc0d
   3929  fc0d				   .changeMusicNoteTransicao
   3930  fc0d							; changeMusicNoteTransicao
   3931  fc0d
   3932  fc0d				   .L0226		;  AUDF0  =  musicData1[musicPointer]
   3933  fc0d
   3934  fc0d		       a6 db		      LDX	musicPointer
   3935  fc0f		       bd a2 fc 	      LDA	musicData1,x
   3936  fc12		       85 17		      STA	AUDF0
   3937  fc14				   .L0227		;  AUDF1  =  musicData2[musicPointer]
   3938  fc14
   3939  fc14		       a6 db		      LDX	musicPointer
   3940  fc16		       bd bc fc 	      LDA	musicData2,x
   3941  fc19		       85 18		      STA	AUDF1
   3942  fc1b				   .L0228		;  if musicData1[musicPointer]  =  255 then AUDV1  =  0 else AUDV1  =	6
   3943  fc1b
   3944  fc1b		       a6 db		      LDX	musicPointer
   3945  fc1d		       bd a2 fc 	      LDA	musicData1,x
   3946  fc20		       c9 ff		      CMP	#255
   3947  fc22		       d0 07		      BNE	.skipL0228
   3948  fc24				   .condpart85
   3949  fc24		       a9 00		      LDA	#0
   3950  fc26		       85 1a		      STA	AUDV1
   3951  fc28		       4c 2f fc 	      jmp	.skipelse4
   3952  fc2b				   .skipL0228
   3953  fc2b		       a9 06		      LDA	#6
   3954  fc2d		       85 1a		      STA	AUDV1
   3955  fc2f				   .skipelse4
   3956  fc2f				   .L0229		;  if musicData2[musicPointer]  =  255 then AUDV0  =  0 else AUDV0  =	4
   3957  fc2f
   3958  fc2f		       a6 db		      LDX	musicPointer
   3959  fc31		       bd bc fc 	      LDA	musicData2,x
   3960  fc34		       c9 ff		      CMP	#255
   3961  fc36		       d0 07		      BNE	.skipL0229
   3962  fc38				   .condpart86
   3963  fc38		       a9 00		      LDA	#0
   3964  fc3a		       85 19		      STA	AUDV0
   3965  fc3c		       4c 43 fc 	      jmp	.skipelse5
   3966  fc3f				   .skipL0229
   3967  fc3f		       a9 04		      LDA	#4
   3968  fc41		       85 19		      STA	AUDV0
   3969  fc43				   .skipelse5
   3970  fc43				   .L0230		;  musicTimer	=  10
   3971  fc43
   3972  fc43		       a9 0a		      LDA	#10
   3973  fc45		       85 de		      STA	musicTimer
   3974  fc47				   .L0231		;  musicPointer  =  musicPointer  +  1
   3975  fc47
   3976  fc47		       e6 db		      INC	musicPointer
   3977  fc49				   .L0232		;  if musicPointer  >	22 then musicPointer  =  0
   3978  fc49
   3979  fc49		       a9 16		      LDA	#22
   3980  fc4b		       c5 db		      CMP	musicPointer
   3981  fc4d		       b0 04		      BCS	.skipL0232
   3982  fc4f				   .condpart87
   3983  fc4f		       a9 00		      LDA	#0
   3984  fc51		       85 db		      STA	musicPointer
   3985  fc53				   .skipL0232
   3986  fc53				   .L0233		;  goto __volta_trilha_transicao
   3987  fc53
   3988  fc53		       4c 39 fb 	      jmp	.__volta_trilha_transicao
   3989  fc56
   3990  fc56				   .
   3991  fc56							; 
   3992  fc56
   3993  fc56				   .changeMusicNoteTitle
   3994  fc56							; changeMusicNoteTitle
   3995  fc56
   3996  fc56				   .L0234		;  AUDF0  =  musicData1[musicPointer]
   3997  fc56
   3998  fc56		       a6 db		      LDX	musicPointer
   3999  fc58		       bd a2 fc 	      LDA	musicData1,x
   4000  fc5b		       85 17		      STA	AUDF0
   4001  fc5d				   .L0235		;  AUDF1  =  musicData2[musicPointer]
   4002  fc5d
   4003  fc5d		       a6 db		      LDX	musicPointer
   4004  fc5f		       bd bc fc 	      LDA	musicData2,x
   4005  fc62		       85 18		      STA	AUDF1
   4006  fc64				   .L0236		;  if musicData1[musicPointer]  =  255 then AUDV1  =  0 else AUDV1  =	6
   4007  fc64
   4008  fc64		       a6 db		      LDX	musicPointer
   4009  fc66		       bd a2 fc 	      LDA	musicData1,x
   4010  fc69		       c9 ff		      CMP	#255
   4011  fc6b		       d0 07		      BNE	.skipL0236
   4012  fc6d				   .condpart88
   4013  fc6d		       a9 00		      LDA	#0
   4014  fc6f		       85 1a		      STA	AUDV1
   4015  fc71		       4c 78 fc 	      jmp	.skipelse6
   4016  fc74				   .skipL0236
   4017  fc74		       a9 06		      LDA	#6
   4018  fc76		       85 1a		      STA	AUDV1
   4019  fc78				   .skipelse6
   4020  fc78				   .L0237		;  if musicData2[musicPointer]  =  255 then AUDV0  =  0 else AUDV0  =	4
   4021  fc78
   4022  fc78		       a6 db		      LDX	musicPointer
   4023  fc7a		       bd bc fc 	      LDA	musicData2,x
   4024  fc7d		       c9 ff		      CMP	#255
   4025  fc7f		       d0 07		      BNE	.skipL0237
   4026  fc81				   .condpart89
   4027  fc81		       a9 00		      LDA	#0
   4028  fc83		       85 19		      STA	AUDV0
   4029  fc85		       4c 8c fc 	      jmp	.skipelse7
   4030  fc88				   .skipL0237
   4031  fc88		       a9 04		      LDA	#4
   4032  fc8a		       85 19		      STA	AUDV0
   4033  fc8c				   .skipelse7
   4034  fc8c				   .L0238		;  musicTimer	=  10
   4035  fc8c
   4036  fc8c		       a9 0a		      LDA	#10
   4037  fc8e		       85 de		      STA	musicTimer
   4038  fc90				   .L0239		;  musicPointer  =  musicPointer  +  1
   4039  fc90
   4040  fc90		       e6 db		      INC	musicPointer
   4041  fc92				   .L0240		;  if musicPointer  >	22 then musicPointer  =  0
   4042  fc92
   4043  fc92		       a9 16		      LDA	#22
   4044  fc94		       c5 db		      CMP	musicPointer
   4045  fc96		       b0 04		      BCS	.skipL0240
   4046  fc98				   .condpart90
   4047  fc98		       a9 00		      LDA	#0
   4048  fc9a		       85 db		      STA	musicPointer
   4049  fc9c				   .skipL0240
   4050  fc9c				   .L0241		;  goto __volta_trilha_title
   4051  fc9c
   4052  fc9c		       4c 0d f5 	      jmp	.__volta_trilha_title
   4053  fc9f
   4054  fc9f				   .
   4055  fc9f							; 
   4056  fc9f
   4057  fc9f				   .
   4058  fc9f							; 
   4059  fc9f
   4060  fc9f				   .L0242		;  data musicData1
   4061  fc9f
   4062  fc9f		       4c b9 fc 	      JMP	.skipL0242
   4063  fca2				   musicData1
   4064  fca2		       1d ff 1d ff*	      .byte.b	29, -1, 29, -1, 29, -1
   4065  fca8
   4066  fca8		       1a ff 1a ff*	      .byte.b	26, -1, 26, -1, 26, -1
   4067  fcae
   4068  fcae		       18 ff 18 ff*	      .byte.b	24, -1, 24, -1, 24, -1
   4069  fcb4
   4070  fcb4		       13 13 13 13	      .byte.b	19, 19, 19, 19
   4071  fcb8
   4072  fcb8		       ff		      .byte.b	255
   4073  fcb9
   4074  fcb9				   .skipL0242
   4075  fcb9				   .
   4076  fcb9							; 
   4077  fcb9
   4078  fcb9				   .L0243		;  data musicData2
   4079  fcb9
   4080  fcb9		       4c d3 fc 	      JMP	.skipL0243
   4081  fcbc				   musicData2
   4082  fcbc		       17 ff 17 ff*	      .byte.b	23, -1, 23, -1, 23, -1
   4083  fcc2
   4084  fcc2		       1a ff 1a ff*	      .byte.b	26, -1, 26, -1, 26, -1
   4085  fcc8
   4086  fcc8		       1d ff 1d ff*	      .byte.b	29, -1, 29, -1, 29, -1
   4087  fcce
   4088  fcce		       17 17 17 17	      .byte.b	23, 23, 23, 23
   4089  fcd2
   4090  fcd2		       ff		      .byte.b	255
   4091  fcd3
   4092  fcd3				   .skipL0243
   4093  fcd3				   .
   4094  fcd3							; 
   4095  fcd3
   4096  fcd3				   .L0244		;  asm
   4097  fcd3
   4098  fcd3				   minikernel
   4099  fcd3
   4100  fcd3		       85 02		      sta	WSYNC
   4101  fcd5
   4102  fcd5		       a5 e2		      lda	_SC_Back
   4103  fcd7
   4104  fcd7		       85 09		      sta	COLUBK
   4105  fcd9
   4106  fcd9		       60		      rts
   4107  fcda
   4108  fcda				  -	      if	(<*) > (<(*+5))
   4109  fcda				  -	      repeat	($100-<*)
   4110  fcda				  -	      .byte	0
   4111  fcda				  -	      repend
   4112  fcda					      endif
   4113  fcda				   player60then_1
   4114  fcda		       28		      .byte.b	%0101000
   4115  fcdb		       12		      .byte.b	%0010010
   4116  fcdc		       48		      .byte.b	%1001000
   4117  fcdd		       15		      .byte.b	%0010101
   4118  fcde		       40		      .byte.b	%1000000
   4119  fcdf		       14		      .byte.b	%0010100
   4120  fce0				  -	      if	(<*) > (<(*+5))
   4121  fce0				  -	      repeat	($100-<*)
   4122  fce0				  -	      .byte	0
   4123  fce0				  -	      repend
   4124  fce0					      endif
   4125  fce0				   player61then_1
   4126  fce0		       08		      .byte.b	%0001000
   4127  fce1		       14		      .byte.b	%0010100
   4128  fce2		       2a		      .byte.b	%0101010
   4129  fce3		       14		      .byte.b	%0010100
   4130  fce4		       08		      .byte.b	%0001000
   4131  fce5		       00		      .byte.b	%0000000
   4132  fce6				  -	      if	(<*) > (<(*+8))
   4133  fce6				  -	      repeat	($100-<*)
   4134  fce6				  -	      .byte	0
   4135  fce6				  -	      repend
   4136  fce6					      endif
   4137  fce6				   playerL0168_0
   4138  fce6		       18		      .byte.b	%00011000
   4139  fce7		       3c		      .byte.b	%00111100
   4140  fce8		       7e		      .byte.b	%01111110
   4141  fce9		       66		      .byte.b	%01100110
   4142  fcea		       5a		      .byte.b	%01011010
   4143  fceb		       7e		      .byte.b	%01111110
   4144  fcec		       5a		      .byte.b	%01011010
   4145  fced		       18		      .byte.b	%00011000
   4146  fcee		       3c		      .byte.b	%00111100
   4147  fcef				  -	      if	(<*) > (<(*+6))
   4148  fcef				  -	      repeat	($100-<*)
   4149  fcef				  -	      .byte	0
   4150  fcef				  -	      repend
   4151  fcef					      endif
   4152  fcef				   playerL0177_0
   4153  fcef		       04		      .byte.b	%00000100
   4154  fcf0		       0a		      .byte.b	%00001010
   4155  fcf1		       14		      .byte.b	%00010100
   4156  fcf2		       ef		      .byte.b	%11101111
   4157  fcf3		       7f		      .byte.b	%01111111
   4158  fcf4		       3f		      .byte.b	%00111111
   4159  fcf5		       01		      .byte.b	%00000001
   4160  fcf6				  -	      if	(<*) > (<(*+6))
   4161  fcf6				  -	      repeat	($100-<*)
   4162  fcf6				  -	      .byte	0
   4163  fcf6				  -	      repend
   4164  fcf6					      endif
   4165  fcf6				   playerL0180_0
   4166  fcf6		       81		      .byte.b	%10000001
   4167  fcf7		       81		      .byte.b	%10000001
   4168  fcf8		       99		      .byte.b	%10011001
   4169  fcf9		       ff		      .byte.b	%11111111
   4170  fcfa		       99		      .byte.b	%10011001
   4171  fcfb		       81		      .byte.b	%10000001
   4172  fcfc		       81		      .byte.b	%10000001
   4173  fcfd					      if	(<*) > (<(*+8))
   4174  fcfd					      repeat	($100-<*)
   4175  fcfd		       00		      .byte.b	0
   4174  fcfd					      repend
   4175  fcfe		       00		      .byte.b	0
   4174  fcfe					      repend
   4175  fcff		       00		      .byte.b	0
   4176  fd00					      repend
   4177  fd00					      endif
   4178  fd00				   playerL0193_1
   4179  fd00		       49		      .byte.b	%1001001
   4180  fd01		       7f		      .byte.b	%1111111
   4181  fd02		       5d		      .byte.b	%1011101
   4182  fd03		       08		      .byte.b	%0001000
   4183  fd04		       08		      .byte.b	%0001000
   4184  fd05		       49		      .byte.b	%1001001
   4185  fd06		       22		      .byte.b	%0100010
   4186  fd07		       14		      .byte.b	%0010100
   4187  fd08		       08		      .byte.b	%0001000
   4188  fd09				  -	      if	(<*) > (<(*+5))
   4189  fd09				  -	      repeat	($100-<*)
   4190  fd09				  -	      .byte	0
   4191  fd09				  -	      repend
   4192  fd09					      endif
   4193  fd09				   player76then_1
   4194  fd09		       49		      .byte.b	%1001001
   4195  fd0a		       7f		      .byte.b	%1111111
   4196  fd0b		       5d		      .byte.b	%1011101
   4197  fd0c		       08		      .byte.b	%0001000
   4198  fd0d		       08		      .byte.b	%0001000
   4199  fd0e		       08		      .byte.b	%0001000
   4200  fd0f				  -	      if	(<*) > (<(*+5))
   4201  fd0f				  -	      repeat	($100-<*)
   4202  fd0f				  -	      .byte	0
   4203  fd0f				  -	      repend
   4204  fd0f					      endif
   4205  fd0f				   player77then_1
   4206  fd0f		       41		      .byte.b	%1000001
   4207  fd10		       7f		      .byte.b	%1111111
   4208  fd11		       5d		      .byte.b	%1011101
   4209  fd12		       08		      .byte.b	%0001000
   4210  fd13		       08		      .byte.b	%0001000
   4211  fd14		       08		      .byte.b	%0001000
   4212  fd15				  -	      if	(<*) > (<(*+9))
   4213  fd15				  -	      repeat	($100-<*)
   4214  fd15				  -	      .byte	0
   4215  fd15				  -	      repend
   4216  fd15					      endif
   4217  fd15				   playerL0201_0
   4218  fd15		       3c		      .byte.b	%00111100
   4219  fd16		       42		      .byte.b	%01000010
   4220  fd17		       bd		      .byte.b	%10111101
   4221  fd18		       85		      .byte.b	%10000101
   4222  fd19		       85		      .byte.b	%10000101
   4223  fd1a		       bd		      .byte.b	%10111101
   4224  fd1b		       a1		      .byte.b	%10100001
   4225  fd1c		       bd		      .byte.b	%10111101
   4226  fd1d		       42		      .byte.b	%01000010
   4227  fd1e		       3c		      .byte.b	%00111100
   4228  fd1f					      if	ECHOFIRST
      637 bytes of ROM space left
   4229  fd1f					      echo	"    ",[(scoretable - *)]d , "bytes of ROM space left")
   4230  fd1f					      endif
   4231  fd1f		       00 01	   ECHOFIRST  =	1
   4232  fd1f
   4233  fd1f
   4234  fd1f
   4235  fd1f							; Provided under the CC0 license. See the included LICENSE.txt for details.
   4236  fd1f
   4237  fd1f							; feel free to modify the score graphics - just keep each digit 8 high
   4238  fd1f							; and keep the conditional compilation stuff intact
   4239  fd1f				  -	      ifconst	ROM2k
   4240  fd1f				  -	      ORG	$F7AC-8
   4241  fd1f					      else
   4242  fd1f				  -	      ifconst	bankswitch
   4243  fd1f				  -	      if	bankswitch == 8
   4244  fd1f				  -	      ORG	$2F94-bscode_length
   4245  fd1f				  -	      RORG	$FF94-bscode_length
   4246  fd1f				  -	      endif
   4247  fd1f				  -	      if	bankswitch == 16
   4248  fd1f				  -	      ORG	$4F94-bscode_length
   4249  fd1f				  -	      RORG	$FF94-bscode_length
   4250  fd1f				  -	      endif
   4251  fd1f				  -	      if	bankswitch == 32
   4252  fd1f				  -	      ORG	$8F94-bscode_length
   4253  fd1f				  -	      RORG	$FF94-bscode_length
   4254  fd1f				  -	      endif
   4255  fd1f				  -	      if	bankswitch == 64
   4256  fd1f				  -	      ORG	$10F80-bscode_length
   4257  fd1f				  -	      RORG	$1FF80-bscode_length
   4258  fd1f				  -	      endif
   4259  fd1f					      else
   4260  ff9c					      ORG	$FF9C
   4261  ff9c					      endif
   4262  ff9c					      endif
   4263  ff9c
   4264  ff9c							; font equates
   4265  ff9c		       00 01	   .21stcentury =	1
   4266  ff9c		       00 02	   alarmclock =	2
   4267  ff9c		       00 03	   handwritten =	3
   4268  ff9c		       00 04	   interrupted =	4
   4269  ff9c		       00 05	   retroputer =	5
   4270  ff9c		       00 06	   whimsey    =	6
   4271  ff9c		       00 07	   tiny       =	7
   4272  ff9c		       00 08	   hex	      =	8
   4273  ff9c
   4274  ff9c				  -	      ifconst	font
   4275  ff9c				  -	      if	font == hex
   4276  ff9c				  -	      ORG	. - 48
   4277  ff9c				  -	      endif
   4278  ff9c					      endif
   4279  ff9c
   4280  ff9c				   scoretable
   4281  ff9c
   4282  ff9c				  -	      ifconst	font
   4283  ff9c				  -	      if	font == .21stcentury
   4284  ff9c				  -	      include	"score_graphics.asm.21stcentury"
   4285  ff9c				  -	      endif
   4286  ff9c				  -	      if	font == alarmclock
   4287  ff9c				  -	      include	"score_graphics.asm.alarmclock"
   4288  ff9c				  -	      endif
   4289  ff9c				  -	      if	font == handwritten
   4290  ff9c				  -	      include	"score_graphics.asm.handwritten"
   4291  ff9c				  -	      endif
   4292  ff9c				  -	      if	font == interrupted
   4293  ff9c				  -	      include	"score_graphics.asm.interrupted"
   4294  ff9c				  -	      endif
   4295  ff9c				  -	      if	font == retroputer
   4296  ff9c				  -	      include	"score_graphics.asm.retroputer"
   4297  ff9c				  -	      endif
   4298  ff9c				  -	      if	font == whimsey
   4299  ff9c				  -	      include	"score_graphics.asm.whimsey"
   4300  ff9c				  -	      endif
   4301  ff9c				  -	      if	font == tiny
   4302  ff9c				  -	      include	"score_graphics.asm.tiny"
   4303  ff9c				  -	      endif
   4304  ff9c				  -	      if	font == hex
   4305  ff9c				  -	      include	"score_graphics.asm.hex"
   4306  ff9c				  -	      endif
   4307  ff9c					      else		; default font
   4308  ff9c
   4309  ff9c		       3c		      .byte.b	%00111100
   4310  ff9d		       66		      .byte.b	%01100110
   4311  ff9e		       66		      .byte.b	%01100110
   4312  ff9f		       66		      .byte.b	%01100110
   4313  ffa0		       66		      .byte.b	%01100110
   4314  ffa1		       66		      .byte.b	%01100110
   4315  ffa2		       66		      .byte.b	%01100110
   4316  ffa3		       3c		      .byte.b	%00111100
   4317  ffa4
   4318  ffa4		       7e		      .byte.b	%01111110
   4319  ffa5		       18		      .byte.b	%00011000
   4320  ffa6		       18		      .byte.b	%00011000
   4321  ffa7		       18		      .byte.b	%00011000
   4322  ffa8		       18		      .byte.b	%00011000
   4323  ffa9		       38		      .byte.b	%00111000
   4324  ffaa		       18		      .byte.b	%00011000
   4325  ffab		       08		      .byte.b	%00001000
   4326  ffac
   4327  ffac		       7e		      .byte.b	%01111110
   4328  ffad		       60		      .byte.b	%01100000
   4329  ffae		       60		      .byte.b	%01100000
   4330  ffaf		       3c		      .byte.b	%00111100
   4331  ffb0		       06		      .byte.b	%00000110
   4332  ffb1		       06		      .byte.b	%00000110
   4333  ffb2		       46		      .byte.b	%01000110
   4334  ffb3		       3c		      .byte.b	%00111100
   4335  ffb4
   4336  ffb4		       3c		      .byte.b	%00111100
   4337  ffb5		       46		      .byte.b	%01000110
   4338  ffb6		       06		      .byte.b	%00000110
   4339  ffb7		       06		      .byte.b	%00000110
   4340  ffb8		       1c		      .byte.b	%00011100
   4341  ffb9		       06		      .byte.b	%00000110
   4342  ffba		       46		      .byte.b	%01000110
   4343  ffbb		       3c		      .byte.b	%00111100
   4344  ffbc
   4345  ffbc		       0c		      .byte.b	%00001100
   4346  ffbd		       0c		      .byte.b	%00001100
   4347  ffbe		       7e		      .byte.b	%01111110
   4348  ffbf		       4c		      .byte.b	%01001100
   4349  ffc0		       4c		      .byte.b	%01001100
   4350  ffc1		       2c		      .byte.b	%00101100
   4351  ffc2		       1c		      .byte.b	%00011100
   4352  ffc3		       0c		      .byte.b	%00001100
   4353  ffc4
   4354  ffc4		       3c		      .byte.b	%00111100
   4355  ffc5		       46		      .byte.b	%01000110
   4356  ffc6		       06		      .byte.b	%00000110
   4357  ffc7		       06		      .byte.b	%00000110
   4358  ffc8		       3c		      .byte.b	%00111100
   4359  ffc9		       60		      .byte.b	%01100000
   4360  ffca		       60		      .byte.b	%01100000
   4361  ffcb		       7e		      .byte.b	%01111110
   4362  ffcc
   4363  ffcc		       3c		      .byte.b	%00111100
   4364  ffcd		       66		      .byte.b	%01100110
   4365  ffce		       66		      .byte.b	%01100110
   4366  ffcf		       66		      .byte.b	%01100110
   4367  ffd0		       7c		      .byte.b	%01111100
   4368  ffd1		       60		      .byte.b	%01100000
   4369  ffd2		       62		      .byte.b	%01100010
   4370  ffd3		       3c		      .byte.b	%00111100
   4371  ffd4
   4372  ffd4		       30		      .byte.b	%00110000
   4373  ffd5		       30		      .byte.b	%00110000
   4374  ffd6		       30		      .byte.b	%00110000
   4375  ffd7		       18		      .byte.b	%00011000
   4376  ffd8		       0c		      .byte.b	%00001100
   4377  ffd9		       06		      .byte.b	%00000110
   4378  ffda		       42		      .byte.b	%01000010
   4379  ffdb		       3e		      .byte.b	%00111110
   4380  ffdc
   4381  ffdc		       3c		      .byte.b	%00111100
   4382  ffdd		       66		      .byte.b	%01100110
   4383  ffde		       66		      .byte.b	%01100110
   4384  ffdf		       66		      .byte.b	%01100110
   4385  ffe0		       3c		      .byte.b	%00111100
   4386  ffe1		       66		      .byte.b	%01100110
   4387  ffe2		       66		      .byte.b	%01100110
   4388  ffe3		       3c		      .byte.b	%00111100
   4389  ffe4
   4390  ffe4		       3c		      .byte.b	%00111100
   4391  ffe5		       46		      .byte.b	%01000110
   4392  ffe6		       06		      .byte.b	%00000110
   4393  ffe7		       3e		      .byte.b	%00111110
   4394  ffe8		       66		      .byte.b	%01100110
   4395  ffe9		       66		      .byte.b	%01100110
   4396  ffea		       66		      .byte.b	%01100110
   4397  ffeb		       3c		      .byte.b	%00111100
   4398  ffec
   4399  ffec					      ifnconst	DPC_kernel_options
   4400  ffec
   4401  ffec		       00		      .byte.b	%00000000
   4402  ffed		       00		      .byte.b	%00000000
   4403  ffee		       00		      .byte.b	%00000000
   4404  ffef		       00		      .byte.b	%00000000
   4405  fff0		       00		      .byte.b	%00000000
   4406  fff1		       00		      .byte.b	%00000000
   4407  fff2		       00		      .byte.b	%00000000
   4408  fff3		       00		      .byte.b	%00000000
   4409  fff4
   4410  fff4					      endif
   4411  fff4
   4412  fff4					      endif
   4413  fff4
   4414  fff4				  -	      ifconst	ROM2k
   4415  fff4				  -	      ORG	$F7FC
   4416  fff4					      else
   4417  fff4				  -	      ifconst	bankswitch
   4418  fff4				  -	      if	bankswitch == 8
   4419  fff4				  -	      ORG	$2FF4-bscode_length
   4420  fff4				  -	      RORG	$FFF4-bscode_length
   4421  fff4				  -	      endif
   4422  fff4				  -	      if	bankswitch == 16
   4423  fff4				  -	      ORG	$4FF4-bscode_length
   4424  fff4				  -	      RORG	$FFF4-bscode_length
   4425  fff4				  -	      endif
   4426  fff4				  -	      if	bankswitch == 32
   4427  fff4				  -	      ORG	$8FF4-bscode_length
   4428  fff4				  -	      RORG	$FFF4-bscode_length
   4429  fff4				  -	      endif
   4430  fff4				  -	      if	bankswitch == 64
   4431  fff4				  -	      ORG	$10FE0-bscode_length
   4432  fff4				  -	      RORG	$1FFE0-bscode_length
   4433  fff4				  -	      endif
   4434  fff4					      else
   4435  fffc					      ORG	$FFFC
   4436  fffc					      endif
   4437  fffc					      endif
   4438  fffc							; Provided under the CC0 license. See the included LICENSE.txt for details.
   4439  fffc
   4440  fffc				  -	      ifconst	bankswitch
   4441  fffc				  -	      if	bankswitch == 8
   4442  fffc				  -	      ORG	$2FFC
   4443  fffc				  -	      RORG	$FFFC
   4444  fffc				  -	      endif
   4445  fffc				  -	      if	bankswitch == 16
   4446  fffc				  -	      ORG	$4FFC
   4447  fffc				  -	      RORG	$FFFC
   4448  fffc				  -	      endif
   4449  fffc				  -	      if	bankswitch == 32
   4450  fffc				  -	      ORG	$8FFC
   4451  fffc				  -	      RORG	$FFFC
   4452  fffc				  -	      endif
   4453  fffc				  -	      if	bankswitch == 64
   4454  fffc				  -	      ORG	$10FF0
   4455  fffc				  -	      RORG	$1FFF0
   4456  fffc				  -	      lda	$ffe0	; we use wasted space to assist stella with EF format auto-detection
   4457  fffc				  -	      ORG	$10FF8
   4458  fffc				  -	      RORG	$1FFF8
   4459  fffc				  -	      ifconst	superchip
   4460  fffc				  -	      .byte	"E","F","S","C"
   4461  fffc				  -	      else
   4462  fffc				  -	      .byte	"E","F","E","F"
   4463  fffc				  -	      endif
   4464  fffc				  -	      ORG	$10FFC
   4465  fffc				  -	      RORG	$1FFFC
   4466  fffc				  -	      endif
   4467  fffc					      else
   4468  fffc				  -	      ifconst	ROM2k
   4469  fffc				  -	      ORG	$F7FC
   4470  fffc					      else
   4471  fffc					      ORG	$FFFC
   4472  fffc					      endif
   4473  fffc					      endif
   4474  fffc		       00 f0		      .word.w	(start & $ffff)
   4475  fffe		       00 f0		      .word.w	(start & $ffff)
