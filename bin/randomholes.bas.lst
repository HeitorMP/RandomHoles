------- FILE d:\Batari Projects\RandomHoles\RandomHoles\randomholes.bas.asm LEVEL 1 PASS 3
      1  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  10000 ????
      3  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 2 PASS 3
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  10000 ????
      3  10000 ????						; VCS.H
      4  10000 ????						; Version 1.05, 13/November/2003
      5  10000 ????
      6  10000 ????		00 69	    VERSION_VCS =	105
      7  10000 ????
      8  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      9  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
     11  10000 ????						;
     12  10000 ????						; This file defines hardware registers and memory mapping for the
     13  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     14  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  10000 ????						; available at at http://www.atari2600.org/dasm
     16  10000 ????						;
     17  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     18  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     19  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     20  10000 ????						; with your views.  Please contribute, if you think you can improve this
     21  10000 ????						; file!
     22  10000 ????						;
     23  10000 ????						; Latest Revisions...
     24  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     25  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     26  10000 ????						;			    This will allow conditional code to verify VCS.H being
     27  10000 ????						;			    used for code assembly.
     28  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     29  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     30  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     31  10000 ????						;			 readability issue, and binary compatibility with disassembled
     32  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     33  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     34  10000 ????						;			 which was broken by the use of segments in this file, as
     35  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     36  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     37  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     38  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     39  10000 ????						;						   it is safe to leave it undefined, and the base address will
     40  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     41  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     42  10000 ????						;			  - register definitions are now generated through assignment
     43  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     44  10000 ????						;			    address architecture.
     45  10000 ????						; 1.0	22/MAR/2003		Initial release
     46  10000 ????
     47  10000 ????
     48  10000 ????						;-------------------------------------------------------------------------------
     49  10000 ????
     50  10000 ????						; TIA_BASE_ADDRESS
     51  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     52  10000 ????						; Normally 0, the base address should (externally, before including this file)
     53  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     54  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     55  10000 ????						; < $40 as a bankswitch.
     56  10000 ????
     57  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     58  10000 ????			   -TIA_BASE_ADDRESS =	0
     59  10000 ????				       ENDIF
     60  10000 ????
     61  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     62  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     63  10000 ????						; *OR* by declaring the label before including this file, eg:
     64  10000 ????						; TIA_BASE_ADDRESS = $40
     65  10000 ????						;   include "vcs.h"
     66  10000 ????
     67  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     68  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     69  10000 ????						; for the mirrored ROM hardware registers.
     70  10000 ????
     71  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     72  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     73  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     74  10000 ????
     75  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     76  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     77  10000 ????				       ENDIF
     78  10000 ????
     79  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     80  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     81  10000 ????				       ENDIF
     82  10000 ????
     83  10000 ????						;-------------------------------------------------------------------------------
     84  10000 ????
     85 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     86 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     87 U0000
     88 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     89 U0000
     90 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     91 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     92 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     93 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     94 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     95 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     96 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     97 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     98 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     99 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
    100 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
    101 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    102 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    103 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    104 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    105 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    106 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    107 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    108 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    109 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    110 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    111 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    112 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    113 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    114 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    115 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    116 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    117 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    118 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    119 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    120 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    121 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    122 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    123 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    124 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    125 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    126 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    127 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    128 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    129 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    130 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    131 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    132 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    133 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    134 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    135 U002d
    136 U002d							;-------------------------------------------------------------------------------
    137 U002d
    138 U000e ????				      SEG.U	TIA_REGISTERS_READ
    139 U0000					      ORG	TIA_BASE_READ_ADDRESS
    140 U0000
    141 U0000							;											bit 7	 bit 6
    142 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    143 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    144 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    145 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    146 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    147 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    148 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    149 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    150 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    151 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    152 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    153 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    154 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    155 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    156 U000e
    157 U000e							;-------------------------------------------------------------------------------
    158 U000e
    159 U0298 ????				      SEG.U	RIOT
    160 U0280					      ORG	$280
    161 U0280
    162 U0280							; RIOT MEMORY MAP
    163 U0280
    164 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    165 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    166 U0281
    167 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    168 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    169 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    170 U0284		       00	   INTIM      ds	1	; $284		Timer output
    171 U0285
    172 U0285		       00	   TIMINT     ds	1	; $285
    173 U0286
    174 U0286							; Unused/undefined registers ($285-$294)
    175 U0286
    176 U0286		       00		      ds	1	; $286
    177 U0287		       00		      ds	1	; $287
    178 U0288		       00		      ds	1	; $288
    179 U0289		       00		      ds	1	; $289
    180 U028a		       00		      ds	1	; $28A
    181 U028b		       00		      ds	1	; $28B
    182 U028c		       00		      ds	1	; $28C
    183 U028d		       00		      ds	1	; $28D
    184 U028e		       00		      ds	1	; $28E
    185 U028f		       00		      ds	1	; $28F
    186 U0290		       00		      ds	1	; $290
    187 U0291		       00		      ds	1	; $291
    188 U0292		       00		      ds	1	; $292
    189 U0293		       00		      ds	1	; $293
    190 U0294
    191 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    192 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    193 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    194 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    195 U0298
    196 U0298							;-------------------------------------------------------------------------------
    197 U0298							; The following required for back-compatibility with code which does not use
    198 U0298							; segments.
    199 U0298
    200  10000 ????				       SEG
    201  10000 ????
    202  10000 ????						; EOF
------- FILE d:\Batari Projects\RandomHoles\RandomHoles\randomholes.bas.asm
------- FILE macro.h LEVEL 2 PASS 3
      0  10000 ????				       include	"macro.h"
      1  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  10000 ????
      3  10000 ????						; MACRO.H
      4  10000 ????						; Version 1.05, 13/NOVEMBER/2003
      5  10000 ????
      6  10000 ????		00 69	    VERSION_MACRO =	105
      7  10000 ????
      8  10000 ????						;
      9  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
     11  10000 ????						;
     12  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     13  10000 ????						; It is distributed as a companion machine-specific support package
     14  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  10000 ????						; available at at http://www.atari2600.org/dasm
     16  10000 ????						;
     17  10000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     18  10000 ????						; contents, or would like to add something, please write to me
     19  10000 ????						; (atari2600@taswegian.com) with your contribution.
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						;
     23  10000 ????						; 1.05  14/NOV/2003	  - Added VERSION_MACRO equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify MACRO.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     27  10000 ????						;
     28  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     29  10000 ????						;
     30  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     31  10000 ????						;			   (standardised macro for vertical synch code)
     32  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     33  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     34  10000 ????						; 1.0	22/MAR/2003		Initial release
     35  10000 ????
     36  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     37  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     38  10000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     39  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     40  10000 ????						;   registers and require them to be defined first).
     41  10000 ????
     42  10000 ????						; Available macros...
     43  10000 ????						;   SLEEP n		 - sleep for n cycles
     44  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     45  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     46  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     47  10000 ????
     48  10000 ????						;-------------------------------------------------------------------------------
     49  10000 ????						; SLEEP duration
     50  10000 ????						; Original author: Thomas Jentzsch
     51  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     52  10000 ????						; useful for code where precise timing is required.
     53  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     54  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     55  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     56  10000 ????
     57  10000 ????				       MAC	sleep
     58  10000 ????			    .CYCLES    SET	{1}
     59  10000 ????
     60  10000 ????				       IF	.CYCLES < 2
     61  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     62  10000 ????				       ERR
     63  10000 ????				       ENDIF
     64  10000 ????
     65  10000 ????				       IF	.CYCLES & 1
     66  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     67  10000 ????				       nop	0
     68  10000 ????				       ELSE
     69  10000 ????				       bit	VSYNC
     70  10000 ????				       ENDIF
     71  10000 ????			    .CYCLES    SET	.CYCLES - 3
     72  10000 ????				       ENDIF
     73  10000 ????
     74  10000 ????				       REPEAT	.CYCLES / 2
     75  10000 ????				       nop
     76  10000 ????				       REPEND
     77  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     78  10000 ????
     79  10000 ????						;-------------------------------------------------------------------------------
     80  10000 ????						; VERTICAL_SYNC
     81  10000 ????						; Original author: Manuel Polik
     82  10000 ????						; Inserts the code required for a proper 3 scannline 
     83  10000 ????						; vertical sync sequence
     84  10000 ????						;
     85  10000 ????						; Note: Alters the accumulator
     86  10000 ????						;
     87  10000 ????						; IN:
     88  10000 ????						; OUT: A = 1
     89  10000 ????
     90  10000 ????				       MAC	vertical_sync
     91  10000 ????				       LDA	#$02	; A = VSYNC enable
     92  10000 ????				       STA	WSYNC	; Finish current line
     93  10000 ????				       STA	VSYNC	; Start vertical sync
     94  10000 ????				       STA	WSYNC	; 1st line vertical sync
     95  10000 ????				       STA	WSYNC	; 2nd line vertical sync
     96  10000 ????				       LSR		; A = VSYNC disable
     97  10000 ????				       STA	WSYNC	; 3rd line vertical sync
     98  10000 ????				       STA	VSYNC	; Stop vertical sync
     99  10000 ????				       ENDM
    100  10000 ????
    101  10000 ????						;-------------------------------------------------------------------------------
    102  10000 ????						; CLEAN_START
    103  10000 ????						; Original author: Andrew Davie
    104  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    105  10000 ????						; Sets stack pointer to $FF, and all registers to 0
    106  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    107  10000 ????						; Use as very first section of code on boot (ie: at reset)
    108  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    109  10000 ????
    110  10000 ????				       MAC	clean_start
    111  10000 ????				       sei
    112  10000 ????				       cld
    113  10000 ????
    114  10000 ????				       ldx	#0
    115  10000 ????				       txa
    116  10000 ????				       tay
    117  10000 ????			    .CLEAR_STACK dex
    118  10000 ????				       txs
    119  10000 ????				       pha
    120  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  10000 ????
    122  10000 ????				       ENDM
    123  10000 ????
    124  10000 ????						;-------------------------------------------------------
    125  10000 ????						; SET_POINTER
    126  10000 ????						; Original author: Manuel Rotschkar
    127  10000 ????						;
    128  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  10000 ????						;
    130  10000 ????						; Usage: SET_POINTER pointer, address
    131  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  10000 ????						;
    133  10000 ????						; Note: Alters the accumulator, NZ flags
    134  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  10000 ????						; IN 2: absolute address
    136  10000 ????
    137  10000 ????				       MAC	set_pointer
    138  10000 ????			    .POINTER   SET	{1}
    139  10000 ????			    .ADDRESS   SET	{2}
    140  10000 ????
    141  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  10000 ????				       STA	.POINTER	; Store in pointer
    143  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    144  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    145  10000 ????
    146  10000 ????				       ENDM
    147  10000 ????
    148  10000 ????						; EOF
------- FILE d:\Batari Projects\RandomHoles\RandomHoles\randomholes.bas.asm
------- FILE 2600basic.h LEVEL 2 PASS 3
      0  10000 ????				       include	"2600basic.h"
      1  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  10000 ????
      3  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 3 PASS 3
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  10000 ????
      3  10000 ????						; VCS.H
      4  10000 ????						; Version 1.05, 13/November/2003
      5  10000 ????
      6  10000 ????		00 69	    VERSION_VCS =	105
      7  10000 ????
      8  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      9  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
     11  10000 ????						;
     12  10000 ????						; This file defines hardware registers and memory mapping for the
     13  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     14  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  10000 ????						; available at at http://www.atari2600.org/dasm
     16  10000 ????						;
     17  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     18  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     19  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     20  10000 ????						; with your views.  Please contribute, if you think you can improve this
     21  10000 ????						; file!
     22  10000 ????						;
     23  10000 ????						; Latest Revisions...
     24  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     25  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     26  10000 ????						;			    This will allow conditional code to verify VCS.H being
     27  10000 ????						;			    used for code assembly.
     28  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     29  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     30  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     31  10000 ????						;			 readability issue, and binary compatibility with disassembled
     32  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     33  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     34  10000 ????						;			 which was broken by the use of segments in this file, as
     35  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     36  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     37  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     38  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     39  10000 ????						;						   it is safe to leave it undefined, and the base address will
     40  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     41  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     42  10000 ????						;			  - register definitions are now generated through assignment
     43  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     44  10000 ????						;			    address architecture.
     45  10000 ????						; 1.0	22/MAR/2003		Initial release
     46  10000 ????
     47  10000 ????
     48  10000 ????						;-------------------------------------------------------------------------------
     49  10000 ????
     50  10000 ????						; TIA_BASE_ADDRESS
     51  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     52  10000 ????						; Normally 0, the base address should (externally, before including this file)
     53  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     54  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     55  10000 ????						; < $40 as a bankswitch.
     56  10000 ????
     57  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     58  10000 ????			   -TIA_BASE_ADDRESS =	0
     59  10000 ????				       ENDIF
     60  10000 ????
     61  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     62  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     63  10000 ????						; *OR* by declaring the label before including this file, eg:
     64  10000 ????						; TIA_BASE_ADDRESS = $40
     65  10000 ????						;   include "vcs.h"
     66  10000 ????
     67  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     68  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     69  10000 ????						; for the mirrored ROM hardware registers.
     70  10000 ????
     71  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     72  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     73  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     74  10000 ????
     75  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     76  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     77  10000 ????				       ENDIF
     78  10000 ????
     79  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     80  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     81  10000 ????				       ENDIF
     82  10000 ????
     83  10000 ????						;-------------------------------------------------------------------------------
     84  10000 ????
     85 U002d					      SEG.U	TIA_REGISTERS_WRITE
     86 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     87 U0000
     88 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     89 U0000
     90 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     91 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     92 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     93 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     94 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     95 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     96 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     97 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     98 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     99 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
    100 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
    101 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    102 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    103 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    104 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    105 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    106 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    107 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    108 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    109 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    110 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    111 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    112 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    113 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    114 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    115 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    116 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    117 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    118 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    119 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    120 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    121 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    122 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    123 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    124 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    125 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    126 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    127 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    128 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    129 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    130 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    131 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    132 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    133 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    134 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    135 U002d
    136 U002d							;-------------------------------------------------------------------------------
    137 U002d
    138 U000e					      SEG.U	TIA_REGISTERS_READ
    139 U0000					      ORG	TIA_BASE_READ_ADDRESS
    140 U0000
    141 U0000							;											bit 7	 bit 6
    142 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    143 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    144 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    145 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    146 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    147 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    148 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    149 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    150 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    151 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    152 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    153 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    154 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    155 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    156 U000e
    157 U000e							;-------------------------------------------------------------------------------
    158 U000e
    159 U0298					      SEG.U	RIOT
    160 U0280					      ORG	$280
    161 U0280
    162 U0280							; RIOT MEMORY MAP
    163 U0280
    164 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    165 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    166 U0281
    167 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    168 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    169 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    170 U0284		       00	   INTIM      ds	1	; $284		Timer output
    171 U0285
    172 U0285		       00	   TIMINT     ds	1	; $285
    173 U0286
    174 U0286							; Unused/undefined registers ($285-$294)
    175 U0286
    176 U0286		       00		      ds	1	; $286
    177 U0287		       00		      ds	1	; $287
    178 U0288		       00		      ds	1	; $288
    179 U0289		       00		      ds	1	; $289
    180 U028a		       00		      ds	1	; $28A
    181 U028b		       00		      ds	1	; $28B
    182 U028c		       00		      ds	1	; $28C
    183 U028d		       00		      ds	1	; $28D
    184 U028e		       00		      ds	1	; $28E
    185 U028f		       00		      ds	1	; $28F
    186 U0290		       00		      ds	1	; $290
    187 U0291		       00		      ds	1	; $291
    188 U0292		       00		      ds	1	; $292
    189 U0293		       00		      ds	1	; $293
    190 U0294
    191 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    192 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    193 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    194 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    195 U0298
    196 U0298							;-------------------------------------------------------------------------------
    197 U0298							; The following required for back-compatibility with code which does not use
    198 U0298							; segments.
    199 U0298
    200  10000 ????				       SEG
    201  10000 ????
    202  10000 ????						; EOF
------- FILE 2600basic.h
------- FILE macro.h LEVEL 3 PASS 3
      0  10000 ????				       include	"macro.h"
      1  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  10000 ????
      3  10000 ????						; MACRO.H
      4  10000 ????						; Version 1.05, 13/NOVEMBER/2003
      5  10000 ????
      6  10000 ????		00 69	    VERSION_MACRO =	105
      7  10000 ????
      8  10000 ????						;
      9  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
     11  10000 ????						;
     12  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     13  10000 ????						; It is distributed as a companion machine-specific support package
     14  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  10000 ????						; available at at http://www.atari2600.org/dasm
     16  10000 ????						;
     17  10000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     18  10000 ????						; contents, or would like to add something, please write to me
     19  10000 ????						; (atari2600@taswegian.com) with your contribution.
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						;
     23  10000 ????						; 1.05  14/NOV/2003	  - Added VERSION_MACRO equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify MACRO.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     27  10000 ????						;
     28  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     29  10000 ????						;
     30  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     31  10000 ????						;			   (standardised macro for vertical synch code)
     32  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     33  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     34  10000 ????						; 1.0	22/MAR/2003		Initial release
     35  10000 ????
     36  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     37  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     38  10000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     39  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     40  10000 ????						;   registers and require them to be defined first).
     41  10000 ????
     42  10000 ????						; Available macros...
     43  10000 ????						;   SLEEP n		 - sleep for n cycles
     44  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     45  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     46  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     47  10000 ????
     48  10000 ????						;-------------------------------------------------------------------------------
     49  10000 ????						; SLEEP duration
     50  10000 ????						; Original author: Thomas Jentzsch
     51  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     52  10000 ????						; useful for code where precise timing is required.
     53  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     54  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     55  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     56  10000 ????
     57  10000 ????				       MAC	sleep
     58  10000 ????			    .CYCLES    SET	{1}
     59  10000 ????
     60  10000 ????				       IF	.CYCLES < 2
     61  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     62  10000 ????				       ERR
     63  10000 ????				       ENDIF
     64  10000 ????
     65  10000 ????				       IF	.CYCLES & 1
     66  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     67  10000 ????				       nop	0
     68  10000 ????				       ELSE
     69  10000 ????				       bit	VSYNC
     70  10000 ????				       ENDIF
     71  10000 ????			    .CYCLES    SET	.CYCLES - 3
     72  10000 ????				       ENDIF
     73  10000 ????
     74  10000 ????				       REPEAT	.CYCLES / 2
     75  10000 ????				       nop
     76  10000 ????				       REPEND
     77  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     78  10000 ????
     79  10000 ????						;-------------------------------------------------------------------------------
     80  10000 ????						; VERTICAL_SYNC
     81  10000 ????						; Original author: Manuel Polik
     82  10000 ????						; Inserts the code required for a proper 3 scannline 
     83  10000 ????						; vertical sync sequence
     84  10000 ????						;
     85  10000 ????						; Note: Alters the accumulator
     86  10000 ????						;
     87  10000 ????						; IN:
     88  10000 ????						; OUT: A = 1
     89  10000 ????
     90  10000 ????				       MAC	vertical_sync
     91  10000 ????				       LDA	#$02	; A = VSYNC enable
     92  10000 ????				       STA	WSYNC	; Finish current line
     93  10000 ????				       STA	VSYNC	; Start vertical sync
     94  10000 ????				       STA	WSYNC	; 1st line vertical sync
     95  10000 ????				       STA	WSYNC	; 2nd line vertical sync
     96  10000 ????				       LSR		; A = VSYNC disable
     97  10000 ????				       STA	WSYNC	; 3rd line vertical sync
     98  10000 ????				       STA	VSYNC	; Stop vertical sync
     99  10000 ????				       ENDM
    100  10000 ????
    101  10000 ????						;-------------------------------------------------------------------------------
    102  10000 ????						; CLEAN_START
    103  10000 ????						; Original author: Andrew Davie
    104  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    105  10000 ????						; Sets stack pointer to $FF, and all registers to 0
    106  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    107  10000 ????						; Use as very first section of code on boot (ie: at reset)
    108  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    109  10000 ????
    110  10000 ????				       MAC	clean_start
    111  10000 ????				       sei
    112  10000 ????				       cld
    113  10000 ????
    114  10000 ????				       ldx	#0
    115  10000 ????				       txa
    116  10000 ????				       tay
    117  10000 ????			    .CLEAR_STACK dex
    118  10000 ????				       txs
    119  10000 ????				       pha
    120  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  10000 ????
    122  10000 ????				       ENDM
    123  10000 ????
    124  10000 ????						;-------------------------------------------------------
    125  10000 ????						; SET_POINTER
    126  10000 ????						; Original author: Manuel Rotschkar
    127  10000 ????						;
    128  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  10000 ????						;
    130  10000 ????						; Usage: SET_POINTER pointer, address
    131  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  10000 ????						;
    133  10000 ????						; Note: Alters the accumulator, NZ flags
    134  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  10000 ????						; IN 2: absolute address
    136  10000 ????
    137  10000 ????				       MAC	set_pointer
    138  10000 ????			    .POINTER   SET	{1}
    139  10000 ????			    .ADDRESS   SET	{2}
    140  10000 ????
    141  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  10000 ????				       STA	.POINTER	; Store in pointer
    143  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    144  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    145  10000 ????
    146  10000 ????				       ENDM
    147  10000 ????
    148  10000 ????						; EOF
------- FILE 2600basic.h
------- FILE 2600basic_variable_redefs.h LEVEL 3 PASS 3
      0  10000 ????				       include	"2600basic_variable_redefs.h"
      1  10000 ????						; This file contains variable mapping and other information for the current project.
      2  10000 ????
      3  10000 ????		00 17	    musicData2_length =	.skipL0245-musicData2
      4  10000 ????
      5  10000 ????		00 17	    musicData1_length =	.skipL0244-musicData1
      6  10000 ????
      7  10000 ????		00 ed	    rand16     =	z
      8  10000 ????
      9  10000 ????		00 e6	    _cont_telas =	s
     10  10000 ????
     11  10000 ????		00 e5	    _cont_anima_morte =	r
     12  10000 ????
     13  10000 ????		00 e4	    _fases     =	q
     14  10000 ????
     15  10000 ????		00 e2	    _SC_Back   =	o
     16  10000 ????
     17  10000 ????		00 e1	    _animacao  =	n
     18  10000 ????
     19  10000 ????		00 e0	    _Ch1_Sound =	m
     20  10000 ????
     21  10000 ????		00 df	    _dificuldade =	l
     22  10000 ????
     23  10000 ????		00 de	    musicTimer =	k
     24  10000 ????
     25  10000 ????		00 dd	    _bit_supressores =	j
     26  10000 ????
     27  10000 ????		00 db	    musicPointer =	h
     28  10000 ????
     29  10000 ????		00 da	    _duracao_som1 =	g
     30  10000 ????
     31  10000 ????		00 d9	    _duracao_som0 =	f
     32  10000 ????
     33  10000 ????		00 d8	    _cont_escudo =	e
     34  10000 ????
     35  10000 ????		00 d4	    _Ch0_Sound =	a
     36  10000 ????
     37  10000 ????		00 01	    pfscore    =	1
     38  10000 ????
     39  10000 ????		00 01	    no_blank_lines =	1
------- FILE 2600basic.h
      7  10000 ????
      8  10000 ????		00 80	    player0x   =	$80
      9  10000 ????		00 81	    player1x   =	$81
     10  10000 ????		00 82	    missile0x  =	$82
     11  10000 ????		00 83	    missile1x  =	$83
     12  10000 ????		00 84	    ballx      =	$84
     13  10000 ????
     14  10000 ????		00 85	    objecty    =	$85
     15  10000 ????		00 85	    player0y   =	$85
     16  10000 ????		00 86	    player1y   =	$86
     17  10000 ????		00 87	    missile1height =	$87
     18  10000 ????		00 88	    missile1y  =	$88
     19  10000 ????		00 89	    bally      =	$89
     20  10000 ????
     21  10000 ????		00 87	    player1color =	$87	; replaces missile 1
     22  10000 ????
     23  10000 ????		00 8a	    player0pointer =	$8A	;uses $8A-$8B
     24  10000 ????		00 8a	    player0pointerlo =	$8A
     25  10000 ????		00 8b	    player0pointerhi =	$8B
     26  10000 ????		00 8c	    player1pointer =	$8C	; $8C-$8D
     27  10000 ????		00 8c	    player1pointerlo =	$8C
     28  10000 ????		00 8d	    player1pointerhi =	$8D
     29  10000 ????
     30  10000 ????		00 8e	    player0height =	$8E
     31  10000 ????		00 8f	    player1height =	$8F
     32  10000 ????		00 90	    missile0height =	$90
     33  10000 ????		00 91	    missile0y  =	$91
     34  10000 ????		00 92	    ballheight =	$92
     35  10000 ????
     36  10000 ????		00 90	    currentpaddle =	$90	; replaces missile 0 (and can't be used with playercolor)
     37  10000 ????		00 91	    paddle     =	$91	; replaces missile 0
     38  10000 ????		00 82	    player0colorstore =	$82	; replaces missile 0
     39  10000 ????		00 90	    player0color =	$90	; replaces missile 0
     40  10000 ????
     41  10000 ????		00 93	    score      =	$93	; $93-$95
     42  10000 ????		00 96	    scorepointers =	$96	; $96-$9B = 6 bytes
     43  10000 ????		00 9c	    temp1      =	$9C	;used by kernel.  can be used in program too, but
     44  10000 ????		00 9d	    temp2      =	$9D	;are obliterated when drawscreen is called.
     45  10000 ????		00 9e	    temp3      =	$9E
     46  10000 ????		00 9f	    temp4      =	$9F
     47  10000 ????		00 a0	    temp5      =	$A0
     48  10000 ????		00 a1	    temp6      =	$A1
     49  10000 ????
     50  10000 ????		00 a2	    rand       =	$A2
     51  10000 ????		00 a3	    scorecolor =	$A3
     52  10000 ????
     53  10000 ????		00 a4	    var0       =	$A4
     54  10000 ????		00 a5	    var1       =	$A5
     55  10000 ????		00 a6	    var2       =	$A6
     56  10000 ????		00 a7	    var3       =	$A7
     57  10000 ????		00 a8	    var4       =	$A8
     58  10000 ????		00 a9	    var5       =	$A9
     59  10000 ????		00 aa	    var6       =	$AA
     60  10000 ????		00 ab	    var7       =	$AB
     61  10000 ????		00 ac	    var8       =	$AC
     62  10000 ????		00 ad	    var9       =	$AD
     63  10000 ????		00 ae	    var10      =	$AE
     64  10000 ????		00 af	    var11      =	$AF
     65  10000 ????		00 b0	    var12      =	$B0
     66  10000 ????		00 b1	    var13      =	$B1
     67  10000 ????		00 b2	    var14      =	$B2
     68  10000 ????		00 b3	    var15      =	$B3
     69  10000 ????		00 b4	    var16      =	$B4
     70  10000 ????		00 b5	    var17      =	$B5
     71  10000 ????		00 b6	    var18      =	$B6
     72  10000 ????		00 b7	    var19      =	$B7
     73  10000 ????		00 b8	    var20      =	$B8
     74  10000 ????		00 b9	    var21      =	$B9
     75  10000 ????		00 ba	    var22      =	$BA
     76  10000 ????		00 bb	    var23      =	$BB
     77  10000 ????		00 bc	    var24      =	$BC
     78  10000 ????		00 bd	    var25      =	$BD
     79  10000 ????		00 be	    var26      =	$BE
     80  10000 ????		00 bf	    var27      =	$BF
     81  10000 ????		00 c0	    var28      =	$C0
     82  10000 ????		00 c1	    var29      =	$C1
     83  10000 ????		00 c2	    var30      =	$C2
     84  10000 ????		00 c3	    var31      =	$C3
     85  10000 ????		00 c4	    var32      =	$C4
     86  10000 ????		00 c5	    var33      =	$C5
     87  10000 ????		00 c6	    var34      =	$C6
     88  10000 ????		00 c7	    var35      =	$C7
     89  10000 ????		00 c8	    var36      =	$C8
     90  10000 ????		00 c9	    var37      =	$C9
     91  10000 ????		00 ca	    var38      =	$CA
     92  10000 ????		00 cb	    var39      =	$CB
     93  10000 ????		00 cc	    var40      =	$CC
     94  10000 ????		00 cd	    var41      =	$CD
     95  10000 ????		00 ce	    var42      =	$CE
     96  10000 ????		00 cf	    var43      =	$CF
     97  10000 ????		00 d0	    var44      =	$D0
     98  10000 ????		00 d1	    var45      =	$D1
     99  10000 ????		00 d2	    var46      =	$D2
    100  10000 ????		00 d3	    var47      =	$D3
    101  10000 ????
    102  10000 ????		00 d4	    A	       =	$d4
    103  10000 ????		00 d4	    a	       =	$d4
    104  10000 ????		00 d5	    B	       =	$d5
    105  10000 ????		00 d5	    b	       =	$d5
    106  10000 ????		00 d6	    C	       =	$d6
    107  10000 ????		00 d6	    c	       =	$d6
    108  10000 ????		00 d7	    D	       =	$d7
    109  10000 ????		00 d7	    d	       =	$d7
    110  10000 ????		00 d8	    E	       =	$d8
    111  10000 ????		00 d8	    e	       =	$d8
    112  10000 ????		00 d9	    F	       =	$d9
    113  10000 ????		00 d9	    f	       =	$d9
    114  10000 ????		00 da	    G	       =	$da
    115  10000 ????		00 da	    g	       =	$da
    116  10000 ????		00 db	    H	       =	$db
    117  10000 ????		00 db	    h	       =	$db
    118  10000 ????		00 dc	    I	       =	$dc
    119  10000 ????		00 dc	    i	       =	$dc
    120  10000 ????		00 dd	    J	       =	$dd
    121  10000 ????		00 dd	    j	       =	$dd
    122  10000 ????		00 de	    K	       =	$de
    123  10000 ????		00 de	    k	       =	$de
    124  10000 ????		00 df	    L	       =	$df
    125  10000 ????		00 df	    l	       =	$df
    126  10000 ????		00 e0	    M	       =	$e0
    127  10000 ????		00 e0	    m	       =	$e0
    128  10000 ????		00 e1	    N	       =	$e1
    129  10000 ????		00 e1	    n	       =	$e1
    130  10000 ????		00 e2	    O	       =	$e2
    131  10000 ????		00 e2	    o	       =	$e2
    132  10000 ????		00 e3	    P	       =	$e3
    133  10000 ????		00 e3	    p	       =	$e3
    134  10000 ????		00 e4	    Q	       =	$e4
    135  10000 ????		00 e4	    q	       =	$e4
    136  10000 ????		00 e5	    R	       =	$e5
    137  10000 ????		00 e5	    r	       =	$e5
    138  10000 ????		00 e6	    S	       =	$e6
    139  10000 ????		00 e6	    s	       =	$e6
    140  10000 ????		00 e7	    T	       =	$e7
    141  10000 ????		00 e7	    t	       =	$e7
    142  10000 ????		00 e8	    U	       =	$e8
    143  10000 ????		00 e8	    u	       =	$e8
    144  10000 ????		00 e9	    V	       =	$e9
    145  10000 ????		00 e9	    v	       =	$e9
    146  10000 ????		00 ea	    W	       =	$ea
    147  10000 ????		00 ea	    w	       =	$ea
    148  10000 ????		00 eb	    X	       =	$eb
    149  10000 ????		00 eb	    x	       =	$eb
    150  10000 ????		00 ec	    Y	       =	$ec
    151  10000 ????		00 ec	    y	       =	$ec
    152  10000 ????		00 ed	    Z	       =	$ed
    153  10000 ????		00 ed	    z	       =	$ed
    154  10000 ????
    155  10000 ????		00 ee	    temp7      =	$ee	; This is used to aid in bankswitching
    156  10000 ????		00 ef	    playfieldpos =	$ef
    157  10000 ????
    158  10000 ????						; available for other uses, or if unused, provide more stack space
    159  10000 ????
    160  10000 ????		00 f0	    aux1       =	$f0
    161  10000 ????		00 f1	    aux2       =	$f1
    162  10000 ????		00 f2	    aux3       =	$f2
    163  10000 ????		00 f3	    aux4       =	$f3
    164  10000 ????		00 f4	    aux5       =	$f4
    165  10000 ????		00 f5	    aux6       =	$f5
    166  10000 ????
    167  10000 ????						; playfield color/height pointers
    168  10000 ????		00 f0	    pfcolortable =	$f0	; and $d5
    169  10000 ????		00 f0	    pfheighttable =	$f0	; and $d5
    170  10000 ????						; the above pointers are the same because if color and height are both used together,
    171  10000 ????						; they must used absolute indexed and cannot use pointers
    172  10000 ????
    173  10000 ????		00 f2	    lifepointer =	$f2	; pointer to "lives" shape
    174  10000 ????						; upper 3 bits of $f2 contain the number of lives
    175  10000 ????		00 f4	    lifecolor  =	$f4
    176  10000 ????		00 f3	    lives      =	$f3	; # lives >> 5
    177  10000 ????		00 f5	    statusbarlength =	$f5	; only uses upper 5 bits; other bits free
    178  10000 ????
    179  10000 ????		00 f2	    pfscore1   =	$f2	; optional playfield bytes in score
    180  10000 ????		00 f3	    pfscore2   =	$f3
    181  10000 ????		00 f4	    pfscorecolor =	$f4
    182  10000 ????
    183  10000 ????		00 f6	    stack1     =	$f6
    184  10000 ????		00 f7	    stack2     =	$f7
    185  10000 ????		00 f8	    stack3     =	$f8
    186  10000 ????		00 f9	    stack4     =	$f9
    187  10000 ????						; the stack bytes above may be used in the kernel
    188  10000 ????						; stack = F6-F7, F8-F9, FA-FB, FC-FD, FE-FF
    189  10000 ????
    190  10000 ????				       MAC	return
    191  10000 ????				       ifnconst	bankswitch
    192  10000 ????				       rts
    193  10000 ????				       else
    194  10000 ????				       jmp	BS_return
    195  10000 ????				       endif
    196  10000 ????				       ENDM		; auto-return from either a regular or bankswitched module
    197  10000 ????
    198  10000 ????			   -	       ifconst	superchip
    199  10000 ????			   -playfieldbase =	$10D0
    200  10000 ????			   -	       include	superchip.h
    201  10000 ????				       else
    202  10000 ????		00 a4	    playfieldbase =	$A4
    203  10000 ????				       endif
    204  10000 ????
    205  10000 ????				       ifnconst	pfhalfwidth
    206  10000 ????		00 04	    pfwidth    =	4
    207  10000 ????		00 0e	    PF1L       =	PF1
    208  10000 ????		00 0f	    PF2L       =	PF2
    209  10000 ????		00 0e	    PF1R       =	PF1
    210  10000 ????		00 0f	    PF2R       =	PF2
    211  10000 ????		00 00	    pfadjust   =	0
    212  10000 ????			   -	       else
    213  10000 ????			   -pfwidth    =	2
    214  10000 ????			   -	       ifconst	pfcenter
    215  10000 ????			   -PF1L       =	$3F	; no effect
    216  10000 ????			   -PF2L       =	PF2
    217  10000 ????			   -PF1R       =	$3F
    218  10000 ????			   -PF2R       =	PF2	; no effect
    219  10000 ????			   -pfadjust   =	1
    220  10000 ????			   -	       else
    221  10000 ????			   -PF1L       =	PF1
    222  10000 ????			   -PF2L       =	PF2
    223  10000 ????			   -PF1R       =	$3F	; no effect
    224  10000 ????			   -PF2R       =	$3F	; no effect
    225  10000 ????			   -pfadjust   =	0
    226  10000 ????			   -	       endif
    227  10000 ????				       endif
    228  10000 ????
    229  10000 ????						; define playfield start based on height
    230  10000 ????				       ifnconst	pfres
    231  10000 ????		00 a4	    playfield  =	playfieldbase
    232  10000 ????			   -	       else
    233  10000 ????			   -playfield  =	playfieldbase-(pfres-12*(4/pfwidth))*pfwidth
    234  10000 ????				       endif
------- FILE d:\Batari Projects\RandomHoles\RandomHoles\randomholes.bas.asm
------- FILE 2600basic_variable_redefs.h LEVEL 2 PASS 3
      0  10000 ????				       include	"2600basic_variable_redefs.h"
      1  10000 ????						; This file contains variable mapping and other information for the current project.
      2  10000 ????
      3  10000 ????		00 17	    musicData2_length =	.skipL0245-musicData2
      4  10000 ????
      5  10000 ????		00 17	    musicData1_length =	.skipL0244-musicData1
      6  10000 ????
      7  10000 ????		00 ed	    rand16     =	z
      8  10000 ????
      9  10000 ????		00 e6	    _cont_telas =	s
     10  10000 ????
     11  10000 ????		00 e5	    _cont_anima_morte =	r
     12  10000 ????
     13  10000 ????		00 e4	    _fases     =	q
     14  10000 ????
     15  10000 ????		00 e2	    _SC_Back   =	o
     16  10000 ????
     17  10000 ????		00 e1	    _animacao  =	n
     18  10000 ????
     19  10000 ????		00 e0	    _Ch1_Sound =	m
     20  10000 ????
     21  10000 ????		00 df	    _dificuldade =	l
     22  10000 ????
     23  10000 ????		00 de	    musicTimer =	k
     24  10000 ????
     25  10000 ????		00 dd	    _bit_supressores =	j
     26  10000 ????
     27  10000 ????		00 db	    musicPointer =	h
     28  10000 ????
     29  10000 ????		00 da	    _duracao_som1 =	g
     30  10000 ????
     31  10000 ????		00 d9	    _duracao_som0 =	f
     32  10000 ????
     33  10000 ????		00 d8	    _cont_escudo =	e
     34  10000 ????
     35  10000 ????		00 d4	    _Ch0_Sound =	a
     36  10000 ????
     37  10000 ????		00 01	    pfscore    =	1
     38  10000 ????
     39  10000 ????		00 01	    no_blank_lines =	1
------- FILE d:\Batari Projects\RandomHoles\RandomHoles\randomholes.bas.asm
      8  10000 ????			   -	       ifconst	bankswitch
      9  10000 ????			   -	       if	bankswitch == 8
     10  10000 ????			   -	       ORG	$1000
     11  10000 ????			   -	       RORG	$D000
     12  10000 ????			   -	       endif
     13  10000 ????			   -	       if	bankswitch == 16
     14  10000 ????			   -	       ORG	$1000
     15  10000 ????			   -	       RORG	$9000
     16  10000 ????			   -	       endif
     17  10000 ????			   -	       if	bankswitch == 32
     18  10000 ????			   -	       ORG	$1000
     19  10000 ????			   -	       RORG	$1000
     20  10000 ????			   -	       endif
     21  10000 ????			   -	       if	bankswitch == 64
     22  10000 ????			   -	       ORG	$1000
     23  10000 ????			   -	       RORG	$1000
     24  10000 ????			   -	       endif
     25  10000 ????				       else
     26  f000					      ORG	$F000
     27  f000					      endif
     28  f000
     29  f000				  -	      ifconst	bankswitch_hotspot
     30  f000				  -	      if	bankswitch_hotspot = $083F	; 0840 bankswitching hotspot
     31  f000				  -	      .byte	0	; stop unexpected bankswitches
     32  f000				  -	      endif
     33  f000					      endif
     34  f000							; Provided under the CC0 license. See the included LICENSE.txt for details.
     35  f000
     36  f000				   start
     37  f000		       78		      sei
     38  f001		       d8		      cld
     39  f002		       a0 00		      ldy	#0
     40  f004		       a5 d0		      lda	$D0
     41  f006		       c9 2c		      cmp	#$2C	;check RAM location #1
     42  f008		       d0 07		      bne	MachineIs2600
     43  f00a		       a5 d1		      lda	$D1
     44  f00c		       c9 a9		      cmp	#$A9	;check RAM location #2
     45  f00e		       d0 01		      bne	MachineIs2600
     46  f010		       88		      dey
     47  f011				   MachineIs2600
     48  f011		       a2 00		      ldx	#0
     49  f013		       8a		      txa
     50  f014				   clearmem
     51  f014		       e8		      inx
     52  f015		       9a		      txs
     53  f016		       48		      pha
     54  f017		       d0 fb		      bne	clearmem
     55  f019		       84 9c		      sty	temp1
     56  f01b					      ifnconst	multisprite
     57  f01b				  -	      ifconst	pfrowheight
     58  f01b				  -	      lda	#pfrowheight
     59  f01b					      else
     60  f01b				  -	      ifconst	pfres
     61  f01b				  -	      lda	#(96/pfres)
     62  f01b					      else
     63  f01b		       a9 08		      lda	#8
     64  f01d					      endif
     65  f01d					      endif
     66  f01d		       85 ef		      sta	playfieldpos
     67  f01f					      endif
     68  f01f		       a2 05		      ldx	#5
     69  f021				   initscore
     70  f021		       a9 9c		      lda	#<scoretable
     71  f023		       95 96		      sta	scorepointers,x
     72  f025		       ca		      dex
     73  f026		       10 f9		      bpl	initscore
     74  f028		       a9 01		      lda	#1
     75  f02a		       85 0a		      sta	CTRLPF
     76  f02c		       0d 84 02 	      ora	INTIM
     77  f02f		       85 a2		      sta	rand
     78  f031
     79  f031				  -	      ifconst	multisprite
     80  f031				  -	      jsr	multisprite_setup
     81  f031					      endif
     82  f031
     83  f031					      ifnconst	bankswitch
     84  f031		       4c 6c f4 	      jmp	game
     85  f034				  -	      else
     86  f034				  -	      lda	#>(game-1)
     87  f034				  -	      pha
     88  f034				  -	      lda	#<(game-1)
     89  f034				  -	      pha
     90  f034				  -	      pha
     91  f034				  -	      pha
     92  f034				  -	      ldx	#1
     93  f034				  -	      jmp	BS_jsr
     94  f034					      endif
     95  f034							; Provided under the CC0 license. See the included LICENSE.txt for details.
     96  f034
     97  f034							; This is a 2-line kernel!
     98  f034					      ifnconst	vertical_reflect
     99  f034				   kernel
    100  f034					      endif
    101  f034		       85 02		      sta	WSYNC
    102  f036		       a9 ff		      lda	#255
    103  f038		       8d 96 02 	      sta	TIM64T
    104  f03b
    105  f03b		       a9 01		      lda	#1
    106  f03d		       85 27		      sta	VDELBL
    107  f03f		       85 25		      sta	VDELP0
    108  f041		       a6 92		      ldx	ballheight
    109  f043		       e8		      inx
    110  f044		       e8		      inx
    111  f045		       86 9f		      stx	temp4
    112  f047		       a5 86		      lda	player1y
    113  f049		       85 9e		      sta	temp3
    114  f04b
    115  f04b				  -	      ifconst	shakescreen
    116  f04b				  -	      jsr	doshakescreen
    117  f04b					      else
    118  f04b		       a6 90		      ldx	missile0height
    119  f04d		       e8		      inx
    120  f04e					      endif
    121  f04e
    122  f04e		       e8		      inx
    123  f04f		       86 f6		      stx	stack1
    124  f051
    125  f051		       a5 89		      lda	bally
    126  f053		       85 f7		      sta	stack2
    127  f055
    128  f055		       a5 85		      lda	player0y
    129  f057		       a2 00		      ldx	#0
    130  f059		       85 02		      sta	WSYNC
    131  f05b		       86 1b		      stx	GRP0
    132  f05d		       86 1c		      stx	GRP1
    133  f05f		       86 0e		      stx	PF1L
    134  f061		       86 0f		      stx	PF2
    135  f063		       86 2c		      stx	CXCLR
    136  f065				  -	      ifconst	readpaddle
    137  f065				  -	      stx	paddle
    138  f065					      else
      0  f065					      sleep	3
      1  f065				   .CYCLES    SET	3
      2  f065
      3  f065				  -	      IF	.CYCLES < 2
      4  f065				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f065				  -	      ERR
      6  f065					      ENDIF
      7  f065
      8  f065					      IF	.CYCLES & 1
      9  f065					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f065		       04 00		      nop	0
     11  f067				  -	      ELSE
     12  f067				  -	      bit	VSYNC
     13  f067					      ENDIF
     14  f067				   .CYCLES    SET	.CYCLES - 3
     15  f067					      ENDIF
     16  f067
     17  f067				  -	      REPEAT	.CYCLES / 2
     18  f067				  -	      nop
     19  f067					      REPEND
    140  f067					      endif
    141  f067
    142  f067		       95 9d		      sta	temp2,x
    143  f069
    144  f069							;store these so they can be retrieved later
    145  f069					      ifnconst	pfres
    146  f069		       a2 54		      ldx	#128-44+(4-pfwidth)*12
    147  f06b				  -	      else
    148  f06b				  -	      ldx	#132-pfres*pfwidth
    149  f06b					      endif
    150  f06b
    151  f06b		       c6 85		      dec	player0y
    152  f06d
    153  f06d		       a5 91		      lda	missile0y
    154  f06f		       85 a0		      sta	temp5
    155  f071		       a5 88		      lda	missile1y
    156  f073		       85 a1		      sta	temp6
    157  f075
    158  f075		       a5 ef		      lda	playfieldpos
    159  f077		       85 9c		      sta	temp1
    160  f079
    161  f079				  -	      ifconst	pfrowheight
    162  f079				  -	      lda	#pfrowheight+2
    163  f079					      else
    164  f079					      ifnconst	pfres
    165  f079		       a9 0a		      lda	#10
    166  f07b				  -	      else
    167  f07b				  -	      lda	#(96/pfres)+2	; try to come close to the real size
    168  f07b					      endif
    169  f07b					      endif
    170  f07b		       18		      clc
    171  f07c		       e5 ef		      sbc	playfieldpos
    172  f07e		       85 ef		      sta	playfieldpos
    173  f080		       4c a8 f0 	      jmp	.startkernel
    174  f083
    175  f083				   .skipDrawP0
    176  f083		       a9 00		      lda	#0
    177  f085		       a8		      tay
    178  f086		       4c d6 f0 	      jmp	.continueP0
    179  f089
    180  f089				   .skipDrawP1
    181  f089		       a9 00		      lda	#0
    182  f08b		       a8		      tay
    183  f08c		       4c b2 f0 	      jmp	.continueP1
    184  f08f
    185  f08f				   .kerloop		; enter at cycle 59??
    186  f08f
    187  f08f				   continuekernel
      0  f08f					      sleep	2
      1  f08f				   .CYCLES    SET	2
      2  f08f
      3  f08f				  -	      IF	.CYCLES < 2
      4  f08f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f08f				  -	      ERR
      6  f08f					      ENDIF
      7  f08f
      8  f08f				  -	      IF	.CYCLES & 1
      9  f08f				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f08f				  -	      nop	0
     11  f08f				  -	      ELSE
     12  f08f				  -	      bit	VSYNC
     13  f08f				  -	      ENDIF
     14  f08f				  -.CYCLES    SET	.CYCLES - 3
     15  f08f					      ENDIF
     16  f08f
     17  f08f					      REPEAT	.CYCLES / 2
     18  f08f		       ea		      nop
     19  f090					      REPEND
    189  f090				   continuekernel2
    190  f090		       a5 92		      lda	ballheight
    191  f092
    192  f092				  -	      ifconst	pfres
    193  f092				  -	      ldy	playfield+pfres*pfwidth-132,x
    194  f092				  -	      sty	PF1L	;3
    195  f092				  -	      ldy	playfield+pfres*pfwidth-131-pfadjust,x
    196  f092				  -	      sty	PF2L	;3
    197  f092				  -	      ldy	playfield+pfres*pfwidth-129,x
    198  f092				  -	      sty	PF1R	; 3 too early?
    199  f092				  -	      ldy	playfield+pfres*pfwidth-130-pfadjust,x
    200  f092				  -	      sty	PF2R	;3
    201  f092					      else
    202  f092		       b4 50		      ldy	playfield-48+pfwidth*12+44-128,x
    203  f094		       84 0e		      sty	PF1L	;3
    204  f096		       b4 51		      ldy	playfield-48+pfwidth*12+45-128-pfadjust,x	;4
    205  f098		       84 0f		      sty	PF2L	;3
    206  f09a		       b4 53		      ldy	playfield-48+pfwidth*12+47-128,x	;4
    207  f09c		       84 0e		      sty	PF1R	; 3 too early?
    208  f09e		       b4 52		      ldy	playfield-48+pfwidth*12+46-128-pfadjust,x	;4
    209  f0a0		       84 0f		      sty	PF2R	;3
    210  f0a2					      endif
    211  f0a2
    212  f0a2							; should be playfield+$38 for width=2
    213  f0a2
    214  f0a2		       c7 89		      dcp	bally
    215  f0a4		       2a		      rol
    216  f0a5		       2a		      rol
    217  f0a6							; rol
    218  f0a6							; rol
    219  f0a6				   goback
    220  f0a6		       85 1f		      sta	ENABL
    221  f0a8				   .startkernel
    222  f0a8		       a5 8f		      lda	player1height	;3
    223  f0aa		       c7 86		      dcp	player1y	;5
    224  f0ac		       90 db		      bcc	.skipDrawP1	;2
    225  f0ae		       a4 86		      ldy	player1y	;3
    226  f0b0		       b1 8c		      lda	(player1pointer),y	;5; player0pointer must be selected carefully by the compiler
    227  f0b2							; so it doesn't cross a page boundary!
    228  f0b2
    229  f0b2				   .continueP1
    230  f0b2		       85 1c		      sta	GRP1	;3
    231  f0b4
    232  f0b4					      ifnconst	player1colors
    233  f0b4		       a5 87		      lda	missile1height	;3
    234  f0b6		       c7 88		      dcp	missile1y	;5
    235  f0b8		       2a		      rol		;2
    236  f0b9		       2a		      rol		;2
    237  f0ba		       85 1e		      sta	ENAM1	;3
    238  f0bc				  -	      else
    239  f0bc				  -	      lda	(player1color),y
    240  f0bc				  -	      sta	COLUP1
    241  f0bc				  -	      ifnconst	playercolors
    242  f0bc				  -	      sleep	7
    243  f0bc				  -	      else
    244  f0bc				  -	      lda.w	player0colorstore
    245  f0bc				  -	      sta	COLUP0
    246  f0bc				  -	      endif
    247  f0bc					      endif
    248  f0bc
    249  f0bc				  -	      ifconst	pfres
    250  f0bc				  -	      lda	playfield+pfres*pfwidth-132,x
    251  f0bc				  -	      sta	PF1L	;3
    252  f0bc				  -	      lda	playfield+pfres*pfwidth-131-pfadjust,x
    253  f0bc				  -	      sta	PF2L	;3
    254  f0bc				  -	      lda	playfield+pfres*pfwidth-129,x
    255  f0bc				  -	      sta	PF1R	; 3 too early?
    256  f0bc				  -	      lda	playfield+pfres*pfwidth-130-pfadjust,x
    257  f0bc				  -	      sta	PF2R	;3
    258  f0bc					      else
    259  f0bc		       b5 50		      lda	playfield-48+pfwidth*12+44-128,x	;4
    260  f0be		       85 0e		      sta	PF1L	;3
    261  f0c0		       b5 51		      lda	playfield-48+pfwidth*12+45-128-pfadjust,x	;4
    262  f0c2		       85 0f		      sta	PF2L	;3
    263  f0c4		       b5 53		      lda	playfield-48+pfwidth*12+47-128,x	;4
    264  f0c6		       85 0e		      sta	PF1R	; 3 too early?
    265  f0c8		       b5 52		      lda	playfield-48+pfwidth*12+46-128-pfadjust,x	;4
    266  f0ca		       85 0f		      sta	PF2R	;3
    267  f0cc					      endif
    268  f0cc							; sleep 3
    269  f0cc
    270  f0cc		       a5 8e		      lda	player0height
    271  f0ce		       c7 85		      dcp	player0y
    272  f0d0		       90 b1		      bcc	.skipDrawP0
    273  f0d2		       a4 85		      ldy	player0y
    274  f0d4		       b1 8a		      lda	(player0pointer),y
    275  f0d6				   .continueP0
    276  f0d6		       85 1b		      sta	GRP0
    277  f0d8
    278  f0d8				  -	      ifnconst	no_blank_lines
    279  f0d8				  -	      ifnconst	playercolors
    280  f0d8				  -	      lda	missile0height	;3
    281  f0d8				  -	      dcp	missile0y	;5
    282  f0d8				  -	      sbc	stack1
    283  f0d8				  -	      sta	ENAM0	;3
    284  f0d8				  -	      else
    285  f0d8				  -	      lda	(player0color),y
    286  f0d8				  -	      sta	player0colorstore
    287  f0d8				  -	      sleep	6
    288  f0d8				  -	      endif
    289  f0d8				  -	      dec	temp1
    290  f0d8				  -	      bne	continuekernel
    291  f0d8					      else
    292  f0d8		       c6 9c		      dec	temp1
    293  f0da		       f0 09		      beq	altkernel2
    294  f0dc				  -	      ifconst	readpaddle
    295  f0dc				  -	      ldy	currentpaddle
    296  f0dc				  -	      lda	INPT0,y
    297  f0dc				  -	      bpl	noreadpaddle
    298  f0dc				  -	      inc	paddle
    299  f0dc				  -	      jmp	continuekernel2
    300  f0dc				  -noreadpaddle
    301  f0dc				  -	      sleep	2
    302  f0dc				  -	      jmp	continuekernel
    303  f0dc					      else
    304  f0dc					      ifnconst	playercolors
    305  f0dc				  -	      ifconst	PFcolors
    306  f0dc				  -	      txa
    307  f0dc				  -	      tay
    308  f0dc				  -	      lda	(pfcolortable),y
    309  f0dc				  -	      ifnconst	backgroundchange
    310  f0dc				  -	      sta	COLUPF
    311  f0dc				  -	      else
    312  f0dc				  -	      sta	COLUBK
    313  f0dc				  -	      endif
    314  f0dc				  -	      jmp	continuekernel
    315  f0dc					      else
    316  f0dc				  -	      ifconst	kernelmacrodef
    317  f0dc				  -	      kernelmacro
    318  f0dc					      else
      0  f0dc					      sleep	12
      1  f0dc				   .CYCLES    SET	12
      2  f0dc
      3  f0dc				  -	      IF	.CYCLES < 2
      4  f0dc				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0dc				  -	      ERR
      6  f0dc					      ENDIF
      7  f0dc
      8  f0dc				  -	      IF	.CYCLES & 1
      9  f0dc				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0dc				  -	      nop	0
     11  f0dc				  -	      ELSE
     12  f0dc				  -	      bit	VSYNC
     13  f0dc				  -	      ENDIF
     14  f0dc				  -.CYCLES    SET	.CYCLES - 3
     15  f0dc					      ENDIF
     16  f0dc
     17  f0dc					      REPEAT	.CYCLES / 2
     18  f0dc		       ea		      nop
     17  f0dc					      REPEND
     18  f0dd		       ea		      nop
     17  f0dd					      REPEND
     18  f0de		       ea		      nop
     17  f0de					      REPEND
     18  f0df		       ea		      nop
     17  f0df					      REPEND
     18  f0e0		       ea		      nop
     17  f0e0					      REPEND
     18  f0e1		       ea		      nop
     19  f0e2					      REPEND
    320  f0e2					      endif
    321  f0e2					      endif
    322  f0e2				  -	      else
    323  f0e2				  -	      lda	(player0color),y
    324  f0e2				  -	      sta	player0colorstore
    325  f0e2				  -	      sleep	4
    326  f0e2					      endif
    327  f0e2		       4c 8f f0 	      jmp	continuekernel
    328  f0e5					      endif
    329  f0e5				   altkernel2
    330  f0e5		       8a		      txa
    331  f0e6					      ifnconst	vertical_reflect
    332  f0e6		       cb fc		      sbx	#256-pfwidth
    333  f0e8				  -	      else
    334  f0e8				  -	      sbx	#256-pfwidth/2
    335  f0e8					      endif
    336  f0e8		       30 1b		      bmi	lastkernelline
    337  f0ea				  -	      ifconst	pfrowheight
    338  f0ea				  -	      lda	#pfrowheight
    339  f0ea					      else
    340  f0ea					      ifnconst	pfres
    341  f0ea		       a9 08		      lda	#8
    342  f0ec				  -	      else
    343  f0ec				  -	      lda	#(96/pfres)	; try to come close to the real size
    344  f0ec					      endif
    345  f0ec					      endif
    346  f0ec		       85 9c		      sta	temp1
    347  f0ee		       4c 8f f0 	      jmp	continuekernel
    348  f0f1					      endif
    349  f0f1
    350  f0f1				   altkernel
    351  f0f1
    352  f0f1				  -	      ifconst	PFmaskvalue
    353  f0f1				  -	      lda	#PFmaskvalue
    354  f0f1					      else
    355  f0f1		       a9 00		      lda	#0
    356  f0f3					      endif
    357  f0f3		       85 0e		      sta	PF1L
    358  f0f5		       85 0f		      sta	PF2
    359  f0f7
    360  f0f7
    361  f0f7							;sleep 3
    362  f0f7
    363  f0f7							;28 cycles to fix things
    364  f0f7							;minus 11=17
    365  f0f7
    366  f0f7							; lax temp4
    367  f0f7							; clc
    368  f0f7		       8a		      txa
    369  f0f8					      ifnconst	vertical_reflect
    370  f0f8		       cb fc		      sbx	#256-pfwidth
    371  f0fa				  -	      else
    372  f0fa				  -	      sbx	#256-pfwidth/2
    373  f0fa					      endif
    374  f0fa
    375  f0fa		       30 09		      bmi	lastkernelline
    376  f0fc
    377  f0fc				  -	      ifconst	PFcolorandheight
    378  f0fc				  -	      ifconst	pfres
    379  f0fc				  -	      ldy	playfieldcolorandheight-131+pfres*pfwidth,x
    380  f0fc				  -	      else
    381  f0fc				  -	      ldy	playfieldcolorandheight-87,x
    382  f0fc				  -	      endif
    383  f0fc				  -	      ifnconst	backgroundchange
    384  f0fc				  -	      sty	COLUPF
    385  f0fc				  -	      else
    386  f0fc				  -	      sty	COLUBK
    387  f0fc				  -	      endif
    388  f0fc				  -	      ifconst	pfres
    389  f0fc				  -	      lda	playfieldcolorandheight-132+pfres*pfwidth,x
    390  f0fc				  -	      else
    391  f0fc				  -	      lda	playfieldcolorandheight-88,x
    392  f0fc				  -	      endif
    393  f0fc				  -	      sta.w	temp1
    394  f0fc					      endif
    395  f0fc				  -	      ifconst	PFheights
    396  f0fc				  -	      lsr
    397  f0fc				  -	      lsr
    398  f0fc				  -	      tay
    399  f0fc				  -	      lda	(pfheighttable),y
    400  f0fc				  -	      sta.w	temp1
    401  f0fc					      endif
    402  f0fc				  -	      ifconst	PFcolors
    403  f0fc				  -	      tay
    404  f0fc				  -	      lda	(pfcolortable),y
    405  f0fc				  -	      ifnconst	backgroundchange
    406  f0fc				  -	      sta	COLUPF
    407  f0fc				  -	      else
    408  f0fc				  -	      sta	COLUBK
    409  f0fc				  -	      endif
    410  f0fc				  -	      ifconst	pfrowheight
    411  f0fc				  -	      lda	#pfrowheight
    412  f0fc				  -	      else
    413  f0fc				  -	      ifnconst	pfres
    414  f0fc				  -	      lda	#8
    415  f0fc				  -	      else
    416  f0fc				  -	      lda	#(96/pfres)	; try to come close to the real size
    417  f0fc				  -	      endif
    418  f0fc				  -	      endif
    419  f0fc				  -	      sta	temp1
    420  f0fc					      endif
    421  f0fc					      ifnconst	PFcolorandheight
    422  f0fc					      ifnconst	PFcolors
    423  f0fc					      ifnconst	PFheights
    424  f0fc				  -	      ifnconst	no_blank_lines
    425  f0fc				  -			; read paddle 0
    426  f0fc				  -			; lo-res paddle read
    427  f0fc				  -			; bit INPT0
    428  f0fc				  -			; bmi paddleskipread
    429  f0fc				  -			; inc paddle0
    430  f0fc				  -			;donepaddleskip
    431  f0fc				  -	      sleep	10
    432  f0fc				  -	      ifconst	pfrowheight
    433  f0fc				  -	      lda	#pfrowheight
    434  f0fc				  -	      else
    435  f0fc				  -	      ifnconst	pfres
    436  f0fc				  -	      lda	#8
    437  f0fc				  -	      else
    438  f0fc				  -	      lda	#(96/pfres)	; try to come close to the real size
    439  f0fc				  -	      endif
    440  f0fc				  -	      endif
    441  f0fc				  -	      sta	temp1
    442  f0fc					      endif
    443  f0fc					      endif
    444  f0fc					      endif
    445  f0fc					      endif
    446  f0fc
    447  f0fc
    448  f0fc		       a5 92		      lda	ballheight
    449  f0fe		       c7 89		      dcp	bally
    450  f100		       e5 9f		      sbc	temp4
    451  f102
    452  f102
    453  f102		       4c a6 f0 	      jmp	goback
    454  f105
    455  f105
    456  f105				  -	      ifnconst	no_blank_lines
    457  f105				  -lastkernelline
    458  f105				  -	      ifnconst	PFcolors
    459  f105				  -	      sleep	10
    460  f105				  -	      else
    461  f105				  -	      ldy	#124
    462  f105				  -	      lda	(pfcolortable),y
    463  f105				  -	      sta	COLUPF
    464  f105				  -	      endif
    465  f105				  -
    466  f105				  -	      ifconst	PFheights
    467  f105				  -	      ldx	#1
    468  f105				  -			;sleep 4
    469  f105				  -	      sleep	3	; this was over 1 cycle
    470  f105				  -	      else
    471  f105				  -	      ldx	playfieldpos
    472  f105				  -			;sleep 3
    473  f105				  -	      sleep	2	; this was over 1 cycle
    474  f105				  -	      endif
    475  f105				  -
    476  f105				  -	      jmp	enterlastkernel
    477  f105				  -
    478  f105					      else
    479  f105				   lastkernelline
    480  f105
    481  f105				  -	      ifconst	PFheights
    482  f105				  -	      ldx	#1
    483  f105				  -			;sleep 5
    484  f105				  -	      sleep	4	; this was over 1 cycle
    485  f105					      else
    486  f105		       a6 ef		      ldx	playfieldpos
    487  f107							;sleep 4
      0  f107					      sleep	3	; this was over 1 cycle
      1  f107				   .CYCLES    SET	3
      2  f107
      3  f107				  -	      IF	.CYCLES < 2
      4  f107				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f107				  -	      ERR
      6  f107					      ENDIF
      7  f107
      8  f107					      IF	.CYCLES & 1
      9  f107					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f107		       04 00		      nop	0
     11  f109				  -	      ELSE
     12  f109				  -	      bit	VSYNC
     13  f109					      ENDIF
     14  f109				   .CYCLES    SET	.CYCLES - 3
     15  f109					      ENDIF
     16  f109
     17  f109				  -	      REPEAT	.CYCLES / 2
     18  f109				  -	      nop
     19  f109					      REPEND
    489  f109					      endif
    490  f109
    491  f109		       e0 00		      cpx	#0
    492  f10b		       d0 0a		      bne	.enterfromNBL
    493  f10d		       4c 78 f1 	      jmp	no_blank_lines_bailout
    494  f110					      endif
    495  f110
    496  f110				  -	      if	((<*)>$d5)
    497  f110				  -	      align	256
    498  f110					      endif
    499  f110							; this is a kludge to prevent page wrapping - fix!!!
    500  f110
    501  f110				   .skipDrawlastP1
    502  f110		       a9 00		      lda	#0
    503  f112		       a8		      tay		; added so we don't cross a page
    504  f113		       4c 3d f1 	      jmp	.continuelastP1
    505  f116
    506  f116				   .endkerloop		; enter at cycle 59??
    507  f116
    508  f116		       ea		      nop
    509  f117
    510  f117				   .enterfromNBL
    511  f117				  -	      ifconst	pfres
    512  f117				  -	      ldy.w	playfield+pfres*pfwidth-4
    513  f117				  -	      sty	PF1L	;3
    514  f117				  -	      ldy.w	playfield+pfres*pfwidth-3-pfadjust
    515  f117				  -	      sty	PF2L	;3
    516  f117				  -	      ldy.w	playfield+pfres*pfwidth-1
    517  f117				  -	      sty	PF1R	; possibly too early?
    518  f117				  -	      ldy.w	playfield+pfres*pfwidth-2-pfadjust
    519  f117				  -	      sty	PF2R	;3
    520  f117					      else
    521  f117		       ac d0 00 	      ldy.w	playfield-48+pfwidth*12+44
    522  f11a		       84 0e		      sty	PF1L	;3
    523  f11c		       ac d1 00 	      ldy.w	playfield-48+pfwidth*12+45-pfadjust
    524  f11f		       84 0f		      sty	PF2L	;3
    525  f121		       ac d3 00 	      ldy.w	playfield-48+pfwidth*12+47
    526  f124		       84 0e		      sty	PF1R	; possibly too early?
    527  f126		       ac d2 00 	      ldy.w	playfield-48+pfwidth*12+46-pfadjust
    528  f129		       84 0f		      sty	PF2R	;3
    529  f12b					      endif
    530  f12b
    531  f12b				   enterlastkernel
    532  f12b		       a5 92		      lda	ballheight
    533  f12d
    534  f12d							; tya
    535  f12d		       c7 89		      dcp	bally
    536  f12f							; sleep 4
    537  f12f
    538  f12f							; sbc stack3
    539  f12f		       2a		      rol
    540  f130		       2a		      rol
    541  f131		       85 1f		      sta	ENABL
    542  f133
    543  f133		       a5 8f		      lda	player1height	;3
    544  f135		       c7 86		      dcp	player1y	;5
    545  f137		       90 d7		      bcc	.skipDrawlastP1
    546  f139		       a4 86		      ldy	player1y	;3
    547  f13b		       b1 8c		      lda	(player1pointer),y	;5; player0pointer must be selected carefully by the compiler
    548  f13d							; so it doesn't cross a page boundary!
    549  f13d
    550  f13d				   .continuelastP1
    551  f13d		       85 1c		      sta	GRP1	;3
    552  f13f
    553  f13f					      ifnconst	player1colors
    554  f13f		       a5 87		      lda	missile1height	;3
    555  f141		       c7 88		      dcp	missile1y	;5
    556  f143				  -	      else
    557  f143				  -	      lda	(player1color),y
    558  f143				  -	      sta	COLUP1
    559  f143					      endif
    560  f143
    561  f143		       ca		      dex
    562  f144							;dec temp4 ; might try putting this above PF writes
    563  f144		       f0 34		      beq	endkernel
    564  f146
    565  f146
    566  f146				  -	      ifconst	pfres
    567  f146				  -	      ldy.w	playfield+pfres*pfwidth-4
    568  f146				  -	      sty	PF1L	;3
    569  f146				  -	      ldy.w	playfield+pfres*pfwidth-3-pfadjust
    570  f146				  -	      sty	PF2L	;3
    571  f146				  -	      ldy.w	playfield+pfres*pfwidth-1
    572  f146				  -	      sty	PF1R	; possibly too early?
    573  f146				  -	      ldy.w	playfield+pfres*pfwidth-2-pfadjust
    574  f146				  -	      sty	PF2R	;3
    575  f146					      else
    576  f146		       ac d0 00 	      ldy.w	playfield-48+pfwidth*12+44
    577  f149		       84 0e		      sty	PF1L	;3
    578  f14b		       ac d1 00 	      ldy.w	playfield-48+pfwidth*12+45-pfadjust
    579  f14e		       84 0f		      sty	PF2L	;3
    580  f150		       ac d3 00 	      ldy.w	playfield-48+pfwidth*12+47
    581  f153		       84 0e		      sty	PF1R	; possibly too early?
    582  f155		       ac d2 00 	      ldy.w	playfield-48+pfwidth*12+46-pfadjust
    583  f158		       84 0f		      sty	PF2R	;3
    584  f15a					      endif
    585  f15a
    586  f15a					      ifnconst	player1colors
    587  f15a		       2a		      rol		;2
    588  f15b		       2a		      rol		;2
    589  f15c		       85 1e		      sta	ENAM1	;3
    590  f15e				  -	      else
    591  f15e				  -	      ifnconst	playercolors
    592  f15e				  -	      sleep	7
    593  f15e				  -	      else
    594  f15e				  -	      lda.w	player0colorstore
    595  f15e				  -	      sta	COLUP0
    596  f15e				  -	      endif
    597  f15e					      endif
    598  f15e
    599  f15e		       ad 8e 00 	      lda.w	player0height
    600  f161		       c7 85		      dcp	player0y
    601  f163		       90 0d		      bcc	.skipDrawlastP0
    602  f165		       a4 85		      ldy	player0y
    603  f167		       b1 8a		      lda	(player0pointer),y
    604  f169				   .continuelastP0
    605  f169		       85 1b		      sta	GRP0
    606  f16b
    607  f16b
    608  f16b
    609  f16b				  -	      ifnconst	no_blank_lines
    610  f16b				  -	      lda	missile0height	;3
    611  f16b				  -	      dcp	missile0y	;5
    612  f16b				  -	      sbc	stack1
    613  f16b				  -	      sta	ENAM0	;3
    614  f16b				  -	      jmp	.endkerloop
    615  f16b					      else
    616  f16b				  -	      ifconst	readpaddle
    617  f16b				  -	      ldy	currentpaddle
    618  f16b				  -	      lda	INPT0,y
    619  f16b				  -	      bpl	noreadpaddle2
    620  f16b				  -	      inc	paddle
    621  f16b				  -	      jmp	.endkerloop
    622  f16b				  -noreadpaddle2
    623  f16b				  -	      sleep	4
    624  f16b				  -	      jmp	.endkerloop
    625  f16b					      else		; no_blank_lines and no paddle reading
    626  f16b		       68		      pla
    627  f16c		       48		      pha		; 14 cycles in 4 bytes
    628  f16d		       68		      pla
    629  f16e		       48		      pha
    630  f16f							; sleep 14
    631  f16f		       4c 16 f1 	      jmp	.endkerloop
    632  f172					      endif
    633  f172					      endif
    634  f172
    635  f172
    636  f172							; ifconst donepaddleskip
    637  f172							;paddleskipread
    638  f172							; this is kind of lame, since it requires 4 cycles from a page boundary crossing
    639  f172							; plus we get a lo-res paddle read
    640  f172							; bmi donepaddleskip
    641  f172							; endif
    642  f172
    643  f172				   .skipDrawlastP0
    644  f172		       a9 00		      lda	#0
    645  f174		       a8		      tay
    646  f175		       4c 69 f1 	      jmp	.continuelastP0
    647  f178
    648  f178					      ifconst	no_blank_lines
    649  f178				   no_blank_lines_bailout
    650  f178		       a2 00		      ldx	#0
    651  f17a					      endif
    652  f17a
    653  f17a				   endkernel
    654  f17a							; 6 digit score routine
    655  f17a		       86 0e		      stx	PF1
    656  f17c		       86 0f		      stx	PF2
    657  f17e		       86 0d		      stx	PF0
    658  f180		       18		      clc
    659  f181
    660  f181				  -	      ifconst	pfrowheight
    661  f181				  -	      lda	#pfrowheight+2
    662  f181					      else
    663  f181					      ifnconst	pfres
    664  f181		       a9 0a		      lda	#10
    665  f183				  -	      else
    666  f183				  -	      lda	#(96/pfres)+2	; try to come close to the real size
    667  f183					      endif
    668  f183					      endif
    669  f183
    670  f183		       e5 ef		      sbc	playfieldpos
    671  f185		       85 ef		      sta	playfieldpos
    672  f187		       8a		      txa
    673  f188
    674  f188				  -	      ifconst	shakescreen
    675  f188				  -	      bit	shakescreen
    676  f188				  -	      bmi	noshakescreen2
    677  f188				  -	      ldx	#$3D
    678  f188				  -noshakescreen2
    679  f188					      endif
    680  f188
    681  f188		       95 02		      sta	WSYNC,x
    682  f18a
    683  f18a							; STA WSYNC ;first one, need one more
    684  f18a		       85 0b		      sta	REFP0
    685  f18c		       85 0c		      sta	REFP1
    686  f18e		       85 1b		      STA	GRP0
    687  f190		       85 1c		      STA	GRP1
    688  f192							; STA PF1
    689  f192							; STA PF2
    690  f192		       85 2b		      sta	HMCLR
    691  f194		       85 1d		      sta	ENAM0
    692  f196		       85 1e		      sta	ENAM1
    693  f198		       85 1f		      sta	ENABL
    694  f19a
    695  f19a		       a5 9d		      lda	temp2	;restore variables that were obliterated by kernel
    696  f19c		       85 85		      sta	player0y
    697  f19e		       a5 9e		      lda	temp3
    698  f1a0		       85 86		      sta	player1y
    699  f1a2					      ifnconst	player1colors
    700  f1a2		       a5 a1		      lda	temp6
    701  f1a4		       85 88		      sta	missile1y
    702  f1a6					      endif
    703  f1a6					      ifnconst	playercolors
    704  f1a6					      ifnconst	readpaddle
    705  f1a6		       a5 a0		      lda	temp5
    706  f1a8		       85 91		      sta	missile0y
    707  f1aa					      endif
    708  f1aa					      endif
    709  f1aa		       a5 f7		      lda	stack2
    710  f1ac		       85 89		      sta	bally
    711  f1ae
    712  f1ae							; strangely, this isn't required any more. might have
    713  f1ae							; resulted from the no_blank_lines score bounce fix
    714  f1ae							;ifconst no_blank_lines
    715  f1ae							;sta WSYNC
    716  f1ae							;endif
    717  f1ae
    718  f1ae		       ad 84 02 	      lda	INTIM
    719  f1b1		       18		      clc
    720  f1b2					      ifnconst	vblank_time
    721  f1b2		       69 8e		      adc	#43+12+87
    722  f1b4				  -	      else
    723  f1b4				  -	      adc	#vblank_time+12+87
    724  f1b4				  -
    725  f1b4					      endif
    726  f1b4							; sta WSYNC
    727  f1b4		       8d 96 02 	      sta	TIM64T
    728  f1b7
    729  f1b7					      ifconst	minikernel
    730  f1b7		       20 16 fd 	      jsr	minikernel
    731  f1ba					      endif
    732  f1ba
    733  f1ba							; now reassign temp vars for score pointers
    734  f1ba
    735  f1ba							; score pointers contain:
    736  f1ba							; score1-5: lo1,lo2,lo3,lo4,lo5,lo6
    737  f1ba							; swap lo2->temp1
    738  f1ba							; swap lo4->temp3
    739  f1ba							; swap lo6->temp5
    740  f1ba					      ifnconst	noscore
    741  f1ba		       a5 97		      lda	scorepointers+1
    742  f1bc							; ldy temp1
    743  f1bc		       85 9c		      sta	temp1
    744  f1be							; sty scorepointers+1
    745  f1be
    746  f1be		       a5 99		      lda	scorepointers+3
    747  f1c0							; ldy temp3
    748  f1c0		       85 9e		      sta	temp3
    749  f1c2							; sty scorepointers+3
    750  f1c2
    751  f1c2
    752  f1c2		       85 2b		      sta	HMCLR
    753  f1c4		       ba		      tsx
    754  f1c5		       86 f6		      stx	stack1
    755  f1c7		       a2 e0		      ldx	#$E0
    756  f1c9		       86 20		      stx	HMP0
    757  f1cb
    758  f1cb		       a5 a3		      LDA	scorecolor
    759  f1cd		       85 06		      STA	COLUP0
    760  f1cf		       85 07		      STA	COLUP1
    761  f1d1				  -	      ifconst	scorefade
    762  f1d1				  -	      STA	stack2
    763  f1d1					      endif
    764  f1d1					      ifconst	pfscore
    765  f1d1		       a5 f4		      lda	pfscorecolor
    766  f1d3		       85 08		      sta	COLUPF
    767  f1d5					      endif
    768  f1d5		       85 02		      sta	WSYNC
    769  f1d7		       a2 00		      ldx	#0
    770  f1d9		       86 1b		      STx	GRP0
    771  f1db		       86 1c		      STx	GRP1	; seems to be needed because of vdel
    772  f1dd
    773  f1dd		       a5 9b		      lda	scorepointers+5
    774  f1df							; ldy temp5
    775  f1df		       95 a0		      sta	temp5,x
    776  f1e1							; sty scorepointers+5
    777  f1e1		       a9 ff		      lda	#>scoretable
    778  f1e3		       85 97		      sta	scorepointers+1
    779  f1e5		       85 99		      sta	scorepointers+3
    780  f1e7		       85 9b		      sta	scorepointers+5
    781  f1e9		       85 9d		      sta	temp2
    782  f1eb		       85 9f		      sta	temp4
    783  f1ed		       85 a1		      sta	temp6
    784  f1ef		       a0 07		      LDY	#7
    785  f1f1		       84 25		      STY	VDELP0
    786  f1f3		       85 10		      STA	RESP0
    787  f1f5		       85 11		      STA	RESP1
    788  f1f7
    789  f1f7
    790  f1f7		       a9 03		      LDA	#$03
    791  f1f9		       85 04		      STA	NUSIZ0
    792  f1fb		       85 05		      STA	NUSIZ1
    793  f1fd		       85 26		      STA	VDELP1
    794  f1ff		       a9 f0		      LDA	#$F0
    795  f201		       85 21		      STA	HMP1
    796  f203		       b1 96		      lda	(scorepointers),y
    797  f205		       85 1b		      sta	GRP0
    798  f207		       85 2a		      STA	HMOVE	; cycle 73 ?
    799  f209		       4c 15 f2 	      jmp	beginscore
    800  f20c
    801  f20c
    802  f20c				  -	      if	((<*)>$d4)
    803  f20c				  -	      align	256	; kludge that potentially wastes space! should be fixed!
    804  f20c					      endif
    805  f20c
    806  f20c				   loop2
    807  f20c		       b1 96		      lda	(scorepointers),y	;+5 68 204
    808  f20e		       85 1b		      sta	GRP0	;+3 71 213 D1 -- -- --
    809  f210					      ifconst	pfscore
    810  f210		       ad f2 00 	      lda.w	pfscore1
    811  f213		       85 0e		      sta	PF1
    812  f215				  -	      else
    813  f215				  -	      ifconst	scorefade
    814  f215				  -	      sleep	2
    815  f215				  -	      dec	stack2	; decrement the temporary scorecolor
    816  f215				  -	      else
    817  f215				  -	      sleep	7
    818  f215				  -	      endif
    819  f215					      endif
    820  f215							; cycle 0
    821  f215				   beginscore
    822  f215		       b1 9e		      lda	(scorepointers+$8),y	;+5 5 15
    823  f217		       85 1c		      sta	GRP1	;+3 8 24 D1 D1 D2 --
    824  f219		       b1 9c		      lda	(scorepointers+$6),y	;+5 13 39
    825  f21b		       85 1b		      sta	GRP0	;+3 16 48 D3 D1 D2 D2
    826  f21d		       b3 98		      lax	(scorepointers+$2),y	;+5 29 87
    827  f21f		       9a		      txs
    828  f220		       b3 9a		      lax	(scorepointers+$4),y	;+5 36 108
    829  f222				  -	      ifconst	scorefade
    830  f222				  -	      lda	stack2
    831  f222					      else
      0  f222					      sleep	3
      1  f222				   .CYCLES    SET	3
      2  f222
      3  f222				  -	      IF	.CYCLES < 2
      4  f222				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f222				  -	      ERR
      6  f222					      ENDIF
      7  f222
      8  f222					      IF	.CYCLES & 1
      9  f222					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f222		       04 00		      nop	0
     11  f224				  -	      ELSE
     12  f224				  -	      bit	VSYNC
     13  f224					      ENDIF
     14  f224				   .CYCLES    SET	.CYCLES - 3
     15  f224					      ENDIF
     16  f224
     17  f224				  -	      REPEAT	.CYCLES / 2
     18  f224				  -	      nop
     19  f224					      REPEND
    833  f224					      endif
    834  f224
    835  f224					      ifconst	pfscore
    836  f224		       a5 f3		      lda	pfscore2
    837  f226		       85 0e		      sta	PF1
    838  f228				  -	      else
    839  f228				  -	      ifconst	scorefade
    840  f228				  -	      sta	COLUP0
    841  f228				  -	      sta	COLUP1
    842  f228				  -	      else
    843  f228				  -	      sleep	6
    844  f228				  -	      endif
    845  f228					      endif
    846  f228
    847  f228		       b1 a0		      lda	(scorepointers+$A),y	;+5 21 63
    848  f22a		       86 1c		      stx	GRP1	;+3 44 132 D3 D3 D4 D2!
    849  f22c		       ba		      tsx
    850  f22d		       86 1b		      stx	GRP0	;+3 47 141 D5 D3! D4 D4
    851  f22f		       85 1c		      sta	GRP1	;+3 50 150 D5 D5 D6 D4!
    852  f231		       84 1b		      sty	GRP0	;+3 53 159 D4* D5! D6 D6
    853  f233		       88		      dey
    854  f234		       10 d6		      bpl	loop2	;+2 60 180
    855  f236
    856  f236		       a6 f6		      ldx	stack1
    857  f238		       9a		      txs
    858  f239							; lda scorepointers+1
    859  f239		       a4 9c		      ldy	temp1
    860  f23b							; sta temp1
    861  f23b		       84 97		      sty	scorepointers+1
    862  f23d
    863  f23d		       a9 00		      LDA	#0
    864  f23f		       85 0e		      sta	PF1
    865  f241		       85 1b		      STA	GRP0
    866  f243		       85 1c		      STA	GRP1
    867  f245		       85 25		      STA	VDELP0
    868  f247		       85 26		      STA	VDELP1	;do we need these
    869  f249		       85 04		      STA	NUSIZ0
    870  f24b		       85 05		      STA	NUSIZ1
    871  f24d
    872  f24d							; lda scorepointers+3
    873  f24d		       a4 9e		      ldy	temp3
    874  f24f							; sta temp3
    875  f24f		       84 99		      sty	scorepointers+3
    876  f251
    877  f251							; lda scorepointers+5
    878  f251		       a4 a0		      ldy	temp5
    879  f253							; sta temp5
    880  f253		       84 9b		      sty	scorepointers+5
    881  f255					      endif		;noscore
    882  f255		       a9 c2		      LDA	#%11000010
    883  f257		       85 02		      sta	WSYNC
    884  f259		       85 01		      STA	VBLANK
      0  f25b					      RETURN
      1  f25b					      ifnconst	bankswitch
      2  f25b		       60		      rts
      3  f25c				  -	      else
      4  f25c				  -	      jmp	BS_return
      5  f25c					      endif
    886  f25c
    887  f25c				  -	      ifconst	shakescreen
    888  f25c				  -doshakescreen
    889  f25c				  -	      bit	shakescreen
    890  f25c				  -	      bmi	noshakescreen
    891  f25c				  -	      sta	WSYNC
    892  f25c				  -noshakescreen
    893  f25c				  -	      ldx	missile0height
    894  f25c				  -	      inx
    895  f25c				  -	      rts
    896  f25c					      endif
    897  f25c
    898  f25c							; Provided under the CC0 license. See the included LICENSE.txt for details.
    899  f25c
    900  f25c							; playfield drawing routines
    901  f25c							; you get a 32x12 bitmapped display in a single color :)
    902  f25c							; 0-31 and 0-11
    903  f25c
    904  f25c				   pfclear		; clears playfield - or fill with pattern
    905  f25c				  -	      ifconst	pfres
    906  f25c				  -	      ldx	#pfres*pfwidth-1
    907  f25c					      else
    908  f25c		       a2 2f		      ldx	#47-(4-pfwidth)*12	; will this work?
    909  f25e					      endif
    910  f25e				   pfclear_loop
    911  f25e					      ifnconst	superchip
    912  f25e		       95 a4		      sta	playfield,x
    913  f260				  -	      else
    914  f260				  -	      sta	playfield-128,x
    915  f260					      endif
    916  f260		       ca		      dex
    917  f261		       10 fb		      bpl	pfclear_loop
      0  f263					      RETURN
      1  f263					      ifnconst	bankswitch
      2  f263		       60		      rts
      3  f264				  -	      else
      4  f264				  -	      jmp	BS_return
      5  f264					      endif
    919  f264
    920  f264				   setuppointers
    921  f264		       86 9d		      stx	temp2	; store on.off.flip value
    922  f266		       aa		      tax		; put x-value in x 
    923  f267		       4a		      lsr
    924  f268		       4a		      lsr
    925  f269		       4a		      lsr		; divide x pos by 8 
    926  f26a		       85 9c		      sta	temp1
    927  f26c		       98		      tya
    928  f26d		       0a		      asl
    929  f26e					      if	pfwidth=4
    930  f26e		       0a		      asl		; multiply y pos by 4
    931  f26f					      endif		; else multiply by 2
    932  f26f		       18		      clc
    933  f270		       65 9c		      adc	temp1	; add them together to get actual memory location offset
    934  f272		       a8		      tay		; put the value in y
    935  f273		       a5 9d		      lda	temp2	; restore on.off.flip value
    936  f275		       60		      rts
    937  f276
    938  f276				   pfread
    939  f276							;x=xvalue, y=yvalue
    940  f276		       20 64 f2 	      jsr	setuppointers
    941  f279		       bd de f2 	      lda	setbyte,x
    942  f27c		       39 a4 00 	      and	playfield,y
    943  f27f		       5d de f2 	      eor	setbyte,x
    944  f282							; beq readzero
    945  f282							; lda #1
    946  f282							; readzero
      0  f282					      RETURN
      1  f282					      ifnconst	bankswitch
      2  f282		       60		      rts
      3  f283				  -	      else
      4  f283				  -	      jmp	BS_return
      5  f283					      endif
    948  f283
    949  f283				   pfpixel
    950  f283							;x=xvalue, y=yvalue, a=0,1,2
    951  f283		       20 64 f2 	      jsr	setuppointers
    952  f286
    953  f286				  -	      ifconst	bankswitch
    954  f286				  -	      lda	temp2	; load on.off.flip value (0,1, or 2)
    955  f286				  -	      beq	pixelon_r	; if "on" go to on
    956  f286				  -	      lsr
    957  f286				  -	      bcs	pixeloff_r	; value is 1 if true
    958  f286				  -	      lda	playfield,y	; if here, it's "flip"
    959  f286				  -	      eor	setbyte,x
    960  f286				  -	      ifconst	superchip
    961  f286				  -	      sta	playfield-128,y
    962  f286				  -	      else
    963  f286				  -	      sta	playfield,y
    964  f286				  -	      endif
    965  f286				  -	      RETURN
    966  f286				  -pixelon_r
    967  f286				  -	      lda	playfield,y
    968  f286				  -	      ora	setbyte,x
    969  f286				  -	      ifconst	superchip
    970  f286				  -	      sta	playfield-128,y
    971  f286				  -	      else
    972  f286				  -	      sta	playfield,y
    973  f286				  -	      endif
    974  f286				  -	      RETURN
    975  f286				  -pixeloff_r
    976  f286				  -	      lda	setbyte,x
    977  f286				  -	      eor	#$ff
    978  f286				  -	      and	playfield,y
    979  f286				  -	      ifconst	superchip
    980  f286				  -	      sta	playfield-128,y
    981  f286				  -	      else
    982  f286				  -	      sta	playfield,y
    983  f286				  -	      endif
    984  f286				  -	      RETURN
    985  f286				  -
    986  f286					      else
    987  f286		       4c b7 f2 	      jmp	plotpoint
    988  f289					      endif
    989  f289
    990  f289				   pfhline
    991  f289							;x=xvalue, y=yvalue, a=0,1,2, temp3=endx
    992  f289		       20 64 f2 	      jsr	setuppointers
    993  f28c		       4c 96 f2 	      jmp	noinc
    994  f28f				   keepgoing
    995  f28f		       e8		      inx
    996  f290		       8a		      txa
    997  f291		       29 07		      and	#7
    998  f293		       d0 01		      bne	noinc
    999  f295		       c8		      iny
   1000  f296				   noinc
   1001  f296		       20 b7 f2 	      jsr	plotpoint
   1002  f299		       e4 9e		      cpx	temp3
   1003  f29b		       30 f2		      bmi	keepgoing
      0  f29d					      RETURN
      1  f29d					      ifnconst	bankswitch
      2  f29d		       60		      rts
      3  f29e				  -	      else
      4  f29e				  -	      jmp	BS_return
      5  f29e					      endif
   1005  f29e
   1006  f29e				   pfvline
   1007  f29e							;x=xvalue, y=yvalue, a=0,1,2, temp3=endx
   1008  f29e		       20 64 f2 	      jsr	setuppointers
   1009  f2a1		       84 9c		      sty	temp1	; store memory location offset
   1010  f2a3		       e6 9e		      inc	temp3	; increase final x by 1 
   1011  f2a5		       a5 9e		      lda	temp3
   1012  f2a7		       0a		      asl
   1013  f2a8					      if	pfwidth=4
   1014  f2a8		       0a		      asl		; multiply by 4
   1015  f2a9					      endif		; else multiply by 2
   1016  f2a9		       85 9e		      sta	temp3	; store it
   1017  f2ab							; Thanks to Michael Rideout for fixing a bug in this code
   1018  f2ab							; right now, temp1=y=starting memory location, temp3=final
   1019  f2ab							; x should equal original x value
   1020  f2ab				   keepgoingy
   1021  f2ab		       20 b7 f2 	      jsr	plotpoint
   1022  f2ae		       c8		      iny
   1023  f2af		       c8		      iny
   1024  f2b0					      if	pfwidth=4
   1025  f2b0		       c8		      iny
   1026  f2b1		       c8		      iny
   1027  f2b2					      endif
   1028  f2b2		       c4 9e		      cpy	temp3
   1029  f2b4		       30 f5		      bmi	keepgoingy
      0  f2b6					      RETURN
      1  f2b6					      ifnconst	bankswitch
      2  f2b6		       60		      rts
      3  f2b7				  -	      else
      4  f2b7				  -	      jmp	BS_return
      5  f2b7					      endif
   1031  f2b7
   1032  f2b7				   plotpoint
   1033  f2b7		       a5 9d		      lda	temp2	; load on.off.flip value (0,1, or 2)
   1034  f2b9		       f0 0d		      beq	pixelon	; if "on" go to on
   1035  f2bb		       4a		      lsr
   1036  f2bc		       b0 14		      bcs	pixeloff	; value is 1 if true
   1037  f2be		       b9 a4 00 	      lda	playfield,y	; if here, it's "flip"
   1038  f2c1		       5d de f2 	      eor	setbyte,x
   1039  f2c4				  -	      ifconst	superchip
   1040  f2c4				  -	      sta	playfield-128,y
   1041  f2c4					      else
   1042  f2c4		       99 a4 00 	      sta	playfield,y
   1043  f2c7					      endif
   1044  f2c7		       60		      rts
   1045  f2c8				   pixelon
   1046  f2c8		       b9 a4 00 	      lda	playfield,y
   1047  f2cb		       1d de f2 	      ora	setbyte,x
   1048  f2ce				  -	      ifconst	superchip
   1049  f2ce				  -	      sta	playfield-128,y
   1050  f2ce					      else
   1051  f2ce		       99 a4 00 	      sta	playfield,y
   1052  f2d1					      endif
   1053  f2d1		       60		      rts
   1054  f2d2				   pixeloff
   1055  f2d2		       bd de f2 	      lda	setbyte,x
   1056  f2d5		       49 ff		      eor	#$ff
   1057  f2d7		       39 a4 00 	      and	playfield,y
   1058  f2da				  -	      ifconst	superchip
   1059  f2da				  -	      sta	playfield-128,y
   1060  f2da					      else
   1061  f2da		       99 a4 00 	      sta	playfield,y
   1062  f2dd					      endif
   1063  f2dd		       60		      rts
   1064  f2de
   1065  f2de				   setbyte
   1066  f2de					      ifnconst	pfcenter
   1067  f2de		       80		      .byte.b	$80
   1068  f2df		       40		      .byte.b	$40
   1069  f2e0		       20		      .byte.b	$20
   1070  f2e1		       10		      .byte.b	$10
   1071  f2e2		       08		      .byte.b	$08
   1072  f2e3		       04		      .byte.b	$04
   1073  f2e4		       02		      .byte.b	$02
   1074  f2e5		       01		      .byte.b	$01
   1075  f2e6					      endif
   1076  f2e6		       01		      .byte.b	$01
   1077  f2e7		       02		      .byte.b	$02
   1078  f2e8		       04		      .byte.b	$04
   1079  f2e9		       08		      .byte.b	$08
   1080  f2ea		       10		      .byte.b	$10
   1081  f2eb		       20		      .byte.b	$20
   1082  f2ec		       40		      .byte.b	$40
   1083  f2ed		       80		      .byte.b	$80
   1084  f2ee		       80		      .byte.b	$80
   1085  f2ef		       40		      .byte.b	$40
   1086  f2f0		       20		      .byte.b	$20
   1087  f2f1		       10		      .byte.b	$10
   1088  f2f2		       08		      .byte.b	$08
   1089  f2f3		       04		      .byte.b	$04
   1090  f2f4		       02		      .byte.b	$02
   1091  f2f5		       01		      .byte.b	$01
   1092  f2f6		       01		      .byte.b	$01
   1093  f2f7		       02		      .byte.b	$02
   1094  f2f8		       04		      .byte.b	$04
   1095  f2f9		       08		      .byte.b	$08
   1096  f2fa		       10		      .byte.b	$10
   1097  f2fb		       20		      .byte.b	$20
   1098  f2fc		       40		      .byte.b	$40
   1099  f2fd		       80		      .byte.b	$80
   1100  f2fe							; Provided under the CC0 license. See the included LICENSE.txt for details.
   1101  f2fe
   1102  f2fe				   pfscroll		;(a=0 left, 1 right, 2 up, 4 down, 6=upup, 12=downdown)
   1103  f2fe		       d0 13		      bne	notleft
   1104  f300							;left
   1105  f300				  -	      ifconst	pfres
   1106  f300				  -	      ldx	#pfres*4
   1107  f300					      else
   1108  f300		       a2 30		      ldx	#48
   1109  f302					      endif
   1110  f302				   leftloop
   1111  f302		       b5 a3		      lda	playfield-1,x
   1112  f304		       4a		      lsr
   1113  f305
   1114  f305				  -	      ifconst	superchip
   1115  f305				  -	      lda	playfield-2,x
   1116  f305				  -	      rol
   1117  f305				  -	      sta	playfield-130,x
   1118  f305				  -	      lda	playfield-3,x
   1119  f305				  -	      ror
   1120  f305				  -	      sta	playfield-131,x
   1121  f305				  -	      lda	playfield-4,x
   1122  f305				  -	      rol
   1123  f305				  -	      sta	playfield-132,x
   1124  f305				  -	      lda	playfield-1,x
   1125  f305				  -	      ror
   1126  f305				  -	      sta	playfield-129,x
   1127  f305					      else
   1128  f305		       36 a2		      rol	playfield-2,x
   1129  f307		       76 a1		      ror	playfield-3,x
   1130  f309		       36 a0		      rol	playfield-4,x
   1131  f30b		       76 a3		      ror	playfield-1,x
   1132  f30d					      endif
   1133  f30d
   1134  f30d		       8a		      txa
   1135  f30e		       cb 04		      sbx	#4
   1136  f310		       d0 f0		      bne	leftloop
      0  f312					      RETURN
      1  f312					      ifnconst	bankswitch
      2  f312		       60		      rts
      3  f313				  -	      else
      4  f313				  -	      jmp	BS_return
      5  f313					      endif
   1138  f313
   1139  f313				   notleft
   1140  f313		       4a		      lsr
   1141  f314		       90 13		      bcc	notright
   1142  f316							;right
   1143  f316
   1144  f316				  -	      ifconst	pfres
   1145  f316				  -	      ldx	#pfres*4
   1146  f316					      else
   1147  f316		       a2 30		      ldx	#48
   1148  f318					      endif
   1149  f318				   rightloop
   1150  f318		       b5 a0		      lda	playfield-4,x
   1151  f31a		       4a		      lsr
   1152  f31b				  -	      ifconst	superchip
   1153  f31b				  -	      lda	playfield-3,x
   1154  f31b				  -	      rol
   1155  f31b				  -	      sta	playfield-131,x
   1156  f31b				  -	      lda	playfield-2,x
   1157  f31b				  -	      ror
   1158  f31b				  -	      sta	playfield-130,x
   1159  f31b				  -	      lda	playfield-1,x
   1160  f31b				  -	      rol
   1161  f31b				  -	      sta	playfield-129,x
   1162  f31b				  -	      lda	playfield-4,x
   1163  f31b				  -	      ror
   1164  f31b				  -	      sta	playfield-132,x
   1165  f31b					      else
   1166  f31b		       36 a1		      rol	playfield-3,x
   1167  f31d		       76 a2		      ror	playfield-2,x
   1168  f31f		       36 a3		      rol	playfield-1,x
   1169  f321		       76 a0		      ror	playfield-4,x
   1170  f323					      endif
   1171  f323		       8a		      txa
   1172  f324		       cb 04		      sbx	#4
   1173  f326		       d0 f0		      bne	rightloop
      0  f328					      RETURN
      1  f328					      ifnconst	bankswitch
      2  f328		       60		      rts
      3  f329				  -	      else
      4  f329				  -	      jmp	BS_return
      5  f329					      endif
   1175  f329
   1176  f329				   notright
   1177  f329		       4a		      lsr
   1178  f32a		       90 49		      bcc	notup
   1179  f32c							;up
   1180  f32c		       4a		      lsr
   1181  f32d		       90 02		      bcc	onedecup
   1182  f32f		       c6 ef		      dec	playfieldpos
   1183  f331				   onedecup
   1184  f331		       c6 ef		      dec	playfieldpos
   1185  f333		       f0 02		      beq	shiftdown
   1186  f335		       10 3d		      bpl	noshiftdown2
   1187  f337				   shiftdown
   1188  f337				  -	      ifconst	pfrowheight
   1189  f337				  -	      lda	#pfrowheight
   1190  f337					      else
   1191  f337					      ifnconst	pfres
   1192  f337		       a9 08		      lda	#8
   1193  f339				  -	      else
   1194  f339				  -	      lda	#(96/pfres)	; try to come close to the real size
   1195  f339					      endif
   1196  f339					      endif
   1197  f339
   1198  f339		       85 ef		      sta	playfieldpos
   1199  f33b		       a5 a7		      lda	playfield+3
   1200  f33d		       85 9f		      sta	temp4
   1201  f33f		       a5 a6		      lda	playfield+2
   1202  f341		       85 9e		      sta	temp3
   1203  f343		       a5 a5		      lda	playfield+1
   1204  f345		       85 9d		      sta	temp2
   1205  f347		       a5 a4		      lda	playfield
   1206  f349		       85 9c		      sta	temp1
   1207  f34b		       a2 00		      ldx	#0
   1208  f34d				   up2
   1209  f34d		       b5 a8		      lda	playfield+4,x
   1210  f34f				  -	      ifconst	superchip
   1211  f34f				  -	      sta	playfield-128,x
   1212  f34f				  -	      lda	playfield+5,x
   1213  f34f				  -	      sta	playfield-127,x
   1214  f34f				  -	      lda	playfield+6,x
   1215  f34f				  -	      sta	playfield-126,x
   1216  f34f				  -	      lda	playfield+7,x
   1217  f34f				  -	      sta	playfield-125,x
   1218  f34f					      else
   1219  f34f		       95 a4		      sta	playfield,x
   1220  f351		       b5 a9		      lda	playfield+5,x
   1221  f353		       95 a5		      sta	playfield+1,x
   1222  f355		       b5 aa		      lda	playfield+6,x
   1223  f357		       95 a6		      sta	playfield+2,x
   1224  f359		       b5 ab		      lda	playfield+7,x
   1225  f35b		       95 a7		      sta	playfield+3,x
   1226  f35d					      endif
   1227  f35d		       8a		      txa
   1228  f35e		       cb fc		      sbx	#252
   1229  f360				  -	      ifconst	pfres
   1230  f360				  -	      cpx	#(pfres-1)*4
   1231  f360					      else
   1232  f360		       e0 2c		      cpx	#44
   1233  f362					      endif
   1234  f362		       d0 e9		      bne	up2
   1235  f364
   1236  f364		       a5 9f		      lda	temp4
   1237  f366
   1238  f366				  -	      ifconst	superchip
   1239  f366				  -	      ifconst	pfres
   1240  f366				  -	      sta	playfield+pfres*4-129
   1241  f366				  -	      lda	temp3
   1242  f366				  -	      sta	playfield+pfres*4-130
   1243  f366				  -	      lda	temp2
   1244  f366				  -	      sta	playfield+pfres*4-131
   1245  f366				  -	      lda	temp1
   1246  f366				  -	      sta	playfield+pfres*4-132
   1247  f366				  -	      else
   1248  f366				  -	      sta	playfield+47-128
   1249  f366				  -	      lda	temp3
   1250  f366				  -	      sta	playfield+46-128
   1251  f366				  -	      lda	temp2
   1252  f366				  -	      sta	playfield+45-128
   1253  f366				  -	      lda	temp1
   1254  f366				  -	      sta	playfield+44-128
   1255  f366				  -	      endif
   1256  f366					      else
   1257  f366				  -	      ifconst	pfres
   1258  f366				  -	      sta	playfield+pfres*4-1
   1259  f366				  -	      lda	temp3
   1260  f366				  -	      sta	playfield+pfres*4-2
   1261  f366				  -	      lda	temp2
   1262  f366				  -	      sta	playfield+pfres*4-3
   1263  f366				  -	      lda	temp1
   1264  f366				  -	      sta	playfield+pfres*4-4
   1265  f366					      else
   1266  f366		       85 d3		      sta	playfield+47
   1267  f368		       a5 9e		      lda	temp3
   1268  f36a		       85 d2		      sta	playfield+46
   1269  f36c		       a5 9d		      lda	temp2
   1270  f36e		       85 d1		      sta	playfield+45
   1271  f370		       a5 9c		      lda	temp1
   1272  f372		       85 d0		      sta	playfield+44
   1273  f374					      endif
   1274  f374					      endif
   1275  f374				   noshiftdown2
      0  f374					      RETURN
      1  f374					      ifnconst	bankswitch
      2  f374		       60		      rts
      3  f375				  -	      else
      4  f375				  -	      jmp	BS_return
      5  f375					      endif
   1277  f375
   1278  f375
   1279  f375				   notup
   1280  f375							;down
   1281  f375		       4a		      lsr
   1282  f376		       b0 02		      bcs	oneincup
   1283  f378		       e6 ef		      inc	playfieldpos
   1284  f37a				   oneincup
   1285  f37a		       e6 ef		      inc	playfieldpos
   1286  f37c		       a5 ef		      lda	playfieldpos
   1287  f37e
   1288  f37e				  -	      ifconst	pfrowheight
   1289  f37e				  -	      cmp	#pfrowheight+1
   1290  f37e					      else
   1291  f37e					      ifnconst	pfres
   1292  f37e		       c9 09		      cmp	#9
   1293  f380				  -	      else
   1294  f380				  -	      cmp	#(96/pfres)+1	; try to come close to the real size
   1295  f380					      endif
   1296  f380					      endif
   1297  f380
   1298  f380		       90 3b		      bcc	noshiftdown
   1299  f382		       a9 01		      lda	#1
   1300  f384		       85 ef		      sta	playfieldpos
   1301  f386
   1302  f386				  -	      ifconst	pfres
   1303  f386				  -	      lda	playfield+pfres*4-1
   1304  f386				  -	      sta	temp4
   1305  f386				  -	      lda	playfield+pfres*4-2
   1306  f386				  -	      sta	temp3
   1307  f386				  -	      lda	playfield+pfres*4-3
   1308  f386				  -	      sta	temp2
   1309  f386				  -	      lda	playfield+pfres*4-4
   1310  f386					      else
   1311  f386		       a5 d3		      lda	playfield+47
   1312  f388		       85 9f		      sta	temp4
   1313  f38a		       a5 d2		      lda	playfield+46
   1314  f38c		       85 9e		      sta	temp3
   1315  f38e		       a5 d1		      lda	playfield+45
   1316  f390		       85 9d		      sta	temp2
   1317  f392		       a5 d0		      lda	playfield+44
   1318  f394					      endif
   1319  f394
   1320  f394		       85 9c		      sta	temp1
   1321  f396
   1322  f396				  -	      ifconst	pfres
   1323  f396				  -	      ldx	#(pfres-1)*4
   1324  f396					      else
   1325  f396		       a2 2c		      ldx	#44
   1326  f398					      endif
   1327  f398				   down2
   1328  f398		       b5 a3		      lda	playfield-1,x
   1329  f39a				  -	      ifconst	superchip
   1330  f39a				  -	      sta	playfield-125,x
   1331  f39a				  -	      lda	playfield-2,x
   1332  f39a				  -	      sta	playfield-126,x
   1333  f39a				  -	      lda	playfield-3,x
   1334  f39a				  -	      sta	playfield-127,x
   1335  f39a				  -	      lda	playfield-4,x
   1336  f39a				  -	      sta	playfield-128,x
   1337  f39a					      else
   1338  f39a		       95 a7		      sta	playfield+3,x
   1339  f39c		       b5 a2		      lda	playfield-2,x
   1340  f39e		       95 a6		      sta	playfield+2,x
   1341  f3a0		       b5 a1		      lda	playfield-3,x
   1342  f3a2		       95 a5		      sta	playfield+1,x
   1343  f3a4		       b5 a0		      lda	playfield-4,x
   1344  f3a6		       95 a4		      sta	playfield,x
   1345  f3a8					      endif
   1346  f3a8		       8a		      txa
   1347  f3a9		       cb 04		      sbx	#4
   1348  f3ab		       d0 eb		      bne	down2
   1349  f3ad
   1350  f3ad		       a5 9f		      lda	temp4
   1351  f3af				  -	      ifconst	superchip
   1352  f3af				  -	      sta	playfield-125
   1353  f3af				  -	      lda	temp3
   1354  f3af				  -	      sta	playfield-126
   1355  f3af				  -	      lda	temp2
   1356  f3af				  -	      sta	playfield-127
   1357  f3af				  -	      lda	temp1
   1358  f3af				  -	      sta	playfield-128
   1359  f3af					      else
   1360  f3af		       85 a7		      sta	playfield+3
   1361  f3b1		       a5 9e		      lda	temp3
   1362  f3b3		       85 a6		      sta	playfield+2
   1363  f3b5		       a5 9d		      lda	temp2
   1364  f3b7		       85 a5		      sta	playfield+1
   1365  f3b9		       a5 9c		      lda	temp1
   1366  f3bb		       85 a4		      sta	playfield
   1367  f3bd					      endif
   1368  f3bd				   noshiftdown
      0  f3bd					      RETURN
      1  f3bd					      ifnconst	bankswitch
      2  f3bd		       60		      rts
      3  f3be				  -	      else
      4  f3be				  -	      jmp	BS_return
      5  f3be					      endif
   1370  f3be							; Provided under the CC0 license. See the included LICENSE.txt for details.
   1371  f3be
   1372  f3be							;standard routines needed for pretty much all games
   1373  f3be							; just the random number generator is left - maybe we should remove this asm file altogether?
   1374  f3be							; repositioning code and score pointer setup moved to overscan
   1375  f3be							; read switches, joysticks now compiler generated (more efficient)
   1376  f3be
   1377  f3be				   randomize
   1378  f3be		       a5 a2		      lda	rand
   1379  f3c0		       4a		      lsr
   1380  f3c1					      ifconst	rand16
   1381  f3c1		       26 ed		      rol	rand16
   1382  f3c3					      endif
   1383  f3c3		       90 02		      bcc	noeor
   1384  f3c5		       49 b4		      eor	#$B4
   1385  f3c7				   noeor
   1386  f3c7		       85 a2		      sta	rand
   1387  f3c9					      ifconst	rand16
   1388  f3c9		       45 ed		      eor	rand16
   1389  f3cb					      endif
      0  f3cb					      RETURN
      1  f3cb					      ifnconst	bankswitch
      2  f3cb		       60		      rts
      3  f3cc				  -	      else
      4  f3cc				  -	      jmp	BS_return
      5  f3cc					      endif
   1391  f3cc							; Provided under the CC0 license. See the included LICENSE.txt for details.
   1392  f3cc
   1393  f3cc				   drawscreen
   1394  f3cc				  -	      ifconst	debugscore
   1395  f3cc				  -	      ldx	#14
   1396  f3cc				  -	      lda	INTIM	; display # cycles left in the score
   1397  f3cc				  -
   1398  f3cc				  -	      ifconst	mincycles
   1399  f3cc				  -	      lda	mincycles
   1400  f3cc				  -	      cmp	INTIM
   1401  f3cc				  -	      lda	mincycles
   1402  f3cc				  -	      bcc	nochange
   1403  f3cc				  -	      lda	INTIM
   1404  f3cc				  -	      sta	mincycles
   1405  f3cc				  -nochange
   1406  f3cc				  -	      endif
   1407  f3cc				  -
   1408  f3cc				  -			; cmp #$2B
   1409  f3cc				  -			; bcs no_cycles_left
   1410  f3cc				  -	      bmi	cycles_left
   1411  f3cc				  -	      ldx	#64
   1412  f3cc				  -	      eor	#$ff	;make negative
   1413  f3cc				  -cycles_left
   1414  f3cc				  -	      stx	scorecolor
   1415  f3cc				  -	      and	#$7f	; clear sign bit
   1416  f3cc				  -	      tax
   1417  f3cc				  -	      lda	scorebcd,x
   1418  f3cc				  -	      sta	score+2
   1419  f3cc				  -	      lda	scorebcd1,x
   1420  f3cc				  -	      sta	score+1
   1421  f3cc				  -	      jmp	done_debugscore
   1422  f3cc				  -scorebcd
   1423  f3cc				  -	      .byte	$00, $64, $28, $92, $56, $20, $84, $48, $12, $76, $40
   1424  f3cc				  -	      .byte	$04, $68, $32, $96, $60, $24, $88, $52, $16, $80, $44
   1425  f3cc				  -	      .byte	$08, $72, $36, $00, $64, $28, $92, $56, $20, $84, $48
   1426  f3cc				  -	      .byte	$12, $76, $40, $04, $68, $32, $96, $60, $24, $88
   1427  f3cc				  -scorebcd1
   1428  f3cc				  -	      .byte	0, 0, 1, 1, 2, 3, 3, 4, 5, 5, 6
   1429  f3cc				  -	      .byte	7, 7, 8, 8, 9, $10, $10, $11, $12, $12, $13
   1430  f3cc				  -	      .byte	$14, $14, $15, $16, $16, $17, $17, $18, $19, $19, $20
   1431  f3cc				  -	      .byte	$21, $21, $22, $23, $23, $24, $24, $25, $26, $26
   1432  f3cc				  -done_debugscore
   1433  f3cc					      endif
   1434  f3cc
   1435  f3cc				  -	      ifconst	debugcycles
   1436  f3cc				  -	      lda	INTIM	; if we go over, it mucks up the background color
   1437  f3cc				  -			; cmp #$2B
   1438  f3cc				  -			; BCC overscan
   1439  f3cc				  -	      bmi	overscan
   1440  f3cc				  -	      sta	COLUBK
   1441  f3cc				  -	      bcs	doneoverscan
   1442  f3cc					      endif
   1443  f3cc
   1444  f3cc				   overscan
   1445  f3cc				  -	      ifconst	interlaced
   1446  f3cc				  -	      PHP
   1447  f3cc				  -	      PLA
   1448  f3cc				  -	      EOR	#4	; flip interrupt bit
   1449  f3cc				  -	      PHA
   1450  f3cc				  -	      PLP
   1451  f3cc				  -	      AND	#4	; isolate the interrupt bit
   1452  f3cc				  -	      TAX		; save it for later
   1453  f3cc					      endif
   1454  f3cc
   1455  f3cc				   overscanloop
   1456  f3cc		       ad 84 02 	      lda	INTIM	;wait for sync
   1457  f3cf		       30 fb		      bmi	overscanloop
   1458  f3d1				   doneoverscan
   1459  f3d1
   1460  f3d1							;do VSYNC
   1461  f3d1
   1462  f3d1				  -	      ifconst	interlaced
   1463  f3d1				  -	      CPX	#4
   1464  f3d1				  -	      BNE	oddframevsync
   1465  f3d1					      endif
   1466  f3d1
   1467  f3d1		       a9 02		      lda	#2
   1468  f3d3		       85 02		      sta	WSYNC
   1469  f3d5		       85 00		      sta	VSYNC
   1470  f3d7		       85 02		      STA	WSYNC
   1471  f3d9		       85 02		      STA	WSYNC
   1472  f3db		       4a		      lsr
   1473  f3dc		       85 02		      STA	WSYNC
   1474  f3de		       85 00		      STA	VSYNC
   1475  f3e0		       85 01		      sta	VBLANK
   1476  f3e2					      ifnconst	overscan_time
   1477  f3e2		       a9 a5		      lda	#37+128
   1478  f3e4				  -	      else
   1479  f3e4				  -	      lda	#overscan_time+128
   1480  f3e4					      endif
   1481  f3e4		       8d 96 02 	      sta	TIM64T
   1482  f3e7
   1483  f3e7				  -	      ifconst	interlaced
   1484  f3e7				  -	      jmp	postsync
   1485  f3e7				  -
   1486  f3e7				  -oddframevsync
   1487  f3e7				  -	      sta	WSYNC
   1488  f3e7				  -
   1489  f3e7				  -	      LDA	($80,X)	; 11 waste
   1490  f3e7				  -	      LDA	($80,X)	; 11 waste
   1491  f3e7				  -	      LDA	($80,X)	; 11 waste
   1492  f3e7				  -
   1493  f3e7				  -	      lda	#2
   1494  f3e7				  -	      sta	VSYNC
   1495  f3e7				  -	      sta	WSYNC
   1496  f3e7				  -	      sta	WSYNC
   1497  f3e7				  -	      sta	WSYNC
   1498  f3e7				  -
   1499  f3e7				  -	      LDA	($80,X)	; 11 waste
   1500  f3e7				  -	      LDA	($80,X)	; 11 waste
   1501  f3e7				  -	      LDA	($80,X)	; 11 waste
   1502  f3e7				  -
   1503  f3e7				  -	      lda	#0
   1504  f3e7				  -	      sta	VSYNC
   1505  f3e7				  -	      sta	VBLANK
   1506  f3e7				  -	      ifnconst	overscan_time
   1507  f3e7				  -	      lda	#37+128
   1508  f3e7				  -	      else
   1509  f3e7				  -	      lda	#overscan_time+128
   1510  f3e7				  -	      endif
   1511  f3e7				  -	      sta	TIM64T
   1512  f3e7				  -
   1513  f3e7				  -postsync
   1514  f3e7					      endif
   1515  f3e7
   1516  f3e7				  -	      ifconst	legacy
   1517  f3e7				  -	      if	legacy < 100
   1518  f3e7				  -	      ldx	#4
   1519  f3e7				  -adjustloop
   1520  f3e7				  -	      lda	player0x,x
   1521  f3e7				  -	      sec
   1522  f3e7				  -	      sbc	#14	;?
   1523  f3e7				  -	      sta	player0x,x
   1524  f3e7				  -	      dex
   1525  f3e7				  -	      bpl	adjustloop
   1526  f3e7				  -	      endif
   1527  f3e7					      endif
   1528  f3e7				  -	      if	((<*)>$e9)&&((<*)<$fa)
   1529  f3e7				  -	      repeat	($fa-(<*))
   1530  f3e7				  -	      nop
   1531  f3e7				  -	      repend
   1532  f3e7					      endif
   1533  f3e7		       85 02		      sta	WSYNC
   1534  f3e9		       a2 04		      ldx	#4
      0  f3eb					      SLEEP	3
      1  f3eb				   .CYCLES    SET	3
      2  f3eb
      3  f3eb				  -	      IF	.CYCLES < 2
      4  f3eb				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f3eb				  -	      ERR
      6  f3eb					      ENDIF
      7  f3eb
      8  f3eb					      IF	.CYCLES & 1
      9  f3eb					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f3eb		       04 00		      nop	0
     11  f3ed				  -	      ELSE
     12  f3ed				  -	      bit	VSYNC
     13  f3ed					      ENDIF
     14  f3ed				   .CYCLES    SET	.CYCLES - 3
     15  f3ed					      ENDIF
     16  f3ed
     17  f3ed				  -	      REPEAT	.CYCLES / 2
     18  f3ed				  -	      nop
     19  f3ed					      REPEND
   1536  f3ed				   HorPosLoop		; 5
   1537  f3ed		       b5 80		      lda	player0x,X	;+4 9
   1538  f3ef		       38		      sec		;+2 11
   1539  f3f0				   DivideLoop
   1540  f3f0		       e9 0f		      sbc	#15
   1541  f3f2		       b0 fc		      bcs	DivideLoop	;+4 15
   1542  f3f4		       95 9c		      sta	temp1,X	;+4 19
   1543  f3f6		       95 10		      sta	RESP0,X	;+4 23
   1544  f3f8		       85 02		      sta	WSYNC
   1545  f3fa		       ca		      dex
   1546  f3fb		       10 f0		      bpl	HorPosLoop	;+5 5
   1547  f3fd							; 4
   1548  f3fd
   1549  f3fd		       a2 04		      ldx	#4
   1550  f3ff		       b4 9c		      ldy	temp1,X
   1551  f401		       b9 5d f3 	      lda	repostable-256,Y
   1552  f404		       95 20		      sta	HMP0,X	;+14 18
   1553  f406
   1554  f406		       ca		      dex
   1555  f407		       b4 9c		      ldy	temp1,X
   1556  f409		       b9 5d f3 	      lda	repostable-256,Y
   1557  f40c		       95 20		      sta	HMP0,X	;+14 32
   1558  f40e
   1559  f40e		       ca		      dex
   1560  f40f		       b4 9c		      ldy	temp1,X
   1561  f411		       b9 5d f3 	      lda	repostable-256,Y
   1562  f414		       95 20		      sta	HMP0,X	;+14 46
   1563  f416
   1564  f416		       ca		      dex
   1565  f417		       b4 9c		      ldy	temp1,X
   1566  f419		       b9 5d f3 	      lda	repostable-256,Y
   1567  f41c		       95 20		      sta	HMP0,X	;+14 60
   1568  f41e
   1569  f41e		       ca		      dex
   1570  f41f		       b4 9c		      ldy	temp1,X
   1571  f421		       b9 5d f3 	      lda	repostable-256,Y
   1572  f424		       95 20		      sta	HMP0,X	;+14 74
   1573  f426
   1574  f426		       85 02		      sta	WSYNC
   1575  f428
   1576  f428		       85 2a		      sta	HMOVE	;+3 3
   1577  f42a
   1578  f42a
   1579  f42a				  -	      ifconst	legacy
   1580  f42a				  -	      if	legacy < 100
   1581  f42a				  -	      ldx	#4
   1582  f42a				  -adjustloop2
   1583  f42a				  -	      lda	player0x,x
   1584  f42a				  -	      clc
   1585  f42a				  -	      adc	#14	;?
   1586  f42a				  -	      sta	player0x,x
   1587  f42a				  -	      dex
   1588  f42a				  -	      bpl	adjustloop2
   1589  f42a				  -	      endif
   1590  f42a					      endif
   1591  f42a
   1592  f42a
   1593  f42a
   1594  f42a
   1595  f42a							;set score pointers
   1596  f42a		       a7 95		      lax	score+2
   1597  f42c		       20 5d f4 	      jsr	scorepointerset
   1598  f42f		       84 9b		      sty	scorepointers+5
   1599  f431		       86 98		      stx	scorepointers+2
   1600  f433		       a7 94		      lax	score+1
   1601  f435		       20 5d f4 	      jsr	scorepointerset
   1602  f438		       84 9a		      sty	scorepointers+4
   1603  f43a		       86 97		      stx	scorepointers+1
   1604  f43c		       a7 93		      lax	score
   1605  f43e		       20 5d f4 	      jsr	scorepointerset
   1606  f441		       84 99		      sty	scorepointers+3
   1607  f443		       86 96		      stx	scorepointers
   1608  f445
   1609  f445				   vblk
   1610  f445							; run possible vblank bB code
   1611  f445				  -	      ifconst	vblank_bB_code
   1612  f445				  -	      jsr	vblank_bB_code
   1613  f445					      endif
   1614  f445				   vblk2
   1615  f445		       ad 84 02 	      LDA	INTIM
   1616  f448		       30 fb		      bmi	vblk2
   1617  f44a		       4c 34 f0 	      jmp	kernel
   1618  f44d
   1619  f44d
   1620  f44d		       80 70 60 50*	      .byte.b	$80,$70,$60,$50,$40,$30,$20,$10,$00
   1621  f456		       f0 e0 d0 c0*	      .byte.b	$F0,$E0,$D0,$C0,$B0,$A0,$90
   1622  f45d				   repostable
   1623  f45d
   1624  f45d				   scorepointerset
   1625  f45d		       29 0f		      and	#$0F
   1626  f45f		       0a		      asl
   1627  f460		       0a		      asl
   1628  f461		       0a		      asl
   1629  f462		       69 9c		      adc	#<scoretable
   1630  f464		       a8		      tay
   1631  f465		       8a		      txa
   1632  f466							; and #$F0
   1633  f466							; lsr
   1634  f466		       4b f0		      asr	#$F0
   1635  f468		       69 9c		      adc	#<scoretable
   1636  f46a		       aa		      tax
   1637  f46b		       60		      rts
   1638  f46c				   game
   1639  f46c				   .
   1640  f46c							; 
   1641  f46c
   1642  f46c				   .L00 		;  rem teste jogo 1
   1643  f46c
   1644  f46c				   .L01 		;  rem por Heitor Maciel
   1645  f46c
   1646  f46c				   .
   1647  f46c							; 
   1648  f46c
   1649  f46c				   .L02 		;  set kernel_options no_blank_lines
   1650  f46c
   1651  f46c				   .L03 		;  const pfscore  =  1
   1652  f46c
   1653  f46c				   .
   1654  f46c							; 
   1655  f46c
   1656  f46c				   .L04 		;  dim _Ch0_Sound  =  a
   1657  f46c
   1658  f46c				   .
   1659  f46c							; 
   1660  f46c
   1661  f46c				   .
   1662  f46c							; 
   1663  f46c
   1664  f46c				   .
   1665  f46c							; 
   1666  f46c
   1667  f46c				   .L05 		;  dim _cont_escudo  =  e
   1668  f46c
   1669  f46c				   .L06 		;  dim _duracao_som0  =  f
   1670  f46c
   1671  f46c				   .L07 		;  dim _duracao_som1  =  g
   1672  f46c
   1673  f46c				   .L08 		;  dim musicPointer  =  h
   1674  f46c
   1675  f46c				   .
   1676  f46c							; 
   1677  f46c
   1678  f46c				   .L09 		;  dim _bit_supressores  =  j
   1679  f46c
   1680  f46c				   .
   1681  f46c							; 
   1682  f46c
   1683  f46c				   .
   1684  f46c							; 
   1685  f46c
   1686  f46c				   .
   1687  f46c							; 
   1688  f46c
   1689  f46c				   .
   1690  f46c							; 
   1691  f46c
   1692  f46c				   .
   1693  f46c							; 
   1694  f46c
   1695  f46c				   .
   1696  f46c							; 
   1697  f46c
   1698  f46c				   .
   1699  f46c							; 
   1700  f46c
   1701  f46c				   .
   1702  f46c							; 
   1703  f46c
   1704  f46c				   .L010		;  dim musicTimer  =  k
   1705  f46c
   1706  f46c				   .L011		;  dim _dificuldade  =  l
   1707  f46c
   1708  f46c				   .L012		;  dim _Ch1_Sound  =  m
   1709  f46c
   1710  f46c				   .L013		;  dim _animacao  =  n
   1711  f46c
   1712  f46c				   .L014		;  dim _SC_Back  =  o
   1713  f46c
   1714  f46c				   .
   1715  f46c							; 
   1716  f46c
   1717  f46c				   .L015		;  dim _fases	=  q
   1718  f46c
   1719  f46c				   .L016		;  dim _cont_anima_morte  =  r
   1720  f46c
   1721  f46c				   .L017		;  dim _cont_telas  =	s
   1722  f46c
   1723  f46c				   .
   1724  f46c							; 
   1725  f46c
   1726  f46c				   .
   1727  f46c							; 
   1728  f46c
   1729  f46c				   .
   1730  f46c							; 
   1731  f46c
   1732  f46c				   .L018		;  dim rand16	=  z
   1733  f46c
   1734  f46c				   .
   1735  f46c							; 
   1736  f46c
   1737  f46c				   .
   1738  f46c							; 
   1739  f46c
   1740  f46c				   .__reset_game
   1741  f46c							; __reset_game
   1742  f46c
   1743  f46c				   .
   1744  f46c							; 
   1745  f46c
   1746  f46c				   .
   1747  f46c							; 
   1748  f46c
   1749  f46c				   .L019		;  a  =  0  :	d  =  0  :  e  =  0  :	f  =  0  :  g  =  0  :	h  =  0
   1750  f46c
   1751  f46c		       a9 00		      LDA	#0
   1752  f46e		       85 d4		      STA	a
   1753  f470		       85 d7		      STA	d
   1754  f472		       85 d8		      STA	e
   1755  f474		       85 d9		      STA	f
   1756  f476		       85 da		      STA	g
   1757  f478		       85 db		      STA	h
   1758  f47a				   .L020		;  j  =  0  :	k  =  0  :  l  =  0  :	m  =  0  :  n  =  0  :	o  =  0  :  p  =  0  :	q  =  0  :  r  =  0
   1759  f47a
   1760  f47a		       a9 00		      LDA	#0
   1761  f47c		       85 dd		      STA	j
   1762  f47e		       85 de		      STA	k
   1763  f480		       85 df		      STA	l
   1764  f482		       85 e0		      STA	m
   1765  f484		       85 e1		      STA	n
   1766  f486		       85 e2		      STA	o
   1767  f488		       85 e3		      STA	p
   1768  f48a		       85 e4		      STA	q
   1769  f48c		       85 e5		      STA	r
   1770  f48e				   .L021		;  s  =  0  :	t  =  0  :  u  =  0  :	v  =  0  :  w  =  0  :	x  =  0  :  y  =  0
   1771  f48e
   1772  f48e		       a9 00		      LDA	#0
   1773  f490		       85 e6		      STA	s
   1774  f492		       85 e7		      STA	t
   1775  f494		       85 e8		      STA	u
   1776  f496		       85 e9		      STA	v
   1777  f498		       85 ea		      STA	w
   1778  f49a		       85 eb		      STA	x
   1779  f49c		       85 ec		      STA	y
   1780  f49e				   .
   1781  f49e							; 
   1782  f49e
   1783  f49e				   .L022		;  rem DESLIGA O SOM
   1784  f49e
   1785  f49e				   .L023		;  AUDV0  =  0  :  AUDV1  =  0
   1786  f49e
   1787  f49e		       a9 00		      LDA	#0
   1788  f4a0		       85 19		      STA	AUDV0
   1789  f4a2		       85 1a		      STA	AUDV1
   1790  f4a4				   .
   1791  f4a4							; 
   1792  f4a4
   1793  f4a4				   .L024		;  score  =  0
   1794  f4a4
   1795  f4a4		       a9 00		      LDA	#$00
   1796  f4a6		       85 95		      STA	score+2
   1797  f4a8		       a9 00		      LDA	#$00
   1798  f4aa		       85 94		      STA	score+1
   1799  f4ac		       a9 00		      LDA	#$00
   1800  f4ae		       85 93		      STA	score
   1801  f4b0				   .L025		;  scorecolor	=  $00
   1802  f4b0
   1803  f4b0		       a9 00		      LDA	#$00
   1804  f4b2		       85 a3		      STA	scorecolor
   1805  f4b4				   .L026		;  missile1y  =  0
   1806  f4b4
   1807  f4b4		       a9 00		      LDA	#0
   1808  f4b6		       85 88		      STA	missile1y
   1809  f4b8				   .L027		;  COLUP1  =  00
   1810  f4b8
   1811  f4b8		       a9 00		      LDA	#00
   1812  f4ba		       85 07		      STA	COLUP1
   1813  f4bc				   .
   1814  f4bc							; 
   1815  f4bc
   1816  f4bc				   .L028		;  player1x  =  75  :	player1y  =  85
   1817  f4bc
   1818  f4bc		       a9 4b		      LDA	#75
   1819  f4be		       85 81		      STA	player1x
   1820  f4c0		       a9 55		      LDA	#85
   1821  f4c2		       85 86		      STA	player1y
   1822  f4c4				   .L029		;  player0x  =  20  :	player0y  =  1
   1823  f4c4
   1824  f4c4		       a9 14		      LDA	#20
   1825  f4c6		       85 80		      STA	player0x
   1826  f4c8		       a9 01		      LDA	#1
   1827  f4ca		       85 85		      STA	player0y
   1828  f4cc				   .
   1829  f4cc							; 
   1830  f4cc
   1831  f4cc				   .L030		;  pfscore1 = %00010101  :  pfscorecolor  =  $40
   1832  f4cc
   1833  f4cc		       a9 15		      LDA	#%00010101
   1834  f4ce		       85 f2		      STA	pfscore1
   1835  f4d0		       a9 40		      LDA	#$40
   1836  f4d2		       85 f4		      STA	pfscorecolor
   1837  f4d4				   .L031		;  pfscore2 = %00010101
   1838  f4d4
   1839  f4d4		       a9 15		      LDA	#%00010101
   1840  f4d6		       85 f3		      STA	pfscore2
   1841  f4d8				   .L032		;  missile1height = 5
   1842  f4d8
   1843  f4d8		       a9 05		      LDA	#5
   1844  f4da		       85 87		      STA	missile1height
   1845  f4dc				   .
   1846  f4dc							; 
   1847  f4dc
   1848  f4dc				   .
   1849  f4dc							; 
   1850  f4dc
   1851  f4dc				   .L033		;  gosub __playfield_transicao
   1852  f4dc
   1853  f4dc		       20 12 fc 	      jsr	.__playfield_transicao
   1854  f4df
   1855  f4df				   .
   1856  f4df							; 
   1857  f4df
   1858  f4df				   .__title_screen
   1859  f4df							; __title_screen
   1860  f4df
   1861  f4df				   .L034		;  COLUPF  =  $00  :  COLUBK  =  $8A
   1862  f4df
   1863  f4df		       a9 00		      LDA	#$00
   1864  f4e1		       85 08		      STA	COLUPF
   1865  f4e3		       a9 8a		      LDA	#$8A
   1866  f4e5		       85 09		      STA	COLUBK
   1867  f4e7				   .L035		;  AUDC0  =  12
   1868  f4e7
   1869  f4e7		       a9 0c		      LDA	#12
   1870  f4e9		       85 15		      STA	AUDC0
   1871  f4eb				   .L036		;  AUDC1  =  1
   1872  f4eb
   1873  f4eb		       a9 01		      LDA	#1
   1874  f4ed		       85 16		      STA	AUDC1
   1875  f4ef				   .
   1876  f4ef							; 
   1877  f4ef
   1878  f4ef				   .L037		;  if joy0fire then e	=  1
   1879  f4ef
   1880  f4ef		       24 0c		      bit	INPT4
   1881  f4f1		       30 04		      BMI	.skipL037
   1882  f4f3				   .condpart0
   1883  f4f3		       a9 01		      LDA	#1
   1884  f4f5		       85 d8		      STA	e
   1885  f4f7				   .skipL037
   1886  f4f7				   .L038		;  if e  =  0 then goto __skip_sound_title
   1887  f4f7
   1888  f4f7		       a5 d8		      LDA	e
   1889  f4f9		       c9 00		      CMP	#0
   1890  f4fb		       d0 03		      BNE	.skipL038
   1891  f4fd				   .condpart1
   1892  f4fd		       4c 0b f5 	      jmp	.__skip_sound_title
   1893  f500
   1894  f500				   .skipL038
   1895  f500				   .L039		;  if musicTimer  =  0 then goto changeMusicNoteTitle
   1896  f500
   1897  f500		       a5 de		      LDA	musicTimer
   1898  f502		       c9 00		      CMP	#0
   1899  f504		       d0 03		      BNE	.skipL039
   1900  f506				   .condpart2
   1901  f506		       4c 99 fc 	      jmp	.changeMusicNoteTitle
   1902  f509
   1903  f509				   .skipL039
   1904  f509				   .
   1905  f509							; 
   1906  f509
   1907  f509				   .__volta_trilha_title
   1908  f509							; __volta_trilha_title
   1909  f509
   1910  f509				   .L040		;  musicTimer	=  musicTimer  -  1
   1911  f509
   1912  f509		       c6 de		      DEC	musicTimer
   1913  f50b				   .__skip_sound_title
   1914  f50b							; __skip_sound_title
   1915  f50b
   1916  f50b				   .
   1917  f50b							; 
   1918  f50b
   1919  f50b				   .L041		;  pfscore1  =  0  :  scorecolor  =  $00
   1920  f50b
   1921  f50b		       a9 00		      LDA	#0
   1922  f50d		       85 f2		      STA	pfscore1
   1923  f50f		       a9 00		      LDA	#$00
   1924  f511		       85 a3		      STA	scorecolor
   1925  f513				   .L042		;  gosub __nave
   1926  f513
   1927  f513		       20 09 fb 	      jsr	.__nave
   1928  f516
   1929  f516				   .L043		;  _animacao  =  10
   1930  f516
   1931  f516		       a9 0a		      LDA	#10
   1932  f518		       85 e1		      STA	_animacao
   1933  f51a				   .L044		;  drawscreen
   1934  f51a
   1935  f51a		       20 cc f3 	      jsr	drawscreen
   1936  f51d				   .L045		;  COLUBK = $00
   1937  f51d
   1938  f51d		       a9 00		      LDA	#$00
   1939  f51f		       85 09		      STA	COLUBK
   1940  f521				   .L046		;  COLUPF = $06
   1941  f521
   1942  f521		       a9 06		      LDA	#$06
   1943  f523		       85 08		      STA	COLUPF
   1944  f525				   .L047		;  player0y  =  0
   1945  f525
   1946  f525		       a9 00		      LDA	#0
   1947  f527		       85 85		      STA	player0y
   1948  f529				   .L048		;  COLUP1  =  $0E
   1949  f529
   1950  f529		       a9 0e		      LDA	#$0E
   1951  f52b		       85 07		      STA	COLUP1
   1952  f52d				   .L049		;  player1y  =  85
   1953  f52d
   1954  f52d		       a9 55		      LDA	#85
   1955  f52f		       85 86		      STA	player1y
   1956  f531				   .L050		;  player1x  =  75
   1957  f531
   1958  f531		       a9 4b		      LDA	#75
   1959  f533		       85 81		      STA	player1x
   1960  f535				   .
   1961  f535							; 
   1962  f535
   1963  f535				   .L051		;  if joy0fire then e	=  1
   1964  f535
   1965  f535		       24 0c		      bit	INPT4
   1966  f537		       30 04		      BMI	.skipL051
   1967  f539				   .condpart3
   1968  f539		       a9 01		      LDA	#1
   1969  f53b		       85 d8		      STA	e
   1970  f53d				   .skipL051
   1971  f53d				   .L052		;  if e  =  1 then pfscroll down
   1972  f53d
   1973  f53d		       a5 d8		      LDA	e
   1974  f53f		       c9 01		      CMP	#1
   1975  f541		       d0 05		      BNE	.skipL052
   1976  f543				   .condpart4
   1977  f543		       a9 04		      LDA	#4
   1978  f545		       20 fe f2 	      jsr	pfscroll
   1979  f548				   .skipL052
   1980  f548				   .
   1981  f548							; 
   1982  f548
   1983  f548				   .L053		;  _SC_Back  =  $70
   1984  f548
   1985  f548		       a9 70		      LDA	#$70
   1986  f54a		       85 e2		      STA	_SC_Back
   1987  f54c				   .L054		;  if !pfread ( 0 , 11 )  then goto __prepara_main
   1988  f54c
   1989  f54c		       a9 00		      LDA	#0
   1990  f54e		       a0 0b		      LDY	#11
   1991  f550		       20 76 f2 	      jsr	pfread
   1992  f553		       f0 03		      BEQ	.skipL054
   1993  f555				   .condpart5
   1994  f555		       4c 5b f5 	      jmp	.__prepara_main
   1995  f558
   1996  f558				   .skipL054
   1997  f558				   .L055		;  goto __title_screen
   1998  f558
   1999  f558		       4c df f4 	      jmp	.__title_screen
   2000  f55b
   2001  f55b				   .
   2002  f55b							; 
   2003  f55b
   2004  f55b				   .__prepara_main
   2005  f55b							; __prepara_main
   2006  f55b
   2007  f55b				   .L056		;  AUDV0  =  0
   2008  f55b
   2009  f55b		       a9 00		      LDA	#0
   2010  f55d		       85 19		      STA	AUDV0
   2011  f55f				   .L057		;  AUDV1  =  0
   2012  f55f
   2013  f55f		       a9 00		      LDA	#0
   2014  f561		       85 1a		      STA	AUDV1
   2015  f563				   .L058		;  a  =  0  :	d  =  0  :  e  =  0  :	f  =  0  :  g  =  0  :	h  =  0
   2016  f563
   2017  f563		       a9 00		      LDA	#0
   2018  f565		       85 d4		      STA	a
   2019  f567		       85 d7		      STA	d
   2020  f569		       85 d8		      STA	e
   2021  f56b		       85 d9		      STA	f
   2022  f56d		       85 da		      STA	g
   2023  f56f		       85 db		      STA	h
   2024  f571				   .L059		;  j  =  0  :	k  =  0  :  l  =  0  :	m  =  0  :  n  =  0  :	o  =  0  :  p  =  0  :	q  =  0  :  r  =  0
   2025  f571
   2026  f571		       a9 00		      LDA	#0
   2027  f573		       85 dd		      STA	j
   2028  f575		       85 de		      STA	k
   2029  f577		       85 df		      STA	l
   2030  f579		       85 e0		      STA	m
   2031  f57b		       85 e1		      STA	n
   2032  f57d		       85 e2		      STA	o
   2033  f57f		       85 e3		      STA	p
   2034  f581		       85 e4		      STA	q
   2035  f583		       85 e5		      STA	r
   2036  f585				   .L060		;  s  =  0  :	t  =  0  :  u  =  0  :	v  =  0  :  w  =  0  :	x  =  0  :  y  =  0
   2037  f585
   2038  f585		       a9 00		      LDA	#0
   2039  f587		       85 e6		      STA	s
   2040  f589		       85 e7		      STA	t
   2041  f58b		       85 e8		      STA	u
   2042  f58d		       85 e9		      STA	v
   2043  f58f		       85 ea		      STA	w
   2044  f591		       85 eb		      STA	x
   2045  f593		       85 ec		      STA	y
   2046  f595				   .L061		;  pfscore1 = %00010101  :  pfscorecolor  =  $40
   2047  f595
   2048  f595		       a9 15		      LDA	#%00010101
   2049  f597		       85 f2		      STA	pfscore1
   2050  f599		       a9 40		      LDA	#$40
   2051  f59b		       85 f4		      STA	pfscorecolor
   2052  f59d				   .L062		;  pfscore2 = %00010101
   2053  f59d
   2054  f59d		       a9 15		      LDA	#%00010101
   2055  f59f		       85 f3		      STA	pfscore2
   2056  f5a1				   .L063		;  missile1height = 5
   2057  f5a1
   2058  f5a1		       a9 05		      LDA	#5
   2059  f5a3		       85 87		      STA	missile1height
   2060  f5a5				   .
   2061  f5a5							; 
   2062  f5a5
   2063  f5a5				   .
   2064  f5a5							; 
   2065  f5a5
   2066  f5a5				   .L064		;  _SC_Back  =  $70
   2067  f5a5
   2068  f5a5		       a9 70		      LDA	#$70
   2069  f5a7		       85 e2		      STA	_SC_Back
   2070  f5a9				   .
   2071  f5a9							; 
   2072  f5a9
   2073  f5a9				   .__Main_Loop
   2074  f5a9							; __Main_Loop
   2075  f5a9
   2076  f5a9				   .
   2077  f5a9							; 
   2078  f5a9
   2079  f5a9				   .
   2080  f5a9							; 
   2081  f5a9
   2082  f5a9				   .L065		;  scorecolor	=  14
   2083  f5a9
   2084  f5a9		       a9 0e		      LDA	#14
   2085  f5ab		       85 a3		      STA	scorecolor
   2086  f5ad				   .
   2087  f5ad							; 
   2088  f5ad
   2089  f5ad				   .
   2090  f5ad							; 
   2091  f5ad
   2092  f5ad				   .L066		;  if player1x  <  20	||  player1x  >  133 then _bit_supressores{6}  =  1 else _bit_supressores{6}  =  0
   2093  f5ad
   2094  f5ad		       a5 81		      LDA	player1x
   2095  f5af		       c9 14		      CMP	#20
   2096  f5b1		       b0 03		      BCS	.skipL066
   2097  f5b3				   .condpart6
   2098  f5b3		       4c bc f5 	      jmp	.condpart7
   2099  f5b6				   .skipL066
   2100  f5b6		       a9 85		      LDA	#133
   2101  f5b8		       c5 81		      CMP	player1x
   2102  f5ba		       b0 09		      BCS	.skip0OR
   2103  f5bc				   .condpart7
   2104  f5bc		       a5 dd		      LDA	_bit_supressores
   2105  f5be		       09 40		      ORA	#64
   2106  f5c0		       85 dd		      STA	_bit_supressores
   2107  f5c2		       4c cb f5 	      jmp	.skipelse0
   2108  f5c5				   .skip0OR
   2109  f5c5		       a5 dd		      LDA	_bit_supressores
   2110  f5c7		       29 bf		      AND	#191
   2111  f5c9		       85 dd		      STA	_bit_supressores
   2112  f5cb				   .skipelse0
   2113  f5cb				   .
   2114  f5cb							; 
   2115  f5cb
   2116  f5cb				   .
   2117  f5cb							; 
   2118  f5cb
   2119  f5cb				   .L067		;  if _bit_supressores{6} then goto __skip_aceletarion_point
   2120  f5cb
   2121  f5cb		       24 dd		      BIT	_bit_supressores
   2122  f5cd		       50 03		      BVC	.skipL067
   2123  f5cf				   .condpart8
   2124  f5cf		       4c f3 f5 	      jmp	.__skip_aceletarion_point
   2125  f5d2
   2126  f5d2				   .skipL067
   2127  f5d2				   .L068		;  if joy0up then pfscroll down  :  score  =  score  +  1
   2128  f5d2
   2129  f5d2		       a9 10		      lda	#$10
   2130  f5d4		       2c 80 02 	      bit	SWCHA
   2131  f5d7		       d0 1a		      BNE	.skipL068
   2132  f5d9				   .condpart9
   2133  f5d9		       a9 04		      LDA	#4
   2134  f5db		       20 fe f2 	      jsr	pfscroll
   2135  f5de		       f8		      SED
   2136  f5df		       18		      CLC
   2137  f5e0		       a5 95		      LDA	score+2
   2138  f5e2		       69 01		      ADC	#$01
   2139  f5e4		       85 95		      STA	score+2
   2140  f5e6		       a5 94		      LDA	score+1
   2141  f5e8		       69 00		      ADC	#$00
   2142  f5ea		       85 94		      STA	score+1
   2143  f5ec		       a5 93		      LDA	score
   2144  f5ee		       69 00		      ADC	#$00
   2145  f5f0		       85 93		      STA	score
   2146  f5f2		       d8		      CLD
   2147  f5f3				   .skipL068
   2148  f5f3				   .__skip_aceletarion_point
   2149  f5f3							; __skip_aceletarion_point
   2150  f5f3
   2151  f5f3				   .
   2152  f5f3							; 
   2153  f5f3
   2154  f5f3				   .
   2155  f5f3							; 
   2156  f5f3
   2157  f5f3				   .L069		;  if joy0left  &&  player1x  >  1 then player1x  =  player1x	-  1  :  goto __skip_joy
   2158  f5f3
   2159  f5f3		       2c 80 02 	      bit	SWCHA
   2160  f5f6		       70 0b		      BVS	.skipL069
   2161  f5f8				   .condpart10
   2162  f5f8		       a9 01		      LDA	#1
   2163  f5fa		       c5 81		      CMP	player1x
   2164  f5fc		       b0 05		      BCS	.skip10then
   2165  f5fe				   .condpart11
   2166  f5fe		       c6 81		      DEC	player1x
   2167  f600		       4c 13 f6 	      jmp	.__skip_joy
   2168  f603
   2169  f603				   .skip10then
   2170  f603				   .skipL069
   2171  f603				   .L070		;  if joy0right  &&  player1x	<  150 then player1x  =  player1x  +  1  :  goto __skip_joy
   2172  f603
   2173  f603		       2c 80 02 	      bit	SWCHA
   2174  f606		       30 0b		      BMI	.skipL070
   2175  f608				   .condpart12
   2176  f608		       a5 81		      LDA	player1x
   2177  f60a		       c9 96		      CMP	#150
   2178  f60c		       b0 05		      BCS	.skip12then
   2179  f60e				   .condpart13
   2180  f60e		       e6 81		      INC	player1x
   2181  f610		       4c 13 f6 	      jmp	.__skip_joy
   2182  f613
   2183  f613				   .skip12then
   2184  f613				   .skipL070
   2185  f613				   .
   2186  f613							; 
   2187  f613
   2188  f613				   .__skip_joy
   2189  f613							; __skip_joy
   2190  f613
   2191  f613				   .
   2192  f613							; 
   2193  f613
   2194  f613				   .
   2195  f613							; 
   2196  f613
   2197  f613				   .
   2198  f613							; 
   2199  f613
   2200  f613				   .L071		;  if !_bit_supressores{4} then gosub __nave
   2201  f613
   2202  f613		       a5 dd		      LDA	_bit_supressores
   2203  f615		       29 10		      AND	#16
   2204  f617		       d0 03		      BNE	.skipL071
   2205  f619				   .condpart14
   2206  f619		       20 09 fb 	      jsr	.__nave
   2207  f61c
   2208  f61c				   .skipL071
   2209  f61c				   .L072		;  if _bit_supressores{4} then goto __skip_escudo
   2210  f61c
   2211  f61c		       a5 dd		      LDA	_bit_supressores
   2212  f61e		       29 10		      AND	#16
   2213  f620		       f0 03		      BEQ	.skipL072
   2214  f622				   .condpart15
   2215  f622		       4c 48 f6 	      jmp	.__skip_escudo
   2216  f625
   2217  f625				   .skipL072
   2218  f625				   .L073		;  if pfscore1  =  0 then _bit_supressores{4}	=  0  :  goto __skip_escudo
   2219  f625
   2220  f625		       a5 f2		      LDA	pfscore1
   2221  f627		       c9 00		      CMP	#0
   2222  f629		       d0 09		      BNE	.skipL073
   2223  f62b				   .condpart16
   2224  f62b		       a5 dd		      LDA	_bit_supressores
   2225  f62d		       29 ef		      AND	#239
   2226  f62f		       85 dd		      STA	_bit_supressores
   2227  f631		       4c 48 f6 	      jmp	.__skip_escudo
   2228  f634
   2229  f634				   .skipL073
   2230  f634				   .L074		;  if joy0down then _bit_supressores{4}  =  1	:  e  =  40  :	goto __escudo
   2231  f634
   2232  f634		       a9 20		      lda	#$20
   2233  f636		       2c 80 02 	      bit	SWCHA
   2234  f639		       d0 0d		      BNE	.skipL074
   2235  f63b				   .condpart17
   2236  f63b		       a5 dd		      LDA	_bit_supressores
   2237  f63d		       09 10		      ORA	#16
   2238  f63f		       85 dd		      STA	_bit_supressores
   2239  f641		       a9 28		      LDA	#40
   2240  f643		       85 d8		      STA	e
   2241  f645		       4c fa fa 	      jmp	.__escudo
   2242  f648
   2243  f648				   .skipL074
   2244  f648				   .__skip_escudo
   2245  f648							; __skip_escudo
   2246  f648
   2247  f648				   .
   2248  f648							; 
   2249  f648
   2250  f648				   .
   2251  f648							; 
   2252  f648
   2253  f648				   .L075		;  if missile1y  >  240 then _bit_supressores{1}  =  0  :  goto __skip_missile1
   2254  f648
   2255  f648		       a9 f0		      LDA	#240
   2256  f64a		       c5 88		      CMP	missile1y
   2257  f64c		       b0 09		      BCS	.skipL075
   2258  f64e				   .condpart18
   2259  f64e		       a5 dd		      LDA	_bit_supressores
   2260  f650		       29 fd		      AND	#253
   2261  f652		       85 dd		      STA	_bit_supressores
   2262  f654		       4c 5e f6 	      jmp	.__skip_missile1
   2263  f657
   2264  f657				   .skipL075
   2265  f657				   .L076		;  missile1y  =  missile1y  -	2
   2266  f657
   2267  f657		       a5 88		      LDA	missile1y
   2268  f659		       38		      SEC
   2269  f65a		       e9 02		      SBC	#2
   2270  f65c		       85 88		      STA	missile1y
   2271  f65e				   .__skip_missile1
   2272  f65e							; __skip_missile1
   2273  f65e
   2274  f65e				   .L077		;  if _bit_supressores{1} then __skip_fire
   2275  f65e
   2276  f65e		       a5 dd		      LDA	_bit_supressores
   2277  f660		       29 02		      AND	#2
   2278  f662		       d0 26		      bne	.__skip_fire
   2279  f664				   .L078		;  if joy0fire then AUDV0  =  0  :  _duracao_som0  =  10  :  _bit_supressores{1}  =  1  :  _bit_supressores{3}  =  1  :  missile1y  =	player1y  -  3 : missile1x  =  player1x  +  5
   2280  f664
   2281  f664		       24 0c		      bit	INPT4
   2282  f666		       30 22		      BMI	.skipL078
   2283  f668				   .condpart19
   2284  f668		       a9 00		      LDA	#0
   2285  f66a		       85 19		      STA	AUDV0
   2286  f66c		       a9 0a		      LDA	#10
   2287  f66e		       85 d9		      STA	_duracao_som0
   2288  f670		       a5 dd		      LDA	_bit_supressores
   2289  f672		       09 02		      ORA	#2
   2290  f674		       85 dd		      STA	_bit_supressores
   2291  f676		       a5 dd		      LDA	_bit_supressores
   2292  f678		       09 08		      ORA	#8
   2293  f67a		       85 dd		      STA	_bit_supressores
   2294  f67c		       a5 86		      LDA	player1y
   2295  f67e		       38		      SEC
   2296  f67f		       e9 03		      SBC	#3
   2297  f681		       85 88		      STA	missile1y
   2298  f683		       a5 81		      LDA	player1x
   2299  f685		       18		      CLC
   2300  f686		       69 05		      ADC	#5
   2301  f688		       85 83		      STA	missile1x
   2302  f68a				   .skipL078
   2303  f68a				   .__skip_fire
   2304  f68a							; __skip_fire
   2305  f68a
   2306  f68a				   .
   2307  f68a							; 
   2308  f68a
   2309  f68a				   .L079		;  gosub __regular
   2310  f68a
   2311  f68a		       20 4c f9 	      jsr	.__regular
   2312  f68d
   2313  f68d				   .
   2314  f68d							; 
   2315  f68d
   2316  f68d				   .__fases
   2317  f68d							; __fases
   2318  f68d
   2319  f68d				   .L080		;  if _cont_telas  >=	10  &&	!_bit_supressores{5} then _cont_telas  =  10  :  _bit_supressores{5}  =  1
   2320  f68d
   2321  f68d		       a5 e6		      LDA	_cont_telas
   2322  f68f		       c9 0a		      CMP	#10
   2323  f691		       90 10		      BCC	.skipL080
   2324  f693				   .condpart20
   2325  f693		       a5 dd		      LDA	_bit_supressores
   2326  f695		       29 20		      AND	#32
   2327  f697		       d0 0a		      BNE	.skip20then
   2328  f699				   .condpart21
   2329  f699		       a9 0a		      LDA	#10
   2330  f69b		       85 e6		      STA	_cont_telas
   2331  f69d		       a5 dd		      LDA	_bit_supressores
   2332  f69f		       09 20		      ORA	#32
   2333  f6a1		       85 dd		      STA	_bit_supressores
   2334  f6a3				   .skip20then
   2335  f6a3				   .skipL080
   2336  f6a3				   .L081		;  if _bit_supressores{5} then goto __transicao
   2337  f6a3
   2338  f6a3		       a5 dd		      LDA	_bit_supressores
   2339  f6a5		       29 20		      AND	#32
   2340  f6a7		       f0 03		      BEQ	.skipL081
   2341  f6a9				   .condpart22
   2342  f6a9		       4c 60 fb 	      jmp	.__transicao
   2343  f6ac
   2344  f6ac				   .skipL081
   2345  f6ac				   .
   2346  f6ac							; 
   2347  f6ac
   2348  f6ac				   .__skip_transicao
   2349  f6ac							; __skip_transicao
   2350  f6ac
   2351  f6ac				   .L082		;  if _fases  >  200 then _fases  =  0
   2352  f6ac
   2353  f6ac		       a9 c8		      LDA	#200
   2354  f6ae		       c5 e4		      CMP	_fases
   2355  f6b0		       b0 04		      BCS	.skipL082
   2356  f6b2				   .condpart23
   2357  f6b2		       a9 00		      LDA	#0
   2358  f6b4		       85 e4		      STA	_fases
   2359  f6b6				   .skipL082
   2360  f6b6				   .
   2361  f6b6							; 
   2362  f6b6
   2363  f6b6				   .L083		;  if _fases  =  0 then COLUPF  =  $00  :  COLUBK  =  $8A  :  gosub __inimigo_bomba  :  goto __skip_fase_inimigo
   2364  f6b6
   2365  f6b6		       a5 e4		      LDA	_fases
   2366  f6b8		       c9 00		      CMP	#0
   2367  f6ba		       d0 0e		      BNE	.skipL083
   2368  f6bc				   .condpart24
   2369  f6bc		       a9 00		      LDA	#$00
   2370  f6be		       85 08		      STA	COLUPF
   2371  f6c0		       a9 8a		      LDA	#$8A
   2372  f6c2		       85 09		      STA	COLUBK
   2373  f6c4		       20 1a fa 	      jsr	.__inimigo_bomba
   2374  f6c7		       4c ec f6 	      jmp	.__skip_fase_inimigo
   2375  f6ca
   2376  f6ca				   .skipL083
   2377  f6ca				   .
   2378  f6ca							; 
   2379  f6ca
   2380  f6ca				   .L084		;  if _fases  >=  1 then goto __fase1_inimigo
   2381  f6ca
   2382  f6ca		       a5 e4		      LDA	_fases
   2383  f6cc		       c9 01		      CMP	#1
   2384  f6ce		       90 03		      BCC	.skipL084
   2385  f6d0				   .condpart25
   2386  f6d0		       4c d3 f6 	      jmp	.__fase1_inimigo
   2387  f6d3
   2388  f6d3				   .skipL084
   2389  f6d3				   .__fase1_inimigo
   2390  f6d3							; __fase1_inimigo
   2391  f6d3
   2392  f6d3				   .L085		;  COLUPF  =  $04
   2393  f6d3
   2394  f6d3		       a9 04		      LDA	#$04
   2395  f6d5		       85 08		      STA	COLUPF
   2396  f6d7				   .L086		;  COLUBK  =  $00
   2397  f6d7
   2398  f6d7		       a9 00		      LDA	#$00
   2399  f6d9		       85 09		      STA	COLUBK
   2400  f6db				   .L087		;  COLUP1  =  14
   2401  f6db
   2402  f6db		       a9 0e		      LDA	#14
   2403  f6dd		       85 07		      STA	COLUP1
   2404  f6df				   .L088		;  if !_bit_supressores{7} then gosub __inimigo_tie else gosub __item_shield
   2405  f6df
   2406  f6df		       24 dd		      BIT	_bit_supressores
   2407  f6e1		       30 06		      BMI	.skipL088
   2408  f6e3				   .condpart26
   2409  f6e3		       20 8f fa 	      jsr	.__inimigo_tie
   2410  f6e6		       4c ec f6 	      jmp	.skipelse1
   2411  f6e9				   .skipL088
   2412  f6e9		       20 38 fb 	      jsr	.__item_shield
   2413  f6ec
   2414  f6ec				   .skipelse1
   2415  f6ec				   .
   2416  f6ec							; 
   2417  f6ec
   2418  f6ec				   .__skip_fase_inimigo
   2419  f6ec							; __skip_fase_inimigo
   2420  f6ec
   2421  f6ec				   .
   2422  f6ec							; 
   2423  f6ec
   2424  f6ec				   .L089		;  _animacao  =  _animacao  +	1
   2425  f6ec
   2426  f6ec		       e6 e1		      INC	_animacao
   2427  f6ee				   .L090		;  if _animacao  =  21 then _animacao	=  0
   2428  f6ee
   2429  f6ee		       a5 e1		      LDA	_animacao
   2430  f6f0		       c9 15		      CMP	#21
   2431  f6f2		       d0 04		      BNE	.skipL090
   2432  f6f4				   .condpart27
   2433  f6f4		       a9 00		      LDA	#0
   2434  f6f6		       85 e1		      STA	_animacao
   2435  f6f8				   .skipL090
   2436  f6f8				   .
   2437  f6f8							; 
   2438  f6f8
   2439  f6f8				   .L091		;  _cont_escudo  =  _cont_escudo  -  1
   2440  f6f8
   2441  f6f8		       c6 d8		      DEC	_cont_escudo
   2442  f6fa				   .L092		;  if _cont_escudo  =	0  &&  _bit_supressores{4} then pfscore1  =  pfscore1 / 4  :  _bit_supressores{4}  =  0
   2443  f6fa
   2444  f6fa		       a5 d8		      LDA	_cont_escudo
   2445  f6fc		       c9 00		      CMP	#0
   2446  f6fe		       d0 12		      BNE	.skipL092
   2447  f700				   .condpart28
   2448  f700		       a5 dd		      LDA	_bit_supressores
   2449  f702		       29 10		      AND	#16
   2450  f704		       f0 0c		      BEQ	.skip28then
   2451  f706				   .condpart29
   2452  f706		       a5 f2		      LDA	pfscore1
   2453  f708		       4a		      lsr
   2454  f709		       4a		      lsr
   2455  f70a		       85 f2		      STA	pfscore1
   2456  f70c		       a5 dd		      LDA	_bit_supressores
   2457  f70e		       29 ef		      AND	#239
   2458  f710		       85 dd		      STA	_bit_supressores
   2459  f712				   .skip28then
   2460  f712				   .skipL092
   2461  f712				   .
   2462  f712							; 
   2463  f712
   2464  f712				   .L093		;  if _fases  <  4 then goto __randomicos
   2465  f712
   2466  f712		       a5 e4		      LDA	_fases
   2467  f714		       c9 04		      CMP	#4
   2468  f716		       b0 03		      BCS	.skipL093
   2469  f718				   .condpart30
   2470  f718		       4c 44 f7 	      jmp	.__randomicos
   2471  f71b
   2472  f71b				   .skipL093
   2473  f71b				   .L094		;  if _fases  <  4 then c  =  d  +  8	:  goto __skip_dificuldade
   2474  f71b
   2475  f71b		       a5 e4		      LDA	_fases
   2476  f71d		       c9 04		      CMP	#4
   2477  f71f		       b0 0a		      BCS	.skipL094
   2478  f721				   .condpart31
   2479  f721		       a5 d7		      LDA	d
   2480  f723		       18		      CLC
   2481  f724		       69 08		      ADC	#8
   2482  f726		       85 d6		      STA	c
   2483  f728		       4c c1 f7 	      jmp	.__skip_dificuldade
   2484  f72b
   2485  f72b				   .skipL094
   2486  f72b				   .L095		;  if _fases  <  8 then goto __randomicos
   2487  f72b
   2488  f72b		       a5 e4		      LDA	_fases
   2489  f72d		       c9 08		      CMP	#8
   2490  f72f		       b0 03		      BCS	.skipL095
   2491  f731				   .condpart32
   2492  f731		       4c 44 f7 	      jmp	.__randomicos
   2493  f734
   2494  f734				   .skipL095
   2495  f734				   .L096		;  if _fases  <  100 then c  =  d  +  2  :  goto __skip_dificuldade
   2496  f734
   2497  f734		       a5 e4		      LDA	_fases
   2498  f736		       c9 64		      CMP	#100
   2499  f738		       b0 0a		      BCS	.skipL096
   2500  f73a				   .condpart33
   2501  f73a		       a5 d7		      LDA	d
   2502  f73c		       18		      CLC
   2503  f73d		       69 02		      ADC	#2
   2504  f73f		       85 d6		      STA	c
   2505  f741		       4c c1 f7 	      jmp	.__skip_dificuldade
   2506  f744
   2507  f744				   .skipL096
   2508  f744				   .
   2509  f744							; 
   2510  f744
   2511  f744				   .__randomicos
   2512  f744							; __randomicos
   2513  f744
   2514  f744				   .
   2515  f744							; 
   2516  f744
   2517  f744				   .L097		;  if _dificuldade  =	0 then c  =  d	+  8  :  ballx	=  c  +  c  +  c  +  c	:  goto __skip_dificuldade
   2518  f744
   2519  f744		       a5 df		      LDA	_dificuldade
   2520  f746		       c9 00		      CMP	#0
   2521  f748		       d0 17		      BNE	.skipL097
   2522  f74a				   .condpart34
   2523  f74a		       a5 d7		      LDA	d
   2524  f74c		       18		      CLC
   2525  f74d		       69 08		      ADC	#8
   2526  f74f		       85 d6		      STA	c
   2527  f751							; complex statement detected
   2528  f751		       a5 d6		      LDA	c
   2529  f753		       18		      CLC
   2530  f754		       65 d6		      ADC	c
   2531  f756		       18		      CLC
   2532  f757		       65 d6		      ADC	c
   2533  f759		       18		      CLC
   2534  f75a		       65 d6		      ADC	c
   2535  f75c		       85 84		      STA	ballx
   2536  f75e		       4c c1 f7 	      jmp	.__skip_dificuldade
   2537  f761
   2538  f761				   .skipL097
   2539  f761				   .L098		;  if _dificuldade  =	1 then c  =  d	+  6  :  ballx	=  c  +  c  +  c  +  c	+  4  :  goto __skip_dificuldade
   2540  f761
   2541  f761		       a5 df		      LDA	_dificuldade
   2542  f763		       c9 01		      CMP	#1
   2543  f765		       d0 1a		      BNE	.skipL098
   2544  f767				   .condpart35
   2545  f767		       a5 d7		      LDA	d
   2546  f769		       18		      CLC
   2547  f76a		       69 06		      ADC	#6
   2548  f76c		       85 d6		      STA	c
   2549  f76e							; complex statement detected
   2550  f76e		       a5 d6		      LDA	c
   2551  f770		       18		      CLC
   2552  f771		       65 d6		      ADC	c
   2553  f773		       18		      CLC
   2554  f774		       65 d6		      ADC	c
   2555  f776		       18		      CLC
   2556  f777		       65 d6		      ADC	c
   2557  f779		       18		      CLC
   2558  f77a		       69 04		      ADC	#4
   2559  f77c		       85 84		      STA	ballx
   2560  f77e		       4c c1 f7 	      jmp	.__skip_dificuldade
   2561  f781
   2562  f781				   .skipL098
   2563  f781				   .L099		;  if _dificuldade  =	2 then c  =  d	+  4  :  ballx	=  c  +  c  +  c  +  c	+  8  :  goto __skip_dificuldade
   2564  f781
   2565  f781		       a5 df		      LDA	_dificuldade
   2566  f783		       c9 02		      CMP	#2
   2567  f785		       d0 1a		      BNE	.skipL099
   2568  f787				   .condpart36
   2569  f787		       a5 d7		      LDA	d
   2570  f789		       18		      CLC
   2571  f78a		       69 04		      ADC	#4
   2572  f78c		       85 d6		      STA	c
   2573  f78e							; complex statement detected
   2574  f78e		       a5 d6		      LDA	c
   2575  f790		       18		      CLC
   2576  f791		       65 d6		      ADC	c
   2577  f793		       18		      CLC
   2578  f794		       65 d6		      ADC	c
   2579  f796		       18		      CLC
   2580  f797		       65 d6		      ADC	c
   2581  f799		       18		      CLC
   2582  f79a		       69 08		      ADC	#8
   2583  f79c		       85 84		      STA	ballx
   2584  f79e		       4c c1 f7 	      jmp	.__skip_dificuldade
   2585  f7a1
   2586  f7a1				   .skipL099
   2587  f7a1				   .L0100		;  if _dificuldade  =	3 then c  =  d	+  2  :  ballx	=  c  +  c  +  c  +  c	+  12  :  goto __skip_dificuldade
   2588  f7a1
   2589  f7a1		       a5 df		      LDA	_dificuldade
   2590  f7a3		       c9 03		      CMP	#3
   2591  f7a5		       d0 1a		      BNE	.skipL0100
   2592  f7a7				   .condpart37
   2593  f7a7		       a5 d7		      LDA	d
   2594  f7a9		       18		      CLC
   2595  f7aa		       69 02		      ADC	#2
   2596  f7ac		       85 d6		      STA	c
   2597  f7ae							; complex statement detected
   2598  f7ae		       a5 d6		      LDA	c
   2599  f7b0		       18		      CLC
   2600  f7b1		       65 d6		      ADC	c
   2601  f7b3		       18		      CLC
   2602  f7b4		       65 d6		      ADC	c
   2603  f7b6		       18		      CLC
   2604  f7b7		       65 d6		      ADC	c
   2605  f7b9		       18		      CLC
   2606  f7ba		       69 0c		      ADC	#12
   2607  f7bc		       85 84		      STA	ballx
   2608  f7be		       4c c1 f7 	      jmp	.__skip_dificuldade
   2609  f7c1
   2610  f7c1				   .skipL0100
   2611  f7c1				   .
   2612  f7c1							; 
   2613  f7c1
   2614  f7c1				   .__skip_dificuldade
   2615  f7c1							; __skip_dificuldade
   2616  f7c1
   2617  f7c1				   .
   2618  f7c1							; 
   2619  f7c1
   2620  f7c1				   .
   2621  f7c1							; 
   2622  f7c1
   2623  f7c1				   .
   2624  f7c1							; 
   2625  f7c1
   2626  f7c1				   .
   2627  f7c1							; 
   2628  f7c1
   2629  f7c1				   .L0101		;  bally  =  5
   2630  f7c1
   2631  f7c1		       a9 05		      LDA	#5
   2632  f7c3		       85 89		      STA	bally
   2633  f7c5				   .
   2634  f7c5							; 
   2635  f7c5
   2636  f7c5				   .L0102		;  CTRLPF  =  $31
   2637  f7c5
   2638  f7c5		       a9 31		      LDA	#$31
   2639  f7c7		       85 0a		      STA	CTRLPF
   2640  f7c9				   .
   2641  f7c9							; 
   2642  f7c9
   2643  f7c9				   .L0103		;  pfhline d 1 c off
   2644  f7c9
   2645  f7c9		       a2 01		      LDX	#1
   2646  f7cb		       a5 d6		      LDA	c
   2647  f7cd		       85 9e		      STA	temp3
   2648  f7cf		       a0 01		      LDY	#1
   2649  f7d1		       a5 d7		      LDA	d
   2650  f7d3		       20 89 f2 	      jsr	pfhline
   2651  f7d6				   .
   2652  f7d6							; 
   2653  f7d6
   2654  f7d6				   .L0104		;  goto __pfscroll
   2655  f7d6
   2656  f7d6		       4c 44 f9 	      jmp	.__pfscroll
   2657  f7d9
   2658  f7d9				   .
   2659  f7d9							; 
   2660  f7d9
   2661  f7d9				   .__skip_scroll
   2662  f7d9							; __skip_scroll
   2663  f7d9
   2664  f7d9				   .
   2665  f7d9							; 
   2666  f7d9
   2667  f7d9				   .__skip_perde_vida
   2668  f7d9							; __skip_perde_vida
   2669  f7d9
   2670  f7d9				   .
   2671  f7d9							; 
   2672  f7d9
   2673  f7d9				   .
   2674  f7d9							; 
   2675  f7d9
   2676  f7d9				   .L0105		;  if _bit_supressores{4} then goto __skip_collision  :  rem se escudo on pula as colisoes
   2677  f7d9
   2678  f7d9		       a5 dd		      LDA	_bit_supressores
   2679  f7db		       29 10		      AND	#16
   2680  f7dd		       f0 03		      BEQ	.skipL0105
   2681  f7df				   .condpart38
   2682  f7df		       4c 18 f8 	      jmp	.__skip_collision
   2683  f7e2				   .skipL0105
   2684  f7e2				   .
   2685  f7e2							; 
   2686  f7e2
   2687  f7e2				   .L0106		;  if collision(ball,player1) then _duracao_som0  =  80  :  pfscore2  =  pfscore2 / 4	:  goto __perde_vida
   2688  f7e2
   2689  f7e2		       24 03		      bit	CXP1FB
   2690  f7e4		       50 0d		      BVC	.skipL0106
   2691  f7e6				   .condpart39
   2692  f7e6		       a9 50		      LDA	#80
   2693  f7e8		       85 d9		      STA	_duracao_som0
   2694  f7ea		       a5 f3		      LDA	pfscore2
   2695  f7ec		       4a		      lsr
   2696  f7ed		       4a		      lsr
   2697  f7ee		       85 f3		      STA	pfscore2
   2698  f7f0		       4c 88 f9 	      jmp	.__perde_vida
   2699  f7f3
   2700  f7f3				   .skipL0106
   2701  f7f3				   .L0107		;  if collision(ball,missile1) then bally  =  100  :  missile1y  =  0
   2702  f7f3
   2703  f7f3		       24 05		      bit	CXM1FB
   2704  f7f5		       50 08		      BVC	.skipL0107
   2705  f7f7				   .condpart40
   2706  f7f7		       a9 64		      LDA	#100
   2707  f7f9		       85 89		      STA	bally
   2708  f7fb		       a9 00		      LDA	#0
   2709  f7fd		       85 88		      STA	missile1y
   2710  f7ff				   .skipL0107
   2711  f7ff				   .L0108		;  if collision(player1,playfield) then _duracao_som0	=  80  :  pfscore2  =  pfscore2 / 4  :	goto __perde_vida
   2712  f7ff
   2713  f7ff		       24 03		      bit	CXP1FB
   2714  f801		       10 0d		      BPL	.skipL0108
   2715  f803				   .condpart41
   2716  f803		       a9 50		      LDA	#80
   2717  f805		       85 d9		      STA	_duracao_som0
   2718  f807		       a5 f3		      LDA	pfscore2
   2719  f809		       4a		      lsr
   2720  f80a		       4a		      lsr
   2721  f80b		       85 f3		      STA	pfscore2
   2722  f80d		       4c 88 f9 	      jmp	.__perde_vida
   2723  f810
   2724  f810				   .skipL0108
   2725  f810				   .L0109		;  if collision(missile1,playfield) then missile1y  =	1
   2726  f810
   2727  f810		       24 05		      bit	CXM1FB
   2728  f812		       10 04		      BPL	.skipL0109
   2729  f814				   .condpart42
   2730  f814		       a9 01		      LDA	#1
   2731  f816		       85 88		      STA	missile1y
   2732  f818				   .skipL0109
   2733  f818				   .
   2734  f818							; 
   2735  f818
   2736  f818				   .
   2737  f818							; 
   2738  f818
   2739  f818				   .__skip_collision
   2740  f818							; __skip_collision
   2741  f818
   2742  f818				   .
   2743  f818							; 
   2744  f818
   2745  f818				   .
   2746  f818							; 
   2747  f818
   2748  f818				   .L0110		;  if _fases  =  0 then goto __fase0
   2749  f818
   2750  f818		       a5 e4		      LDA	_fases
   2751  f81a		       c9 00		      CMP	#0
   2752  f81c		       d0 03		      BNE	.skipL0110
   2753  f81e				   .condpart43
   2754  f81e		       4c 2a f8 	      jmp	.__fase0
   2755  f821
   2756  f821				   .skipL0110
   2757  f821				   .L0111		;  if _fases  >=  1 then goto __fase1
   2758  f821
   2759  f821		       a5 e4		      LDA	_fases
   2760  f823		       c9 01		      CMP	#1
   2761  f825		       90 03		      BCC	.skipL0111
   2762  f827				   .condpart44
   2763  f827		       4c 63 f8 	      jmp	.__fase1
   2764  f82a
   2765  f82a				   .skipL0111
   2766  f82a				   .
   2767  f82a							; 
   2768  f82a
   2769  f82a				   .
   2770  f82a							; 
   2771  f82a
   2772  f82a				   .__fase0
   2773  f82a							; __fase0
   2774  f82a
   2775  f82a				   .L0112		;  if collision(missile1,player0) then missile1y  =  0  :  _bit_supressores{3}  =  0  :  _duracao_som0  =  10	:  score  =  score  +  100  :  player0y  =  0
   2776  f82a
   2777  f82a		       24 01		      bit	CXM1P
   2778  f82c		       10 21		      BPL	.skipL0112
   2779  f82e				   .condpart45
   2780  f82e		       a9 00		      LDA	#0
   2781  f830		       85 88		      STA	missile1y
   2782  f832		       a5 dd		      LDA	_bit_supressores
   2783  f834		       29 f7		      AND	#247
   2784  f836		       85 dd		      STA	_bit_supressores
   2785  f838		       a9 0a		      LDA	#10
   2786  f83a		       85 d9		      STA	_duracao_som0
   2787  f83c		       f8		      SED
   2788  f83d		       18		      CLC
   2789  f83e		       a5 94		      LDA	score+1
   2790  f840		       69 01		      ADC	#$01
   2791  f842		       85 94		      STA	score+1
   2792  f844		       a5 93		      LDA	score
   2793  f846		       69 00		      ADC	#$00
   2794  f848		       85 93		      STA	score
   2795  f84a		       d8		      CLD
   2796  f84b		       a9 00		      LDA	#0
   2797  f84d		       85 85		      STA	player0y
   2798  f84f				   .skipL0112
   2799  f84f				   .L0113		;  if collision(player0,player1) then _duracao_som0  =  80  :	pfscore2  =  pfscore2 / 4  :  goto __perde_vida
   2800  f84f
   2801  f84f		       24 07		      bit	CXPPMM
   2802  f851		       10 0d		      BPL	.skipL0113
   2803  f853				   .condpart46
   2804  f853		       a9 50		      LDA	#80
   2805  f855		       85 d9		      STA	_duracao_som0
   2806  f857		       a5 f3		      LDA	pfscore2
   2807  f859		       4a		      lsr
   2808  f85a		       4a		      lsr
   2809  f85b		       85 f3		      STA	pfscore2
   2810  f85d		       4c 88 f9 	      jmp	.__perde_vida
   2811  f860
   2812  f860				   .skipL0113
   2813  f860				   .L0114		;  goto __skip_collision_fases
   2814  f860
   2815  f860		       4c d3 f8 	      jmp	.__skip_collision_fases
   2816  f863
   2817  f863				   .__fase1
   2818  f863							; __fase1
   2819  f863
   2820  f863				   .L0115		;  if _bit_supressores{7} then goto __collision_itemshield
   2821  f863
   2822  f863		       24 dd		      BIT	_bit_supressores
   2823  f865		       10 03		      BPL	.skipL0115
   2824  f867				   .condpart47
   2825  f867		       4c a5 f8 	      jmp	.__collision_itemshield
   2826  f86a
   2827  f86a				   .skipL0115
   2828  f86a				   .
   2829  f86a							; 
   2830  f86a
   2831  f86a				   .L0116		;  if collision(missile1,player0) then missile1y  =  0  :  _bit_supressores{3}  =  0  :  _duracao_som0  =  10	:  score  =  score  +  100  :  _bit_supressores{7}  =  1
   2832  f86a
   2833  f86a		       24 01		      bit	CXM1P
   2834  f86c		       10 23		      BPL	.skipL0116
   2835  f86e				   .condpart48
   2836  f86e		       a9 00		      LDA	#0
   2837  f870		       85 88		      STA	missile1y
   2838  f872		       a5 dd		      LDA	_bit_supressores
   2839  f874		       29 f7		      AND	#247
   2840  f876		       85 dd		      STA	_bit_supressores
   2841  f878		       a9 0a		      LDA	#10
   2842  f87a		       85 d9		      STA	_duracao_som0
   2843  f87c		       f8		      SED
   2844  f87d		       18		      CLC
   2845  f87e		       a5 94		      LDA	score+1
   2846  f880		       69 01		      ADC	#$01
   2847  f882		       85 94		      STA	score+1
   2848  f884		       a5 93		      LDA	score
   2849  f886		       69 00		      ADC	#$00
   2850  f888		       85 93		      STA	score
   2851  f88a		       d8		      CLD
   2852  f88b		       a5 dd		      LDA	_bit_supressores
   2853  f88d		       09 80		      ORA	#128
   2854  f88f		       85 dd		      STA	_bit_supressores
   2855  f891				   .skipL0116
   2856  f891				   .L0117		;  if collision(player0,player1) then _duracao_som0  =  80  :	pfscore2  =  pfscore2 / 4  :  goto __perde_vida
   2857  f891
   2858  f891		       24 07		      bit	CXPPMM
   2859  f893		       10 0d		      BPL	.skipL0117
   2860  f895				   .condpart49
   2861  f895		       a9 50		      LDA	#80
   2862  f897		       85 d9		      STA	_duracao_som0
   2863  f899		       a5 f3		      LDA	pfscore2
   2864  f89b		       4a		      lsr
   2865  f89c		       4a		      lsr
   2866  f89d		       85 f3		      STA	pfscore2
   2867  f89f		       4c 88 f9 	      jmp	.__perde_vida
   2868  f8a2
   2869  f8a2				   .skipL0117
   2870  f8a2				   .L0118		;  goto __skip_collision_fases
   2871  f8a2
   2872  f8a2		       4c d3 f8 	      jmp	.__skip_collision_fases
   2873  f8a5
   2874  f8a5				   .
   2875  f8a5							; 
   2876  f8a5
   2877  f8a5				   .__collision_itemshield
   2878  f8a5							; __collision_itemshield
   2879  f8a5
   2880  f8a5				   .L0119		;  if collision(missile1,player0) then missile1y  =  0  :  _bit_supressores{3}  =  0  :  _duracao_som0  =  10	:  _bit_supressores{7}	=  0  :  player0y  =  0
   2881  f8a5
   2882  f8a5		       24 01		      bit	CXM1P
   2883  f8a7		       10 18		      BPL	.skipL0119
   2884  f8a9				   .condpart50
   2885  f8a9		       a9 00		      LDA	#0
   2886  f8ab		       85 88		      STA	missile1y
   2887  f8ad		       a5 dd		      LDA	_bit_supressores
   2888  f8af		       29 f7		      AND	#247
   2889  f8b1		       85 dd		      STA	_bit_supressores
   2890  f8b3		       a9 0a		      LDA	#10
   2891  f8b5		       85 d9		      STA	_duracao_som0
   2892  f8b7		       a5 dd		      LDA	_bit_supressores
   2893  f8b9		       29 7f		      AND	#127
   2894  f8bb		       85 dd		      STA	_bit_supressores
   2895  f8bd		       a9 00		      LDA	#0
   2896  f8bf		       85 85		      STA	player0y
   2897  f8c1				   .skipL0119
   2898  f8c1				   .L0120		;  if collision(player0,player1) then player0y  =  0  :  _bit_supressores{7}  =  0  :	pfscore1  =  %00010101
   2899  f8c1
   2900  f8c1		       24 07		      bit	CXPPMM
   2901  f8c3		       10 0e		      BPL	.skipL0120
   2902  f8c5				   .condpart51
   2903  f8c5		       a9 00		      LDA	#0
   2904  f8c7		       85 85		      STA	player0y
   2905  f8c9		       a5 dd		      LDA	_bit_supressores
   2906  f8cb		       29 7f		      AND	#127
   2907  f8cd		       85 dd		      STA	_bit_supressores
   2908  f8cf		       a9 15		      LDA	#%00010101
   2909  f8d1		       85 f2		      STA	pfscore1
   2910  f8d3				   .skipL0120
   2911  f8d3				   .
   2912  f8d3							; 
   2913  f8d3
   2914  f8d3				   .__skip_collision_fases
   2915  f8d3							; __skip_collision_fases
   2916  f8d3
   2917  f8d3				   .L0121		;  drawscreen
   2918  f8d3
   2919  f8d3		       20 cc f3 	      jsr	drawscreen
   2920  f8d6				   .
   2921  f8d6							; 
   2922  f8d6
   2923  f8d6				   .L0122		;  if _bit_supressores{3} then goto __skip_som_morte_inimigo
   2924  f8d6
   2925  f8d6		       a5 dd		      LDA	_bit_supressores
   2926  f8d8		       29 08		      AND	#8
   2927  f8da		       f0 03		      BEQ	.skipL0122
   2928  f8dc				   .condpart52
   2929  f8dc		       4c fa f8 	      jmp	.__skip_som_morte_inimigo
   2930  f8df
   2931  f8df				   .skipL0122
   2932  f8df				   .L0123		;  if _duracao_som0  =  0 then AUDV0  =  0  :	goto __skip_som_morte_inimigo
   2933  f8df
   2934  f8df		       a5 d9		      LDA	_duracao_som0
   2935  f8e1		       c9 00		      CMP	#0
   2936  f8e3		       d0 07		      BNE	.skipL0123
   2937  f8e5				   .condpart53
   2938  f8e5		       a9 00		      LDA	#0
   2939  f8e7		       85 19		      STA	AUDV0
   2940  f8e9		       4c fa f8 	      jmp	.__skip_som_morte_inimigo
   2941  f8ec
   2942  f8ec				   .skipL0123
   2943  f8ec				   .
   2944  f8ec							; 
   2945  f8ec
   2946  f8ec				   .L0124		;  AUDV0  =  15  :  rem volume
   2947  f8ec
   2948  f8ec		       a9 0f		      LDA	#15
   2949  f8ee		       85 19		      STA	AUDV0
   2950  f8f0				   .L0125		;  AUDC0  =  12  :  rem tom
   2951  f8f0
   2952  f8f0		       a9 0c		      LDA	#12
   2953  f8f2		       85 15		      STA	AUDC0
   2954  f8f4				   .L0126		;  AUDF0  =  10  :  rem distorcao
   2955  f8f4
   2956  f8f4		       a9 0a		      LDA	#10
   2957  f8f6		       85 17		      STA	AUDF0
   2958  f8f8				   .L0127		;  _duracao_som0  =  _duracao_som0  -	1
   2959  f8f8
   2960  f8f8		       c6 d9		      DEC	_duracao_som0
   2961  f8fa				   .__skip_som_morte_inimigo
   2962  f8fa							; __skip_som_morte_inimigo
   2963  f8fa
   2964  f8fa				   .
   2965  f8fa							; 
   2966  f8fa
   2967  f8fa				   .
   2968  f8fa							; 
   2969  f8fa
   2970  f8fa				   .L0128		;  if !_bit_supressores{3} then goto __skip_som_tiro
   2971  f8fa
   2972  f8fa		       a5 dd		      LDA	_bit_supressores
   2973  f8fc		       29 08		      AND	#8
   2974  f8fe		       d0 03		      BNE	.skipL0128
   2975  f900				   .condpart54
   2976  f900		       4c 24 f9 	      jmp	.__skip_som_tiro
   2977  f903
   2978  f903				   .skipL0128
   2979  f903				   .L0129		;  if _duracao_som0  =  0 then AUDV0  =  0  :	_bit_supressores{3}  =	0  :  goto __skip_som_tiro
   2980  f903
   2981  f903		       a5 d9		      LDA	_duracao_som0
   2982  f905		       c9 00		      CMP	#0
   2983  f907		       d0 0d		      BNE	.skipL0129
   2984  f909				   .condpart55
   2985  f909		       a9 00		      LDA	#0
   2986  f90b		       85 19		      STA	AUDV0
   2987  f90d		       a5 dd		      LDA	_bit_supressores
   2988  f90f		       29 f7		      AND	#247
   2989  f911		       85 dd		      STA	_bit_supressores
   2990  f913		       4c 24 f9 	      jmp	.__skip_som_tiro
   2991  f916
   2992  f916				   .skipL0129
   2993  f916				   .L0130		;  AUDV0 = 15	:  rem volume
   2994  f916
   2995  f916		       a9 0f		      LDA	#15
   2996  f918		       85 19		      STA	AUDV0
   2997  f91a				   .L0131		;  AUDC0  =  8  :  rem tom
   2998  f91a
   2999  f91a		       a9 08		      LDA	#8
   3000  f91c		       85 15		      STA	AUDC0
   3001  f91e				   .L0132		;  AUDF0  =  8  :  rem distorcao
   3002  f91e
   3003  f91e		       a9 08		      LDA	#8
   3004  f920		       85 17		      STA	AUDF0
   3005  f922				   .L0133		;  _duracao_som0  =  _duracao_som0  -	1
   3006  f922
   3007  f922		       c6 d9		      DEC	_duracao_som0
   3008  f924				   .__skip_som_tiro
   3009  f924							; __skip_som_tiro
   3010  f924
   3011  f924				   .
   3012  f924							; 
   3013  f924
   3014  f924				   .
   3015  f924							; 
   3016  f924
   3017  f924				   .L0134		;  if switchreset then goto __reset_game
   3018  f924
   3019  f924		       a9 01		      lda	#1
   3020  f926		       2c 82 02 	      bit	SWCHB
   3021  f929		       d0 03		      BNE	.skipL0134
   3022  f92b				   .condpart56
   3023  f92b		       4c 6c f4 	      jmp	.__reset_game
   3024  f92e
   3025  f92e				   .skipL0134
   3026  f92e				   .L0135		;  goto __Main_Loop
   3027  f92e
   3028  f92e		       4c a9 f5 	      jmp	.__Main_Loop
   3029  f931
   3030  f931				   .
   3031  f931							; 
   3032  f931
   3033  f931				   .
   3034  f931							; 
   3035  f931
   3036  f931				   .
   3037  f931							; 
   3038  f931
   3039  f931				   .__game_over
   3040  f931							; __game_over
   3041  f931
   3042  f931				   .L0136		;  gosub __playfield_regular
   3043  f931
   3044  f931		       20 d4 fb 	      jsr	.__playfield_regular
   3045  f934
   3046  f934				   .L0137		;  drawscreen
   3047  f934
   3048  f934		       20 cc f3 	      jsr	drawscreen
   3049  f937				   .L0138		;  if !switchreset then goto __game_over
   3050  f937
   3051  f937		       a9 01		      lda	#1
   3052  f939		       2c 82 02 	      bit	SWCHB
   3053  f93c		       f0 03		      BEQ	.skipL0138
   3054  f93e				   .condpart57
   3055  f93e		       4c 31 f9 	      jmp	.__game_over
   3056  f941
   3057  f941				   .skipL0138
   3058  f941				   .L0139		;  goto __reset_game
   3059  f941
   3060  f941		       4c 6c f4 	      jmp	.__reset_game
   3061  f944
   3062  f944				   .
   3063  f944							; 
   3064  f944
   3065  f944				   .__pfscroll
   3066  f944							; __pfscroll
   3067  f944
   3068  f944				   .L0140		;  pfscroll down
   3069  f944
   3070  f944		       a9 04		      LDA	#4
   3071  f946		       20 fe f2 	      jsr	pfscroll
   3072  f949				   .L0141		;  goto __skip_scroll
   3073  f949
   3074  f949		       4c d9 f7 	      jmp	.__skip_scroll
   3075  f94c
   3076  f94c				   .
   3077  f94c							; 
   3078  f94c
   3079  f94c				   .
   3080  f94c							; 
   3081  f94c
   3082  f94c				   .__regular
   3083  f94c							; __regular
   3084  f94c
   3085  f94c				   .
   3086  f94c							; 
   3087  f94c
   3088  f94c				   .L0142		;  if !pfread ( 0 , 11 )  then _dificuldade  =   ( rand & 3 )	 :  goto __redesenha else return thisbank
   3089  f94c
   3090  f94c		       a9 00		      LDA	#0
   3091  f94e		       a0 0b		      LDY	#11
   3092  f950		       20 76 f2 	      jsr	pfread
   3093  f953		       f0 0d		      BEQ	.skipL0142
   3094  f955				   .condpart58
   3095  f955							; complex statement detected
   3096  f955		       20 be f3 	      jsr	randomize
   3097  f958		       29 03		      AND	#3
   3098  f95a		       85 df		      STA	_dificuldade
   3099  f95c		       4c 63 f9 	      jmp	.__redesenha
   3100  f95f		       4c 63 f9 	      jmp	.skipelse2
   3101  f962				   .skipL0142
   3102  f962		       60		      RTS
   3103  f963				   .skipelse2
   3104  f963				   .
   3105  f963							; 
   3106  f963
   3107  f963				   .__redesenha
   3108  f963							; __redesenha
   3109  f963
   3110  f963				   .
   3111  f963							; 
   3112  f963
   3113  f963				   .
   3114  f963							; 
   3115  f963
   3116  f963				   .L0143		;  if player1x  >  19	&&  player1x  <  134 then _cont_telas  =  _cont_telas  +  1
   3117  f963
   3118  f963		       a9 13		      LDA	#19
   3119  f965		       c5 81		      CMP	player1x
   3120  f967		       b0 08		      BCS	.skipL0143
   3121  f969				   .condpart59
   3122  f969		       a5 81		      LDA	player1x
   3123  f96b		       c9 86		      CMP	#134
   3124  f96d		       b0 02		      BCS	.skip59then
   3125  f96f				   .condpart60
   3126  f96f		       e6 e6		      INC	_cont_telas
   3127  f971				   .skip59then
   3128  f971				   .skipL0143
   3129  f971				   .L0144		;  d  =   ( rand / 16 )   +  1
   3130  f971
   3131  f971							; complex statement detected
   3132  f971		       20 be f3 	      jsr	randomize
   3133  f974		       4a		      lsr
   3134  f975		       4a		      lsr
   3135  f976		       4a		      lsr
   3136  f977		       4a		      lsr
   3137  f978		       18		      CLC
   3138  f979		       69 01		      ADC	#1
   3139  f97b		       85 d7		      STA	d
   3140  f97d				   .L0145		;  d  =  d  +	2
   3141  f97d
   3142  f97d		       a5 d7		      LDA	d
   3143  f97f		       18		      CLC
   3144  f980		       69 02		      ADC	#2
   3145  f982		       85 d7		      STA	d
   3146  f984				   .
   3147  f984							; 
   3148  f984
   3149  f984				   .
   3150  f984							; 
   3151  f984
   3152  f984				   .
   3153  f984							; 
   3154  f984
   3155  f984				   .L0146		;  gosub __playfield_regular
   3156  f984
   3157  f984		       20 d4 fb 	      jsr	.__playfield_regular
   3158  f987
   3159  f987				   .
   3160  f987							; 
   3161  f987
   3162  f987				   .L0147		;  return thisbank
   3163  f987
   3164  f987		       60		      RTS
   3165  f988				   .
   3166  f988							; 
   3167  f988
   3168  f988				   .
   3169  f988							; 
   3170  f988
   3171  f988				   .__perde_vida
   3172  f988							; __perde_vida
   3173  f988
   3174  f988				   .L0148		;  gosub __playfield_regular
   3175  f988
   3176  f988		       20 d4 fb 	      jsr	.__playfield_regular
   3177  f98b
   3178  f98b				   .L0149		;  bally  =  0
   3179  f98b
   3180  f98b		       a9 00		      LDA	#0
   3181  f98d		       85 89		      STA	bally
   3182  f98f				   .L0150		;  missile1y  =  0
   3183  f98f
   3184  f98f		       a9 00		      LDA	#0
   3185  f991		       85 88		      STA	missile1y
   3186  f993				   .L0151		;  COLUPF  =  10
   3187  f993
   3188  f993		       a9 0a		      LDA	#10
   3189  f995		       85 08		      STA	COLUPF
   3190  f997				   .L0152		;  COLUBK  =  25
   3191  f997
   3192  f997		       a9 19		      LDA	#25
   3193  f999		       85 09		      STA	COLUBK
   3194  f99b				   .L0153		;  COLUP1  =  $40
   3195  f99b
   3196  f99b		       a9 40		      LDA	#$40
   3197  f99d		       85 07		      STA	COLUP1
   3198  f99f				   .L0154		;  player0y  =  0
   3199  f99f
   3200  f99f		       a9 00		      LDA	#0
   3201  f9a1		       85 85		      STA	player0y
   3202  f9a3				   .L0155		;  _cont_anima_morte  =  _cont_anima_morte  +	1
   3203  f9a3
   3204  f9a3		       e6 e5		      INC	_cont_anima_morte
   3205  f9a5				   .
   3206  f9a5							; 
   3207  f9a5
   3208  f9a5				   .L0156		;  if _cont_anima_morte  =  20 then player1:
   3209  f9a5
   3210  f9a5		       a5 e5		      LDA	_cont_anima_morte
   3211  f9a7		       c9 14		      CMP	#20
   3212  f9a9		       d0 0c		      BNE	.skipL0156
   3213  f9ab				   .condpart61
   3214  f9ab		       a2 1d		      LDX	#<player61then_1
   3215  f9ad		       86 8c		      STX	player1pointerlo
   3216  f9af		       a9 fd		      LDA	#>player61then_1
   3217  f9b1		       85 8d		      STA	player1pointerhi
   3218  f9b3		       a9 05		      LDA	#5
   3219  f9b5		       85 8f		      STA	player1height
   3220  f9b7				   .skipL0156
   3221  f9b7				   .L0157		;  if _cont_anima_morte  =  40 then player1:
   3222  f9b7
   3223  f9b7		       a5 e5		      LDA	_cont_anima_morte
   3224  f9b9		       c9 28		      CMP	#40
   3225  f9bb		       d0 0c		      BNE	.skipL0157
   3226  f9bd				   .condpart62
   3227  f9bd		       a2 23		      LDX	#<player62then_1
   3228  f9bf		       86 8c		      STX	player1pointerlo
   3229  f9c1		       a9 fd		      LDA	#>player62then_1
   3230  f9c3		       85 8d		      STA	player1pointerhi
   3231  f9c5		       a9 05		      LDA	#5
   3232  f9c7		       85 8f		      STA	player1height
   3233  f9c9				   .skipL0157
   3234  f9c9				   .L0158		;  drawscreen
   3235  f9c9
   3236  f9c9		       20 cc f3 	      jsr	drawscreen
   3237  f9cc				   .
   3238  f9cc							; 
   3239  f9cc
   3240  f9cc				   .L0159		;  if _cont_anima_morte  =  40 then _cont_anima_morte	=  0
   3241  f9cc
   3242  f9cc		       a5 e5		      LDA	_cont_anima_morte
   3243  f9ce		       c9 28		      CMP	#40
   3244  f9d0		       d0 04		      BNE	.skipL0159
   3245  f9d2				   .condpart63
   3246  f9d2		       a9 00		      LDA	#0
   3247  f9d4		       85 e5		      STA	_cont_anima_morte
   3248  f9d6				   .skipL0159
   3249  f9d6				   .
   3250  f9d6							; 
   3251  f9d6
   3252  f9d6				   .
   3253  f9d6							; 
   3254  f9d6
   3255  f9d6				   .L0160		;  if _duracao_som0  =  0 then AUDV0  =  0  :	goto __skip_som_explosao
   3256  f9d6
   3257  f9d6		       a5 d9		      LDA	_duracao_som0
   3258  f9d8		       c9 00		      CMP	#0
   3259  f9da		       d0 07		      BNE	.skipL0160
   3260  f9dc				   .condpart64
   3261  f9dc		       a9 00		      LDA	#0
   3262  f9de		       85 19		      STA	AUDV0
   3263  f9e0		       4c f1 f9 	      jmp	.__skip_som_explosao
   3264  f9e3
   3265  f9e3				   .skipL0160
   3266  f9e3				   .L0161		;  _duracao_som0  =  _duracao_som0  -	1
   3267  f9e3
   3268  f9e3		       c6 d9		      DEC	_duracao_som0
   3269  f9e5				   .L0162		;  AUDV0  =  8  :  rem volume
   3270  f9e5
   3271  f9e5		       a9 08		      LDA	#8
   3272  f9e7		       85 19		      STA	AUDV0
   3273  f9e9				   .L0163		;  AUDC0  =  8 :  rem tom
   3274  f9e9
   3275  f9e9		       a9 08		      LDA	#8
   3276  f9eb		       85 15		      STA	AUDC0
   3277  f9ed				   .L0164		;  AUDF0  =  25  :  rem distorcao
   3278  f9ed
   3279  f9ed		       a9 19		      LDA	#25
   3280  f9ef		       85 17		      STA	AUDF0
   3281  f9f1				   .__skip_som_explosao
   3282  f9f1							; __skip_som_explosao
   3283  f9f1
   3284  f9f1				   .L0165		;  if pfscore2  =  %00000000 then goto __skip_reinicia_joy
   3285  f9f1
   3286  f9f1		       a5 f3		      LDA	pfscore2
   3287  f9f3		       c9 00		      CMP	#%00000000
   3288  f9f5		       d0 03		      BNE	.skipL0165
   3289  f9f7				   .condpart65
   3290  f9f7		       4c 0d fa 	      jmp	.__skip_reinicia_joy
   3291  f9fa
   3292  f9fa				   .skipL0165
   3293  f9fa				   .L0166		;  if joy0fire then _animacao	=  10  :  _duracao_som0  =  0  :  player1x  =  80  :  goto __skip_perde_vida
   3294  f9fa
   3295  f9fa		       24 0c		      bit	INPT4
   3296  f9fc		       30 0f		      BMI	.skipL0166
   3297  f9fe				   .condpart66
   3298  f9fe		       a9 0a		      LDA	#10
   3299  fa00		       85 e1		      STA	_animacao
   3300  fa02		       a9 00		      LDA	#0
   3301  fa04		       85 d9		      STA	_duracao_som0
   3302  fa06		       a9 50		      LDA	#80
   3303  fa08		       85 81		      STA	player1x
   3304  fa0a		       4c d9 f7 	      jmp	.__skip_perde_vida
   3305  fa0d
   3306  fa0d				   .skipL0166
   3307  fa0d				   .__skip_reinicia_joy
   3308  fa0d							; __skip_reinicia_joy
   3309  fa0d
   3310  fa0d				   .L0167		;  if !switchreset then goto __perde_vida
   3311  fa0d
   3312  fa0d		       a9 01		      lda	#1
   3313  fa0f		       2c 82 02 	      bit	SWCHB
   3314  fa12		       f0 03		      BEQ	.skipL0167
   3315  fa14				   .condpart67
   3316  fa14		       4c 88 f9 	      jmp	.__perde_vida
   3317  fa17
   3318  fa17				   .skipL0167
   3319  fa17				   .L0168		;  goto __reset_game
   3320  fa17
   3321  fa17		       4c 6c f4 	      jmp	.__reset_game
   3322  fa1a
   3323  fa1a				   .
   3324  fa1a							; 
   3325  fa1a
   3326  fa1a				   .
   3327  fa1a							; 
   3328  fa1a
   3329  fa1a				   .__inimigo_bomba
   3330  fa1a							; __inimigo_bomba
   3331  fa1a
   3332  fa1a				   .L0169		;  COLUP0  =  $40
   3333  fa1a
   3334  fa1a		       a9 40		      LDA	#$40
   3335  fa1c		       85 06		      STA	COLUP0
   3336  fa1e				   .L0170		;  player0:
   3337  fa1e
   3338  fa1e		       a2 29		      LDX	#<playerL0170_0
   3339  fa20		       86 8a		      STX	player0pointerlo
   3340  fa22		       a9 fd		      LDA	#>playerL0170_0
   3341  fa24		       85 8b		      STA	player0pointerhi
   3342  fa26		       a9 08		      LDA	#8
   3343  fa28		       85 8e		      STA	player0height
   3344  fa2a				   .
   3345  fa2a							; 
   3346  fa2a
   3347  fa2a				   .L0171		;  player0y  =  player0y + 2
   3348  fa2a
   3349  fa2a		       a5 85		      LDA	player0y
   3350  fa2c		       18		      CLC
   3351  fa2d		       69 02		      ADC	#2
   3352  fa2f		       85 85		      STA	player0y
   3353  fa31				   .L0172		;  if joy0up then player0y  =	player0y  +  2
   3354  fa31
   3355  fa31		       a9 10		      lda	#$10
   3356  fa33		       2c 80 02 	      bit	SWCHA
   3357  fa36		       d0 07		      BNE	.skipL0172
   3358  fa38				   .condpart68
   3359  fa38		       a5 85		      LDA	player0y
   3360  fa3a		       18		      CLC
   3361  fa3b		       69 02		      ADC	#2
   3362  fa3d		       85 85		      STA	player0y
   3363  fa3f				   .skipL0172
   3364  fa3f				   .
   3365  fa3f							; 
   3366  fa3f
   3367  fa3f				   .L0173		;  if player0y  <=  2 then player0x  =   ( rand & 63 )   +   ( rand & 31 )   +   ( rand & 15 )   +   ( rand & 1 )   +	21
   3368  fa3f
   3369  fa3f		       a9 02		      LDA	#2
   3370  fa41		       c5 85		      CMP	player0y
   3371  fa43		       90 2e		      BCC	.skipL0173
   3372  fa45				   .condpart69
   3373  fa45							; complex statement detected
   3374  fa45		       20 be f3 	      jsr	randomize
   3375  fa48		       29 3f		      AND	#63
   3376  fa4a		       48		      PHA
   3377  fa4b		       20 be f3 	      jsr	randomize
   3378  fa4e		       29 1f		      AND	#31
   3379  fa50		       ba		      TSX
   3380  fa51		       e8		      INX
   3381  fa52		       9a		      TXS
   3382  fa53		       18		      CLC
   3383  fa54		       75 00		      ADC	$00,x
   3384  fa56		       48		      PHA
   3385  fa57		       20 be f3 	      jsr	randomize
   3386  fa5a		       29 0f		      AND	#15
   3387  fa5c		       ba		      TSX
   3388  fa5d		       e8		      INX
   3389  fa5e		       9a		      TXS
   3390  fa5f		       18		      CLC
   3391  fa60		       75 00		      ADC	$00,x
   3392  fa62		       48		      PHA
   3393  fa63		       20 be f3 	      jsr	randomize
   3394  fa66		       29 01		      AND	#1
   3395  fa68		       ba		      TSX
   3396  fa69		       e8		      INX
   3397  fa6a		       9a		      TXS
   3398  fa6b		       18		      CLC
   3399  fa6c		       75 00		      ADC	$00,x
   3400  fa6e		       18		      CLC
   3401  fa6f		       69 15		      ADC	#21
   3402  fa71		       85 80		      STA	player0x
   3403  fa73				   .skipL0173
   3404  fa73				   .L0174		;  return thisbank
   3405  fa73
   3406  fa73		       60		      RTS
   3407  fa74				   .
   3408  fa74							; 
   3409  fa74
   3410  fa74				   .__inimigo_carga
   3411  fa74							; __inimigo_carga
   3412  fa74
   3413  fa74				   .L0175		;  COLUP0  =  $04
   3414  fa74
   3415  fa74		       a9 04		      LDA	#$04
   3416  fa76		       85 06		      STA	COLUP0
   3417  fa78				   .L0176		;  NUSIZ0  =  $05
   3418  fa78
   3419  fa78		       a9 05		      LDA	#$05
   3420  fa7a		       85 04		      STA	NUSIZ0
   3421  fa7c				   .L0177		;  player0x  =  player0x  -  1
   3422  fa7c
   3423  fa7c		       c6 80		      DEC	player0x
   3424  fa7e				   .L0178		;  player0y  =  30
   3425  fa7e
   3426  fa7e		       a9 1e		      LDA	#30
   3427  fa80		       85 85		      STA	player0y
   3428  fa82				   .L0179		;  player0:
   3429  fa82
   3430  fa82		       a2 32		      LDX	#<playerL0179_0
   3431  fa84		       86 8a		      STX	player0pointerlo
   3432  fa86		       a9 fd		      LDA	#>playerL0179_0
   3433  fa88		       85 8b		      STA	player0pointerhi
   3434  fa8a		       a9 06		      LDA	#6
   3435  fa8c		       85 8e		      STA	player0height
   3436  fa8e				   .L0180		;  return thisbank
   3437  fa8e
   3438  fa8e		       60		      RTS
   3439  fa8f				   .
   3440  fa8f							; 
   3441  fa8f
   3442  fa8f				   .
   3443  fa8f							; 
   3444  fa8f
   3445  fa8f				   .__inimigo_tie
   3446  fa8f							; __inimigo_tie
   3447  fa8f
   3448  fa8f				   .L0181		;  COLUP0  =  $04
   3449  fa8f
   3450  fa8f		       a9 04		      LDA	#$04
   3451  fa91		       85 06		      STA	COLUP0
   3452  fa93				   .L0182		;  player0:
   3453  fa93
   3454  fa93		       a2 39		      LDX	#<playerL0182_0
   3455  fa95		       86 8a		      STX	player0pointerlo
   3456  fa97		       a9 fd		      LDA	#>playerL0182_0
   3457  fa99		       85 8b		      STA	player0pointerhi
   3458  fa9b		       a9 06		      LDA	#6
   3459  fa9d		       85 8e		      STA	player0height
   3460  fa9f				   .
   3461  fa9f							; 
   3462  fa9f
   3463  fa9f				   .L0183		;  if player0y  >  10 then goto __skip_tie
   3464  fa9f
   3465  fa9f		       a9 0a		      LDA	#10
   3466  faa1		       c5 85		      CMP	player0y
   3467  faa3		       b0 03		      BCS	.skipL0183
   3468  faa5				   .condpart70
   3469  faa5		       4c e7 fa 	      jmp	.__skip_tie
   3470  faa8
   3471  faa8				   .skipL0183
   3472  faa8				   .
   3473  faa8							; 
   3474  faa8
   3475  faa8				   .L0184		;  if _bit_supressores{2} then goto __volta else goto __vai
   3476  faa8
   3477  faa8		       a5 dd		      LDA	_bit_supressores
   3478  faaa		       29 04		      AND	#4
   3479  faac		       f0 06		      BEQ	.skipL0184
   3480  faae				   .condpart71
   3481  faae		       4c b7 fa 	      jmp	.__volta
   3482  fab1		       4c b7 fa 	      jmp	.skipelse3
   3483  fab4				   .skipL0184
   3484  fab4		       4c cf fa 	      jmp	.__vai
   3485  fab7
   3486  fab7				   .skipelse3
   3487  fab7				   .
   3488  fab7							; 
   3489  fab7
   3490  fab7				   .__volta
   3491  fab7							; __volta
   3492  fab7
   3493  fab7				   .L0185		;  player0x  =  player0x  -  1
   3494  fab7
   3495  fab7		       c6 80		      DEC	player0x
   3496  fab9				   .L0186		;  if player0x  <=  30 then player0y  =  player0y  +  5  :  _bit_supressores{2}  =  0
   3497  fab9
   3498  fab9		       a9 1e		      LDA	#30
   3499  fabb		       c5 80		      CMP	player0x
   3500  fabd		       90 0d		      BCC	.skipL0186
   3501  fabf				   .condpart72
   3502  fabf		       a5 85		      LDA	player0y
   3503  fac1		       18		      CLC
   3504  fac2		       69 05		      ADC	#5
   3505  fac4		       85 85		      STA	player0y
   3506  fac6		       a5 dd		      LDA	_bit_supressores
   3507  fac8		       29 fb		      AND	#251
   3508  faca		       85 dd		      STA	_bit_supressores
   3509  facc				   .skipL0186
   3510  facc				   .L0187		;  goto __skip_vai_volta_tie
   3511  facc
   3512  facc		       4c f9 fa 	      jmp	.__skip_vai_volta_tie
   3513  facf
   3514  facf				   .__vai
   3515  facf							; __vai
   3516  facf
   3517  facf				   .L0188		;  player0x  =  player0x  +  1
   3518  facf
   3519  facf		       e6 80		      INC	player0x
   3520  fad1				   .L0189		;  if player0x  >=  120 then player0y	=  player0y  +	5  :  _bit_supressores{2}  =  1
   3521  fad1
   3522  fad1		       a5 80		      LDA	player0x
   3523  fad3		       c9 78		      CMP	#120
   3524  fad5		       90 0d		      BCC	.skipL0189
   3525  fad7				   .condpart73
   3526  fad7		       a5 85		      LDA	player0y
   3527  fad9		       18		      CLC
   3528  fada		       69 05		      ADC	#5
   3529  fadc		       85 85		      STA	player0y
   3530  fade		       a5 dd		      LDA	_bit_supressores
   3531  fae0		       09 04		      ORA	#4
   3532  fae2		       85 dd		      STA	_bit_supressores
   3533  fae4				   .skipL0189
   3534  fae4				   .L0190		;  goto __skip_vai_volta_tie
   3535  fae4
   3536  fae4		       4c f9 fa 	      jmp	.__skip_vai_volta_tie
   3537  fae7
   3538  fae7				   .__skip_tie
   3539  fae7							; __skip_tie
   3540  fae7
   3541  fae7				   .
   3542  fae7							; 
   3543  fae7
   3544  fae7				   .L0191		;  if player1x  >  player0x then player0x  =  player0x  +  1
   3545  fae7
   3546  fae7		       a5 80		      LDA	player0x
   3547  fae9		       c5 81		      CMP	player1x
   3548  faeb		       b0 02		      BCS	.skipL0191
   3549  faed				   .condpart74
   3550  faed		       e6 80		      INC	player0x
   3551  faef				   .skipL0191
   3552  faef				   .L0192		;  if player1x  <  player0x then player0x  =  player0x  -  1
   3553  faef
   3554  faef		       a5 81		      LDA	player1x
   3555  faf1		       c5 80		      CMP	player0x
   3556  faf3		       b0 02		      BCS	.skipL0192
   3557  faf5				   .condpart75
   3558  faf5		       c6 80		      DEC	player0x
   3559  faf7				   .skipL0192
   3560  faf7				   .L0193		;  player0y  =  player0y  +  1
   3561  faf7
   3562  faf7		       e6 85		      INC	player0y
   3563  faf9				   .
   3564  faf9							; 
   3565  faf9
   3566  faf9				   .
   3567  faf9							; 
   3568  faf9
   3569  faf9				   .__skip_vai_volta_tie
   3570  faf9							; __skip_vai_volta_tie
   3571  faf9
   3572  faf9				   .
   3573  faf9							; 
   3574  faf9
   3575  faf9				   .
   3576  faf9							; 
   3577  faf9
   3578  faf9				   .L0194		;  return thisbank
   3579  faf9
   3580  faf9		       60		      RTS
   3581  fafa				   .
   3582  fafa							; 
   3583  fafa
   3584  fafa				   .
   3585  fafa							; 
   3586  fafa
   3587  fafa				   .__escudo
   3588  fafa							; __escudo
   3589  fafa
   3590  fafa				   .L0195		;  player1:
   3591  fafa
   3592  fafa		       a2 40		      LDX	#<playerL0195_1
   3593  fafc		       86 8c		      STX	player1pointerlo
   3594  fafe		       a9 fd		      LDA	#>playerL0195_1
   3595  fb00		       85 8d		      STA	player1pointerhi
   3596  fb02		       a9 08		      LDA	#8
   3597  fb04		       85 8f		      STA	player1height
   3598  fb06				   .L0196		;  goto __skip_escudo
   3599  fb06
   3600  fb06		       4c 48 f6 	      jmp	.__skip_escudo
   3601  fb09
   3602  fb09				   .
   3603  fb09							; 
   3604  fb09
   3605  fb09				   .__nave
   3606  fb09							; __nave
   3607  fb09
   3608  fb09				   .L0197		;  if _animacao  =  10  ||  joy0up then player1:
   3609  fb09
   3610  fb09		       a5 e1		      LDA	_animacao
   3611  fb0b		       c9 0a		      CMP	#10
   3612  fb0d		       d0 03		      BNE	.skipL0197
   3613  fb0f				   .condpart76
   3614  fb0f		       4c 19 fb 	      jmp	.condpart77
   3615  fb12				   .skipL0197
   3616  fb12		       a9 10		      lda	#$10
   3617  fb14		       2c 80 02 	      bit	SWCHA
   3618  fb17		       d0 0c		      BNE	.skip6OR
   3619  fb19				   .condpart77
   3620  fb19		       a2 49		      LDX	#<player77then_1
   3621  fb1b		       86 8c		      STX	player1pointerlo
   3622  fb1d		       a9 fd		      LDA	#>player77then_1
   3623  fb1f		       85 8d		      STA	player1pointerhi
   3624  fb21		       a9 05		      LDA	#5
   3625  fb23		       85 8f		      STA	player1height
   3626  fb25				   .skip6OR
   3627  fb25				   .
   3628  fb25							; 
   3629  fb25
   3630  fb25				   .L0198		;  if _animacao  =  20 then player1:
   3631  fb25
   3632  fb25		       a5 e1		      LDA	_animacao
   3633  fb27		       c9 14		      CMP	#20
   3634  fb29		       d0 0c		      BNE	.skipL0198
   3635  fb2b				   .condpart78
   3636  fb2b		       a2 4f		      LDX	#<player78then_1
   3637  fb2d		       86 8c		      STX	player1pointerlo
   3638  fb2f		       a9 fd		      LDA	#>player78then_1
   3639  fb31		       85 8d		      STA	player1pointerhi
   3640  fb33		       a9 05		      LDA	#5
   3641  fb35		       85 8f		      STA	player1height
   3642  fb37				   .skipL0198
   3643  fb37				   .
   3644  fb37							; 
   3645  fb37
   3646  fb37				   .L0199		;  return thisbank
   3647  fb37
   3648  fb37		       60		      RTS
   3649  fb38				   .
   3650  fb38							; 
   3651  fb38
   3652  fb38				   .
   3653  fb38							; 
   3654  fb38
   3655  fb38				   .__item_shield
   3656  fb38							; __item_shield
   3657  fb38
   3658  fb38				   .L0200		;  COLUP0  =  12
   3659  fb38
   3660  fb38		       a9 0c		      LDA	#12
   3661  fb3a		       85 06		      STA	COLUP0
   3662  fb3c				   .L0201		;  if joy0up then player0y  =	player0y  +  1
   3663  fb3c
   3664  fb3c		       a9 10		      lda	#$10
   3665  fb3e		       2c 80 02 	      bit	SWCHA
   3666  fb41		       d0 02		      BNE	.skipL0201
   3667  fb43				   .condpart79
   3668  fb43		       e6 85		      INC	player0y
   3669  fb45				   .skipL0201
   3670  fb45				   .L0202		;  player0y  =  player0y  +  1
   3671  fb45
   3672  fb45		       e6 85		      INC	player0y
   3673  fb47				   .L0203		;  player0:
   3674  fb47
   3675  fb47		       a2 55		      LDX	#<playerL0203_0
   3676  fb49		       86 8a		      STX	player0pointerlo
   3677  fb4b		       a9 fd		      LDA	#>playerL0203_0
   3678  fb4d		       85 8b		      STA	player0pointerhi
   3679  fb4f		       a9 09		      LDA	#9
   3680  fb51		       85 8e		      STA	player0height
   3681  fb53				   .L0204		;  if player0y  <  2 then _bit_supressores{7}	=  0
   3682  fb53
   3683  fb53		       a5 85		      LDA	player0y
   3684  fb55		       c9 02		      CMP	#2
   3685  fb57		       b0 06		      BCS	.skipL0204
   3686  fb59				   .condpart80
   3687  fb59		       a5 dd		      LDA	_bit_supressores
   3688  fb5b		       29 7f		      AND	#127
   3689  fb5d		       85 dd		      STA	_bit_supressores
   3690  fb5f				   .skipL0204
   3691  fb5f				   .L0205		;  return thisbank
   3692  fb5f
   3693  fb5f		       60		      RTS
   3694  fb60				   .
   3695  fb60							; 
   3696  fb60
   3697  fb60				   .
   3698  fb60							; 
   3699  fb60
   3700  fb60				   .__transicao
   3701  fb60							; __transicao
   3702  fb60
   3703  fb60				   .L0206		;  v  =  0
   3704  fb60
   3705  fb60		       a9 00		      LDA	#0
   3706  fb62		       85 e9		      STA	v
   3707  fb64				   .__main_transicao
   3708  fb64							; __main_transicao
   3709  fb64
   3710  fb64				   .L0207		;  missile1y  =  0
   3711  fb64
   3712  fb64		       a9 00		      LDA	#0
   3713  fb66		       85 88		      STA	missile1y
   3714  fb68				   .
   3715  fb68							; 
   3716  fb68
   3717  fb68				   .
   3718  fb68							; 
   3719  fb68
   3720  fb68				   .L0208		;  AUDC0  =  12
   3721  fb68
   3722  fb68		       a9 0c		      LDA	#12
   3723  fb6a		       85 15		      STA	AUDC0
   3724  fb6c				   .L0209		;  AUDC1  =  1
   3725  fb6c
   3726  fb6c		       a9 01		      LDA	#1
   3727  fb6e		       85 16		      STA	AUDC1
   3728  fb70				   .
   3729  fb70							; 
   3730  fb70
   3731  fb70				   .L0210		;  if musicTimer  =  0 then goto changeMusicNoteTransicao
   3732  fb70
   3733  fb70		       a5 de		      LDA	musicTimer
   3734  fb72		       c9 00		      CMP	#0
   3735  fb74		       d0 03		      BNE	.skipL0210
   3736  fb76				   .condpart81
   3737  fb76		       4c 50 fc 	      jmp	.changeMusicNoteTransicao
   3738  fb79
   3739  fb79				   .skipL0210
   3740  fb79				   .__volta_trilha_transicao
   3741  fb79							; __volta_trilha_transicao
   3742  fb79
   3743  fb79				   .L0211		;  musicTimer	=  musicTimer  -  1
   3744  fb79
   3745  fb79		       c6 de		      DEC	musicTimer
   3746  fb7b				   .
   3747  fb7b							; 
   3748  fb7b
   3749  fb7b				   .
   3750  fb7b							; 
   3751  fb7b
   3752  fb7b				   .L0212		;  player0y  =  0
   3753  fb7b
   3754  fb7b		       a9 00		      LDA	#0
   3755  fb7d		       85 85		      STA	player0y
   3756  fb7f				   .L0213		;  gosub __playfield_transicao
   3757  fb7f
   3758  fb7f		       20 12 fc 	      jsr	.__playfield_transicao
   3759  fb82
   3760  fb82				   .L0214		;  drawscreen
   3761  fb82
   3762  fb82		       20 cc f3 	      jsr	drawscreen
   3763  fb85				   .
   3764  fb85							; 
   3765  fb85
   3766  fb85				   .L0215		;  if player1x  =  75 then goto __move_up
   3767  fb85
   3768  fb85		       a5 81		      LDA	player1x
   3769  fb87		       c9 4b		      CMP	#75
   3770  fb89		       d0 03		      BNE	.skipL0215
   3771  fb8b				   .condpart82
   3772  fb8b		       4c a1 fb 	      jmp	.__move_up
   3773  fb8e
   3774  fb8e				   .skipL0215
   3775  fb8e				   .L0216		;  if player1x  >  75 then goto __move_esquerda
   3776  fb8e
   3777  fb8e		       a9 4b		      LDA	#75
   3778  fb90		       c5 81		      CMP	player1x
   3779  fb92		       b0 03		      BCS	.skipL0216
   3780  fb94				   .condpart83
   3781  fb94		       4c 9c fb 	      jmp	.__move_esquerda
   3782  fb97
   3783  fb97				   .skipL0216
   3784  fb97				   .
   3785  fb97							; 
   3786  fb97
   3787  fb97				   .L0217		;  player1x  =  player1x  +  1  :  goto __skip_move
   3788  fb97
   3789  fb97		       e6 81		      INC	player1x
   3790  fb99		       4c ac fb 	      jmp	.__skip_move
   3791  fb9c
   3792  fb9c				   .__move_esquerda
   3793  fb9c							; __move_esquerda
   3794  fb9c
   3795  fb9c				   .L0218		;  player1x  =  player1x  -  1  :  goto __skip_move
   3796  fb9c
   3797  fb9c		       c6 81		      DEC	player1x
   3798  fb9e		       4c ac fb 	      jmp	.__skip_move
   3799  fba1
   3800  fba1				   .__move_up
   3801  fba1							; __move_up
   3802  fba1
   3803  fba1				   .L0219		;  if player1y  =  0 then goto __skip_move
   3804  fba1
   3805  fba1		       a5 86		      LDA	player1y
   3806  fba3		       c9 00		      CMP	#0
   3807  fba5		       d0 03		      BNE	.skipL0219
   3808  fba7				   .condpart84
   3809  fba7		       4c ac fb 	      jmp	.__skip_move
   3810  fbaa
   3811  fbaa				   .skipL0219
   3812  fbaa				   .L0220		;  player1y  =  player1y  -  1
   3813  fbaa
   3814  fbaa		       c6 86		      DEC	player1y
   3815  fbac				   .__skip_move
   3816  fbac							; __skip_move
   3817  fbac
   3818  fbac				   .
   3819  fbac							; 
   3820  fbac
   3821  fbac				   .L0221		;  v  =  v  +	1
   3822  fbac
   3823  fbac		       e6 e9		      INC	v
   3824  fbae				   .L0222		;  if v  =  250 then v  =  0  :  _fases  =  _fases  +	1  :  _bit_supressores{5}  =  0  :  _cont_telas  =  0  :  AUDV0  =  0  :  AUDV1  =  0  :  musicPointer	=  0  :  player1y  =  85  :  goto __skip_transicao
   3825  fbae
   3826  fbae		       a5 e9		      LDA	v
   3827  fbb0		       c9 fa		      CMP	#250
   3828  fbb2		       d0 1d		      BNE	.skipL0222
   3829  fbb4				   .condpart85
   3830  fbb4		       a9 00		      LDA	#0
   3831  fbb6		       85 e9		      STA	v
   3832  fbb8		       e6 e4		      INC	_fases
   3833  fbba		       a5 dd		      LDA	_bit_supressores
   3834  fbbc		       29 df		      AND	#223
   3835  fbbe		       85 dd		      STA	_bit_supressores
   3836  fbc0		       a9 00		      LDA	#0
   3837  fbc2		       85 e6		      STA	_cont_telas
   3838  fbc4		       85 19		      STA	AUDV0
   3839  fbc6		       85 1a		      STA	AUDV1
   3840  fbc8		       85 db		      STA	musicPointer
   3841  fbca		       a9 55		      LDA	#85
   3842  fbcc		       85 86		      STA	player1y
   3843  fbce		       4c ac f6 	      jmp	.__skip_transicao
   3844  fbd1
   3845  fbd1				   .skipL0222
   3846  fbd1				   .L0223		;  goto __main_transicao
   3847  fbd1
   3848  fbd1		       4c 64 fb 	      jmp	.__main_transicao
   3849  fbd4
   3850  fbd4				   .
   3851  fbd4							; 
   3852  fbd4
   3853  fbd4				   .
   3854  fbd4							; 
   3855  fbd4
   3856  fbd4				   .__playfield_regular
   3857  fbd4							; __playfield_regular
   3858  fbd4
   3859  fbd4				   .L0224		;  playfield:
   3860  fbd4
   3861  fbd4				  -	      ifconst	pfres
   3862  fbd4				  -	      ldx	#(12>pfres)*(pfres*pfwidth-1)+(12<=pfres)*47
   3863  fbd4					      else
   3864  fbd4		       a2 2f		      ldx	#((12*pfwidth-1)*((12*pfwidth-1)<47))+(47*((12*pfwidth-1)>=47))
   3865  fbd6					      endif
   3866  fbd6		       4c 09 fc 	      jmp	pflabel0
   3867  fbd9				   PF_data0
   3868  fbd9		       7f ff		      .byte.b	%01111111, %11111111
   3869  fbdb					      if	(pfwidth>2)
   3870  fbdb		       ff 7f		      .byte.b	%11111111, %01111111
   3871  fbdd					      endif
   3872  fbdd		       aa 55		      .byte.b	%10101010, %01010101
   3873  fbdf					      if	(pfwidth>2)
   3874  fbdf		       aa 95		      .byte.b	%10101010, %10010101
   3875  fbe1					      endif
   3876  fbe1		       80 00		      .byte.b	%10000000, %00000000
   3877  fbe3					      if	(pfwidth>2)
   3878  fbe3		       00 80		      .byte.b	%00000000, %10000000
   3879  fbe5					      endif
   3880  fbe5		       80 00		      .byte.b	%10000000, %00000000
   3881  fbe7					      if	(pfwidth>2)
   3882  fbe7		       00 80		      .byte.b	%00000000, %10000000
   3883  fbe9					      endif
   3884  fbe9		       80 00		      .byte.b	%10000000, %00000000
   3885  fbeb					      if	(pfwidth>2)
   3886  fbeb		       00 80		      .byte.b	%00000000, %10000000
   3887  fbed					      endif
   3888  fbed		       80 00		      .byte.b	%10000000, %00000000
   3889  fbef					      if	(pfwidth>2)
   3890  fbef		       00 80		      .byte.b	%00000000, %10000000
   3891  fbf1					      endif
   3892  fbf1		       80 00		      .byte.b	%10000000, %00000000
   3893  fbf3					      if	(pfwidth>2)
   3894  fbf3		       00 80		      .byte.b	%00000000, %10000000
   3895  fbf5					      endif
   3896  fbf5		       80 00		      .byte.b	%10000000, %00000000
   3897  fbf7					      if	(pfwidth>2)
   3898  fbf7		       00 80		      .byte.b	%00000000, %10000000
   3899  fbf9					      endif
   3900  fbf9		       80 00		      .byte.b	%10000000, %00000000
   3901  fbfb					      if	(pfwidth>2)
   3902  fbfb		       00 80		      .byte.b	%00000000, %10000000
   3903  fbfd					      endif
   3904  fbfd		       80 00		      .byte.b	%10000000, %00000000
   3905  fbff					      if	(pfwidth>2)
   3906  fbff		       00 80		      .byte.b	%00000000, %10000000
   3907  fc01					      endif
   3908  fc01		       80 00		      .byte.b	%10000000, %00000000
   3909  fc03					      if	(pfwidth>2)
   3910  fc03		       00 80		      .byte.b	%00000000, %10000000
   3911  fc05					      endif
   3912  fc05		       80 00		      .byte.b	%10000000, %00000000
   3913  fc07					      if	(pfwidth>2)
   3914  fc07		       00 80		      .byte.b	%00000000, %10000000
   3915  fc09					      endif
   3916  fc09				   pflabel0
   3917  fc09		       bd d9 fb 	      lda	PF_data0,x
   3918  fc0c		       95 a4		      sta	playfield,x
   3919  fc0e		       ca		      dex
   3920  fc0f		       10 f8		      bpl	pflabel0
   3921  fc11				   .L0225		;  return thisbank
   3922  fc11
   3923  fc11		       60		      RTS
   3924  fc12				   .
   3925  fc12							; 
   3926  fc12
   3927  fc12				   .
   3928  fc12							; 
   3929  fc12
   3930  fc12				   .__playfield_transicao
   3931  fc12							; __playfield_transicao
   3932  fc12
   3933  fc12				   .L0226		;  playfield:
   3934  fc12
   3935  fc12				  -	      ifconst	pfres
   3936  fc12				  -	      ldx	#(12>pfres)*(pfres*pfwidth-1)+(12<=pfres)*47
   3937  fc12					      else
   3938  fc12		       a2 2f		      ldx	#((12*pfwidth-1)*((12*pfwidth-1)<47))+(47*((12*pfwidth-1)>=47))
   3939  fc14					      endif
   3940  fc14		       4c 47 fc 	      jmp	pflabel1
   3941  fc17				   PF_data1
   3942  fc17		       7f 1f		      .byte.b	%01111111, %00011111
   3943  fc19					      if	(pfwidth>2)
   3944  fc19		       3f 7f		      .byte.b	%00111111, %01111111
   3945  fc1b					      endif
   3946  fc1b		       aa 15		      .byte.b	%10101010, %00010101
   3947  fc1d					      if	(pfwidth>2)
   3948  fc1d		       2a 95		      .byte.b	%00101010, %10010101
   3949  fc1f					      endif
   3950  fc1f		       80 00		      .byte.b	%10000000, %00000000
   3951  fc21					      if	(pfwidth>2)
   3952  fc21		       00 80		      .byte.b	%00000000, %10000000
   3953  fc23					      endif
   3954  fc23		       80 00		      .byte.b	%10000000, %00000000
   3955  fc25					      if	(pfwidth>2)
   3956  fc25		       00 80		      .byte.b	%00000000, %10000000
   3957  fc27					      endif
   3958  fc27		       80 00		      .byte.b	%10000000, %00000000
   3959  fc29					      if	(pfwidth>2)
   3960  fc29		       00 80		      .byte.b	%00000000, %10000000
   3961  fc2b					      endif
   3962  fc2b		       80 00		      .byte.b	%10000000, %00000000
   3963  fc2d					      if	(pfwidth>2)
   3964  fc2d		       00 80		      .byte.b	%00000000, %10000000
   3965  fc2f					      endif
   3966  fc2f		       80 00		      .byte.b	%10000000, %00000000
   3967  fc31					      if	(pfwidth>2)
   3968  fc31		       00 80		      .byte.b	%00000000, %10000000
   3969  fc33					      endif
   3970  fc33		       80 00		      .byte.b	%10000000, %00000000
   3971  fc35					      if	(pfwidth>2)
   3972  fc35		       00 80		      .byte.b	%00000000, %10000000
   3973  fc37					      endif
   3974  fc37		       80 00		      .byte.b	%10000000, %00000000
   3975  fc39					      if	(pfwidth>2)
   3976  fc39		       00 80		      .byte.b	%00000000, %10000000
   3977  fc3b					      endif
   3978  fc3b		       80 00		      .byte.b	%10000000, %00000000
   3979  fc3d					      if	(pfwidth>2)
   3980  fc3d		       00 80		      .byte.b	%00000000, %10000000
   3981  fc3f					      endif
   3982  fc3f		       80 00		      .byte.b	%10000000, %00000000
   3983  fc41					      if	(pfwidth>2)
   3984  fc41		       00 80		      .byte.b	%00000000, %10000000
   3985  fc43					      endif
   3986  fc43		       80 00		      .byte.b	%10000000, %00000000
   3987  fc45					      if	(pfwidth>2)
   3988  fc45		       00 80		      .byte.b	%00000000, %10000000
   3989  fc47					      endif
   3990  fc47				   pflabel1
   3991  fc47		       bd 17 fc 	      lda	PF_data1,x
   3992  fc4a		       95 a4		      sta	playfield,x
   3993  fc4c		       ca		      dex
   3994  fc4d		       10 f8		      bpl	pflabel1
   3995  fc4f				   .L0227		;  return thisbank
   3996  fc4f
   3997  fc4f		       60		      RTS
   3998  fc50				   .
   3999  fc50							; 
   4000  fc50
   4001  fc50				   .changeMusicNoteTransicao
   4002  fc50							; changeMusicNoteTransicao
   4003  fc50
   4004  fc50				   .L0228		;  AUDF0  =  musicData1[musicPointer]
   4005  fc50
   4006  fc50		       a6 db		      LDX	musicPointer
   4007  fc52		       bd e5 fc 	      LDA	musicData1,x
   4008  fc55		       85 17		      STA	AUDF0
   4009  fc57				   .L0229		;  AUDF1  =  musicData2[musicPointer]
   4010  fc57
   4011  fc57		       a6 db		      LDX	musicPointer
   4012  fc59		       bd ff fc 	      LDA	musicData2,x
   4013  fc5c		       85 18		      STA	AUDF1
   4014  fc5e				   .L0230		;  if musicData1[musicPointer]  =  255 then AUDV1  =  0 else AUDV1  =	6
   4015  fc5e
   4016  fc5e		       a6 db		      LDX	musicPointer
   4017  fc60		       bd e5 fc 	      LDA	musicData1,x
   4018  fc63		       c9 ff		      CMP	#255
   4019  fc65		       d0 07		      BNE	.skipL0230
   4020  fc67				   .condpart86
   4021  fc67		       a9 00		      LDA	#0
   4022  fc69		       85 1a		      STA	AUDV1
   4023  fc6b		       4c 72 fc 	      jmp	.skipelse4
   4024  fc6e				   .skipL0230
   4025  fc6e		       a9 06		      LDA	#6
   4026  fc70		       85 1a		      STA	AUDV1
   4027  fc72				   .skipelse4
   4028  fc72				   .L0231		;  if musicData2[musicPointer]  =  255 then AUDV0  =  0 else AUDV0  =	4
   4029  fc72
   4030  fc72		       a6 db		      LDX	musicPointer
   4031  fc74		       bd ff fc 	      LDA	musicData2,x
   4032  fc77		       c9 ff		      CMP	#255
   4033  fc79		       d0 07		      BNE	.skipL0231
   4034  fc7b				   .condpart87
   4035  fc7b		       a9 00		      LDA	#0
   4036  fc7d		       85 19		      STA	AUDV0
   4037  fc7f		       4c 86 fc 	      jmp	.skipelse5
   4038  fc82				   .skipL0231
   4039  fc82		       a9 04		      LDA	#4
   4040  fc84		       85 19		      STA	AUDV0
   4041  fc86				   .skipelse5
   4042  fc86				   .L0232		;  musicTimer	=  10
   4043  fc86
   4044  fc86		       a9 0a		      LDA	#10
   4045  fc88		       85 de		      STA	musicTimer
   4046  fc8a				   .L0233		;  musicPointer  =  musicPointer  +  1
   4047  fc8a
   4048  fc8a		       e6 db		      INC	musicPointer
   4049  fc8c				   .L0234		;  if musicPointer  >	22 then musicPointer  =  0
   4050  fc8c
   4051  fc8c		       a9 16		      LDA	#22
   4052  fc8e		       c5 db		      CMP	musicPointer
   4053  fc90		       b0 04		      BCS	.skipL0234
   4054  fc92				   .condpart88
   4055  fc92		       a9 00		      LDA	#0
   4056  fc94		       85 db		      STA	musicPointer
   4057  fc96				   .skipL0234
   4058  fc96				   .L0235		;  goto __volta_trilha_transicao
   4059  fc96
   4060  fc96		       4c 79 fb 	      jmp	.__volta_trilha_transicao
   4061  fc99
   4062  fc99				   .
   4063  fc99							; 
   4064  fc99
   4065  fc99				   .changeMusicNoteTitle
   4066  fc99							; changeMusicNoteTitle
   4067  fc99
   4068  fc99				   .L0236		;  AUDF0  =  musicData1[musicPointer]
   4069  fc99
   4070  fc99		       a6 db		      LDX	musicPointer
   4071  fc9b		       bd e5 fc 	      LDA	musicData1,x
   4072  fc9e		       85 17		      STA	AUDF0
   4073  fca0				   .L0237		;  AUDF1  =  musicData2[musicPointer]
   4074  fca0
   4075  fca0		       a6 db		      LDX	musicPointer
   4076  fca2		       bd ff fc 	      LDA	musicData2,x
   4077  fca5		       85 18		      STA	AUDF1
   4078  fca7				   .L0238		;  if musicData1[musicPointer]  =  255 then AUDV1  =  0 else AUDV1  =	6
   4079  fca7
   4080  fca7		       a6 db		      LDX	musicPointer
   4081  fca9		       bd e5 fc 	      LDA	musicData1,x
   4082  fcac		       c9 ff		      CMP	#255
   4083  fcae		       d0 07		      BNE	.skipL0238
   4084  fcb0				   .condpart89
   4085  fcb0		       a9 00		      LDA	#0
   4086  fcb2		       85 1a		      STA	AUDV1
   4087  fcb4		       4c bb fc 	      jmp	.skipelse6
   4088  fcb7				   .skipL0238
   4089  fcb7		       a9 06		      LDA	#6
   4090  fcb9		       85 1a		      STA	AUDV1
   4091  fcbb				   .skipelse6
   4092  fcbb				   .L0239		;  if musicData2[musicPointer]  =  255 then AUDV0  =  0 else AUDV0  =	4
   4093  fcbb
   4094  fcbb		       a6 db		      LDX	musicPointer
   4095  fcbd		       bd ff fc 	      LDA	musicData2,x
   4096  fcc0		       c9 ff		      CMP	#255
   4097  fcc2		       d0 07		      BNE	.skipL0239
   4098  fcc4				   .condpart90
   4099  fcc4		       a9 00		      LDA	#0
   4100  fcc6		       85 19		      STA	AUDV0
   4101  fcc8		       4c cf fc 	      jmp	.skipelse7
   4102  fccb				   .skipL0239
   4103  fccb		       a9 04		      LDA	#4
   4104  fccd		       85 19		      STA	AUDV0
   4105  fccf				   .skipelse7
   4106  fccf				   .L0240		;  musicTimer	=  10
   4107  fccf
   4108  fccf		       a9 0a		      LDA	#10
   4109  fcd1		       85 de		      STA	musicTimer
   4110  fcd3				   .L0241		;  musicPointer  =  musicPointer  +  1
   4111  fcd3
   4112  fcd3		       e6 db		      INC	musicPointer
   4113  fcd5				   .L0242		;  if musicPointer  >	22 then musicPointer  =  0
   4114  fcd5
   4115  fcd5		       a9 16		      LDA	#22
   4116  fcd7		       c5 db		      CMP	musicPointer
   4117  fcd9		       b0 04		      BCS	.skipL0242
   4118  fcdb				   .condpart91
   4119  fcdb		       a9 00		      LDA	#0
   4120  fcdd		       85 db		      STA	musicPointer
   4121  fcdf				   .skipL0242
   4122  fcdf				   .L0243		;  goto __volta_trilha_title
   4123  fcdf
   4124  fcdf		       4c 09 f5 	      jmp	.__volta_trilha_title
   4125  fce2
   4126  fce2				   .
   4127  fce2							; 
   4128  fce2
   4129  fce2				   .
   4130  fce2							; 
   4131  fce2
   4132  fce2				   .L0244		;  data musicData1
   4133  fce2
   4134  fce2		       4c fc fc 	      JMP	.skipL0244
   4135  fce5				   musicData1
   4136  fce5		       1d ff 1d ff*	      .byte.b	29, -1, 29, -1, 29, -1
   4137  fceb
   4138  fceb		       1a ff 1a ff*	      .byte.b	26, -1, 26, -1, 26, -1
   4139  fcf1
   4140  fcf1		       18 ff 18 ff*	      .byte.b	24, -1, 24, -1, 24, -1
   4141  fcf7
   4142  fcf7		       13 13 13 13	      .byte.b	19, 19, 19, 19
   4143  fcfb
   4144  fcfb		       ff		      .byte.b	255
   4145  fcfc
   4146  fcfc				   .skipL0244
   4147  fcfc				   .
   4148  fcfc							; 
   4149  fcfc
   4150  fcfc				   .L0245		;  data musicData2
   4151  fcfc
   4152  fcfc		       4c 16 fd 	      JMP	.skipL0245
   4153  fcff				   musicData2
   4154  fcff		       17 ff 17 ff*	      .byte.b	23, -1, 23, -1, 23, -1
   4155  fd05
   4156  fd05		       1a ff 1a ff*	      .byte.b	26, -1, 26, -1, 26, -1
   4157  fd0b
   4158  fd0b		       1d ff 1d ff*	      .byte.b	29, -1, 29, -1, 29, -1
   4159  fd11
   4160  fd11		       17 17 17 17	      .byte.b	23, 23, 23, 23
   4161  fd15
   4162  fd15		       ff		      .byte.b	255
   4163  fd16
   4164  fd16				   .skipL0245
   4165  fd16				   .
   4166  fd16							; 
   4167  fd16
   4168  fd16				   .L0246		;  asm
   4169  fd16
   4170  fd16				   minikernel
   4171  fd16
   4172  fd16		       85 02		      sta	WSYNC
   4173  fd18
   4174  fd18		       a5 e2		      lda	_SC_Back
   4175  fd1a
   4176  fd1a		       85 09		      sta	COLUBK
   4177  fd1c
   4178  fd1c		       60		      rts
   4179  fd1d
   4180  fd1d				  -	      if	(<*) > (<(*+5))
   4181  fd1d				  -	      repeat	($100-<*)
   4182  fd1d				  -	      .byte	0
   4183  fd1d				  -	      repend
   4184  fd1d					      endif
   4185  fd1d				   player61then_1
   4186  fd1d		       28		      .byte.b	%0101000
   4187  fd1e		       12		      .byte.b	%0010010
   4188  fd1f		       48		      .byte.b	%1001000
   4189  fd20		       15		      .byte.b	%0010101
   4190  fd21		       40		      .byte.b	%1000000
   4191  fd22		       14		      .byte.b	%0010100
   4192  fd23				  -	      if	(<*) > (<(*+5))
   4193  fd23				  -	      repeat	($100-<*)
   4194  fd23				  -	      .byte	0
   4195  fd23				  -	      repend
   4196  fd23					      endif
   4197  fd23				   player62then_1
   4198  fd23		       08		      .byte.b	%0001000
   4199  fd24		       14		      .byte.b	%0010100
   4200  fd25		       2a		      .byte.b	%0101010
   4201  fd26		       14		      .byte.b	%0010100
   4202  fd27		       08		      .byte.b	%0001000
   4203  fd28		       00		      .byte.b	%0000000
   4204  fd29				  -	      if	(<*) > (<(*+8))
   4205  fd29				  -	      repeat	($100-<*)
   4206  fd29				  -	      .byte	0
   4207  fd29				  -	      repend
   4208  fd29					      endif
   4209  fd29				   playerL0170_0
   4210  fd29		       18		      .byte.b	%00011000
   4211  fd2a		       3c		      .byte.b	%00111100
   4212  fd2b		       7e		      .byte.b	%01111110
   4213  fd2c		       66		      .byte.b	%01100110
   4214  fd2d		       5a		      .byte.b	%01011010
   4215  fd2e		       7e		      .byte.b	%01111110
   4216  fd2f		       5a		      .byte.b	%01011010
   4217  fd30		       18		      .byte.b	%00011000
   4218  fd31		       3c		      .byte.b	%00111100
   4219  fd32				  -	      if	(<*) > (<(*+6))
   4220  fd32				  -	      repeat	($100-<*)
   4221  fd32				  -	      .byte	0
   4222  fd32				  -	      repend
   4223  fd32					      endif
   4224  fd32				   playerL0179_0
   4225  fd32		       04		      .byte.b	%00000100
   4226  fd33		       0a		      .byte.b	%00001010
   4227  fd34		       14		      .byte.b	%00010100
   4228  fd35		       ef		      .byte.b	%11101111
   4229  fd36		       7f		      .byte.b	%01111111
   4230  fd37		       3f		      .byte.b	%00111111
   4231  fd38		       01		      .byte.b	%00000001
   4232  fd39				  -	      if	(<*) > (<(*+6))
   4233  fd39				  -	      repeat	($100-<*)
   4234  fd39				  -	      .byte	0
   4235  fd39				  -	      repend
   4236  fd39					      endif
   4237  fd39				   playerL0182_0
   4238  fd39		       81		      .byte.b	%10000001
   4239  fd3a		       81		      .byte.b	%10000001
   4240  fd3b		       99		      .byte.b	%10011001
   4241  fd3c		       ff		      .byte.b	%11111111
   4242  fd3d		       99		      .byte.b	%10011001
   4243  fd3e		       81		      .byte.b	%10000001
   4244  fd3f		       81		      .byte.b	%10000001
   4245  fd40				  -	      if	(<*) > (<(*+8))
   4246  fd40				  -	      repeat	($100-<*)
   4247  fd40				  -	      .byte	0
   4248  fd40				  -	      repend
   4249  fd40					      endif
   4250  fd40				   playerL0195_1
   4251  fd40		       49		      .byte.b	%1001001
   4252  fd41		       7f		      .byte.b	%1111111
   4253  fd42		       5d		      .byte.b	%1011101
   4254  fd43		       08		      .byte.b	%0001000
   4255  fd44		       08		      .byte.b	%0001000
   4256  fd45		       49		      .byte.b	%1001001
   4257  fd46		       22		      .byte.b	%0100010
   4258  fd47		       14		      .byte.b	%0010100
   4259  fd48		       08		      .byte.b	%0001000
   4260  fd49				  -	      if	(<*) > (<(*+5))
   4261  fd49				  -	      repeat	($100-<*)
   4262  fd49				  -	      .byte	0
   4263  fd49				  -	      repend
   4264  fd49					      endif
   4265  fd49				   player77then_1
   4266  fd49		       49		      .byte.b	%1001001
   4267  fd4a		       7f		      .byte.b	%1111111
   4268  fd4b		       5d		      .byte.b	%1011101
   4269  fd4c		       08		      .byte.b	%0001000
   4270  fd4d		       08		      .byte.b	%0001000
   4271  fd4e		       08		      .byte.b	%0001000
   4272  fd4f				  -	      if	(<*) > (<(*+5))
   4273  fd4f				  -	      repeat	($100-<*)
   4274  fd4f				  -	      .byte	0
   4275  fd4f				  -	      repend
   4276  fd4f					      endif
   4277  fd4f				   player78then_1
   4278  fd4f		       41		      .byte.b	%1000001
   4279  fd50		       7f		      .byte.b	%1111111
   4280  fd51		       5d		      .byte.b	%1011101
   4281  fd52		       08		      .byte.b	%0001000
   4282  fd53		       08		      .byte.b	%0001000
   4283  fd54		       08		      .byte.b	%0001000
   4284  fd55				  -	      if	(<*) > (<(*+9))
   4285  fd55				  -	      repeat	($100-<*)
   4286  fd55				  -	      .byte	0
   4287  fd55				  -	      repend
   4288  fd55					      endif
   4289  fd55				   playerL0203_0
   4290  fd55		       3c		      .byte.b	%00111100
   4291  fd56		       42		      .byte.b	%01000010
   4292  fd57		       bd		      .byte.b	%10111101
   4293  fd58		       85		      .byte.b	%10000101
   4294  fd59		       85		      .byte.b	%10000101
   4295  fd5a		       bd		      .byte.b	%10111101
   4296  fd5b		       a1		      .byte.b	%10100001
   4297  fd5c		       bd		      .byte.b	%10111101
   4298  fd5d		       42		      .byte.b	%01000010
   4299  fd5e		       3c		      .byte.b	%00111100
   4300  fd5f					      if	ECHOFIRST
      573 bytes of ROM space left
   4301  fd5f					      echo	"    ",[(scoretable - *)]d , "bytes of ROM space left")
   4302  fd5f					      endif
   4303  fd5f		       00 01	   ECHOFIRST  =	1
   4304  fd5f
   4305  fd5f
   4306  fd5f
   4307  fd5f							; Provided under the CC0 license. See the included LICENSE.txt for details.
   4308  fd5f
   4309  fd5f							; feel free to modify the score graphics - just keep each digit 8 high
   4310  fd5f							; and keep the conditional compilation stuff intact
   4311  fd5f				  -	      ifconst	ROM2k
   4312  fd5f				  -	      ORG	$F7AC-8
   4313  fd5f					      else
   4314  fd5f				  -	      ifconst	bankswitch
   4315  fd5f				  -	      if	bankswitch == 8
   4316  fd5f				  -	      ORG	$2F94-bscode_length
   4317  fd5f				  -	      RORG	$FF94-bscode_length
   4318  fd5f				  -	      endif
   4319  fd5f				  -	      if	bankswitch == 16
   4320  fd5f				  -	      ORG	$4F94-bscode_length
   4321  fd5f				  -	      RORG	$FF94-bscode_length
   4322  fd5f				  -	      endif
   4323  fd5f				  -	      if	bankswitch == 32
   4324  fd5f				  -	      ORG	$8F94-bscode_length
   4325  fd5f				  -	      RORG	$FF94-bscode_length
   4326  fd5f				  -	      endif
   4327  fd5f				  -	      if	bankswitch == 64
   4328  fd5f				  -	      ORG	$10F80-bscode_length
   4329  fd5f				  -	      RORG	$1FF80-bscode_length
   4330  fd5f				  -	      endif
   4331  fd5f					      else
   4332  ff9c					      ORG	$FF9C
   4333  ff9c					      endif
   4334  ff9c					      endif
   4335  ff9c
   4336  ff9c							; font equates
   4337  ff9c		       00 01	   .21stcentury =	1
   4338  ff9c		       00 02	   alarmclock =	2
   4339  ff9c		       00 03	   handwritten =	3
   4340  ff9c		       00 04	   interrupted =	4
   4341  ff9c		       00 05	   retroputer =	5
   4342  ff9c		       00 06	   whimsey    =	6
   4343  ff9c		       00 07	   tiny       =	7
   4344  ff9c		       00 08	   hex	      =	8
   4345  ff9c
   4346  ff9c				  -	      ifconst	font
   4347  ff9c				  -	      if	font == hex
   4348  ff9c				  -	      ORG	. - 48
   4349  ff9c				  -	      endif
   4350  ff9c					      endif
   4351  ff9c
   4352  ff9c				   scoretable
   4353  ff9c
   4354  ff9c				  -	      ifconst	font
   4355  ff9c				  -	      if	font == .21stcentury
   4356  ff9c				  -	      include	"score_graphics.asm.21stcentury"
   4357  ff9c				  -	      endif
   4358  ff9c				  -	      if	font == alarmclock
   4359  ff9c				  -	      include	"score_graphics.asm.alarmclock"
   4360  ff9c				  -	      endif
   4361  ff9c				  -	      if	font == handwritten
   4362  ff9c				  -	      include	"score_graphics.asm.handwritten"
   4363  ff9c				  -	      endif
   4364  ff9c				  -	      if	font == interrupted
   4365  ff9c				  -	      include	"score_graphics.asm.interrupted"
   4366  ff9c				  -	      endif
   4367  ff9c				  -	      if	font == retroputer
   4368  ff9c				  -	      include	"score_graphics.asm.retroputer"
   4369  ff9c				  -	      endif
   4370  ff9c				  -	      if	font == whimsey
   4371  ff9c				  -	      include	"score_graphics.asm.whimsey"
   4372  ff9c				  -	      endif
   4373  ff9c				  -	      if	font == tiny
   4374  ff9c				  -	      include	"score_graphics.asm.tiny"
   4375  ff9c				  -	      endif
   4376  ff9c				  -	      if	font == hex
   4377  ff9c				  -	      include	"score_graphics.asm.hex"
   4378  ff9c				  -	      endif
   4379  ff9c					      else		; default font
   4380  ff9c
   4381  ff9c		       3c		      .byte.b	%00111100
   4382  ff9d		       66		      .byte.b	%01100110
   4383  ff9e		       66		      .byte.b	%01100110
   4384  ff9f		       66		      .byte.b	%01100110
   4385  ffa0		       66		      .byte.b	%01100110
   4386  ffa1		       66		      .byte.b	%01100110
   4387  ffa2		       66		      .byte.b	%01100110
   4388  ffa3		       3c		      .byte.b	%00111100
   4389  ffa4
   4390  ffa4		       7e		      .byte.b	%01111110
   4391  ffa5		       18		      .byte.b	%00011000
   4392  ffa6		       18		      .byte.b	%00011000
   4393  ffa7		       18		      .byte.b	%00011000
   4394  ffa8		       18		      .byte.b	%00011000
   4395  ffa9		       38		      .byte.b	%00111000
   4396  ffaa		       18		      .byte.b	%00011000
   4397  ffab		       08		      .byte.b	%00001000
   4398  ffac
   4399  ffac		       7e		      .byte.b	%01111110
   4400  ffad		       60		      .byte.b	%01100000
   4401  ffae		       60		      .byte.b	%01100000
   4402  ffaf		       3c		      .byte.b	%00111100
   4403  ffb0		       06		      .byte.b	%00000110
   4404  ffb1		       06		      .byte.b	%00000110
   4405  ffb2		       46		      .byte.b	%01000110
   4406  ffb3		       3c		      .byte.b	%00111100
   4407  ffb4
   4408  ffb4		       3c		      .byte.b	%00111100
   4409  ffb5		       46		      .byte.b	%01000110
   4410  ffb6		       06		      .byte.b	%00000110
   4411  ffb7		       06		      .byte.b	%00000110
   4412  ffb8		       1c		      .byte.b	%00011100
   4413  ffb9		       06		      .byte.b	%00000110
   4414  ffba		       46		      .byte.b	%01000110
   4415  ffbb		       3c		      .byte.b	%00111100
   4416  ffbc
   4417  ffbc		       0c		      .byte.b	%00001100
   4418  ffbd		       0c		      .byte.b	%00001100
   4419  ffbe		       7e		      .byte.b	%01111110
   4420  ffbf		       4c		      .byte.b	%01001100
   4421  ffc0		       4c		      .byte.b	%01001100
   4422  ffc1		       2c		      .byte.b	%00101100
   4423  ffc2		       1c		      .byte.b	%00011100
   4424  ffc3		       0c		      .byte.b	%00001100
   4425  ffc4
   4426  ffc4		       3c		      .byte.b	%00111100
   4427  ffc5		       46		      .byte.b	%01000110
   4428  ffc6		       06		      .byte.b	%00000110
   4429  ffc7		       06		      .byte.b	%00000110
   4430  ffc8		       3c		      .byte.b	%00111100
   4431  ffc9		       60		      .byte.b	%01100000
   4432  ffca		       60		      .byte.b	%01100000
   4433  ffcb		       7e		      .byte.b	%01111110
   4434  ffcc
   4435  ffcc		       3c		      .byte.b	%00111100
   4436  ffcd		       66		      .byte.b	%01100110
   4437  ffce		       66		      .byte.b	%01100110
   4438  ffcf		       66		      .byte.b	%01100110
   4439  ffd0		       7c		      .byte.b	%01111100
   4440  ffd1		       60		      .byte.b	%01100000
   4441  ffd2		       62		      .byte.b	%01100010
   4442  ffd3		       3c		      .byte.b	%00111100
   4443  ffd4
   4444  ffd4		       30		      .byte.b	%00110000
   4445  ffd5		       30		      .byte.b	%00110000
   4446  ffd6		       30		      .byte.b	%00110000
   4447  ffd7		       18		      .byte.b	%00011000
   4448  ffd8		       0c		      .byte.b	%00001100
   4449  ffd9		       06		      .byte.b	%00000110
   4450  ffda		       42		      .byte.b	%01000010
   4451  ffdb		       3e		      .byte.b	%00111110
   4452  ffdc
   4453  ffdc		       3c		      .byte.b	%00111100
   4454  ffdd		       66		      .byte.b	%01100110
   4455  ffde		       66		      .byte.b	%01100110
   4456  ffdf		       66		      .byte.b	%01100110
   4457  ffe0		       3c		      .byte.b	%00111100
   4458  ffe1		       66		      .byte.b	%01100110
   4459  ffe2		       66		      .byte.b	%01100110
   4460  ffe3		       3c		      .byte.b	%00111100
   4461  ffe4
   4462  ffe4		       3c		      .byte.b	%00111100
   4463  ffe5		       46		      .byte.b	%01000110
   4464  ffe6		       06		      .byte.b	%00000110
   4465  ffe7		       3e		      .byte.b	%00111110
   4466  ffe8		       66		      .byte.b	%01100110
   4467  ffe9		       66		      .byte.b	%01100110
   4468  ffea		       66		      .byte.b	%01100110
   4469  ffeb		       3c		      .byte.b	%00111100
   4470  ffec
   4471  ffec					      ifnconst	DPC_kernel_options
   4472  ffec
   4473  ffec		       00		      .byte.b	%00000000
   4474  ffed		       00		      .byte.b	%00000000
   4475  ffee		       00		      .byte.b	%00000000
   4476  ffef		       00		      .byte.b	%00000000
   4477  fff0		       00		      .byte.b	%00000000
   4478  fff1		       00		      .byte.b	%00000000
   4479  fff2		       00		      .byte.b	%00000000
   4480  fff3		       00		      .byte.b	%00000000
   4481  fff4
   4482  fff4					      endif
   4483  fff4
   4484  fff4					      endif
   4485  fff4
   4486  fff4				  -	      ifconst	ROM2k
   4487  fff4				  -	      ORG	$F7FC
   4488  fff4					      else
   4489  fff4				  -	      ifconst	bankswitch
   4490  fff4				  -	      if	bankswitch == 8
   4491  fff4				  -	      ORG	$2FF4-bscode_length
   4492  fff4				  -	      RORG	$FFF4-bscode_length
   4493  fff4				  -	      endif
   4494  fff4				  -	      if	bankswitch == 16
   4495  fff4				  -	      ORG	$4FF4-bscode_length
   4496  fff4				  -	      RORG	$FFF4-bscode_length
   4497  fff4				  -	      endif
   4498  fff4				  -	      if	bankswitch == 32
   4499  fff4				  -	      ORG	$8FF4-bscode_length
   4500  fff4				  -	      RORG	$FFF4-bscode_length
   4501  fff4				  -	      endif
   4502  fff4				  -	      if	bankswitch == 64
   4503  fff4				  -	      ORG	$10FE0-bscode_length
   4504  fff4				  -	      RORG	$1FFE0-bscode_length
   4505  fff4				  -	      endif
   4506  fff4					      else
   4507  fffc					      ORG	$FFFC
   4508  fffc					      endif
   4509  fffc					      endif
   4510  fffc							; Provided under the CC0 license. See the included LICENSE.txt for details.
   4511  fffc
   4512  fffc				  -	      ifconst	bankswitch
   4513  fffc				  -	      if	bankswitch == 8
   4514  fffc				  -	      ORG	$2FFC
   4515  fffc				  -	      RORG	$FFFC
   4516  fffc				  -	      endif
   4517  fffc				  -	      if	bankswitch == 16
   4518  fffc				  -	      ORG	$4FFC
   4519  fffc				  -	      RORG	$FFFC
   4520  fffc				  -	      endif
   4521  fffc				  -	      if	bankswitch == 32
   4522  fffc				  -	      ORG	$8FFC
   4523  fffc				  -	      RORG	$FFFC
   4524  fffc				  -	      endif
   4525  fffc				  -	      if	bankswitch == 64
   4526  fffc				  -	      ORG	$10FF0
   4527  fffc				  -	      RORG	$1FFF0
   4528  fffc				  -	      lda	$ffe0	; we use wasted space to assist stella with EF format auto-detection
   4529  fffc				  -	      ORG	$10FF8
   4530  fffc				  -	      RORG	$1FFF8
   4531  fffc				  -	      ifconst	superchip
   4532  fffc				  -	      .byte	"E","F","S","C"
   4533  fffc				  -	      else
   4534  fffc				  -	      .byte	"E","F","E","F"
   4535  fffc				  -	      endif
   4536  fffc				  -	      ORG	$10FFC
   4537  fffc				  -	      RORG	$1FFFC
   4538  fffc				  -	      endif
   4539  fffc					      else
   4540  fffc				  -	      ifconst	ROM2k
   4541  fffc				  -	      ORG	$F7FC
   4542  fffc					      else
   4543  fffc					      ORG	$FFFC
   4544  fffc					      endif
   4545  fffc					      endif
   4546  fffc		       00 f0		      .word.w	(start & $ffff)
   4547  fffe		       00 f0		      .word.w	(start & $ffff)
